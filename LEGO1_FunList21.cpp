#include "stdafx.h"
#include "LEGO1.h"

#pragma warning (disable:4730)
#pragma warning (disable:4733)
#pragma warning (disable:4799)
#define DB(b) __asm _emit b

__declspec(naked) DWORD __stdcall LEGO1_sub_100B99B0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x4]
	TEST ESI, ESI
	JZ loc_100B99E5
	MOV EAX,DWORD PTR [ESI+0x20]
	TEST EAX, EAX
	JZ loc_100B99E5
	CMP DWORD PTR [ESI+0x1C],-0x01
	JZ loc_100B99E5
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mB8870_sub_100B9870])
	MOV ECX, EAX
	TEST ECX, ECX
	JNZ loc_100B99DB
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RETN 0x0004
loc_100B99DB:
	PUSH ESI
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x20])
	POP ESI
	RETN 0x0004
loc_100B99E5:
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100B99F0(DWORD arg1)
{
	enum{
		var_B4 = -0xB4,
		var_98 = -0x98,
		var_94 = -0x94,
		var_90 = -0x90,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mB8B1B_proc_100B9B1B]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x000000A4
	MOV DWORD PTR [EBP+var_20+0x4],ECX
	LEA ECX,DWORD PTR [EBP+var_B4+0x4]
	CALL_LONG(offset [LEGO1_text.mAC810___0MxDSAction__QAE_XZ])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	CMP DWORD PTR [EBP+arg1+0x4],0x00
	JNZ loc_100B9A34
	MOV WORD PTR SS:[EBP+var_90+0x4],0xFFFE
	JMP loc_100B9A70
loc_100B9A34:
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	MOV ECX,DWORD PTR [EAX+0x1C]
	MOV EDX,DWORD PTR [EAX+0x20]
	MOV DWORD PTR [EBP+var_98+0x4],ECX
	LEA ECX,DWORD PTR [EBP+var_94+0x4]
	MOV DWORD PTR [EBP+var_14+0x4],EDX
	LEA EDX,DWORD PTR [EBP+var_14+0x4]
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.mAC1C0___4MxAtomId__QAEAAV0_ABV0__Z])
	MOV BYTE PTR [EBP+var_8+0x4],0x00
	CALL_LONG(offset [LEGO1_text.mB8B13_sub_100B9B13])
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV AX,WORD PTR DS:[EAX+0x24]
	MOV WORD PTR SS:[EBP+var_90+0x4],AX
loc_100B9A70:
	MOV EAX,DWORD PTR [EBP+var_20+0x4]
	MOV DWORD PTR [EBP+var_18+0x4],0xFFFFFFFF
	MOV EAX,DWORD PTR [EAX+0x0C]
	MOV ECX,DWORD PTR [EAX]
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	CMP ECX, EAX
	JZ loc_100B9AEC
loc_100B9A86:
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV ECX,DWORD PTR [EAX+0x20]
	TEST ECX, ECX
	JZ loc_100B9A9B
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EDX,DWORD PTR [EAX+0x08]
	CMP DWORD PTR [EDX+0x24],ECX
	JNZ loc_100B9ADC
loc_100B9A9B:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	ADD EAX, 0x08
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	MOV ECX,DWORD PTR [EAX]
	MOV BYTE PTR [EBP+var_8+0x4],0x02
	MOV EDX,DWORD PTR [ECX+0x24]
	LEA ECX,DWORD PTR [EBP+var_94+0x4]
	MOV DWORD PTR [EBP+var_1C+0x4],EDX
	LEA EDX,DWORD PTR [EBP+var_1C+0x4]
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.mAC1C0___4MxAtomId__QAEAAV0_ABV0__Z])
	MOV BYTE PTR [EBP+var_8+0x4],0x00
	CALL_LONG(offset [LEGO1_text.mB8B0B_sub_100B9B0B])
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	LEA EDX,DWORD PTR [EBP+var_B4+0x4]
	PUSH EDX
	MOV ECX,DWORD PTR [EAX]
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x24])
	MOV DWORD PTR [EBP+var_18+0x4],EAX
loc_100B9ADC:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EAX]
	MOV EAX,DWORD PTR [EBP+var_20+0x4]
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	CMP DWORD PTR [EAX+0x0C],ECX
	JNZ loc_100B9A86
loc_100B9AEC:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mB8B25_sub_100B9B25])
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100B9B0B()
{
	enum{
		arg1217218 = 0x4A4B08,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217218-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mABFD0___1MxAtomId__QAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100B9B13()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mABFD0___1MxAtomId__QAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100B9B25()
{
	enum{
		arg1217180 = 0x4A4A70,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217180-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mACA80___1MxDSAction__UAE_XZ])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100B9B30(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x4]
	MOV EAX,DWORD PTR [ESI+0x20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mB8870_sub_100B9870])
	TEST EAX, EAX
	JZ loc_100B9B4E
	PUSH ESI
	MOV ECX, EAX
	CALL_LONG(offset [LEGO1_text.mC10D0_sub_100C20D0])
	POP ESI
	RETN 0x0004
loc_100B9B4E:
	MOV AL, 0x01
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100B9C4B()
{
	enum{
		arg1217217 = 0x4A4B04,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217217-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB8820_loc_100B9820])
}
}

__declspec(naked) DWORD LEGO1_sub_100B9C5D()
{
	enum{
		arg1217180 = 0x4A4A70,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217180-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mACA80___1MxDSAction__UAE_XZ])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100B9C70(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	LEA ESI,DWORD PTR [ECX+0x20]
	MOV EDI, ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB5D80_sub_100B6D80])
	MOV EAX,DWORD PTR [EDI+0x68]
	TEST EAX, EAX
	JZ loc_100B9C8E
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100B9C8E:
	MOV DWORD PTR [EDI+0x68],0x00000000
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB5DE0_sub_100B6DE0])
	CMP BYTE PTR [ESP+arg1+0x8],0x00
	JNZ loc_100B9CAC
	PUSH 0x00
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mB17B0_sub_100B27B0])
loc_100B9CAC:
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100B9F90()
{
__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.mB4650_sub_100B5650])
	MOV EDI, EAX
	TEST EDI, EDI
	JZ loc_100B9FE7
	MOV ECX,DWORD PTR [ESI+0x1C]
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x40])
	CMP EAX,DWORD PTR [EDI+0x10]
	JL loc_100B9FE7
	MOV EAX,DWORD PTR [EDI+0x10]
	MOV ECX, ESI
	MOV DWORD PTR [ESI+0x64],EAX
	MOV EDI,DWORD PTR [ESI]
	CALL_LONG(DWORD PTR [EDI+0x64])
	MOV EAX, 0x00000001
	MOV CL,BYTE PTR [ESI+0x08]
	SHL EAX, CL
	MOV ECX,DWORD PTR [ESI+0x1C]
	OR DWORD PTR [ESI+0x0C],EAX
	MOV DWORD PTR [ESI+0x08],0x00000004
	MOV EDI,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EDI+0x24])
	CMP EAX, -0x01
	JNZ loc_100B9FE7
	MOV ECX,DWORD PTR [ESI+0x3C]
	TEST ECX, ECX
	JZ loc_100B9FE7
	PUSH ESI
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x60])
loc_100B9FE7:
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100B9FF0()
{
__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	MOV EDI, ECX
	MOV ECX,DWORD PTR [ECX+0x1C]
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x24])
	CMP EAX, -0x01
	JZ loc_100BA02F
	MOV EBX,DWORD PTR [EDI+0x1C]
	MOV ECX, EBX
	MOV ESI,DWORD PTR [EBX]
	CALL_LONG(DWORD PTR [ESI+0x24])
	MOV EBP,DWORD PTR [EBX+0x34]
	MOV ECX, EBX
	ADD EBP, EAX
	CALL_LONG(DWORD PTR [ESI+0x40])
	CMP EBP, EAX
	JG loc_100BA02F
	MOV EAX, 0x00000001
	MOV CL,BYTE PTR [EDI+0x08]
	SHL EAX, CL
	MOV DWORD PTR [EDI+0x08],0x00000005
	OR DWORD PTR [EDI+0x0C],EAX
loc_100BA02F:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BA1E0()
{
	enum{
		var_404 = -0x404,
		var_400 = -0x400,
		var_204 = -0x204,
		var_200 = -0x200,
	};

__asm{
	SUB ESP, 0x00000400
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX, ECX
	CALL_LONG(offset [LEGO1_text.mB3FC0__ParseExtra_MxPresenter__MAEXXZ])
	MOV EAX,DWORD PTR [EBX+0x1C]
	TEST BYTE PTR [EAX+0x30],0x10
	JZ loc_100BA1FD
	OR BYTE PTR [EBX+0x5E],0x08
loc_100BA1FD:
	MOV CX,WORD PTR DS:[EAX+0x00000080]
	MOV WORD PTR SS:[ESP+var_400+0x40C],CX
	CMP WORD PTR SS:[ESP+var_400+0x40C],0x00
	MOV EDX,DWORD PTR [EAX+0x7C]
	JZ FAR loc_100BA2AE
	MOV EAX,DWORD PTR [ESP+var_400+0x40C]
	LEA EDI,DWORD PTR [ESP+var_400+0x40C]
	AND EAX, 0x0000FFFF
	MOV ESI, EDX
	MOV ECX, EAX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	LEA ECX,DWORD PTR [ESP+var_400+0x40C]
	MOV EDX,DWORD PTR [offset LEGO1_data.m120CC_ptr]
	MOV BYTE PTR [EAX+ESP+var_400+0x40C],0x00
	LEA EAX,DWORD PTR [ESP+var_200+0x40C]
	PUSH ECX
	PUSH EDX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mB6050_sub_100B7050])
	ADD ESP, 0x0C
	TEST AL, AL
	JZ loc_100BA27C
	LEA EAX,DWORD PTR [ESP+var_200+0x40C]
	PUSH offset [LEGO1_data.m32EC_str]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8B110_sub_1008C110])
	ADD ESP, 0x08
	TEST EAX, EAX
	JNZ loc_100BA27C
	PUSH 0x00
	MOV EAX,DWORD PTR [EBX]
	MOV ECX, EBX
	CALL_LONG(DWORD PTR [EAX+0x54])
loc_100BA27C:
	LEA EAX,DWORD PTR [ESP+var_404+0x410]
	MOV ECX,DWORD PTR [offset LEGO1_data.m120E0_ptr]
	LEA EDX,DWORD PTR [ESP+var_204+0x410]
	PUSH EAX
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.mB6050_sub_100B7050])
	ADD ESP, 0x0C
	TEST AL, AL
	JZ loc_100BA2AE
	MOV AL,BYTE PTR [EBX+0x5E]
	OR AL, 0x10
	MOV BYTE PTR [EBX+0x5E],AL
	AND AL, 0xFD
	MOV BYTE PTR [EBX+0x5E],AL
	AND AL, 0xFB
	MOV BYTE PTR [EBX+0x5E],AL
loc_100BA2AE:
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000400
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BA500()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mB9569_proc_100BA569]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	LEA ECX,DWORD PTR [ESI+0x08]
	CALL_LONG(offset [LEGO1_text.mBDC70___0MxVideoParam__QAE_XZ])
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	MOV ECX, ESI
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8768_ptr]
	CALL_LONG(offset [LEGO1_text.mB9610_sub_100BA610])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV EAX, ESI
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BA5A0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mB95FD_proc_100BA5FD]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m8768_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	CALL_LONG(offset [LEGO1_text.mB9A90_sub_100BAA90])
	MOV BYTE PTR [EBP+var_8+0x4],0x00
	CALL_LONG(offset [LEGO1_text.mB95F2_sub_100BA5F2])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mB9607_sub_100BA607])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BA5F2()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x08
	JMP_LONG(offset [LEGO1_text.mBDD50___1MxVideoParam__QAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100BA607()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100BA610()
{
__asm{
	PUSH EDI
	XOR EAX, EAX
	MOV DWORD PTR [ECX+0x2C],EAX
	MOV DWORD PTR [ECX+0x30],EAX
	LEA EDI,DWORD PTR [ECX+0x3C]
	MOV DWORD PTR [ECX+0x34],EAX
	MOV DWORD PTR [ECX+0x000000A8],EAX
	MOV BYTE PTR [ECX+0x38],AL
	MOV ECX, 0x0000001B
	REP STOSD
	POP EDI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BA640()
{
	enum{
		var_88 = -0x88,
		var_84 = -0x84,
		var_7C = -0x7C,
		var_74 = -0x74,
		var_70 = -0x70,
		var_6C = -0x6C,
		var_5C = -0x5C,
		var_2C = -0x2C,
	};

__asm{
	SUB ESP, 0x74
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	PUSH EBP
	TEST BYTE PTR [ESI+0x20],0x02
	JNZ loc_100BA659
	MOV DWORD PTR [ESP+var_74+0x84],0x00000001
	JMP loc_100BA661
loc_100BA659:
	MOV EAX,DWORD PTR [ESI+0x1C]
	INC EAX
	MOV DWORD PTR [ESP+var_74+0x84],EAX
loc_100BA661:
	MOV DWORD PTR [ESP+var_70+0x84],0x00000000
	CMP DWORD PTR [ESP+var_74+0x84],0x00
	JLE FAR loc_100BA739
loc_100BA674:
	LEA EDI,DWORD PTR [ESP+var_6C+0x84]
	XOR EAX, EAX
	MOV ECX, 0x0000001B
	PUSH 0x00
	REP STOSD
	LEA ECX,DWORD PTR [ESP+var_6C+0x88]
	PUSH 0x01
	MOV EAX,DWORD PTR [ESI+0x30]
	PUSH ECX
	MOV DWORD PTR [ESP+var_6C+0x90],0x0000006C
	PUSH 0x00
	MOV EBX,DWORD PTR [EAX]
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x64])
	CMP EAX, 0x887601C2
	JNZ loc_100BA6C1
	MOV EAX,DWORD PTR [ESI+0x30]
	PUSH EAX
	MOV EBX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBX+0x6C])
	MOV EAX,DWORD PTR [ESI+0x30]
	PUSH 0x00
	LEA ECX,DWORD PTR [ESP+var_7C+0x98]
	PUSH 0x01
	PUSH ECX
	MOV EBX,DWORD PTR [EAX]
	PUSH 0x00
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x64])
loc_100BA6C1:
	TEST EAX, EAX
	JNZ loc_100BA739
	MOV EDX,DWORD PTR [ESP+var_5C+0x98]
	MOV EBX,DWORD PTR [ESI+0x14]
	SUB EBX,DWORD PTR [ESI+0x0C]
	INC EBX
	MOV EAX, EBX
	DEC EBX
	TEST EAX, EAX
	JZ loc_100BA703
loc_100BA6D7:
	MOV EBP,DWORD PTR [ESI+0x10]
	MOV EDI, EDX
	SUB EBP,DWORD PTR [ESI+0x08]
	XOR EAX, EAX
	INC EBP
	IMUL EBP,DWORD PTR [ESP+var_2C+0x98]
	SHR EBP, 0x03
	MOV ECX, EBP
	SHR ECX, 0x02
	REP STOSD
	MOV ECX, EBP
	AND ECX, 0x03
	REP STOSB
	ADD EDX,DWORD PTR [ESP+var_70+0x98]
	MOV EAX, EBX
	DEC EBX
	TEST EAX, EAX
	JNZ loc_100BA6D7
loc_100BA703:
	MOV EAX,DWORD PTR [ESI+0x30]
	MOV ECX,DWORD PTR [ESP+var_5C+0x98]
	MOV EBX,DWORD PTR [EAX]
	PUSH ECX
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x00000080])
	TEST BYTE PTR [ESI+0x20],0x02
	JZ loc_100BA727
	MOV EAX,DWORD PTR [ESI+0x2C]
	PUSH 0x01
	MOV EBX,DWORD PTR [EAX]
	PUSH 0x00
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x2C])
loc_100BA727:
	INC DWORD PTR [ESP+var_84+0x98]
	MOV EAX,DWORD PTR [ESP+var_84+0x98]
	CMP EAX,DWORD PTR [ESP+var_88+0x98]
	JL FAR loc_100BA674
loc_100BA739:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x74
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BA750(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	XOR AL, AL
	MOV ECX,DWORD PTR [ESP+arg1]
	TEST ECX, ECX
	JZ loc_100BA768
loc_100BA75A:
	MOV EDX, ECX
	SHR ECX, 0x01
	AND DL, 0x01
	ADD AL, DL
	TEST ECX, ECX
	JNZ loc_100BA75A
loc_100BA768:
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BA770(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	XOR AL, AL
	MOV ECX,DWORD PTR [ESP+arg1]
	TEST CL,0x01
	JNZ loc_100BA785
loc_100BA77B:
	SHR ECX, 0x01
	INC AL
	TEST CL,0x01
	JZ loc_100BA77B
loc_100BA785:
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100BAA90()
{
__asm{
	PUSH ESI
	MOV ESI, ECX
	CMP BYTE PTR [ECX+0x38],0x00
	JZ loc_100BAAC0
	MOV EAX,DWORD PTR [ESI+0x30]
	TEST EAX, EAX
	JZ loc_100BAAA6
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
loc_100BAAA6:
	MOV EAX,DWORD PTR [ESI+0x2C]
	TEST EAX, EAX
	JZ loc_100BAAB3
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
loc_100BAAB3:
	MOV EAX,DWORD PTR [ESI+0x34]
	TEST EAX, EAX
	JZ loc_100BAAC0
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
loc_100BAAC0:
	MOV EAX,DWORD PTR [ESI+0x000000A8]
	TEST EAX, EAX
	JZ loc_100BAAD3
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100BAAD3:
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB9610_sub_100BA610])
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BB500(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7)
{
	enum{
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg6 = 0x18,
		arg7 = 0x1C,
		arg1217224 = 0x4A4B20,
	};

__asm{
	SUB ESP, 0x10
	MOV EAX,DWORD PTR [ESP+arg3+0x10]
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV DWORD PTR [ESP+var_8+0x1C],0x00000000
	PUSH EBP
	MOV EBP,DWORD PTR [ESP+arg1+0x20]
	MOV EDX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	ADD EAX, EDX
	CMP BYTE PTR [ESP+arg7+0x20],0x10
	MOV DWORD PTR [ESP+var_4+0x20],EAX
	JNZ FAR loc_100BB6E1
	CMP EDX, EAX
	JNB FAR loc_100BB83D
	MOV EBX,DWORD PTR [ESP+arg2+0x20]
loc_100BB537:
	MOV ESI,DWORD PTR [EBP+arg1217224-0x4A4B20]
	XOR EDX, EDX
	MOV DWORD PTR [ESP+var_10+0x20],0x00000000
	MOV AL,BYTE PTR [ESI]
	INC ESI
	MOV BYTE PTR [ESP+var_10+0x20],AL
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],ESI
	MOV DL,BYTE PTR [ESI]
	INC ESI
	SHL EDX, 0x08
	MOV EDI,DWORD PTR [ESP+var_10+0x20]
	ADD EDI, EDX
	XOR EAX, EAX
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],ESI
	INC ESI
	SUB EDX, EDX
	MOV AL,BYTE PTR [ESI-0x01]
	SHL EAX, 0x10
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],ESI
	ADD EDI, EAX
	MOV ESI,DWORD PTR [ESP+arg4+0x20]
	MOV EAX,DWORD PTR [ESP+var_8+0x20]
	DIV ESI
	SUB ESI, EDX
	ADD DWORD PTR [ESP+var_8+0x20],EDI
	CMP ESI, EDI
	JA loc_100BB5AF
	LEA EDX,DWORD PTR [ESI*2+0x00000000]
	SUB EDI, ESI
	ADD EDX,DWORD PTR [EBX]
	MOV EAX,DWORD PTR [ESP+arg4+0x20]
	ADD EAX, EAX
	MOV ESI,DWORD PTR [ESP+arg6+0x20]
	SUB ESI, EAX
	MOV DWORD PTR [EBX],EDX
	ADD ESI, EDX
	MOV EAX, EDI
	SUB EDX, EDX
	MOV DWORD PTR [EBX],ESI
	DIV DWORD PTR [ESP+arg4+0x20]
	IMUL EAX,DWORD PTR [ESP+arg6+0x20]
	ADD EAX, ESI
	MOV DWORD PTR [EBX],EAX
loc_100BB5AF:
	MOV EAX, EDI
	SUB EDX, EDX
	DIV DWORD PTR [ESP+arg4+0x20]
	ADD EDX, EDX
	ADD DWORD PTR [EBX],EDX
	MOV ESI,DWORD PTR [EBP+arg1217224-0x4A4B20]
	CMP ESI,DWORD PTR [ESP+var_4+0x20]
	JNB FAR loc_100BB83D
	MOV AL,BYTE PTR [ESI]
	INC ESI
	XOR EDX, EDX
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],ESI
	MOV DL,BYTE PTR [ESI]
	INC ESI
	SHL EDX, 0x08
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],ESI
	MOV DWORD PTR [ESP+var_10+0x20],0x00000000
	INC ESI
	MOV BYTE PTR [ESP+var_10+0x20],AL
	MOV EAX,DWORD PTR [ESP+var_10+0x20]
	ADD EAX, EDX
	MOV DWORD PTR [ESP+var_C+0x20],EAX
	XOR EAX, EAX
	MOV AL,BYTE PTR [ESI-0x01]
	SUB EDX, EDX
	SHL EAX, 0x10
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],ESI
	MOV ESI,DWORD PTR [ESP+arg4+0x20]
	ADD DWORD PTR [ESP+var_C+0x20],EAX
	MOV EAX,DWORD PTR [ESP+var_8+0x20]
	DIV ESI
	SUB ESI, EDX
	MOV EAX,DWORD PTR [ESP+var_C+0x20]
	ADD DWORD PTR [ESP+var_8+0x20],EAX
	CMP ESI, EAX
	JA FAR loc_100BB69D
	TEST ESI, ESI
	JZ loc_100BB642
	MOV EDX, ESI
loc_100BB623:
	MOV EDI,DWORD PTR [EBP+arg1217224-0x4A4B20]
	XOR EAX, EAX
	MOV AL,BYTE PTR [EDI]
	MOV EDI,DWORD PTR [ECX+0x000000A8]
	MOV AX,WORD PTR DS:[EAX*2+EDI]
	MOV EDI,DWORD PTR [EBX]
	MOV WORD PTR DS:[EDI],AX
	INC DWORD PTR [EBP+arg1217224-0x4A4B20]
	ADD DWORD PTR [EBX],0x02
	DEC EDX
	JNZ loc_100BB623
loc_100BB642:
	MOV EAX,DWORD PTR [ESP+arg6+0x20]
	SUB DWORD PTR [ESP+var_C+0x20],ESI
	MOV ESI,DWORD PTR [ESP+arg4+0x20]
	SUB EDX, EDX
	ADD ESI, ESI
	SUB EAX, ESI
	MOV DWORD PTR [ESP+var_10+0x20],ESI
	ADD DWORD PTR [EBX],EAX
	MOV EAX,DWORD PTR [ESP+var_C+0x20]
	DIV DWORD PTR [ESP+arg4+0x20]
	TEST EAX, EAX
	JZ loc_100BB69D
loc_100BB666:
	CMP DWORD PTR [ESP+arg4+0x20],0x00
	JLE loc_100BB690
	MOV ESI,DWORD PTR [ESP+arg4+0x20]
loc_100BB671:
	MOV EDI,DWORD PTR [EBP+arg1217224-0x4A4B20]
	XOR EDX, EDX
	MOV DL,BYTE PTR [EDI]
	MOV EDI,DWORD PTR [ECX+0x000000A8]
	MOV DI,WORD PTR DS:[EDX*2+EDI]
	MOV EDX,DWORD PTR [EBX]
	MOV WORD PTR DS:[EDX],DI
	INC DWORD PTR [EBP+arg1217224-0x4A4B20]
	ADD DWORD PTR [EBX],0x02
	DEC ESI
	JNZ loc_100BB671
loc_100BB690:
	MOV EDX,DWORD PTR [ESP+arg6+0x20]
	SUB EDX,DWORD PTR [ESP+var_10+0x20]
	ADD DWORD PTR [EBX],EDX
	DEC EAX
	JNZ loc_100BB666
loc_100BB69D:
	MOV EAX,DWORD PTR [ESP+var_C+0x20]
	SUB EDX, EDX
	DIV DWORD PTR [ESP+arg4+0x20]
	TEST EDX, EDX
	JLE loc_100BB6CA
loc_100BB6AB:
	MOV ESI,DWORD PTR [EBP+arg1217224-0x4A4B20]
	XOR EAX, EAX
	MOV EDI,DWORD PTR [EBX]
	MOV AL,BYTE PTR [ESI]
	MOV ESI,DWORD PTR [ECX+0x000000A8]
	MOV AX,WORD PTR DS:[EAX*2+ESI]
	MOV WORD PTR DS:[EDI],AX
	INC DWORD PTR [EBP+arg1217224-0x4A4B20]
	ADD DWORD PTR [EBX],0x02
	DEC EDX
	JNZ loc_100BB6AB
loc_100BB6CA:
	MOV EAX,DWORD PTR [ESP+var_4+0x20]
	CMP DWORD PTR [EBP+arg1217224-0x4A4B20],EAX
	JB FAR loc_100BB537
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RETN 0x001C
loc_100BB6E1:
	CMP EDX,DWORD PTR [ESP+var_4+0x20]
	JNB FAR loc_100BB83D
	MOV EBX,DWORD PTR [ESP+arg2+0x20]
loc_100BB6EF:
	MOV EDX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	XOR EAX, EAX
	MOV AL,BYTE PTR [EDX]
	INC EDX
	XOR ECX, ECX
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],EDX
	MOV CL,BYTE PTR [EDX]
	INC EDX
	SHL ECX, 0x08
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],EDX
	ADD ECX, EAX
	INC EDX
	XOR EAX, EAX
	MOV ESI,DWORD PTR [ESP+arg4+0x20]
	MOV AL,BYTE PTR [EDX-0x01]
	SHL EAX, 0x10
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],EDX
	ADD ECX, EAX
	SUB EDX, EDX
	MOV EAX,DWORD PTR [ESP+var_8+0x20]
	DIV ESI
	SUB ESI, EDX
	ADD DWORD PTR [ESP+var_8+0x20],ECX
	CMP ESI, ECX
	JA loc_100BB751
	MOV EDX,DWORD PTR [EBX]
	SUB ECX, ESI
	ADD EDX, ESI
	MOV EAX,DWORD PTR [ESP+arg6+0x20]
	SUB EAX,DWORD PTR [ESP+arg4+0x20]
	MOV DWORD PTR [EBX],EDX
	LEA ESI,DWORD PTR [EDX+EAX]
	MOV EAX, ECX
	SUB EDX, EDX
	MOV DWORD PTR [EBX],ESI
	DIV DWORD PTR [ESP+arg4+0x20]
	IMUL EAX,DWORD PTR [ESP+arg6+0x20]
	ADD EAX, ESI
	MOV DWORD PTR [EBX],EAX
loc_100BB751:
	MOV EAX, ECX
	SUB EDX, EDX
	DIV DWORD PTR [ESP+arg4+0x20]
	ADD DWORD PTR [EBX],EDX
	MOV ESI,DWORD PTR [EBP+arg1217224-0x4A4B20]
	CMP ESI,DWORD PTR [ESP+var_4+0x20]
	JNB FAR loc_100BB83D
	XOR EAX, EAX
	INC ESI
	XOR ECX, ECX
	MOV AL,BYTE PTR [ESI-0x01]
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],ESI
	MOV CL,BYTE PTR [ESI]
	INC ESI
	SHL ECX, 0x08
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],ESI
	ADD EAX, ECX
	INC ESI
	MOV ECX,DWORD PTR [ESP+arg4+0x20]
	MOV DWORD PTR [ESP+var_C+0x20],EAX
	XOR EAX, EAX
	SUB EDX, EDX
	MOV AL,BYTE PTR [ESI-0x01]
	SHL EAX, 0x10
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],ESI
	ADD DWORD PTR [ESP+var_C+0x20],EAX
	MOV EAX,DWORD PTR [ESP+var_8+0x20]
	DIV ECX
	SUB ECX, EDX
	MOV EAX,DWORD PTR [ESP+var_C+0x20]
	MOV DWORD PTR [ESP+var_10+0x20],ECX
	ADD DWORD PTR [ESP+var_8+0x20],EAX
	CMP ECX, EAX
	JA loc_100BB80C
	MOV EAX, ECX
	MOV EDI,DWORD PTR [EBX]
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	MOV EAX,DWORD PTR [ESP+var_10+0x20]
	ADD DWORD PTR [EBX],EAX
	SUB DWORD PTR [ESP+var_C+0x20],EAX
	SUB EDX, EDX
	ADD DWORD PTR [EBP+arg1217224-0x4A4B20],EAX
	MOV EAX,DWORD PTR [ESP+arg6+0x20]
	SUB EAX,DWORD PTR [ESP+arg4+0x20]
	ADD DWORD PTR [EBX],EAX
	MOV EAX,DWORD PTR [ESP+var_C+0x20]
	DIV DWORD PTR [ESP+arg4+0x20]
	TEST EAX, EAX
	JZ loc_100BB80C
loc_100BB7E5:
	MOV EDX,DWORD PTR [ESP+arg4+0x20]
	MOV EDI,DWORD PTR [EBX]
	MOV ESI,DWORD PTR [EBP+arg1217224-0x4A4B20]
	MOV ECX, EDX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EDX
	AND ECX, 0x03
	REP MOVSB
	MOV EDX,DWORD PTR [ESP+arg4+0x20]
	MOV ECX,DWORD PTR [ESP+arg6+0x20]
	ADD DWORD PTR [EBP+arg1217224-0x4A4B20],EDX
	ADD DWORD PTR [EBX],ECX
	DEC EAX
	JNZ loc_100BB7E5
loc_100BB80C:
	MOV EAX,DWORD PTR [ESP+var_C+0x20]
	SUB EDX, EDX
	MOV EDI,DWORD PTR [EBX]
	MOV ESI,DWORD PTR [EBP+arg1217224-0x4A4B20]
	DIV DWORD PTR [ESP+arg4+0x20]
	MOV ECX, EDX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EDX
	AND ECX, 0x03
	REP MOVSB
	ADD DWORD PTR [EBX],EDX
	MOV EAX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	ADD EAX, EDX
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],EAX
	CMP EAX,DWORD PTR [ESP+var_4+0x20]
	JB FAR loc_100BB6EF
loc_100BB83D:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RETN 0x001C
}
}

__declspec(naked) DWORD LEGO1_sub_100BBFB0(DWORD arg1)
{
	enum{
		var_88 = -0x88,
		var_80 = -0x80,
		var_7C = -0x7C,
		var_74 = -0x74,
		var_70 = -0x70,
		var_6C = -0x6C,
		var_68 = -0x68,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x00000080
	MOV DWORD PTR [ESP+var_80+0x80],0x00000000
	PUSH EBX
	PUSH ESI
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.mABF10_sub_100ACF10])
	MOV EBX,DWORD PTR [EAX+0x50]
	LEA EDI,DWORD PTR [ESP+var_6C+0x8C]
	XOR EAX, EAX
	MOV ECX, 0x0000001B
	REP STOSD
	LEA EAX,DWORD PTR [ESP+var_6C+0x8C]
	MOV ESI,DWORD PTR [ESP+arg1+0x8C]
	MOV DWORD PTR [ESP+var_6C+0x8C],0x0000006C
	PUSH EAX
	PUSH ESI
	MOV EAX,DWORD PTR [ESI]
	CALL_LONG(DWORD PTR [EAX+0x58])
	LEA EAX,DWORD PTR [ESP+var_88+0x94]
	PUSH 0x00
	LEA ECX,DWORD PTR [ESP+var_70+0x94]
	PUSH EAX
	PUSH ECX
	PUSH EBX
	MOV EBX,DWORD PTR [EBX]
	CALL_LONG(DWORD PTR [EBX+0x18])
	TEST EAX, EAX
	JZ loc_100BC012
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000080
	RET
loc_100BC012:
	XOR ECX, ECX
	MOV EAX,DWORD PTR [ESP+var_68+0x94]
	MOV EDX,DWORD PTR [ESP+var_6C+0x94]
	PUSH 0x10
	LEA EBX,DWORD PTR [ESP+var_80+0x94]
	MOV DWORD PTR [ESP+var_80+0x94],ECX
	MOV DWORD PTR [ESP+var_7C+0x94],ECX
	PUSH EBX
	MOV DWORD PTR [ESP+var_74+0x94],EAX
	PUSH ESI
	MOV EAX,DWORD PTR [ESP+var_7C+0x94]
	PUSH ECX
	MOV DWORD PTR [ESP+var_68+0x94],EDX
	PUSH ECX
	PUSH EAX
	MOV EBX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBX+0x1C])
	TEST EAX, EAX
	MOV EAX,DWORD PTR [ESP+var_88+0x94]
	JZ loc_100BC05A
	PUSH EAX
	MOV EBX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBX+0x08])
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000080
	RET
loc_100BC05A:
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000080
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BC070()
{
	enum{
		var_80 = -0x80,
		var_7C = -0x7C,
		var_78 = -0x78,
		var_74 = -0x74,
		var_70 = -0x70,
		var_6C = -0x6C,
		var_68 = -0x68,
		var_64 = -0x64,
		var_50 = -0x50,
		var_4 = -0x4,
	};

__asm{
	SUB ESP, 0x78
	MOV DWORD PTR [ESP+var_78+0x78],0x00000000
	PUSH EBX
	PUSH ESI
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.mABF10_sub_100ACF10])
	MOV ESI,DWORD PTR [EAX+0x50]
	CALL_LONG(offset [LEGO1_text.mABF10_sub_100ACF10])
	LEA EDI,DWORD PTR [ESP+var_6C+0x84]
	XOR EAX, EAX
	MOV ECX, 0x0000001B
	REP STOSD
	MOV DWORD PTR [ESP+var_6C+0x84],0x0000006C
	MOV EDI,DWORD PTR [ESI]
	LEA EAX,DWORD PTR [ESP+var_6C+0x84]
	PUSH EAX
	PUSH ESI
	CALL_LONG(DWORD PTR [EDI+0x30])
	TEST EAX, EAX
	JZ loc_100BC0B8
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x78
	RET
loc_100BC0B8:
	CMP DWORD PTR [ESP+0x6C],0x10
	JZ loc_100BC0C8
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x78
	RET
loc_100BC0C8:
	MOV EAX, 0x00000010
	PUSH 0x00
	LEA ECX,DWORD PTR [ESP+var_7C+0x8C]
	MOV DWORD PTR [ESP+var_64+0x8C],EAX
	MOV DWORD PTR [ESP+var_68+0x8C],EAX
	PUSH ECX
	MOV DWORD PTR [ESP+var_68+0x8C],0x00001007
	MOV DWORD PTR [ESP+var_4+0x8C],0x00004040
	MOV EDI,DWORD PTR [EDI+0x18]
	LEA EAX,DWORD PTR [ESP+var_6C+0x8C]
	PUSH EAX
	PUSH ESI
	CALL_LONG(EDI)
	TEST EAX, EAX
	JZ loc_100BC127
	LEA EAX,DWORD PTR [ESP+var_80+0x8C]
	PUSH 0x00
	LEA ECX,DWORD PTR [ESP+var_70+0x8C]
	PUSH EAX
	AND DWORD PTR [ESP+var_4+0x8C],0xFFFFBFFF
	OR DWORD PTR [ESP+var_4+0x8C],0x00000800
	PUSH ECX
	PUSH ESI
	CALL_LONG(EDI)
	TEST EAX, EAX
	JNZ loc_100BC154
loc_100BC127:
	LEA EDI,DWORD PTR [ESP+var_74+0x8C]
	XOR EAX, EAX
	MOV ECX, 0x0000001B
	PUSH EAX
	REP STOSD
	LEA EAX,DWORD PTR [ESP+var_70+0x8C]
	PUSH 0x01
	MOV ECX,DWORD PTR [ESP+var_78+0x8C]
	PUSH EAX
	MOV DWORD PTR [ESP+var_68+0x8C],0x0000006C
	PUSH 0x00
	MOV EAX,DWORD PTR [ECX]
	PUSH ECX
	CALL_LONG(DWORD PTR [EAX+0x64])
	TEST EAX, EAX
	JZ loc_100BC16E
loc_100BC154:
	CMP DWORD PTR [ESP+var_80+0x8C],0x00
	JZ loc_100BC165
	MOV EAX,DWORD PTR [ESP+var_80+0x8C]
	PUSH EAX
	MOV EBX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBX+0x08])
loc_100BC165:
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x78
	RET
loc_100BC16E:
	MOV EDX,DWORD PTR [ESP+0x3C]
	MOV ESI,DWORD PTR [ESP+var_64+0x8C]
	XOR EDI, EDI
loc_100BC178:
	MOV EAX, EDX
	XOR EBX, EBX
loc_100BC17C:
	CMP EBX, 0x0A
	JG loc_100BC185
	TEST EDI, EDI
	JZ loc_100BC1A6
loc_100BC185:
	CMP EDI, 0x0A
	JG loc_100BC18E
	TEST EBX, EBX
	JZ loc_100BC1A6
loc_100BC18E:
	LEA ECX,DWORD PTR [EBX+EDI]
	CMP ECX, 0x0A
	JZ loc_100BC1A6
	JLE loc_100BC19F
	MOV WORD PTR DS:[EAX],0x7C1F
	JMP loc_100BC1AB
loc_100BC19F:
	MOV WORD PTR DS:[EAX],0xFFFF
	JMP loc_100BC1AB
loc_100BC1A6:
	MOV WORD PTR DS:[EAX],0x0000
loc_100BC1AB:
	ADD EAX, 0x02
	INC EBX
	CMP EBX, 0x10
	JL loc_100BC17C
	ADD EDX, ESI
	INC EDI
	CMP EDI, 0x10
	JL loc_100BC178
	MOV EAX,DWORD PTR [ESP+var_50+0x8C]
	MOV ECX,DWORD PTR [ESP+var_80+0x8C]
	PUSH EAX
	PUSH ECX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x00000080])
	MOV EAX, 0x00007C1F
	MOV ECX,DWORD PTR [ESP+var_80+0x8C]
	MOV DWORD PTR [ESP+var_78+0x8C],EAX
	MOV DWORD PTR [ESP+var_7C+0x8C],EAX
	LEA EAX,DWORD PTR [ESP+var_7C+0x8C]
	PUSH EAX
	PUSH 0x08
	PUSH ECX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x74])
	MOV EAX,DWORD PTR [ESP+var_80+0x8C]
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x78
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BC8B0(DWORD arg1, DWORD arg2)
{
	enum{
		var_78 = -0x78,
		var_74 = -0x74,
		var_70 = -0x70,
		var_6C = -0x6C,
		var_68 = -0x68,
		var_4 = -0x4,
		r = 0x0,
	};

__asm{
	SUB ESP, 0x70
	MOV DWORD PTR [ESP+var_70+0x70],0x00000000
	PUSH ESI
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.mABF10_sub_100ACF10])
	MOV ESI,DWORD PTR [EAX+0x50]
	CALL_LONG(offset [LEGO1_text.mABF10_sub_100ACF10])
	LEA EDI,DWORD PTR [ESP+var_6C+0x78]
	XOR EAX, EAX
	MOV ECX, 0x0000001B
	REP STOSD
	MOV DWORD PTR [ESP+var_6C+0x78],0x0000006C
	MOV EDI,DWORD PTR [ESI]
	LEA EAX,DWORD PTR [ESP+var_6C+0x78]
	PUSH EAX
	PUSH ESI
	CALL_LONG(DWORD PTR [EDI+0x30])
	TEST EAX, EAX
	JZ loc_100BC8F8
	XOR EAX, EAX
	POP EDI
	POP ESI
	ADD ESP, 0x70
	RETN 0x0008
loc_100BC8F8:
	CMP DWORD PTR [ESP+0x60],0x10
	JZ loc_100BC909
	XOR EAX, EAX
	POP EDI
	POP ESI
	ADD ESP, 0x70
	RETN 0x0008
loc_100BC909:
	MOV EAX,DWORD PTR [ESP+0x7C]
	MOV ECX,DWORD PTR [ESP+r+0x80]
	MOV DWORD PTR [ESP+var_68+0x80],EAX
	PUSH 0x00
	LEA EAX,DWORD PTR [ESP+var_74+0x80]
	MOV DWORD PTR [ESP+var_68+0x80],ECX
	LEA ECX,DWORD PTR [ESP+var_70+0x80]
	PUSH EAX
	MOV DWORD PTR [ESP+var_68+0x80],0x00001007
	MOV DWORD PTR [ESP+var_4+0x80],0x00004040
	MOV EDI,DWORD PTR [EDI+0x18]
	PUSH ECX
	PUSH ESI
	CALL_LONG(EDI)
	TEST EAX, EAX
	JZ loc_100BC96F
	LEA EAX,DWORD PTR [ESP+var_78+0x80]
	PUSH 0x00
	LEA ECX,DWORD PTR [ESP+var_70+0x80]
	PUSH EAX
	AND DWORD PTR [ESP+var_4+0x80],0xFFFFBFFF
	OR DWORD PTR [ESP+var_4+0x80],0x00000800
	PUSH ECX
	PUSH ESI
	CALL_LONG(EDI)
	TEST EAX, EAX
	JZ loc_100BC96F
	XOR EAX, EAX
	POP EDI
	POP ESI
	ADD ESP, 0x70
	RETN 0x0008
loc_100BC96F:
	MOV EAX,DWORD PTR [ESP+0x08]
	POP EDI
	POP ESI
	ADD ESP, 0x70
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1___0MxBitmap__QAE_XZ()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBB9DB_proc_100BC9DB]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	XOR EAX, EAX
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m87B0_ptr]
	MOV DWORD PTR [ESI+0x08],EAX
	MOV DWORD PTR [ESI+0x0C],EAX
	MOV DWORD PTR [ESI+0x10],EAX
	MOV DWORD PTR [ESI+0x14],EAX
	MOV BYTE PTR [ESI+0x18],AL
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR [ESI+0x1C],EAX
	MOV DWORD PTR FS:[0x00000000],ECX
	MOV EAX, ESI
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1___1MxBitmap__UAE_XZ()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBBA87_proc_100BCA87]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m87B0_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	TEST EAX, EAX
	JZ loc_100BCA4B
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100BCA4B:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EAX+0x14]
	TEST EAX, EAX
	JZ loc_100BCA5E
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100BCA5E:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EAX+0x1C]
	TEST ECX, ECX
	JZ loc_100BCA6E
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
loc_100BCA6E:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mBBA91_sub_100BCA91])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BCA91()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD __stdcall LEGO1__Read_MxBitmap__UAEJPBD_Z(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, 0xFFFFFFFF
	MOV EDI, ECX
	PUSH 0x00
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	PUSH 0x00000080
	PUSH 0x03
	PUSH 0x00
	PUSH 0x01
	PUSH 0x80000000
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m41C_CreateFileA])
	CMP EAX, ESI
	MOV EBX, EAX
	JZ loc_100BCD4B
	PUSH EBX
	MOV EAX,DWORD PTR [EDI]
	MOV ECX, EDI
	CALL_LONG(DWORD PTR [EAX+0x20])
	TEST EAX, EAX
	JNZ loc_100BCD4B
	XOR ESI, ESI
loc_100BCD4B:
	TEST EBX, EBX
	JZ loc_100BCD56
	PUSH EBX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m390_CloseHandle])
loc_100BCD56:
	MOV EAX, ESI
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1__CreatePalette_MxBitmap__UAEPAVMxPalette__XZ()
{
	enum{
		var_14 = -0x14,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBC22E_proc_100BD22E]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	XOR EAX, EAX
	PUSH EBX
	PUSH ESI
	XOR BL, BL
	PUSH EDI
	MOV EDI, ECX
	XOR ECX, ECX
	MOV CL,BYTE PTR [EDI+0x18]
	CMP ECX, EAX
	JZ loc_100BD1F4
	CMP ECX, 0x01
	JZ_LONG(offset [LEGO1_text.mBC245_loc_100BD245])
	JMP_LONG(offset [LEGO1_text.mBC253_loc_100BD253])
loc_100BD1F4:
	PUSH 0x00000414
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV ESI, EAX
	MOV EAX, 0x00000000
	TEST ESI, ESI
	JZ loc_100BD221
	MOV EAX,DWORD PTR [EDI+0x10]
	MOV ECX, ESI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mBDED0_sub_100BEED0])
loc_100BD221:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	TEST EAX, EAX
	JNZ_LONG(offset [LEGO1_text.mBC251_loc_100BD251])
	JMP_LONG(offset [LEGO1_text.mBC253_loc_100BD253])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BD450(DWORD arg1, DWORD arg2)
{
	enum{
		var_828 = -0x828,
		var_414 = -0x414,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBC51A_proc_100BD51A]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	MOV ECX,DWORD PTR [EBP+arg2+0x4]
	SUB ESP, 0x00000818
	TEST ECX, ECX
	MOV DWORD PTR [EBP+var_14+0x4],0xFFFFFFFF
	PUSH EBX
	JZ loc_100BD4A1
	LEA EAX,DWORD PTR [EBP+var_414+0x4]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mBE150_sub_100BF150])
	TEST EAX, EAX
	JZ loc_100BD4D5
loc_100BD48D:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0008
loc_100BD4A1:
	LEA ECX,DWORD PTR [EBP+var_828+0x4]
	CALL_LONG(offset [LEGO1_text.mBDE30_sub_100BEE30])
	LEA EAX,DWORD PTR [EBP+var_414+0x4]
	LEA ECX,DWORD PTR [EBP+var_828+0x4]
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mBE150_sub_100BF150])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	TEST EAX, EAX
	JNZ loc_100BD510
	CALL_LONG(offset [LEGO1_text.mBC524_sub_100BD524])
loc_100BD4D5:
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	LEA ECX,DWORD PTR [EBP+var_414+0x4]
	ADD EAX, 0x02
	XOR EBX, EBX
loc_100BD4E3:
	MOV DL,BYTE PTR [ECX]
	ADD EAX, 0x04
	ADD ECX, 0x04
	MOV BYTE PTR [EAX-0x04],DL
	MOV DL,BYTE PTR [ECX-0x03]
	MOV BYTE PTR [EAX-0x05],DL
	MOV DL,BYTE PTR [ECX-0x02]
	MOV BYTE PTR [EAX-0x06],DL
	LEA EDX,DWORD PTR [EBP+var_14+0x4]
	MOV BYTE PTR [EAX-0x03],BL
	CMP ECX, EDX
	JB loc_100BD4E3
	MOV DWORD PTR [EBP+var_14+0x4],0x00000000
	JMP FAR loc_100BD48D
loc_100BD510:
	CALL_LONG(offset [LEGO1_text.mBC524_sub_100BD524])
	JMP FAR loc_100BD48D
}
}

__declspec(naked) DWORD LEGO1_sub_100BD524()
{
	enum{
		arg1216703 = 0x4A42FC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1216703-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mBDF90_loc_100BEF90])
}
}

__declspec(naked) DWORD LEGO1_sub_100BD530(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
	};

__asm{
	MOV AX,WORD PTR SS:[ESP+arg3]
	PUSH ESI
	TEST AX, AX
	PUSH EDI
	JL loc_100BD570
	MOV CX,WORD PTR SS:[ESP+arg4+0x8]
	TEST CX, CX
	JL loc_100BD570
	MOV EDX,DWORD PTR [ESP+arg1+0x8]
	MOVSX EDI,AX
	MOV ESI,DWORD PTR [EDX+0x04]
	CMP ESI, EDI
	JLE loc_100BD570
	MOVSX EAX,CX
	CMP DWORD PTR [EDX+0x08],EAX
	JLE loc_100BD570
	ADD ESI, 0x03
	MOV CL,BYTE PTR [ESP+arg5+0x8]
	AND ESI, -0x04
	IMUL ESI,EAX
	ADD ESI,DWORD PTR [ESP+arg2+0x8]
	MOV BYTE PTR [EDI+ESI],CL
loc_100BD570:
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BD580(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
	};

__asm{
	LEA EAX,DWORD PTR [ESP+arg6]
	PUSH ESI
	MOV SI,WORD PTR SS:[ESP+arg3+0x4]
	PUSH EDI
	LEA ECX,DWORD PTR [ESP+arg4+0x8]
	PUSH EAX
	LEA EDX,DWORD PTR [ESP+arg3+0xC]
	PUSH ECX
	MOV EDI,DWORD PTR [ESP+arg1+0x10]
	PUSH EDX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.mBC600_sub_100BD600])
	ADD ESP, 0x10
	TEST EAX, EAX
	JZ loc_100BD5F1
	MOV AX,WORD PTR SS:[ESP+arg3+0x8]
	SUB AX, SI
	JZ loc_100BD5BC
	MOVSX EAX,AX
	MOV ESI,DWORD PTR [ESP+arg5+0x8]
	ADD ESI, EAX
	JMP loc_100BD5C0
loc_100BD5BC:
	MOV ESI,DWORD PTR [ESP+arg5+0x8]
loc_100BD5C0:
	MOVSX EDX,WORD PTR [ESP+arg6+0x8]
	MOV ECX,DWORD PTR [EDI+0x04]
	MOVSX EAX,WORD PTR [ESP+arg4+0x8]
	ADD ECX, 0x03
	AND ECX, -0x04
	MOVSX EDI,WORD PTR [ESP+arg3+0x8]
	IMUL ECX,EAX
	ADD ECX, EDI
	MOV EDI,DWORD PTR [ESP+arg2+0x8]
	ADD EDI, ECX
	MOV ECX, EDX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EDX
	AND ECX, 0x03
	REP MOVSB
loc_100BD5F1:
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BD600(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg2]
	PUSH EBX
	MOV BX,WORD PTR DS:[ECX]
	PUSH ESI
	MOV EAX,DWORD PTR [ESP+arg3+0x8]
	PUSH EDI
	MOV AX,WORD PTR DS:[EAX]
	PUSH EBP
	TEST AX, AX
	MOV EDX,DWORD PTR [ESP+arg4+0x10]
	MOV SI,WORD PTR DS:[EDX]
	LEA EDI,DWORD PTR [ESI+EBX]
	JL loc_100BD671
	MOVSX EBP,AX
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	CMP DWORD PTR [EAX+0x08],EBP
	JLE loc_100BD671
	TEST DI, DI
	JL loc_100BD671
	MOVSX EBP,BX
	CMP EBP,DWORD PTR [EAX+0x04]
	JGE loc_100BD671
	TEST BX, BX
	JGE loc_100BD64A
	MOV SI, DI
	MOV WORD PTR DS:[EDX],DI
	MOV WORD PTR DS:[ECX],0x0000
loc_100BD64A:
	MOVSX ECX,DI
	MOV EAX,DWORD PTR [EAX+0x04]
	CMP ECX, EAX
	JLE loc_100BD65D
	SUB SI, DI
	ADD SI, AX
	MOV WORD PTR DS:[EDX],SI
loc_100BD65D:
	TEST SI, SI
	MOV EAX, 0x00000000
	JL loc_100BD673
	POP EBP
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100BD671:
	XOR EAX, EAX
loc_100BD673:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BD680(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
	};

__asm{
	LEA EAX,DWORD PTR [ESP+arg6]
	PUSH ESI
	LEA ECX,DWORD PTR [ESP+arg4+0x4]
	PUSH EAX
	LEA EDX,DWORD PTR [ESP+arg3+0x8]
	PUSH ECX
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
	PUSH EDX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.mBC600_sub_100BD600])
	ADD ESP, 0x10
	TEST EAX, EAX
	JZ loc_100BD6D4
	MOVSX EAX,WORD PTR [ESP+arg4+0x4]
	MOV ECX,DWORD PTR [ESI+0x04]
	ADD ECX, 0x03
	AND ECX, -0x04
	MOVSX EDX,WORD PTR [ESP+arg3+0x4]
	IMUL ECX,EAX
	ADD ECX, EDX
	MOV EAX,DWORD PTR [ESP+arg2+0x4]
	ADD EAX, ECX
	DEC WORD PTR SS:[ESP+arg6+0x4]
	JS loc_100BD6D4
	MOV CL,BYTE PTR [ESP+arg5+0x4]
loc_100BD6CA:
	MOV BYTE PTR [EAX],CL
	INC EAX
	DEC WORD PTR SS:[ESP+arg6+0x4]
	JNS loc_100BD6CA
loc_100BD6D4:
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BD6E0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
	};

__asm{
	LEA EAX,DWORD PTR [ESP+arg6]
	PUSH EBX
	LEA ECX,DWORD PTR [ESP+arg4+0x4]
	PUSH ESI
	LEA EDX,DWORD PTR [ESP+arg3+0x8]
	PUSH EAX
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
	PUSH ECX
	SHL WORD PTR SS:[ESP+arg6+0x10],0x01
	PUSH EDX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.mBC600_sub_100BD600])
	ADD ESP, 0x10
	TEST EAX, EAX
	JZ loc_100BD75A
	MOV DX,WORD PTR SS:[ESP+arg6+0x8]
	MOV ECX,DWORD PTR [ESI+0x04]
	AND DX, 0x01
	ADD ECX, 0x03
	MOVSX EAX,WORD PTR [ESP+arg4+0x8]
	MOVSX EBX,WORD PTR [ESP+arg3+0x8]
	AND ECX, -0x04
	SAR WORD PTR SS:[ESP+arg6+0x8],0x01
	IMUL ECX,EAX
	ADD ECX, EBX
	MOV EAX,DWORD PTR [ESP+arg2+0x8]
	ADD EAX, ECX
	MOV BL,BYTE PTR [ESP+arg5+0x8]
	DEC WORD PTR SS:[ESP+arg6+0x8]
	JS loc_100BD753
loc_100BD740:
	MOV CX,WORD PTR SS:[ESP+arg5+0x8]
	ADD EAX, 0x02
	MOV WORD PTR DS:[EAX-0x02],CX
	DEC WORD PTR SS:[ESP+arg6+0x8]
	JNS loc_100BD740
loc_100BD753:
	TEST DX, DX
	JZ loc_100BD75A
	MOV BYTE PTR [EAX],BL
loc_100BD75A:
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BD760(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6)
{
	enum{
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg6]
	SUB ESP, 0x04
	MOV WORD PTR SS:[ESP+r+0x2],0x0000
	MOV ECX,DWORD PTR [ESP+arg4+0x4]
	PUSH EBX
	PUSH ESI
	MOV BYTE PTR [EAX],0x00
	CMP WORD PTR DS:[ECX+0x06],0x00
	PUSH EDI
	PUSH EBP
	JLE_LONG(offset [LEGO1_text.mBC845_loc_100BD845])
	MOV ESI,DWORD PTR [ESP+arg1+0x14]
	MOV EDI,DWORD PTR [ESP+arg2+0x14]
	MOV EBX,DWORD PTR [ESP+arg3+0x14]
	MOV EBP,DWORD PTR [ESP+arg5+0x14]
	JMP_LONG(offset [LEGO1_text.mBC794_loc_100BD794])
}
}

__declspec(naked) DWORD LEGO1_sub_100BD880(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	MOV ECX,DWORD PTR [ESP+arg1]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.mBC8A0_sub_100BD8A0])
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BD8A0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	PUSH EBX
	MOV BX,WORD PTR DS:[EAX]
	PUSH ESI
	XOR SI, SI
	PUSH EDI
	DEC BX
	PUSH EBP
	LEA EDI,DWORD PTR [EAX+0x02]
	JS loc_100BD8EB
loc_100BD8B5:
	MOVZX EAX,BYTE PTR DS:[EDI]
	MOVZX EBP,BYTE PTR DS:[EDI+0x01]
	ADD SI, AX
	INC EDI
	INC EDI
	TEST BP, BP
	JNZ loc_100BD8CC
	MOV BP, 0x0100
loc_100BD8CC:
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	PUSH EBP
	PUSH ESI
	PUSH EDI
	ADD SI, BP
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mBC8F0_sub_100BD8F0])
	MOVSX EAX,BP
	ADD ESP, 0x10
	LEA ECX,DWORD PTR [EAX*2+EAX]
	ADD EDI, ECX
	DEC BX
	JNS loc_100BD8B5
loc_100BD8EB:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BD8F0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	MOV DX,WORD PTR SS:[ESP+arg4]
	PUSH ESI
	MOVSX ECX,WORD PTR [ESP+arg3+0x4]
	SHL ECX, 0x02
	MOV EAX,DWORD PTR [ESP+arg1+0x4]
	ADD ECX,DWORD PTR [EAX]
	LEA ESI,DWORD PTR [EAX+ECX]
	MOV AX, DX
	DEC DX
	TEST AX, AX
	JZ loc_100BD936
	MOV EAX,DWORD PTR [ESP+arg2+0x4]
loc_100BD915:
	MOV CL,BYTE PTR [EAX]
	ADD ESI, 0x04
	ADD EAX, 0x03
	MOV BYTE PTR [ESI-0x02],CL
	MOV CL,BYTE PTR [EAX-0x02]
	MOV BYTE PTR [ESI-0x03],CL
	MOV CL,BYTE PTR [EAX-0x01]
	MOV BYTE PTR [ESI-0x04],CL
	MOV CX, DX
	DEC DX
	TEST CX, CX
	JNZ loc_100BD915
loc_100BD936:
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BD940(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	MOV ECX,DWORD PTR [ESP+arg1]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.mBC8A0_sub_100BD8A0])
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BD960(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg4]
	SUB ESP, 0x08
	MOV DX,WORD PTR DS:[EAX+0x08]
	PUSH EBX
	MOV ECX,DWORD PTR [ESP+arg3+0xC]
	PUSH ESI
	PUSH EDI
	PUSH EBP
	MOV DI,WORD PTR DS:[EAX+0x0A]
	MOV EAX,DWORD PTR [ESP+arg1+0x18]
	MOV ESI,DWORD PTR [EAX+0x04]
	MOVSX EAX,DI
	ADD ESI, 0x03
	DEC EAX
	AND ESI, -0x04
	IMUL ESI,EAX
	ADD ESI,DWORD PTR [ESP+arg2+0x18]
	DEC DI
	MOV WORD PTR SS:[ESP+var_4+0x16],DI
	JS loc_100BD9FC
	MOVSX EAX,DX
	MOV DWORD PTR [ESP+var_4+0x18],EAX
loc_100BD99F:
	XOR DI, DI
	INC ECX
	TEST DX, DX
	JLE loc_100BD9E2
loc_100BD9A8:
	MOV AL,BYTE PTR [ECX]
	INC ECX
	TEST AL, AL
	JL loc_100BD9C2
	JLE loc_100BD9BF
	MOVSX BP,AL
loc_100BD9B5:
	MOV BL,BYTE PTR [ECX]
	INC ESI
	DEC BP
	MOV BYTE PTR [ESI-0x01],BL
	JNZ loc_100BD9B5
loc_100BD9BF:
	INC ECX
	JMP loc_100BD9D6
loc_100BD9C2:
	NEG AL
	TEST AL, AL
	JLE loc_100BD9D6
	MOVSX BP,AL
loc_100BD9CC:
	MOV BL,BYTE PTR [ECX]
	INC ECX
	MOV BYTE PTR [ESI],BL
	INC ESI
	DEC BP
	JNZ loc_100BD9CC
loc_100BD9D6:
	MOVSX AX,AL
	ADD DI, AX
	CMP DX, DI
	JG loc_100BD9A8
loc_100BD9E2:
	MOV EAX,DWORD PTR [ESP+arg1+0x18]
	MOV EAX,DWORD PTR [EAX+0x04]
	ADD EAX, 0x03
	AND EAX, -0x04
	ADD EAX,DWORD PTR [ESP+var_4+0x18]
	SUB ESI, EAX
	DEC WORD PTR SS:[ESP+var_4+0x16]
	JNS loc_100BD99F
loc_100BD9FC:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BDA10(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_4 = -0x4,
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg3]
	SUB ESP, 0x04
	MOV EAX,DWORD PTR [ESP+arg4+0x4]
	PUSH EBX
	MOV AX,WORD PTR DS:[EAX+0x0A]
	PUSH ESI
	SUB AX,WORD PTR DS:[ECX]
	PUSH EDI
	DEC AX
	PUSH EBP
	MOV WORD PTR SS:[ESP+r+0x12],AX
	LEA ESI,DWORD PTR [ECX+0x04]
	MOV AX,WORD PTR DS:[ECX+0x02]
	DEC AX
	MOV WORD PTR SS:[ESP+var_4+0x14],AX
	JS loc_100BDAB5
loc_100BDA3D:
	XOR DI, DI
	MOV BL,BYTE PTR [ESI]
	INC ESI
	TEST BL, BL
	JZ loc_100BDAA9
loc_100BDA47:
	MOVZX EAX,BYTE PTR DS:[ESI]
	ADD DI, AX
	INC ESI
	MOV AL,BYTE PTR [ESI]
	INC ESI
	TEST AL, AL
	JGE loc_100BDA7D
	MOV ECX, ESI
	MOV EDX,DWORD PTR [ESP+arg2+0x14]
	NEG AL
	MOVSX BP,AL
	INC ESI
	PUSH EBP
	MOV AL,BYTE PTR [ECX]
	MOV ECX,DWORD PTR [ESP+r+0x16]
	PUSH EAX
	PUSH ECX
	MOV EAX,DWORD PTR [ESP+arg1+0x20]
	PUSH EDI
	PUSH EDX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mBC680_sub_100BD680])
	ADD ESP, 0x18
	JMP loc_100BDAA0
loc_100BDA7D:
	MOV ECX,DWORD PTR [ESP+arg2+0x14]
	MOV EDX,DWORD PTR [ESP+arg1+0x14]
	MOVSX BP,AL
	MOV EAX,DWORD PTR [ESP+r+0x12]
	PUSH EBP
	PUSH ESI
	PUSH EAX
	PUSH EDI
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.mBC580_sub_100BD580])
	MOVSX ECX,BP
	ADD ESP, 0x18
	ADD ESI, ECX
loc_100BDAA0:
	ADD DI, BP
	DEC BL
	TEST BL, BL
	JNZ loc_100BDA47
loc_100BDAA9:
	DEC WORD PTR SS:[ESP+r+0x12]
	DEC WORD PTR SS:[ESP+var_4+0x14]
	JNS loc_100BDA3D
loc_100BDAB5:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BDAC0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg4]
	SUB ESP, 0x08
	MOV AX,WORD PTR DS:[EDX+0x08]
	PUSH EBX
	DEC AX
	PUSH ESI
	MOV WORD PTR SS:[ESP+var_8+0x10],AX
	PUSH EDI
	MOV SI,WORD PTR DS:[EDX+0x0A]
	PUSH EBP
	DEC SI
	MOV ECX,DWORD PTR [ESP+arg3+0x18]
	MOV BX,WORD PTR DS:[ECX]
	ADD ECX, 0x02
	MOV WORD PTR SS:[ESP+var_4+0x16],BX
	MOV DWORD PTR [ESP+var_4+0x18],ECX
loc_100BDAEF:
	MOV EAX,DWORD PTR [ESP+var_4+0x18]
	MOV BX,WORD PTR DS:[EAX]
	ADD DWORD PTR [ESP+var_4+0x18],0x02
	TEST BX, BX
	JGE loc_100BDB49
	TEST BH,0x40
	JZ loc_100BDB0A
	ADD SI, BX
	JMP loc_100BDAEF
loc_100BDB0A:
	MOV EAX,DWORD PTR [ESP+var_8+0x18]
	PUSH EBX
	MOV ECX,DWORD PTR [ESP+arg2+0x1C]
	PUSH ESI
	MOV EDX,DWORD PTR [ESP+arg1+0x20]
	PUSH EAX
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.mBC530_sub_100BD530])
	MOV ECX,DWORD PTR [ESP+var_4+0x2C]
	ADD ESP, 0x14
	MOV BX,WORD PTR DS:[ECX]
	ADD DWORD PTR [ESP+var_4+0x18],0x02
	TEST BX, BX
	JNZ loc_100BDB49
	DEC SI
	DEC WORD PTR SS:[ESP+var_4+0x16]
	CMP WORD PTR SS:[ESP+var_4+0x16],0x00
	JLE FAR loc_100BDBF5
	JMP loc_100BDAEF
loc_100BDB49:
	XOR DI, DI
loc_100BDB4C:
	MOV ECX,DWORD PTR [ESP+var_4+0x18]
	MOVZX EAX,BYTE PTR DS:[ECX]
	ADD DI, AX
	INC DWORD PTR [ESP+var_4+0x18]
	MOV ECX,DWORD PTR [ESP+var_4+0x18]
	MOVSX EBP,BYTE PTR DS:[ECX]
	ADD BP, BP
	INC DWORD PTR [ESP+var_4+0x18]
	TEST BP, BP
	JL loc_100BDBAB
	MOV EAX,DWORD PTR [ESP+var_4+0x18]
	PUSH EBP
	MOV ECX,DWORD PTR [ESP+arg2+0x1C]
	PUSH EAX
	MOV EDX,DWORD PTR [ESP+arg1+0x20]
	PUSH ESI
	PUSH EDI
	PUSH ECX
	ADD DI, BP
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.mBC580_sub_100BD580])
	MOVSX ECX,BP
	ADD DWORD PTR [ESP+var_4+0x30],ECX
	ADD ESP, 0x18
	DEC BX
	JNZ loc_100BDB4C
	DEC SI
	DEC WORD PTR SS:[ESP+var_4+0x16]
	CMP WORD PTR SS:[ESP+var_4+0x16],0x00
	JLE loc_100BDBF5
	JMP FAR loc_100BDAEF
loc_100BDBAB:
	MOV EAX,DWORD PTR [ESP+var_4+0x18]
	MOV EDX,DWORD PTR [ESP+arg2+0x18]
	NEG BP
	ADD DWORD PTR [ESP+var_4+0x18],0x02
	MOV CX, BP
	SAR CX, 0x01
	MOV AX,WORD PTR DS:[EAX]
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+arg1+0x1C]
	PUSH EAX
	PUSH ESI
	PUSH EDI
	ADD DI, BP
	PUSH EDX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.mBC6E0_sub_100BD6E0])
	ADD ESP, 0x18
	DEC BX
	JNZ FAR loc_100BDB4C
	DEC SI
	DEC WORD PTR SS:[ESP+var_4+0x16]
	CMP WORD PTR SS:[ESP+var_4+0x16],0x00
	JG FAR loc_100BDAEF
loc_100BDBF5:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BDC00(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg4 = 0x10,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg4]
	SUB ESP, 0x08
	MOV CX,WORD PTR DS:[EAX+0x08]
	PUSH EBX
	MOV WORD PTR SS:[ESP+var_4+0xA],CX
	PUSH ESI
	PUSH EDI
	XOR ECX, ECX
	MOV BYTE PTR [ESP+var_4+0x11],CL
	PUSH EBP
	MOV BP,WORD PTR DS:[EAX+0x0A]
	MOV BYTE PTR [ESP+var_8+0x18],CL
	DEC BP
	JS loc_100BDC7C
	MOVSX EAX,WORD PTR [ESP+var_4+0x16]
	MOV SI,WORD PTR SS:[ESP+var_4+0x16]
	MOV EDI,DWORD PTR [ESP+arg1+0x18]
	CDQ
	AND SI, 0x01
	SUB EAX, EDX
	SAR EAX, 0x01
	MOV EBX,DWORD PTR [ESP+arg2+0x18]
	MOV WORD PTR SS:[ESP+var_4+0x18],AX
loc_100BDC47:
	MOV EAX,DWORD PTR [ESP+var_4+0x18]
	MOV ECX,DWORD PTR [ESP+var_8+0x18]
	PUSH EAX
	PUSH ECX
	PUSH EBP
	PUSH 0x00
	PUSH EBX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.mBC6E0_sub_100BD6E0])
	ADD ESP, 0x18
	TEST SI, SI
	JZ loc_100BDC78
	MOV AX,WORD PTR SS:[ESP+var_4+0x16]
	PUSH 0x00
	DEC AX
	PUSH EBP
	PUSH EAX
	PUSH EBX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.mBC530_sub_100BD530])
	ADD ESP, 0x14
loc_100BDC78:
	DEC BP
	JNS loc_100BDC47
loc_100BDC7C:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BDC90(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg4]
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	MOV BX,WORD PTR DS:[EAX+0x0A]
	PUSH EDI
	MOV DI,WORD PTR DS:[EAX+0x08]
	PUSH EBP
	DEC BX
	JS loc_100BDCD1
	MOV ESI,DWORD PTR [ESP+arg1+0x14]
	MOV EBP,DWORD PTR [ESP+arg3+0x14]
	MOVSX EAX,DI
	MOV DWORD PTR [ESP+var_4+0x14],EAX
loc_100BDCB6:
	MOV EAX,DWORD PTR [ESP+arg2+0x14]
	PUSH EDI
	PUSH EBP
	PUSH EBX
	PUSH 0x00
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.mBC580_sub_100BD580])
	ADD EBP,DWORD PTR [ESP+var_4+0x2C]
	ADD ESP, 0x18
	DEC BX
	JNS loc_100BDCB6
loc_100BDCD1:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BDCE0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg4]
	CMP WORD PTR DS:[ECX+0x04],0xF1FA
	JNZ loc_100BDD0D
	MOV EAX,DWORD PTR [ESP+arg5]
	LEA EDX,DWORD PTR [ECX+0x10]
	PUSH EAX
	PUSH EDX
	MOV EAX,DWORD PTR [ESP+arg2+0x8]
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+arg3+0xC]
	MOV EDX,DWORD PTR [ESP+arg1+0xC]
	PUSH ECX
	PUSH EAX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.mBC760_sub_100BD760])
	ADD ESP, 0x18
loc_100BDD0D:
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BDD10(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV WORD PTR DS:[ECX+0x0C],0x0000
	MOV EAX,DWORD PTR [ESP+arg1]
	MOV DWORD PTR [ECX],EAX
	MOV EAX,DWORD PTR [ESP+arg2]
	MOV DWORD PTR [ECX+0x04],EAX
	NEG EAX
	MOV DWORD PTR [ECX+0x08],EAX
	MOV EAX, ECX
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_100BDD30()
{
	enum{
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBCDCB_proc_100BDDCB]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m46D8_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
loc_100BDD5C:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	CMP DWORD PTR [EAX+0x10],0x00
	JZ loc_100BDD9D
	MOV ECX,DWORD PTR [EAX+0x0C]
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	MOV ESI,DWORD PTR [EAX+0x08]
	LEA EDX,DWORD PTR [EAX+0x04]
	MOV EAX,DWORD PTR [EAX]
	MOV ECX,DWORD PTR [EDX]
	MOV DWORD PTR [ECX],EAX
	MOV ECX,DWORD PTR [EDX]
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	PUSH EAX
	MOV EDX,DWORD PTR [EAX]
	MOV DWORD PTR [EDX+0x04],ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	PUSH ESI
	DEC DWORD PTR [ECX+0x10]
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	JMP loc_100BDD5C
loc_100BDD9D:
	MOV BYTE PTR [EBP+var_8+0x4],0x00
	CALL_LONG(offset [LEGO1_text.mBCDC0_sub_100BDDC0])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mBCDD5_sub_100BDDD5])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	POP ESI
	MOV DWORD PTR FS:[0x00000000], EAX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BDDC0()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x08
	JMP_LONG(offset [LEGO1_text.m59530_loc_1005A530])
}
}

__declspec(naked) DWORD LEGO1_sub_100BDDD5()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100BE050()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBD0AA_proc_100BE0AA]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	XOR EAX, EAX
	MOV ECX, 0xFFFFFFFF
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	MOV WORD PTR DS:[ESI+0x08],AX
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m87F8_ptr]
	MOV DWORD PTR [ESI+0x18],EAX
	MOV DWORD PTR [ESI+0x0C],ECX
	MOV DWORD PTR [ESI+0x10],EAX
	MOV DWORD PTR [ESI+0x14],EAX
	MOV EAX, ESI
	MOV DWORD PTR [EBP+var_8+0x4],ECX
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP ESI
	MOV DWORD PTR FS:[0x00000000],ECX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_loc_100BE170()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBD1C6_proc_100BE1C6]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m87F8_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	TEST BYTE PTR [ECX+0x08],0x01
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	JZ loc_100BE1AD
	MOV ECX,DWORD PTR [ECX+0x18]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100BE1AD:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mBD1D0_sub_100BE1D0])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BE1D0()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100BE1E0()
{
__asm{
	MOV EAX, 0x0000000E
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BE1F0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBD259_proc_100BE259]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.mB74C0_sub_100B84C0])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	LEA ECX,DWORD PTR [ESI+0x2C]
	CALL_LONG(offset [LEGO1_text.mBDC70___0MxVideoParam__QAE_XZ])
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	MOV ECX, ESI
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8810_ptr]
	CALL_LONG(offset [LEGO1_text.mBD320_sub_100BE320])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV EAX, ESI
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_loc_100BE2A0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBD2FF_proc_100BE2FF]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m8810_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	PUSH 0x01
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	CALL_LONG(offset [LEGO1_text.mBD340_sub_100BE340])
	MOV BYTE PTR [EBP+var_8+0x4],0x00
	CALL_LONG(offset [LEGO1_text.mBD2F4_sub_100BE2F4])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mBD309_sub_100BE309])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BE2F4()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x2C
	JMP_LONG(offset [LEGO1_text.mBDD50___1MxVideoParam__QAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100BE309()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7560_sub_100B8560])
}
}

__declspec(naked) DWORD LEGO1_sub_100BE320()
{
__asm{
	XOR EAX, EAX
	MOV DWORD PTR [ECX+0x50],EAX
	MOV DWORD PTR [ECX+0x54],EAX
	MOV DWORD PTR [ECX+0x58],EAX
	MOV DWORD PTR [ECX+0x5C],EAX
	MOV DWORD PTR [ECX+0x3C],EAX
	MOV BYTE PTR [ECX+0x60],AL
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BE340(DWORD arg1)
{
	enum{
		r = 0x0,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV ECX,DWORD PTR [ECX+0x0C]
	TEST ECX, ECX
	JZ loc_100BE360
	CALL_LONG(offset [LEGO1_text.mBE670_sub_100BF670])
	MOV ECX,DWORD PTR [ESI+0x0C]
	TEST ECX, ECX
	JZ loc_100BE36D
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x04])
	JMP loc_100BE36D
loc_100BE360:
	CALL_LONG(offset [LEGO1_text.mABEC0__TickleManager__YAPAVMxTickleManager__XZ])
	PUSH ESI
	MOV EDX,DWORD PTR [EAX]
	MOV ECX, EAX
	CALL_LONG(DWORD PTR [EDX+0x18])
loc_100BE36D:
	LEA EDI,DWORD PTR [ESI+0x10]
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mB5D80_sub_100B6D80])
	MOV ECX,DWORD PTR [ESI+0x58]
	TEST ECX, ECX
	JZ loc_100BE384
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
loc_100BE384:
	MOV ECX,DWORD PTR [ESI+0x5C]
	TEST ECX, ECX
	JZ loc_100BE391
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
loc_100BE391:
	MOV ECX,DWORD PTR [ESI+0x3C]
	TEST ECX, ECX
	JZ loc_100BE39E
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
loc_100BE39E:
	CMP BYTE PTR [ESI+0x60],0x00
	JZ loc_100BE3BE
	MOV EAX,DWORD PTR [ESI+0x50]
	TEST EAX, EAX
	JZ loc_100BE3B1
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
loc_100BE3B1:
	MOV EAX,DWORD PTR [ESI+0x54]
	TEST EAX, EAX
	JZ loc_100BE3BE
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
loc_100BE3BE:
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mBD320_sub_100BE320])
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mB5DE0_sub_100B6DE0])
	CMP BYTE PTR [ESP+r+0xC],0x00
	JNZ loc_100BE3DA
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB7710_sub_100B8710])
loc_100BE3DA:
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100BE3E0()
{
__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV ECX,DWORD PTR [ECX+0x5C]
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x20])
	TEST AL, AL
	JNZ loc_100BE43B
	MOV ECX,DWORD PTR [ESI+0x5C]
	MOV EDI,DWORD PTR [ESI+0x2C]
	MOV EAX,DWORD PTR [ECX+0x0C]
	ADD ECX, 0x0C
	CMP EDI, EAX
	JG loc_100BE403
	MOV EDI, EAX
loc_100BE403:
	MOV EDX,DWORD PTR [ECX+0x04]
	MOV EAX,DWORD PTR [ESI+0x30]
	CMP EDX, EAX
	JG loc_100BE40F
	MOV EDX, EAX
loc_100BE40F:
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV EBX,DWORD PTR [ESI+0x34]
	CMP EAX, EBX
	JL loc_100BE41B
	MOV EAX, EBX
loc_100BE41B:
	MOV EBX,DWORD PTR [ESI+0x38]
	MOV ECX,DWORD PTR [ECX+0x0C]
	CMP EBX, ECX
	JL loc_100BE427
	MOV EBX, ECX
loc_100BE427:
	MOV ECX,DWORD PTR [ESI+0x58]
	SUB EBX, EDX
	INC EBX
	SUB EAX, EDI
	PUSH EBX
	INC EAX
	PUSH EAX
	MOV EBX,DWORD PTR [ECX]
	PUSH EDX
	PUSH EDI
	PUSH EDX
	PUSH EDI
	CALL_LONG(DWORD PTR [EBX+0x38])
loc_100BE43B:
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BE440()
{
	enum{
		var_38 = -0x38,
		var_34 = -0x34,
		var_30 = -0x30,
		var_28 = -0x28,
		var_24 = -0x24,
		var_20 = -0x20,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBD5E0_proc_100BE5E0]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x28
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI,DWORD PTR [ECX+0x08]
	CMP DWORD PTR [EDI+0x08],0x01
	JBE FAR loc_100BE598
	LEA ECX,DWORD PTR [EBP+var_30+0x4]
	XOR EBX, EBX
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	MOV EAX, 0xFFFFFFFF
	MOV DWORD PTR [EBP+var_8+0x4],EBX
	MOV DWORD PTR [EBP+var_28+0x4],EDI
	MOV DWORD PTR [EBP+var_24+0x4],EBX
	MOV DWORD PTR [EBP+var_30+0x4],offset [LEGO1_rdata.m2488_ptr]
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	MOV DWORD PTR [EBP+var_30+0x4],offset [LEGO1_rdata.m2530_ptr]
	MOV DWORD PTR [EBP+var_8+0x4],0x00000002
	MOV DWORD PTR [EBP+var_30+0x4],offset [LEGO1_rdata.m2470_ptr]
	MOV DWORD PTR [EBP+var_8+0x4],0x00000003
	MOV EDI,DWORD PTR [ESI+0x08]
	LEA ECX,DWORD PTR [EBP+var_20+0x4]
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	MOV BYTE PTR [EBP+var_8+0x4],0x04
	MOV DWORD PTR [EBP+var_18+0x4],EDI
	MOV DWORD PTR [EBP+var_14+0x4],EBX
	MOV DWORD PTR [EBP+var_20+0x4],offset [LEGO1_rdata.m2488_ptr]
	MOV BYTE PTR [EBP+var_8+0x4],0x05
	MOV DWORD PTR [EBP+var_20+0x4],offset [LEGO1_rdata.m2530_ptr]
	MOV BYTE PTR [EBP+var_8+0x4],0x06
	MOV DWORD PTR [EBP+var_20+0x4],offset [LEGO1_rdata.m2470_ptr]
	MOV EAX,DWORD PTR [ESI+0x08]
	MOV BYTE PTR [EBP+var_8+0x4],0x07
	MOV ECX,DWORD PTR [EAX+0x08]
	DEC ECX
	JZ FAR loc_100BE583
loc_100BE4F2:
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV DWORD PTR [EBP+var_24+0x4],EBX
	TEST ECX, ECX
	MOV EDX,DWORD PTR [EAX+0x10]
	MOV AL, 0x01
	MOV DWORD PTR [EBP+var_14+0x4],EDX
	MOV EDX, ECX
	JZ loc_100BE578
loc_100BE506:
	CMP DWORD PTR [EBP+var_24+0x4],EBX
	JNZ loc_100BE513
	MOV ESI,DWORD PTR [EBP+var_28+0x4]
	MOV EDI,DWORD PTR [ESI+0x10]
	JMP loc_100BE519
loc_100BE513:
	MOV ESI,DWORD PTR [EBP+var_24+0x4]
	MOV EDI,DWORD PTR [ESI+0x08]
loc_100BE519:
	MOV DWORD PTR [EBP+var_24+0x4],EDI
	CMP DWORD PTR [EBP+var_24+0x4],EBX
	JZ loc_100BE529
	MOV ESI,DWORD PTR [EBP+var_24+0x4]
	MOV EDI,DWORD PTR [ESI]
	MOV DWORD PTR [EBP+var_34+0x4],EDI
loc_100BE529:
	CMP DWORD PTR [EBP+var_14+0x4],EBX
	JNZ loc_100BE536
	MOV ESI,DWORD PTR [EBP+var_18+0x4]
	MOV EDI,DWORD PTR [ESI+0x10]
	JMP loc_100BE53C
loc_100BE536:
	MOV ESI,DWORD PTR [EBP+var_14+0x4]
	MOV EDI,DWORD PTR [ESI+0x08]
loc_100BE53C:
	MOV DWORD PTR [EBP+var_14+0x4],EDI
	CMP DWORD PTR [EBP+var_14+0x4],EBX
	JZ loc_100BE54C
	MOV ESI,DWORD PTR [EBP+var_14+0x4]
	MOV EDI,DWORD PTR [ESI]
	MOV DWORD PTR [EBP+var_38+0x4],EDI
loc_100BE54C:
	MOV ESI,DWORD PTR [EBP+var_38+0x4]
	MOV EDI,DWORD PTR [EBP+var_34+0x4]
	MOV EDI,DWORD PTR [EDI+0x18]
	CMP DWORD PTR [ESI+0x18],EDI
	JLE loc_100BE575
	CMP DWORD PTR [EBP+var_24+0x4],EBX
	JZ loc_100BE566
	MOV EAX, ESI
	MOV ESI,DWORD PTR [EBP+var_24+0x4]
	MOV DWORD PTR [ESI],EAX
loc_100BE566:
	CMP DWORD PTR [EBP+var_14+0x4],EBX
	JZ loc_100BE573
	MOV EAX,DWORD PTR [EBP+var_34+0x4]
	MOV ESI,DWORD PTR [EBP+var_14+0x4]
	MOV DWORD PTR [ESI],EAX
loc_100BE573:
	XOR AL, AL
loc_100BE575:
	DEC EDX
	JNZ loc_100BE506
loc_100BE578:
	TEST AL, AL
	JNZ loc_100BE583
	DEC ECX
	JNZ FAR loc_100BE4F2
loc_100BE583:
	MOV BYTE PTR [EBP+var_8+0x4],0x03
	CALL_LONG(offset [LEGO1_text.mBD5C0_sub_100BE5C0])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mBD5EA_sub_100BE5EA])
loc_100BE598:
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	POP EDI
	MOV DWORD PTR FS:[0x00000000], EAX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BE5C0()
{
	enum{
		arg1217217 = 0x4A4B04,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217217-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m1E0C0_loc_1001F0C0])
}
}

__declspec(naked) DWORD LEGO1_sub_100BE5EA()
{
	enum{
		arg1217213 = 0x4A4AF4,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217213-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m1E0C0_loc_1001F0C0])
}
}

__declspec(naked) DWORD LEGO1_sub_100BE600(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_18 = -0x18,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBD800_proc_100BE800]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	MOV BYTE PTR [EBP+var_10+0x3],0x00
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EBX, 0xFFFFFFFF
	MOV BYTE PTR [ESI+0x60],0x00
	CALL_LONG(offset [LEGO1_text.mB75E0_sub_100B85E0])
	TEST EAX, EAX
	JNZ_LONG(offset [LEGO1_text.mBD7C5_loc_100BE7C5])
	LEA ECX,DWORD PTR [ESI+0x10]
	CALL_LONG(offset [LEGO1_text.mB5D80_sub_100B6D80])
	MOV EDI,DWORD PTR [EBP+arg1+0x4]
	LEA ECX,DWORD PTR [ESI+0x2C]
	MOV BYTE PTR [EBP+var_10+0x3],0x01
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.mBDDE0___4MxVideoParam__QAEAAV0_ABV0__Z])
	PUSH 0x1C
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	TEST EAX, EAX
	JZ loc_100BE673
	MOV ECX, EAX
	CALL_LONG(offset [LEGO1_text.mC21C0_sub_100C31C0])
	JMP loc_100BE675
loc_100BE673:
	XOR EAX, EAX
loc_100BE675:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV DWORD PTR [ESI+0x5C],EAX
	TEST EAX, EAX
	JZ_LONG(offset [LEGO1_text.mBD7C5_loc_100BE7C5])
	MOV EAX,DWORD PTR [EBP+arg2+0x4]
	MOV ECX,DWORD PTR [EBP+arg3+0x4]
	MOV DWORD PTR [ESI+0x50],EAX
	MOV DWORD PTR [ESI+0x54],ECX
	MOV ECX,DWORD PTR [EDI+0x10]
	TEST ECX, ECX
	JNZ_LONG(offset [LEGO1_text.mBD6E3_loc_100BE6E3])
	PUSH 0x00000414
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	MOV EDI, EAX
	MOV EAX, 0x00000000
	TEST EDI, EDI
	JZ loc_100BE6C3
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mBDE30_sub_100BEE30])
loc_100BE6C3:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV DWORD PTR [ESI+0x3C],EAX
	TEST EAX, EAX
	JNZ_LONG(offset [LEGO1_text.mBD6F3_loc_100BE6F3])
	JMP_LONG(offset [LEGO1_text.mBD7C5_loc_100BE7C5])
}
}

__declspec(naked) DWORD LEGO1_proc_100BE6D6()
{
	enum{
		arg1217219 = 0x4A4B0C,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217219-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_loc_100BE6E3()
{
__asm{
	CALL_LONG(offset [LEGO1_text.mBE0B0_sub_100BF0B0])
	MOV DWORD PTR [ESI+0x3C],EAX
	TEST EAX, EAX
	JZ_LONG(offset [LEGO1_text.mBD7C5_loc_100BE7C5])
	JMP_LONG(offset [LEGO1_text.mBD6F3_loc_100BE6F3])
}
}

__declspec(naked) DWORD LEGO1_loc_100BE6F3()
{
	enum{
		arg1217219 = 0x4A4B0C,
		arg1217223 = 0x4A4B1C,
		arg1217229 = 0x4A4B34,
		arg1217230 = 0x4A4B38,
		arg1217231 = 0x4A4B3C,
		arg1217232 = 0x4A4B40,
		arg1217233 = 0x4A4B44,
	};

__asm{
	PUSH 0x000000AC
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+arg1217219-0x4A4B20],EAX
	ADD ESP, 0x04
	MOV EDI, EAX
	MOV ECX, 0x00000000
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0x00000002
	TEST EDI, EDI
	JZ loc_100BE71E
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mB9500_sub_100BA500])
	MOV ECX, EAX
loc_100BE71E:
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0xFFFFFFFF
	MOV DWORD PTR [ESI+0x58],ECX
	TEST ECX, ECX
	JZ_LONG(offset [LEGO1_text.mBD7C5_loc_100BE7C5])
	MOV EAX,DWORD PTR [EBP+arg1217231-0x4A4B20]
	MOV EDX,DWORD PTR [EBP+arg1217230-0x4A4B20]
	PUSH EAX
	MOV EDI,DWORD PTR [EBP+arg1217229-0x4A4B20]
	PUSH EDX
	LEA EAX,DWORD PTR [ESI+0x2C]
	PUSH EDI
	PUSH EAX
	MOV EDI,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EDI+0x14])
	TEST EAX, EAX
	JNZ_LONG(offset [LEGO1_text.mBD7C5_loc_100BE7C5])
	MOV ECX,DWORD PTR [ESI+0x58]
	MOV EAX,DWORD PTR [ESI+0x3C]
	PUSH EAX
	MOV EDI,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EDI+0x20])
	CMP BYTE PTR [EBP+arg1217233-0x4A4B20],0x00
	JZ_LONG(offset [LEGO1_text.mBD7B2_loc_100BE7B2])
	PUSH 0x20
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+arg1217219-0x4A4B20],EAX
	ADD ESP, 0x04
	MOV EDI, EAX
	MOV ECX, 0x00000000
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0x00000003
	TEST EDI, EDI
	JZ loc_100BE788
	MOV EAX,DWORD PTR [EBP+arg1217232-0x4A4B20]
	MOV ECX, EDI
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.mB7BB0_sub_100B8BB0])
	MOV ECX, EAX
loc_100BE788:
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0xFFFFFFFF
	MOV DWORD PTR [ESI+0x0C],ECX
	TEST ECX, ECX
	JZ_LONG(offset [LEGO1_text.mBD7C5_loc_100BE7C5])
	PUSH 0x00
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.mBE610_sub_100BF610])
	TEST EAX, EAX
	JZ_LONG(offset [LEGO1_text.mBD7C3_loc_100BE7C3])
	JMP_LONG(offset [LEGO1_text.mBD7C5_loc_100BE7C5])
}
}

__declspec(naked) DWORD LEGO1_proc_100BE7A5()
{
	enum{
		arg1217219 = 0x4A4B0C,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217219-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_loc_100BE7B2()
{
	enum{
		arg1217232 = 0x4A4B40,
	};

__asm{
	CALL_LONG(offset [LEGO1_text.mABEC0__TickleManager__YAPAVMxTickleManager__XZ])
	MOV EBX,DWORD PTR [EAX]
	MOV ECX, EAX
	MOV EAX,DWORD PTR [EBP+arg1217232-0x4A4B20]
	PUSH EAX
	PUSH ESI
	CALL_LONG(DWORD PTR [EBX+0x14])
	JMP_LONG(offset [LEGO1_text.mBD7C3_loc_100BE7C3])
}
}

__declspec(naked) DWORD LEGO1_loc_100BE7C3()
{
__asm{
	XOR EBX, EBX
	JMP_LONG(offset [LEGO1_text.mBD7C5_loc_100BE7C5])
}
}

__declspec(naked) DWORD __stdcall LEGO1_loc_100BE7C5(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg1217221 = 0x4A4B14,
	};

__asm{
	TEST EBX, EBX
	JZ loc_100BE7D0
	MOV EAX,DWORD PTR [ESI]
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [EAX+0x18])
loc_100BE7D0:
	CMP BYTE PTR [EBP+arg1217221-0x4A4B21],0x00
	JZ loc_100BE7DE
	LEA ECX,DWORD PTR [ESI+0x10]
	CALL_LONG(offset [LEGO1_text.mB5DE0_sub_100B6DE0])
loc_100BE7DE:
	MOV EAX, EBX
	MOV ECX,DWORD PTR [EBP+arg1217221-0x4A4B20]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP EDI
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0020
}
}

__declspec(naked) DWORD LEGO1_proc_100BE7F3()
{
	enum{
		arg1217219 = 0x4A4B0C,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217219-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BEA50()
{
__asm{
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.mBD340_sub_100BE340])
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1__InvalidateRect_MxVideoManager__QAEXAAVMxRect32___Z(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	LEA EDI,DWORD PTR [ECX+0x10]
	MOV ESI, ECX
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mB5D80_sub_100B6D80])
	MOV ECX,DWORD PTR [ESI+0x5C]
	TEST ECX, ECX
	JZ loc_100BEA7F
	MOV EAX,DWORD PTR [ESP+arg1+0x8]
	MOV ESI,DWORD PTR [ECX]
	PUSH EAX
	CALL_LONG(DWORD PTR [ESI+0x18])
loc_100BEA7F:
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mB5DE0_sub_100B6DE0])
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100BEBBA()
{
	enum{
		arg1217217 = 0x4A4B04,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217217-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m1E0C0_loc_1001F0C0])
}
}

__declspec(naked) DWORD LEGO1_sub_100BEBCC()
{
	enum{
		arg1217215 = 0x4A4AFC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217215-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD __stdcall LEGO1__RealizePalette_MxVideoManager__UAEJPAVMxPalette___Z(DWORD arg1)
{
	enum{
		var_400 = -0x400,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x00000400
	PUSH ESI
	PUSH EDI
	LEA ESI,DWORD PTR [ECX+0x10]
	MOV EDI, ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB5D80_sub_100B6D80])
	MOV ECX,DWORD PTR [ESP+arg1+0x408]
	TEST ECX, ECX
	JZ loc_100BEC28
	CMP DWORD PTR [EDI+0x3C],0x00
	JZ loc_100BEC28
	LEA EAX,DWORD PTR [ESP+var_400+0x408]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mBE150_sub_100BF150])
	LEA EAX,DWORD PTR [ESP+var_400+0x408]
	MOV ECX,DWORD PTR [EDI+0x3C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mBE170_sub_100BF170])
	MOV ECX,DWORD PTR [EDI+0x58]
	MOV EAX,DWORD PTR [EDI+0x3C]
	PUSH EAX
	MOV EDI,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EDI+0x20])
loc_100BEC28:
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB5DE0_sub_100B6DE0])
	XOR EAX, EAX
	POP EDI
	POP ESI
	ADD ESP, 0x00000400
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1___0MxVideoParamFlags__QAE_XZ()
{
__asm{
	MOV AL,BYTE PTR [ECX]
	AND AL, 0xFE
	MOV BYTE PTR [ECX],AL
	AND AL, 0xFD
	MOV BYTE PTR [ECX],AL
	AND AL, 0xFB
	MOV BYTE PTR [ECX],AL
	AND AL, 0xF7
	MOV BYTE PTR [ECX],AL
	AND AL, 0xEF
	MOV BYTE PTR [ECX],AL
	AND AL, 0xDF
	OR BYTE PTR [ECX+0x01],0x02
	MOV BYTE PTR [ECX],AL
	OR AL, 0x40
	MOV BYTE PTR [ECX],AL
	OR AL, 0x80
	MOV BYTE PTR [ECX],AL
	MOV EAX, ECX
	RET
}
}

__declspec(naked) DWORD LEGO1___0MxVideoParam__QAE_XZ()
{
__asm{
	PUSH ESI
	MOV ESI, ECX
	LEA ECX,DWORD PTR [ECX+0x18]
	CALL_LONG(offset [LEGO1_text.mBDC40___0MxVideoParamFlags__QAE_XZ])
	MOV DWORD PTR [ESI+0x08],0x00000280
	MOV DWORD PTR [ESI+0x0C],0x000001E0
	XOR EAX, EAX
	MOV DWORD PTR [ESI],EAX
	MOV DWORD PTR [ESI+0x04],EAX
	MOV DWORD PTR [ESI+0x10],EAX
	MOV DWORD PTR [ESI+0x14],EAX
	MOV DWORD PTR [ESI+0x1C],EAX
	MOV DWORD PTR [ESI+0x20],EAX
	MOV EAX, ESI
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1___0MxVideoParam__QAE_AAVMxRect32__PAVMxPalette__KAAVMxVideoParamFlags___Z(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	PUSH ESI
	PUSH EDI
	LEA EDI,DWORD PTR [ECX+0x18]
	MOV ESI, ECX
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mBDC40___0MxVideoParamFlags__QAE_XZ])
	MOV ECX,DWORD PTR [ESP+arg1+0x8]
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [ESI],EAX
	MOV EDX,DWORD PTR [ECX+0x04]
	MOV DWORD PTR [ESI+0x04],EDX
	MOV EDX,DWORD PTR [ESP+arg2+0x8]
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [ESI+0x08],EAX
	MOV EAX,DWORD PTR [ESP+arg3+0x8]
	MOV ECX,DWORD PTR [ECX+0x0C]
	MOV DWORD PTR [ESI+0x0C],ECX
	MOV DWORD PTR [ESI+0x10],EDX
	MOV ECX,DWORD PTR [ESP+arg4+0x8]
	MOV DWORD PTR [ESI+0x14],EAX
	MOV DX,WORD PTR DS:[ECX]
	XOR EAX, EAX
	MOV WORD PTR DS:[EDI],DX
	MOV DWORD PTR [ESI+0x1C],EAX
	POP EDI
	MOV DWORD PTR [ESI+0x20],EAX
	MOV EAX, ESI
	POP ESI
	RETN 0x0010
}
}

__declspec(naked) DWORD __stdcall LEGO1___0MxVideoParam__QAE_AAV0__Z(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	LEA EDI,DWORD PTR [ECX+0x18]
	MOV ESI, ECX
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mBDC40___0MxVideoParamFlags__QAE_XZ])
	MOV ECX,DWORD PTR [ESP+arg1+0x8]
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [ESI],EAX
	MOV EDX,DWORD PTR [ECX+0x04]
	MOV DWORD PTR [ESI+0x04],EDX
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [ESI+0x08],EAX
	MOV EDX,DWORD PTR [ECX+0x0C]
	MOV DWORD PTR [ESI+0x0C],EDX
	MOV EAX,DWORD PTR [ECX+0x10]
	MOV DWORD PTR [ESI+0x10],EAX
	MOV EDX,DWORD PTR [ECX+0x14]
	MOV DWORD PTR [ESI+0x14],EDX
	MOV AX,WORD PTR DS:[ECX+0x18]
	MOV WORD PTR DS:[EDI],AX
	MOV EDI,DWORD PTR [ECX+0x1C]
	MOV DWORD PTR [ESI+0x20],0x00000000
	MOV DWORD PTR [ESI+0x1C],EDI
	MOV ECX,DWORD PTR [ECX+0x20]
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mBDD70__SetDeviceName_MxVideoParam__QAEXPAD_Z])
	MOV EAX, ESI
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1___1MxVideoParam__QAE_XZ()
{
__asm{
	MOV EAX,DWORD PTR [ECX+0x20]
	TEST EAX, EAX
	JZ loc_100BED60
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100BED60:
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1__SetDeviceName_MxVideoParam__QAEXPAD_Z(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x20]
	PUSH EDI
	MOV EBX, ECX
	TEST EAX, EAX
	JZ loc_100BED85
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100BED85:
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
	TEST ESI, ESI
	JZ loc_100BEDD3
	MOV EDI, ESI
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV EDX, EAX
	MOV DWORD PTR [EBX+0x20],EAX
	TEST EDX, EDX
	JZ loc_100BEDDA
	MOV EDI, ESI
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI, EDX
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_100BEDD3:
	MOV DWORD PTR [EBX+0x20],0x00000000
loc_100BEDDA:
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1___4MxVideoParam__QAEAAV0_ABV0__Z(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	MOV ESI, ECX
	MOV ECX,DWORD PTR [ESP+arg1+0x4]
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [ESI],EAX
	MOV EDX,DWORD PTR [ECX+0x04]
	MOV DWORD PTR [ESI+0x04],EDX
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [ESI+0x08],EAX
	MOV EDX,DWORD PTR [ECX+0x0C]
	MOV DWORD PTR [ESI+0x0C],EDX
	MOV EAX,DWORD PTR [ECX+0x10]
	MOV DWORD PTR [ESI+0x10],EAX
	MOV EDX,DWORD PTR [ECX+0x14]
	MOV DWORD PTR [ESI+0x14],EDX
	MOV AX,WORD PTR DS:[ECX+0x18]
	MOV WORD PTR DS:[ESI+0x18],AX
	MOV EDX,DWORD PTR [ECX+0x1C]
	MOV DWORD PTR [ESI+0x1C],EDX
	MOV ECX,DWORD PTR [ECX+0x20]
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mBDD70__SetDeviceName_MxVideoParam__QAEXPAD_Z])
	MOV EAX, ESI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100BEE30()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBDE99_proc_100BEE99]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	XOR EAX, EAX
	LEA ECX,DWORD PTR [ESI+0x0C]
	PUSH ECX
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	MOV ECX, ESI
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8848_ptr]
	MOV BYTE PTR [ESI+0x0000040C],AL
	MOV DWORD PTR [ESI+0x08],EAX
	CALL_LONG(offset [LEGO1_text.mBE420_sub_100BF420])
	MOV ECX,DWORD PTR [ESI+0x00000240]
	MOV EAX, ESI
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV DWORD PTR [ESI+0x0000040D],ECX
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BEED0(DWORD arg1)
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBDF75_proc_100BEF75]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	LEA EAX,DWORD PTR [ESI+0x0C]
	MOV ECX, ESI
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	PUSH EAX
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8848_ptr]
	MOV BYTE PTR [ESI+0x0000040C],0x00
	MOV DWORD PTR [ESI+0x08],0x00000000
	CALL_LONG(offset [LEGO1_text.mBE390_sub_100BF390])
	MOV EAX, 0x0000000A
	LEA EDX,DWORD PTR [ESI+0x34]
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	ADD ECX, 0x2A
loc_100BEF2B:
	MOV BL,BYTE PTR [ECX]
	ADD EDX, 0x04
	ADD ECX, 0x04
	INC EAX
	MOV BYTE PTR [EDX-0x04],BL
	CMP EAX, 0x000000F6
	MOV BL,BYTE PTR [ECX-0x05]
	MOV BYTE PTR [EDX-0x03],BL
	MOV BL,BYTE PTR [ECX-0x06]
	MOV BYTE PTR [EDX-0x02],BL
	MOV BYTE PTR [EDX-0x01],0x00
	JL loc_100BEF2B
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV EAX,DWORD PTR [ESI+0x00000240]
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	MOV DWORD PTR [ESI+0x0000040D],EAX
	MOV EAX, ESI
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_loc_100BEF90()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBDFE1_proc_100BEFE1]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m8848_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	TEST EAX, EAX
	JZ loc_100BEFC8
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
loc_100BEFC8:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mBDFEB_sub_100BEFEB])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BEFEB()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100BF000()
{
__asm{
	PUSH ESI
	PUSH EDI
	LEA ESI,DWORD PTR [ECX+0x08]
	MOV EDI, ECX
	CMP DWORD PTR [ESI],0x00
	JNZ FAR loc_100BF0A7
	LEA ECX,DWORD PTR [EDI+0x0F]
	MOV EAX, 0x0000000A
loc_100BF018:
	MOV BYTE PTR [ECX],0x80
	ADD ECX, 0x04
	DEC EAX
	JNZ loc_100BF018
	LEA EAX,DWORD PTR [EDI+0x37]
	MOV ECX, 0x0000007E
loc_100BF029:
	MOV BYTE PTR [EAX],0x44
	ADD EAX, 0x04
	DEC ECX
	JNZ loc_100BF029
	LEA ECX,DWORD PTR [EDI+0x0000022F]
	MOV EAX, 0x00000004
loc_100BF03D:
	MOV BYTE PTR [ECX],0x84
	ADD ECX, 0x04
	DEC EAX
	JNZ loc_100BF03D
	LEA ECX,DWORD PTR [EDI+0x00000247]
	MOV EAX, 0x00000068
	MOV BYTE PTR [EDI+0x0000023F],0x84
	MOV BYTE PTR [EDI+0x00000243],0x44
loc_100BF05F:
	MOV BYTE PTR [ECX],0x84
	ADD ECX, 0x04
	DEC EAX
	JNZ loc_100BF05F
	LEA ECX,DWORD PTR [EDI+0x000003E7]
	MOV EAX, 0x0000000A
loc_100BF073:
	MOV BYTE PTR [ECX],0x80
	ADD ECX, 0x04
	DEC EAX
	JNZ loc_100BF073
	CALL_LONG(offset [LEGO1_text.mABF10_sub_100ACF10])
	TEST EAX, EAX
	JZ loc_100BF0A7
	CALL_LONG(offset [LEGO1_text.mABF10_sub_100ACF10])
	CMP DWORD PTR [EAX+0x50],0x00
	JZ loc_100BF0A7
	ADD EDI, 0x0C
	CALL_LONG(offset [LEGO1_text.mABF10_sub_100ACF10])
	MOV EAX,DWORD PTR [EAX+0x50]
	PUSH 0x00
	PUSH ESI
	PUSH EDI
	PUSH 0x04
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x14])
loc_100BF0A7:
	MOV EAX,DWORD PTR [ESI]
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BF0B0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBE12C_proc_100BF12C]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	PUSH 0x00000414
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	ADD ESP, 0x04
	MOV EDI, EAX
	MOV EBX, 0x00000000
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	TEST EDI, EDI
	JZ loc_100BF0FB
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mBDE30_sub_100BEE30])
	MOV EBX, EAX
loc_100BF0FB:
	LEA EAX,DWORD PTR [EBX+0x0C]
	MOV ECX, ESI
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mBE150_sub_100BF150])
	MOV AL,BYTE PTR [ESI+0x0000040C]
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP EDI
	POP ESI
	MOV BYTE PTR [EBX+0x0000040C],AL
	MOV EAX, EBX
	POP EBX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BF150(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	LEA ESI,DWORD PTR [ECX+0x0C]
	MOV EDI,DWORD PTR [ESP+arg1+0x8]
	MOV ECX, 0x00000100
	REP MOVSD
	XOR EAX, EAX
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BF170(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	XOR EBP, EBP
	CMP DWORD PTR [ECX+0x08],EBP
	JZ FAR loc_100BF2BF
	LEA EDX,DWORD PTR [ECX+0x0F]
	MOV EAX, 0x0000000A
loc_100BF187:
	MOV BYTE PTR [EDX],0x80
	ADD EDX, 0x04
	DEC EAX
	JNZ loc_100BF187
	MOV EDX,DWORD PTR [ESP+arg1+0x10]
	LEA EAX,DWORD PTR [ECX+0x37]
	MOV EDI, 0x0000007E
	LEA ESI,DWORD PTR [EDX+0x28]
loc_100BF19F:
	MOV BYTE PTR [EAX],0x44
	ADD ESI, 0x04
	ADD EAX, 0x04
	MOV BL,BYTE PTR [ESI-0x04]
	DEC EDI
	MOV BYTE PTR [EAX-0x07],BL
	MOV BL,BYTE PTR [ESI-0x03]
	MOV BYTE PTR [EAX-0x06],BL
	MOV BL,BYTE PTR [ESI-0x02]
	MOV BYTE PTR [EAX-0x05],BL
	JNZ loc_100BF19F
	LEA EAX,DWORD PTR [EDX+0x00000220]
	LEA ESI,DWORD PTR [ECX+0x0000022F]
	MOV EDI, 0x00000004
loc_100BF1CE:
	MOV BYTE PTR [ESI],0x84
	ADD EAX, 0x04
	ADD ESI, 0x04
	MOV BL,BYTE PTR [EAX-0x04]
	DEC EDI
	MOV BYTE PTR [ESI-0x07],BL
	MOV BL,BYTE PTR [EAX-0x03]
	MOV BYTE PTR [ESI-0x06],BL
	MOV BL,BYTE PTR [EAX-0x02]
	MOV BYTE PTR [ESI-0x05],BL
	JNZ loc_100BF1CE
	CMP BYTE PTR [ECX+0x0000040C],0x00
	JNZ loc_100BF24B
	MOV BYTE PTR [ECX+0x0000023F],0x44
	MOV AL,BYTE PTR [EDX+0x00000230]
	MOV BYTE PTR [ECX+0x0000023C],AL
	MOV BL,BYTE PTR [EDX+0x00000231]
	MOV BYTE PTR [ECX+0x0000023D],BL
	MOV AL,BYTE PTR [EDX+0x00000232]
	MOV BYTE PTR [ECX+0x0000023E],AL
	MOV BYTE PTR [ECX+0x00000243],0x84
	MOV BL,BYTE PTR [EDX+0x00000234]
	MOV BYTE PTR [ECX+0x00000240],BL
	MOV AL,BYTE PTR [EDX+0x00000235]
	MOV BYTE PTR [ECX+0x00000241],AL
	MOV BL,BYTE PTR [EDX+0x00000236]
	MOV BYTE PTR [ECX+0x00000242],BL
loc_100BF24B:
	MOV EAX, 0x0000008E
	CMP EAX, 0x000000F6
	JGE loc_100BF285
	LEA ESI,DWORD PTR [EAX*4+EDX]
	MOV EDI, 0x000000F6
	LEA EDX,DWORD PTR [EAX*4+ECX+0x0F]
	SUB EDI, EAX
	ADD EAX, EDI
loc_100BF267:
	MOV BYTE PTR [EDX],0x84
	ADD ESI, 0x04
	ADD EDX, 0x04
	MOV BL,BYTE PTR [ESI-0x04]
	DEC EDI
	MOV BYTE PTR [EDX-0x07],BL
	MOV BL,BYTE PTR [ESI-0x03]
	MOV BYTE PTR [EDX-0x06],BL
	MOV BL,BYTE PTR [ESI-0x02]
	MOV BYTE PTR [EDX-0x05],BL
	JNZ loc_100BF267
loc_100BF285:
	CMP EAX, 0x00000100
	JGE loc_100BF2A0
	LEA ESI,DWORD PTR [EAX*4+ECX+0x0F]
	MOV EDX, 0x00000100
	SUB EDX, EAX
loc_100BF297:
	MOV BYTE PTR [ESI],0x80
	ADD ESI, 0x04
	DEC EDX
	JNZ loc_100BF297
loc_100BF2A0:
	MOV EAX,DWORD PTR [ECX+0x08]
	ADD ECX, 0x0C
	PUSH ECX
	PUSH 0x00000100
	PUSH 0x00
	MOV EBX,DWORD PTR [EAX]
	PUSH 0x00
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x18])
	TEST EAX, EAX
	JZ loc_100BF2BF
	MOV EBP, 0xFFFFFFFF
loc_100BF2BF:
	MOV EAX, EBP
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BF2D0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	XOR ESI, ESI
	MOV EDI,DWORD PTR [ECX+0x08]
	TEST EDI, EDI
	JZ loc_100BF31F
	MOV EDX,DWORD PTR [ESP+arg1+0x8]
	MOV AL,BYTE PTR [EDX]
	MOV BYTE PTR [ECX+0x00000240],AL
	MOV AL,BYTE PTR [EDX+0x01]
	MOV BYTE PTR [ECX+0x00000241],AL
	MOV DL,BYTE PTR [EDX+0x02]
	MOV BYTE PTR [ECX+0x00000242],DL
	LEA EDX,DWORD PTR [ECX+0x0000040D]
	MOV EAX,DWORD PTR [ECX+0x00000240]
	PUSH EDX
	PUSH 0x01
	MOV DWORD PTR [EDX],EAX
	PUSH 0x0000008D
	PUSH ESI
	PUSH EDI
	MOV EDI,DWORD PTR [EDI]
	CALL_LONG(DWORD PTR [EDI+0x18])
	TEST EAX, EAX
	JZ loc_100BF31F
	MOV ESI, 0xFFFFFFFF
loc_100BF31F:
	MOV EAX, ESI
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1__Detach_MxPalette__QAEXXZ()
{
__asm{
	MOV DWORD PTR [ECX+0x08],0x00000000
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1___8MxPalette__QAEEAAV0__Z(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	XOR EAX, EAX
	MOV EDX,DWORD PTR [ESP+arg1+0x4]
	ADD ECX, 0x0C
	ADD EDX, 0x0C
loc_100BF34D:
	MOV BL,BYTE PTR [EDX]
	CMP BYTE PTR [ECX],BL
	JNZ loc_100BF377
	MOV BL,BYTE PTR [EDX+0x01]
	CMP BYTE PTR [ECX+0x01],BL
	JNZ loc_100BF37D
	MOV BL,BYTE PTR [EDX+0x02]
	CMP BYTE PTR [ECX+0x02],BL
	JNZ loc_100BF383
	ADD EDX, 0x04
	ADD ECX, 0x04
	INC EAX
	CMP EAX, 0x00000100
	JL loc_100BF34D
	MOV AL, 0x01
	POP EBX
	RETN 0x0004
loc_100BF377:
	XOR AL, AL
	POP EBX
	RETN 0x0004
loc_100BF37D:
	XOR AL, AL
	POP EBX
	RETN 0x0004
loc_100BF383:
	XOR AL, AL
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BF390(DWORD arg1)
{
	enum{
		var_4 = -0x4,
		arg1217470 = 0x4A4EF8,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m520_GetDC])
	MOV EBX, EAX
	PUSH 0x26
	PUSH EBX
	MOV ESI,DWORD PTR [offset LEGO1_idata.m348_GetDeviceCaps]
	CALL_LONG(ESI)
	TEST AH,0x01
	JZ loc_100BF3DF
	PUSH 0x68
	PUSH EBX
	CALL_LONG(ESI)
	CMP EAX, 0x00000100
	JNZ loc_100BF3DF
	MOV EBP,DWORD PTR [ESP+var_4+0x18]
	MOV ESI,DWORD PTR [offset LEGO1_idata.m370_GetSystemPaletteEntries]
	PUSH EBP
	PUSH 0x0A
	PUSH 0x00
	ADD EBP, 0x000003D8
	PUSH EBX
	CALL_LONG(ESI)
	PUSH EBP
	PUSH 0x0A
	PUSH 0x000000F6
	PUSH EBX
	CALL_LONG(ESI)
	JMP loc_100BF403
loc_100BF3DF:
	MOV ESI, offset LEGO1_data + 0x12188
	MOV EBP,DWORD PTR [ESP+var_4+0x18]
	MOV EDI, EBP
	MOV ECX, 0x0000000A
	REP MOVSD
	MOV ESI, offset LEGO1_data + 0x12560
	LEA EDI,DWORD PTR [EBP+arg1217470-0x4A4B20]
	MOV ECX, 0x0000000A
	REP MOVSD
loc_100BF403:
	PUSH EBX
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m51C_ReleaseDC])
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BF420(DWORD arg1)
{
	enum{
		var_4 = -0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m520_GetDC])
	MOV EBX, EAX
	PUSH 0x26
	PUSH EBX
	MOV ESI,DWORD PTR [offset LEGO1_idata.m348_GetDeviceCaps]
	CALL_LONG(ESI)
	TEST AH,0x01
	JZ loc_100BF46B
	PUSH 0x68
	PUSH EBX
	CALL_LONG(ESI)
	CMP EAX, 0x00000100
	JNZ loc_100BF46B
	MOV EDI,DWORD PTR [ESP+var_4+0x14]
	MOV ESI, offset LEGO1_data + 0x121B0
	PUSH EDI
	PUSH 0x00000100
	PUSH 0x00
	ADD EDI, 0x28
	PUSH EBX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m370_GetSystemPaletteEntries])
	MOV ECX, 0x000000EC
	JMP loc_100BF479
loc_100BF46B:
	MOV ESI, offset LEGO1_data + 0x12188
	MOV EDI,DWORD PTR [ESP+var_4+0x14]
	MOV ECX, 0x00000100
loc_100BF479:
	REP MOVSD
	PUSH EBX
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m51C_ReleaseDC])
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BF490(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x04
	PUSH ESI
	PUSH EDI
	CMP DWORD PTR [ECX+0x08],0x00
	MOV EDI, ECX
	JZ loc_100BF4DA
	LEA ESI,DWORD PTR [EDI+0x0C]
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.mBE420_sub_100BF420])
	CMP BYTE PTR [ESP+arg1+0xC],0x00
	JNZ loc_100BF4BF
	MOV EAX,DWORD PTR [EDI+0x0000040D]
	MOV DWORD PTR [EDI+0x00000240],EAX
	MOV DWORD PTR [EDI+0x0000023C],EAX
loc_100BF4BF:
	PUSH ESI
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mBE170_sub_100BF170])
	MOV EAX,DWORD PTR [EDI+0x08]
	PUSH ESI
	PUSH 0x00000100
	PUSH 0x00
	PUSH 0x00
	MOV ESI,DWORD PTR [EAX]
	PUSH EAX
	CALL_LONG(DWORD PTR [ESI+0x18])
loc_100BF4DA:
	POP EDI
	POP ESI
	ADD ESP, 0x04
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1__GetInstance_MxScheduler__SAPAV1_XZ()
{
__asm{
	XOR EAX, EAX
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1__StartMultiTasking_MxScheduler__QAEXK_Z(DWORD arg1)
{
__asm{
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100BF510()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBE566_proc_100BF566]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	LEA ECX,DWORD PTR [ECX+0x10]
	CALL_LONG(offset [LEGO1_text.mC77D0_sub_100C87D0])
	XOR EAX, EAX
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8860_ptr]
	MOV DWORD PTR [ESI+0x04],EAX
	MOV BYTE PTR [ESI+0x0C],0x01
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR [ESI+0x08],EAX
	MOV DWORD PTR FS:[0x00000000],ECX
	MOV EAX, ESI
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_loc_100BF5A0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBE5F2_proc_100BF5F2]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m8860_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EAX,DWORD PTR [ECX+0x04]
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	TEST EAX, EAX
	JZ loc_100BF5D9
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m390_CloseHandle])
loc_100BF5D9:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mBE5FC_sub_100BF5FC])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BF5FC()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x10
	JMP_LONG(offset [LEGO1_text.mC77E0_loc_100C87E0])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BF610(DWORD arg1, DWORD arg2)
{
	enum{
		r = 0x0,
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI, 0xFFFFFFFF
	LEA ECX,DWORD PTR [ESI+0x10]
	PUSH 0x01
	PUSH 0x00
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
	TEST EAX, EAX
	JNZ loc_100BF652
	LEA EAX,DWORD PTR [ESI+0x08]
	MOV ECX,DWORD PTR [ESP+r+0x10]
	PUSH EAX
	PUSH ECX
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	PUSH ESI
	SHL EAX, 0x02
	PUSH offset [LEGO1_text.mBE680_proc_100BF680]
	PUSH EAX
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.mD1270_sub_100D2270])
	ADD ESP, 0x18
	MOV DWORD PTR [ESI+0x04],EAX
	TEST EAX, EAX
	JZ loc_100BF652
	XOR EDI, EDI
loc_100BF652:
	MOV EAX, EDI
	POP EDI
	POP ESI
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BF660(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4A0_Sleep])
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100BF670()
{
__asm{
	MOV BYTE PTR [ECX+0x0C],0x00
	PUSH -0x01
	ADD ECX, 0x10
	CALL_LONG(offset [LEGO1_text.mC7830_sub_100C8830])
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BF690()
{
__asm{
	PUSH 0x01
	ADD ECX, 0x10
	CALL_LONG(offset [LEGO1_text.mC7850_sub_100C8850])
	XOR EAX, EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BF6A0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBE713_proc_100BF713]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	XOR EAX, EAX
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	MOV WORD PTR DS:[ESI+0x0C],AX
	MOV DWORD PTR [ESI+0x20],EAX
	MOV ECX, 0xFFFFFFFF
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8868_ptr]
	MOV WORD PTR DS:[ESI+0x24],CX
	MOV DWORD PTR [ESI+0x10],EAX
	MOV DWORD PTR [ESI+0x14],EAX
	MOV DWORD PTR [ESI+0x18],EAX
	MOV DWORD PTR [ESI+0x1C],ECX
	MOV DWORD PTR [ESI+0x28],EAX
	MOV EAX, ESI
	MOV DWORD PTR [EBP+var_8+0x4],ECX
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP ESI
	MOV DWORD PTR FS:[0x00000000],ECX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_loc_100BF7E0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBE853_proc_100BF853]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m8868_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	MOV EAX,DWORD PTR [ECX+0x18]
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	MOV EDX,DWORD PTR [ECX+0x10]
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV BYTE PTR [EBP+var_8+0x4],0x00
	ADD ESP, 0x04
	CALL_LONG(offset [LEGO1_text.mBE848_sub_100BF848])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mBE85D_sub_100BF85D])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BF848()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x20
	JMP_LONG(offset [LEGO1_text.mABFD0___1MxAtomId__QAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100BF85D()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BF870(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI,DWORD PTR [ESP+arg1+0x8]
	MOV EAX,DWORD PTR [EDI+0x10]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mBE950_sub_100BF950])
	MOV EAX,DWORD PTR [EDI+0x14]
	MOV DWORD PTR [ESI+0x14],EAX
	MOV ECX,DWORD PTR [EDI+0x18]
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mBE8E0__SetObjectName_MxDSObject__QAEXPBD_Z])
	MOV ECX,DWORD PTR [EDI+0x1C]
	LEA EAX,DWORD PTR [EDI+0x20]
	PUSH EAX
	MOV DWORD PTR [ESI+0x1C],ECX
	MOV DX,WORD PTR DS:[EDI+0x24]
	LEA ECX,DWORD PTR [ESI+0x20]
	MOV WORD PTR DS:[ESI+0x24],DX
	CALL_LONG(offset [LEGO1_text.mAC1C0___4MxAtomId__QAEAAV0_ABV0__Z])
	MOV ECX,DWORD PTR [EDI+0x28]
	POP EDI
	MOV DWORD PTR [ESI+0x28],ECX
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BF8C0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH ESI
	CMP ECX, EAX
	MOV ESI, ECX
	JNZ loc_100BF8D1
	MOV EAX, ESI
	POP ESI
	RETN 0x0004
loc_100BF8D1:
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mBE870_sub_100BF870])
	MOV EAX, ESI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1__SetObjectName_MxDSObject__QAEXPBD_Z(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x18]
	PUSH EDI
	MOV EBX, ECX
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
	CMP ESI, EAX
	JZ loc_100BF94A
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	TEST ESI, ESI
	JZ loc_100BF943
	MOV EDI, ESI
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV EDX, EAX
	MOV DWORD PTR [EBX+0x18],EAX
	TEST EDX, EDX
	JZ loc_100BF94A
	MOV EDI, ESI
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI, EDX
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_100BF943:
	MOV DWORD PTR [EBX+0x18],0x00000000
loc_100BF94A:
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BF950(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x10]
	PUSH EDI
	MOV EBX, ECX
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
	CMP ESI, EAX
	JZ loc_100BF9BA
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	TEST ESI, ESI
	JZ loc_100BF9B3
	MOV EDI, ESI
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV EDX, EAX
	MOV DWORD PTR [EBX+0x10],EAX
	TEST EDX, EDX
	JZ loc_100BF9BA
	MOV EDI, ESI
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI, EDX
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_100BF9B3:
	MOV DWORD PTR [EBX+0x10],0x00000000
loc_100BF9BA:
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100BF9D0()
{
__asm{
	PUSH ESI
	MOV EDX, ECX
	PUSH EDI
	MOV EDI,DWORD PTR [EDX+0x10]
	TEST EDI, EDI
	JZ loc_100BF9EB
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	LEA ESI,DWORD PTR [ECX+0x02]
	JMP loc_100BF9F0
loc_100BF9EB:
	MOV ESI, 0x00000003
loc_100BF9F0:
	ADD ESI, 0x04
	MOV EDI,DWORD PTR [EDX+0x18]
	TEST EDI, EDI
	JZ loc_100BFA12
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	ADD ESI, ECX
	POP EDI
	ADD ESI, 0x04
	MOV EAX, ESI
	MOV DWORD PTR [EDX+0x08],ESI
	POP ESI
	RET
loc_100BFA12:
	INC ESI
	POP EDI
	ADD ESI, 0x04
	MOV EAX, ESI
	MOV DWORD PTR [EDX+0x08],ESI
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BFA20(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EBX,DWORD PTR [ESP+arg1+0xC]
	MOV EAX,DWORD PTR [EBX]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mBE950_sub_100BF950])
	MOV EDI,DWORD PTR [ESI+0x10]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	ADD DWORD PTR [EBX],ECX
	MOV EAX,DWORD PTR [EBX]
	MOV ECX,DWORD PTR [EAX]
	MOV DWORD PTR [ESI+0x14],ECX
	MOV ECX, ESI
	MOV EAX,DWORD PTR [EBX]
	ADD EAX, 0x04
	PUSH EAX
	MOV DWORD PTR [EBX],EAX
	CALL_LONG(offset [LEGO1_text.mBE8E0__SetObjectName_MxDSObject__QAEXPBD_Z])
	MOV EDI,DWORD PTR [ESI+0x18]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	MOV AX,WORD PTR SS:[ESP+arg2+0xC]
	NOT ECX
	POP EDI
	ADD DWORD PTR [EBX],ECX
	MOV ECX,DWORD PTR [EBX]
	MOV EDX,DWORD PTR [ECX]
	MOV DWORD PTR [ESI+0x1C],EDX
	ADD DWORD PTR [EBX],0x04
	MOV WORD PTR DS:[ESI+0x24],AX
	POP ESI
	POP EBX
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100BFA80(DWORD arg1, DWORD arg2)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg1217231 = 0x4A4B3C,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	MOV EDX,DWORD PTR [ECX+0x04]
	PUSH EDI
	PUSH EBP
	MOV ESI, ECX
	XOR EDI, EDI
	MOV EAX,DWORD PTR [EDX]
	MOV DWORD PTR [ESP+var_4+0x14],EAX
	CMP EDX, EAX
	JZ loc_100BFAE8
	MOV EBX,DWORD PTR [ESP+arg1+0x14]
	MOV ECX,DWORD PTR [EBX+0x1C]
loc_100BFA9F:
	CMP ECX, -0x01
	JZ loc_100BFAB0
	MOV EAX,DWORD PTR [ESP+var_4+0x14]
	MOV EBP,DWORD PTR [EAX+0x08]
	CMP DWORD PTR [EBP+arg1217231-0x4A4B20],ECX
	JNZ loc_100BFADA
loc_100BFAB0:
	MOV BP,WORD PTR DS:[EBX+0x24]
	CMP BP, -0x02
	JZ loc_100BFACD
	CMP BP, -0x03
	JZ loc_100BFACD
	MOV EAX,DWORD PTR [ESP+var_4+0x14]
	MOV EAX,DWORD PTR [EAX+0x08]
	CMP WORD PTR DS:[EAX+0x24],BP
	JNZ loc_100BFADA
loc_100BFACD:
	CMP BP, -0x03
	MOV EAX,DWORD PTR [ESP+var_4+0x14]
	MOV EDI,DWORD PTR [EAX+0x08]
	JNZ loc_100BFAE8
loc_100BFADA:
	MOV EAX,DWORD PTR [ESP+var_4+0x14]
	MOV EBP,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_4+0x14],EBP
	CMP EDX, EBP
	JNZ loc_100BFA9F
loc_100BFAE8:
	CMP BYTE PTR [ESP+arg2+0x14],0x00
	JZ loc_100BFB18
	TEST EDI, EDI
	JZ loc_100BFB18
	MOV EDX,DWORD PTR [ESP+var_4+0x14]
	MOV EAX,DWORD PTR [ESP+var_4+0x14]
	PUSH EAX
	MOV ECX,DWORD PTR [EDX+0x04]
	ADD EDX, 0x04
	MOV EBX,DWORD PTR [EAX]
	MOV DWORD PTR [ECX],EBX
	MOV ECX,DWORD PTR [EDX]
	MOV EBX,DWORD PTR [EAX]
	MOV DWORD PTR [EBX+0x04],ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	DEC DWORD PTR [ESI+0x08]
loc_100BFB18:
	MOV EAX, EDI
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_100BFB30(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBEE88_proc_100BFE88]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [EBP+arg1+0x4]
	MOV ECX,DWORD PTR [ESI]
	MOV AX,WORD PTR DS:[ECX]
	ADD ECX, 0x02
	MOVZX EAX,AX
	MOV DWORD PTR [ESI],ECX
	CMP EAX, 0x0B
	JA loc_100BFB6A
	JMP_LONG(DWORD PTR [offset LEGO1_text.mBEEA0_proc_100BFEA0+EAX*4])
loc_100BFB6A:
	XOR EAX, EAX
	JMP_LONG(offset [LEGO1_text.mBEB6C_loc_100BFB6C])
}
}

__declspec(naked) DWORD LEGO1___1MxDSFile__UAE_XZ()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBEF41_proc_100BFF41]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m8890_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000002
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	CALL_LONG(offset [LEGO1_text.mCB740__Close_MxDSFile__UAEJXZ])
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	CALL_LONG(offset [LEGO1_text.mBEF2B_sub_100BFF2B])
	MOV BYTE PTR [EBP+var_8+0x4],0x00
	CALL_LONG(offset [LEGO1_text.mBEF36_sub_100BFF36])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mBEF4B_sub_100BFF4B])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100BFF2B()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x24
	JMP_LONG(offset [LEGO1_text.mCB820___1MXIOINFO__QAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100BFF36()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x14
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100BFF4B()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mBEF60_loc_100BFF60])
}
}

__declspec(naked) DWORD LEGO1_sub_100BFFBA()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100C0112()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100C0253()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x24
	JMP_LONG(offset [LEGO1_text.mCB820___1MXIOINFO__QAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100C025E()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x14
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100C0273()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mBEF60_loc_100BFF60])
}
}

__declspec(naked) DWORD LEGO1__CreateStreamObject__YAPAVMxDSObject__PAVMxDSFile__F_Z(DWORD arg1)
{
	enum{
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x18
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x20]
	PUSH 0x00
	MOV ECX, ESI
	MOV EDI,DWORD PTR [ESI]
	CALL_LONG(DWORD PTR [EDI+0x34])
	MOVSX ECX,WORD PTR [ESP+arg2+0x24]
	MOV EAX,DWORD PTR [ECX*4+EAX]
	MOV ECX, ESI
	PUSH EAX
	CALL_LONG(DWORD PTR [EDI+0x24])
	TEST EAX, EAX
	JZ loc_100C02AC
	XOR EAX, EAX
	POP EDI
	POP ESI
	ADD ESP, 0x18
	RET
loc_100C02AC:
	MOV EDI,DWORD PTR [EDI+0x20]
	PUSH 0x08
	LEA EAX,DWORD PTR [ESP+var_14+0x24]
	MOV ECX, ESI
	PUSH EAX
	CALL_LONG(EDI)
	TEST EAX, EAX
	JNZ FAR loc_100C034A
	CMP DWORD PTR [ESP+var_18+0x24],0x7453784D
	JNZ loc_100C034A
	LEA EAX,DWORD PTR [ESP+var_18+0x24]
	PUSH 0x08
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(EDI)
	TEST EAX, EAX
	JNZ loc_100C0342
	CMP DWORD PTR [ESP+var_18+0x24],0x624F784D
	JNZ loc_100C0342
	MOV EAX,DWORD PTR [ESP+var_14+0x24]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [ESP+var_18+0x24],EAX
	ADD ESP, 0x04
	TEST EAX, EAX
	JNZ loc_100C0302
	XOR EAX, EAX
	POP EDI
	POP ESI
	ADD ESP, 0x18
	RET
loc_100C0302:
	MOV EAX,DWORD PTR [ESP+0x10]
	MOV ECX,DWORD PTR [ESP+var_1C+0x24]
	PUSH EAX
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(EDI)
	TEST EAX, EAX
	JZ loc_100C031C
	XOR EAX, EAX
	POP EDI
	POP ESI
	ADD ESP, 0x18
	RET
loc_100C031C:
	MOV EDI,DWORD PTR [ESP+0x08]
	PUSH -0x01
	LEA EAX,DWORD PTR [ESP+var_18+0x24]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mBEB30_sub_100BFB30])
	ADD ESP, 0x08
	MOV ESI, EAX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	MOV EAX, ESI
	POP EDI
	POP ESI
	ADD ESP, 0x18
	RET
loc_100C0342:
	XOR EAX, EAX
	POP EDI
	POP ESI
	ADD ESP, 0x18
	RET
loc_100C034A:
	XOR EAX, EAX
	POP EDI
	POP ESI
	ADD ESP, 0x18
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C0360()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBF3B2_proc_100C03B2]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.mB74C0_sub_100B84C0])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV ECX, ESI
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8900_ptr]
	CALL_LONG(offset [LEGO1_text.mBF450_nullsub_4])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV EAX, ESI
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C03F0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBF43B_proc_100C043B]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m8900_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	PUSH 0x01
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	CALL_LONG(offset [LEGO1_text.mBF460_sub_100C0460])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mBF445_sub_100C0445])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C0445()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7560_sub_100B8560])
}
}

__declspec(naked) DWORD LEGO1_nullsub_4()
{
__asm{
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C0460(DWORD arg1)
{
	enum{
		r = 0x0,
	};

__asm{
	PUSH ESI
	MOV ESI, ECX
	MOV ECX,DWORD PTR [ECX+0x0C]
	TEST ECX, ECX
	JZ loc_100C047F
	CALL_LONG(offset [LEGO1_text.mBE670_sub_100BF670])
	MOV ECX,DWORD PTR [ESI+0x0C]
	TEST ECX, ECX
	JZ loc_100C048C
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x04])
	JMP loc_100C048C
loc_100C047F:
	CALL_LONG(offset [LEGO1_text.mABEC0__TickleManager__YAPAVMxTickleManager__XZ])
	MOV ECX, EAX
	PUSH ESI
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x18])
loc_100C048C:
	CMP BYTE PTR [ESP+r+0x8],0x00
	JNZ loc_100C049A
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB7710_sub_100B8710])
loc_100C049A:
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100C05A0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBF5F2_proc_100C05F2]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.mB7D00_sub_100B8D00])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV ECX, ESI
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8930_ptr]
	CALL_LONG(offset [LEGO1_text.mBF690_sub_100C0690])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV EAX, ESI
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C0630()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBF67B_proc_100C067B]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m8930_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	PUSH 0x01
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	CALL_LONG(offset [LEGO1_text.mBF6C0_sub_100C06C0])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mBF685_sub_100C0685])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C0685()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7D90_loc_100B8D90])
}
}

__declspec(naked) DWORD LEGO1_sub_100C0690()
{
__asm{
	MOV DWORD PTR [ECX+0x50],0x00000064
	JMP_LONG(offset [LEGO1_text.mBF6A0_loc_100C06A0])
}
}

__declspec(naked) DWORD LEGO1_loc_100C06A0()
{
__asm{
	XOR EAX, EAX
	MOV DWORD PTR [ECX+0x30],EAX
	MOV BYTE PTR [ECX+0x34],AL
	MOV DWORD PTR [ECX+0x38],EAX
	MOV DWORD PTR [ECX+0x3C],EAX
	MOV DWORD PTR [ECX+0x40],EAX
	MOV DWORD PTR [ECX+0x44],EAX
	MOV DWORD PTR [ECX+0x48],EAX
	MOV DWORD PTR [ECX+0x4C],EAX
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C06C0(DWORD arg1)
{
	enum{
		r = 0x0,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI, ECX
	MOV ECX,DWORD PTR [ECX+0x0C]
	TEST ECX, ECX
	JZ loc_100C06E0
	CALL_LONG(offset [LEGO1_text.mBE670_sub_100BF670])
	MOV ECX,DWORD PTR [EDI+0x0C]
	TEST ECX, ECX
	JZ loc_100C06ED
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x04])
	JMP loc_100C06ED
loc_100C06E0:
	CALL_LONG(offset [LEGO1_text.mABEC0__TickleManager__YAPAVMxTickleManager__XZ])
	MOV ECX, EAX
	PUSH EDI
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x18])
loc_100C06ED:
	LEA ESI,DWORD PTR [EDI+0x10]
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB5D80_sub_100B6D80])
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mBFB20_sub_100C0B20])
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mBF690_sub_100C0690])
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB5DE0_sub_100B6DE0])
	CMP BYTE PTR [ESP+r+0xC],0x00
	JNZ loc_100C071A
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mB7E90_sub_100B8E90])
loc_100C071A:
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100C0720()
{
__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EBX, 0xFFFFFFFF
	CMP BYTE PTR [ESI+0x34],0x00
	JZ FAR loc_100C07D4
	CMP DWORD PTR [ESI+0x3C],0x00
	JNZ loc_100C075A
	MOV EAX,DWORD PTR [ESI+0x48]
	CMP EAX, EBX
	JZ loc_100C0753
	ADD EAX, EBX
	MOV DWORD PTR [ESI+0x48],EAX
	JNZ loc_100C0753
	CALL_LONG(offset [LEGO1_text.mBFB20_sub_100C0B20])
	MOV EAX, EBX
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100C0753:
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mBF7E0_sub_100C07E0])
loc_100C075A:
	MOV EAX,DWORD PTR [ESI+0x4C]
	MOV ECX,DWORD PTR [EAX+0x10]
	TEST CL,0x03
	JZ loc_100C0782
	PUSH 0x40
	PUSH EAX
	MOV EAX,DWORD PTR [ESI+0x30]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m558_midiOutUnprepareHeader])
	TEST EAX, EAX
	JNZ loc_100C07D4
	MOV EDI,DWORD PTR [ESI+0x4C]
	XOR EAX, EAX
	MOV ECX, 0x00000010
	REP STOSD
loc_100C0782:
	MOV EAX,DWORD PTR [ESI+0x44]
	MOV ECX,DWORD PTR [ESI+0x4C]
	ADD EAX, 0x04
	MOV DWORD PTR [ESI+0x44],EAX
	MOV EDI,DWORD PTR [EAX]
	ADD EAX, 0x04
	PUSH 0x40
	MOV DWORD PTR [ESI+0x44],EAX
	MOV DWORD PTR [ECX],EAX
	MOV ECX,DWORD PTR [ESI+0x4C]
	MOV DWORD PTR [ECX+0x04],EDI
	MOV ECX,DWORD PTR [ESI+0x4C]
	MOV DWORD PTR [ECX+0x08],EDI
	MOV ECX,DWORD PTR [ESI+0x4C]
	PUSH ECX
	MOV EAX,DWORD PTR [ESI+0x30]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m550_midiOutPrepareHeader])
	TEST EAX, EAX
	JNZ loc_100C07D4
	PUSH 0x40
	MOV EAX,DWORD PTR [ESI+0x4C]
	PUSH EAX
	MOV ECX,DWORD PTR [ESI+0x30]
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m578_midiStreamOut])
	TEST EAX, EAX
	JNZ loc_100C07D4
	XOR EBX, EBX
	ADD DWORD PTR [ESI+0x44],EDI
	DEC DWORD PTR [ESI+0x3C]
loc_100C07D4:
	MOV EAX, EBX
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C07E0()
{
__asm{
	MOV EAX,DWORD PTR [ECX+0x40]
	MOV EDX,DWORD PTR [ECX+0x38]
	MOV DWORD PTR [ECX+0x44],EAX
	MOV DWORD PTR [ECX+0x3C],EDX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C07F0()
{
__asm{
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x2C]
	IMUL EAX,DWORD PTR [ECX+0x50]
	CDQ
	MOV ESI, 0x00000064
	IDIV ESI
	MOV ESI,DWORD PTR [ECX+0x30]
	TEST ESI, ESI
	JZ loc_100C0815
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mBF9A0_sub_100C09A0])
	PUSH EAX
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m568_midiOutSetVolume])
loc_100C0815:
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C0970(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	LEA EDI,DWORD PTR [ECX+0x10]
	MOV ESI, ECX
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mB5D80_sub_100B6D80])
	MOV EAX,DWORD PTR [ESP+arg1+0x8]
	MOV ECX, ESI
	MOV DWORD PTR [ESI+0x50],EAX
	CALL_LONG(offset [LEGO1_text.mBF7F0_sub_100C07F0])
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mB5DE0_sub_100B6DE0])
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C09A0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg1]
	MOV EAX, ECX
	SHL EAX, 0x10
	SUB EAX, ECX
	MOV ECX, 0x00000064
	CDQ
	IDIV ECX
	MOV ECX, EAX
	SHL EAX, 0x10
	OR EAX, ECX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C09C0(DWORD arg1, DWORD arg2)
{
	enum{
		var_40 = -0x40,
		var_3C = -0x3C,
		var_38 = -0x38,
		var_34 = -0x34,
		var_30 = -0x30,
		var_C = -0xC,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x40
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	PUSH EBP
	MOV EBX, 0xFFFFFFFF
	LEA ECX,DWORD PTR [ESI+0x10]
	CALL_LONG(offset [LEGO1_text.mB5D80_sub_100B6D80])
	CMP BYTE PTR [ESI+0x34],0x00
	JNZ FAR loc_100C0B0C
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m57C_midiOutGetNumDevs])
	MOV DWORD PTR [ESP+var_40+0x50],0x00000000
	MOV EDI, EAX
	TEST EDI, EDI
	JZ loc_100C0A1A
	MOV EBP,DWORD PTR [offset LEGO1_idata.m564_midiOutGetDevCapsA]
loc_100C09FA:
	LEA EAX,DWORD PTR [ESP+var_34+0x50]
	PUSH 0x34
	MOV ECX,DWORD PTR [ESP+var_3C+0x50]
	PUSH EAX
	PUSH ECX
	CALL_LONG(EBP)
	CMP WORD PTR SS:[ESP+var_C+0x50],0x04
	JZ loc_100C0A1A
	INC DWORD PTR [ESP+var_40+0x50]
	CMP DWORD PTR [ESP+var_40+0x50],EDI
	JB loc_100C09FA
loc_100C0A1A:
	CMP DWORD PTR [ESP+var_40+0x50],EDI
	JB loc_100C0A28
	MOV DWORD PTR [ESP+var_40+0x50],0xFFFFFFFF
loc_100C0A28:
	LEA EAX,DWORD PTR [ESP+var_40+0x50]
	PUSH 0x00030000
	PUSH ESI
	LEA ECX,DWORD PTR [ESI+0x30]
	PUSH offset [LEGO1_text.mBF820_proc_100C0820]
	MOV EBP,DWORD PTR [offset LEGO1_idata.m56C_midiStreamOpen]
	PUSH 0x01
	PUSH EAX
	PUSH ECX
	CALL_LONG(EBP)
	TEST EAX, EAX
	JNZ FAR loc_100C0B0C
	LEA EDI,DWORD PTR [ESI+0x54]
	MOV EAX,DWORD PTR [ESI+0x30]
	PUSH EDI
	MOV EBP,DWORD PTR [offset LEGO1_idata.m574_midiOutGetVolume]
	PUSH EAX
	CALL_LONG(EBP)
	TEST EAX, EAX
	JZ loc_100C0A6D
	PUSH 0x64
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mBF9A0_sub_100C09A0])
	MOV DWORD PTR [EDI],EAX
loc_100C0A6D:
	PUSH 0x40
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV EDI, EAX
	MOV DWORD PTR [ESI+0x4C],EAX
	TEST EDI, EDI
	JZ FAR loc_100C0B0C
	XOR EAX, EAX
	MOV ECX, 0x00000010
	REP STOSD
	MOV DWORD PTR [ESP+var_3C+0x50],0x00000008
	MOV EAX,DWORD PTR [ESP+arg1+0x50]
	PUSH 0x80000001
	LEA EDX,DWORD PTR [ESP+var_38+0x50]
	MOV DWORD PTR [ESI+0x40],EAX
	ADD EAX, 0x14
	PUSH EDX
	MOV EBP,DWORD PTR [offset LEGO1_idata.m570_midiStreamProperty]
	MOV DWORD PTR [ESI+0x40],EAX
	MOV ECX,DWORD PTR [EAX]
	MOV EAX,DWORD PTR [ESI+0x30]
	MOV DWORD PTR [ESP+var_30+0x50],ECX
	PUSH EAX
	CALL_LONG(EBP)
	TEST EAX, EAX
	JNZ loc_100C0B0C
	MOV EAX,DWORD PTR [ESI+0x40]
	MOV EDX,DWORD PTR [ESP+arg2+0x50]
	ADD EAX, 0x14
	MOV DWORD PTR [ESI+0x40],EAX
	MOV ECX,DWORD PTR [EAX]
	ADD EAX, 0x04
	MOV DWORD PTR [ESI+0x38],ECX
	MOV DWORD PTR [ESI+0x40],EAX
	MOV ECX, ESI
	MOV DWORD PTR [ESI+0x48],EDX
	MOV BYTE PTR [ESI+0x34],0x01
	CALL_LONG(offset [LEGO1_text.mBF7E0_sub_100C07E0])
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mBF720_sub_100C0720])
	TEST EAX, EAX
	JNZ loc_100C0B0C
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mBF7F0_sub_100C07F0])
	MOV EAX,DWORD PTR [ESI+0x30]
	MOV EBP,DWORD PTR [offset LEGO1_idata.m554_midiStreamRestart]
	PUSH EAX
	CALL_LONG(EBP)
	TEST EAX, EAX
	JNZ loc_100C0B0C
	XOR EBX, EBX
loc_100C0B0C:
	LEA ECX,DWORD PTR [ESI+0x10]
	CALL_LONG(offset [LEGO1_text.mB5DE0_sub_100B6DE0])
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x40
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_100C0B20()
{
__asm{
	PUSH ESI
	PUSH EDI
	LEA ESI,DWORD PTR [ECX+0x10]
	MOV EDI, ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB5D80_sub_100B6D80])
	CMP BYTE PTR [EDI+0x34],0x00
	JZ loc_100C0B7D
	MOV BYTE PTR [EDI+0x34],0x00
	MOV EAX,DWORD PTR [EDI+0x30]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m55C_midiStreamStop])
	PUSH 0x40
	MOV ECX,DWORD PTR [EDI+0x4C]
	PUSH ECX
	MOV EDX,DWORD PTR [EDI+0x30]
	PUSH EDX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m558_midiOutUnprepareHeader])
	MOV ECX,DWORD PTR [EDI+0x54]
	MOV EDX,DWORD PTR [EDI+0x30]
	PUSH ECX
	PUSH EDX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m568_midiOutSetVolume])
	MOV ECX,DWORD PTR [EDI+0x30]
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m560_midiStreamClose])
	MOV ECX,DWORD PTR [EDI+0x4C]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mBF6A0_loc_100C06A0])
loc_100C0B7D:
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB5DE0_sub_100B6DE0])
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C0B90()
{
	enum{
		var_18 = -0x18,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mBFD4A_proc_100C0D4A]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	PUSH EDI
	MOV ESI, ECX
	XOR EDI, EDI
	MOV EBX, 0x00000002
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	LEA ECX,DWORD PTR [ESI+0x08]
	MOV DWORD PTR [EBP+var_8+0x4],EDI
	CALL_LONG(offset [LEGO1_text.mB5D20___0MxCriticalSection__QAE_XZ])
	MOV AL,BYTE PTR [EBP+var_10+0x3]
	PUSH EDI
	PUSH EDI
	LEA ECX,DWORD PTR [ESI+0x30]
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	MOV DWORD PTR [ESI+0x24],EDI
	MOV BYTE PTR [EBP+var_8+0x4],BL
	MOV BYTE PTR [ESI+0x30],AL
	CALL_LONG(offset [LEGO1_text.mBFE40_sub_100C0E40])
	MOV DWORD PTR [ESI+0x34],EAX
	MOV DWORD PTR [ESI+0x38],EDI
	MOV AL,BYTE PTR [EBP+var_10+0x3]
	PUSH 0x0C
	MOV BYTE PTR [EBP+var_8+0x4],BL
	MOV EBX, 0x00000006
	MOV BYTE PTR [EBP+var_8+0x4],BL
	MOV BYTE PTR [ESI+0x3C],AL
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EAX+0x04],EAX
	MOV BYTE PTR [EBP+var_8+0x4],BL
	MOV EBX, 0x0000000A
	PUSH EDI
	PUSH EDI
	LEA ECX,DWORD PTR [ESI+0x48]
	MOV DWORD PTR [ESI+0x40],EAX
	MOV DWORD PTR [ESI+0x44],EDI
	MOV AL,BYTE PTR [EBP+var_10+0x3]
	MOV BYTE PTR [EBP+var_8+0x4],BL
	MOV BYTE PTR [ESI+0x48],AL
	CALL_LONG(offset [LEGO1_text.mBFEE0_sub_100C0EE0])
	MOV DWORD PTR [ESI+0x4C],EAX
	MOV DWORD PTR [ESI+0x50],EDI
	MOV AL,BYTE PTR [EBP+var_10+0x3]
	PUSH 0x0C
	MOV BYTE PTR [EBP+var_8+0x4],BL
	MOV EBX, 0x0000000E
	MOV BYTE PTR [EBP+var_8+0x4],BL
	MOV BYTE PTR [ESI+0x54],AL
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV BYTE PTR [EBP+var_8+0x4],0x12
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EAX+0x04],EAX
	MOV DWORD PTR [ESI+0x58],EAX
	MOV DWORD PTR [ESI+0x5C],EDI
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8968_ptr]
	MOV DWORD PTR [ESI+0x28],EDI
	MOV EAX, ESI
	MOV DWORD PTR [ESI+0x2C],EDI
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR [ESI+0x60],EDI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP EDI
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C0E40(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH 0x0C
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV EDX,DWORD PTR [ESP+arg2+0x4]
	ADD ESP, 0x04
	TEST EDX, EDX
	JZ loc_100C0E5E
	MOV ECX,DWORD PTR [ESP+arg1]
	MOV DWORD PTR [EAX],ECX
	MOV DWORD PTR [EAX+0x04],EDX
	RETN 0x0008
loc_100C0E5E:
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EAX+0x04],EAX
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C0EE0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH 0x0C
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV EDX,DWORD PTR [ESP+arg2+0x4]
	ADD ESP, 0x04
	TEST EDX, EDX
	JZ loc_100C0EFE
	MOV ECX,DWORD PTR [ESP+arg1]
	MOV DWORD PTR [EAX],ECX
	MOV DWORD PTR [EAX+0x04],EDX
	RETN 0x0008
loc_100C0EFE:
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EAX+0x04],EAX
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_100C1001()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC00B0_loc_100C10B0])
}
}

__declspec(naked) DWORD LEGO1_sub_100C1051()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC0100_loc_100C1100])
}
}

__declspec(naked) DWORD LEGO1_sub_100C10A1()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC0150_loc_100C1150])
}
}

__declspec(naked) DWORD LEGO1_sub_100C10F1()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC01A0_loc_100C11A0])
}
}

__declspec(naked) DWORD LEGO1_sub_100C1141()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC01F0_loc_100C11F0])
}
}

__declspec(naked) DWORD LEGO1_sub_100C1191()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC0240_loc_100C1240])
}
}

__declspec(naked) DWORD LEGO1_sub_100C11E1()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mBFDD0_loc_100C0DD0])
}
}

__declspec(naked) DWORD LEGO1_sub_100C1231()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mBFD60_loc_100C0D60])
}
}

__declspec(naked) DWORD LEGO1_sub_100C1281()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mBFE70_loc_100C0E70])
}
}

__declspec(naked) DWORD LEGO1_loc_100C1290()
{
	enum{
		var_B4 = -0xB4,
		var_24 = -0x24,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC04B4_proc_100C14B4]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m8968_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x000000A4
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	PUSH ESI
	XOR ESI, ESI
	ADD ECX, 0x08
	PUSH ECX
	MOV DWORD PTR [EBP+var_8+0x4],ESI
	MOV BYTE PTR [EBP+var_8+0x4],0x06
	LEA ECX,DWORD PTR [EBP+var_20+0x4]
	CALL_LONG(offset [LEGO1_text.mB7ED0_sub_100B8ED0])
	MOV BYTE PTR [EBP+var_8+0x4],0x07
loc_100C12D1:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	CMP DWORD PTR [EAX+0x38],ESI
	JZ loc_100C131C
	MOV ECX,DWORD PTR [EAX+0x34]
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	MOV EDX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [EBP+var_1C+0x4],EDX
	LEA EDX,DWORD PTR [EAX+0x04]
	MOV EAX,DWORD PTR [EAX]
	MOV ECX,DWORD PTR [EDX]
	MOV DWORD PTR [ECX],EAX
	MOV ECX,DWORD PTR [EDX]
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	PUSH EAX
	MOV EDX,DWORD PTR [EAX]
	MOV DWORD PTR [EDX+0x04],ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	DEC DWORD PTR [ECX+0x38]
	CMP DWORD PTR [EBP+var_1C+0x4],ESI
	JZ loc_100C12D1
	PUSH 0x01
	MOV EAX,DWORD PTR [EBP+var_1C+0x4]
	MOV ECX,DWORD PTR [EBP+var_1C+0x4]
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX])
	JMP loc_100C12D1
loc_100C131C:
	XOR ESI, ESI
loc_100C131E:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	CMP DWORD PTR [EAX+0x44],ESI
	JZ loc_100C1354
	MOV ECX,DWORD PTR [EAX+0x40]
	MOV EAX,DWORD PTR [ECX]
	LEA ECX,DWORD PTR [EBP+var_24+0x4]
	PUSH EAX
	PUSH ECX
	MOV EDX,DWORD PTR [EAX+0x08]
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	ADD ECX, 0x3C
	MOV DWORD PTR [EBP+var_18+0x4],EDX
	CALL_LONG(offset [LEGO1_text.mC04D0_sub_100C14D0])
	CMP DWORD PTR [EBP+var_18+0x4],ESI
	JZ loc_100C131E
	PUSH 0x01
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX])
	JMP loc_100C131E
loc_100C1354:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EAX+0x28]
	TEST EAX, EAX
	JZ loc_100C13A5
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	MOV DWORD PTR [EAX+0x28],0x00000000
	MOV EDX,DWORD PTR [ECX]
	LEA ECX,DWORD PTR [EBP+var_B4+0x4]
	MOV DWORD PTR [EBP+var_1C+0x4],EDX
	CALL_LONG(offset [LEGO1_text.mAC810___0MxDSAction__QAE_XZ])
	PUSH EAX
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	MOV ESI,DWORD PTR [EBP+var_1C+0x4]
	MOV BYTE PTR [EBP+var_8+0x4],0x08
	CALL_LONG(DWORD PTR [ESI+0x20])
	MOV BYTE PTR [EBP+var_8+0x4],0x07
	CALL_LONG(offset [LEGO1_text.mC0406_sub_100C1406])
	CMP DWORD PTR [EBP+var_18+0x4],0x00
	JZ loc_100C13A5
	MOV EAX,DWORD PTR [EBP+var_1C+0x4]
	PUSH 0x01
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	CALL_LONG(DWORD PTR [EAX])
loc_100C13A5:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EAX+0x2C]
	TEST EAX, EAX
	JZ loc_100C13C2
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV DWORD PTR [EAX+0x2C],0x00000000
loc_100C13C2:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	CMP DWORD PTR [EAX+0x5C],0x00
	JZ_LONG(offset [LEGO1_text.mC0411_loc_100C1411])
	MOV ECX,DWORD PTR [EAX+0x58]
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	MOV ESI,DWORD PTR [EAX+0x08]
	LEA EDX,DWORD PTR [EAX+0x04]
	MOV EAX,DWORD PTR [EAX]
	MOV ECX,DWORD PTR [EDX]
	MOV DWORD PTR [ECX],EAX
	MOV ECX,DWORD PTR [EDX]
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	PUSH EAX
	MOV EDX,DWORD PTR [EAX]
	MOV DWORD PTR [EDX+0x04],ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	DEC DWORD PTR [ECX+0x5C]
	TEST ESI, ESI
	JZ loc_100C13C2
	PUSH 0x01
	MOV EAX,DWORD PTR [ESI]
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [EAX])
	JMP loc_100C13C2
}
}

__declspec(naked) DWORD LEGO1_sub_100C1406()
{
	enum{
		arg1217180 = 0x4A4A70,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217180-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mACA80___1MxDSAction__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100C146A()
{
	enum{
		arg1217217 = 0x4A4B04,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217217-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD LEGO1_sub_100C1472()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x54
	JMP_LONG(offset [LEGO1_text.mC0010_loc_100C1010])
}
}

__declspec(naked) DWORD LEGO1_sub_100C147D()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x48
	JMP_LONG(offset [LEGO1_text.mC0060_loc_100C1060])
}
}

__declspec(naked) DWORD LEGO1_sub_100C1488()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x3C
	JMP_LONG(offset [LEGO1_text.mC0010_loc_100C1010])
}
}

__declspec(naked) DWORD LEGO1_sub_100C1493()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x30
	JMP_LONG(offset [LEGO1_text.mBFFC0_loc_100C0FC0])
}
}

__declspec(naked) DWORD LEGO1_sub_100C149E()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x24
	JMP_LONG(offset [LEGO1_text.mABFD0___1MxAtomId__QAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100C14A9()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x08
	JMP_LONG(offset [LEGO1_text.mB5D60___1MxCriticalSection__QAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100C14BE()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C14D0(DWORD arg1, DWORD arg2)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	SUB ESP, 0x04
	PUSH ESI
	LEA EDX,DWORD PTR [EAX+0x04]
	MOV ESI, ECX
	MOV DWORD PTR [ESP+var_4+0x8],EAX
	MOV ECX,DWORD PTR [EAX]
	MOV EAX, ECX
	MOV DWORD PTR [ESP+arg2+0x8],ECX
	MOV ECX,DWORD PTR [EDX]
	MOV DWORD PTR [ECX],EAX
	MOV ECX,DWORD PTR [EDX]
	MOV EAX,DWORD PTR [ESP+var_4+0x8]
	PUSH EAX
	MOV EDX,DWORD PTR [EAX]
	MOV DWORD PTR [EDX+0x04],ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV ECX,DWORD PTR [ESP+arg2+0xC]
	MOV EAX,DWORD PTR [ESP+arg1+0xC]
	ADD ESP, 0x04
	DEC DWORD PTR [ESI+0x08]
	MOV DWORD PTR [EAX],ECX
	POP ESI
	ADD ESP, 0x04
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C1520(DWORD arg1)
{
	enum{
		var_118 = -0x118,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC05B5_proc_100C15B5]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x00000108
	PUSH ESI
	LEA EAX,DWORD PTR [ECX+0x08]
	MOV ESI, ECX
	PUSH EAX
	LEA ECX,DWORD PTR [EBP+var_14+0x4]
	CALL_LONG(offset [LEGO1_text.mB7ED0_sub_100B8ED0])
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	LEA ECX,DWORD PTR [EBP+var_118+0x4]
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.mB5FF0__MakeSourceName__YAXPADPBD_Z])
	ADD ESP, 0x08
	LEA ECX,DWORD PTR [EBP+var_118+0x4]
	PUSH 0x03
	PUSH ECX
	LEA ECX,DWORD PTR [EBP+var_18+0x4]
	CALL_LONG(offset [LEGO1_text.mABF90___0MxAtomId__QAE_PBDW4LookupMode___Z])
	PUSH EAX
	LEA ECX,DWORD PTR [ESI+0x24]
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	CALL_LONG(offset [LEGO1_text.mAC1C0___4MxAtomId__QAEAAV0_ABV0__Z])
	MOV BYTE PTR [EBP+var_8+0x4],0x00
	CALL_LONG(offset [LEGO1_text.mC05AD_sub_100C15AD])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mC05BF_sub_100C15BF])
	XOR EAX, EAX
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100C15AD()
{
	enum{
		arg1217219 = 0x4A4B0C,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217219-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mABFD0___1MxAtomId__QAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100C15BF()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C15D0(DWORD arg1)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x34]
	PUSH EDI
	LEA EBX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [ESP+var_4+0x10],EAX
	MOV ESI, ECX
	PUSH 0x0C
	MOV EDI,DWORD PTR [EBX]
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	TEST EDI, EDI
	JZ loc_100C15FD
	MOV ECX,DWORD PTR [ESP+var_4+0x10]
	MOV DWORD PTR [EAX],ECX
	MOV DWORD PTR [EAX+0x04],EDI
	JMP loc_100C1602
loc_100C15FD:
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EAX+0x04],EAX
loc_100C1602:
	MOV DWORD PTR [EBX],EAX
	MOV ECX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [ECX],EAX
	ADD EAX, 0x08
	JZ loc_100C1614
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
	MOV DWORD PTR [EAX],ECX
loc_100C1614:
	POP EDI
	INC DWORD PTR [ESI+0x38]
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C1620(DWORD arg1)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x0C
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x34]
	MOV ESI, ECX
	MOV DWORD PTR [ESP+var_4+0x10],EAX
	MOV ECX,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_C+0x10],ECX
	CMP ECX, EAX
	JZ loc_100C1684
loc_100C1637:
	MOV EAX,DWORD PTR [ESP+var_C+0x10]
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
	CMP DWORD PTR [EAX+0x08],ECX
	JNZ loc_100C1670
	MOV ECX,DWORD PTR [EAX]
	LEA EDX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [ESP+var_8+0x10],EAX
	MOV DWORD PTR [ESP+var_C+0x10],ECX
	MOV EAX, ECX
	MOV ECX,DWORD PTR [EDX]
	MOV DWORD PTR [ECX],EAX
	MOV ECX,DWORD PTR [EDX]
	MOV EAX,DWORD PTR [ESP+var_8+0x10]
	PUSH EAX
	MOV EDX,DWORD PTR [EAX]
	MOV DWORD PTR [EDX+0x04],ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	DEC DWORD PTR [ESI+0x38]
	JMP loc_100C167A
loc_100C1670:
	MOV EAX,DWORD PTR [ESP+var_C+0x10]
	MOV ECX,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_C+0x10],ECX
loc_100C167A:
	MOV EAX,DWORD PTR [ESP+var_4+0x10]
	CMP DWORD PTR [ESP+var_C+0x10],EAX
	JNZ loc_100C1637
loc_100C1684:
	POP ESI
	ADD ESP, 0x0C
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C1690(DWORD arg1)
{
	enum{
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC0723_proc_100C1723]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x0C
	PUSH EBX
	PUSH ESI
	LEA EAX,DWORD PTR [ECX+0x08]
	PUSH EDI
	MOV ESI, ECX
	PUSH EAX
	LEA ECX,DWORD PTR [EBP+var_1C+0x4]
	XOR EDI, EDI
	CALL_LONG(offset [LEGO1_text.mB7ED0_sub_100B8ED0])
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV DWORD PTR [EBP+var_8+0x4],EDI
	MOV ECX,DWORD PTR [ESI+0x28]
	MOV EBX,DWORD PTR [EAX+0x1C]
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	CALL_LONG(DWORD PTR [EAX+0x24])
	CMP EAX, EBX
	JLE loc_100C16E5
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	CALL_LONG(DWORD PTR [EAX+0x28])
	MOV EDI,DWORD PTR [EBX*4+EAX]
loc_100C16E5:
	TEST EDI, EDI
	JZ loc_100C16FA
	PUSH EDI
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	PUSH EAX
	MOV EBX,DWORD PTR [ESI]
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [EBX+0x2C])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	JMP loc_100C1701
loc_100C16FA:
	MOV DWORD PTR [EBP+var_14+0x4],0xFFFFFFFF
loc_100C1701:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mC072D_sub_100C172D])
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP EDI
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100C172D()
{
	enum{
		arg1217218 = 0x4A4B08,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217218-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C1740(DWORD arg1)
{
	enum{
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC07E2_proc_100C17E2]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	PUSH ESI
	PUSH EDI
	LEA EAX,DWORD PTR [ECX+0x08]
	MOV ESI, ECX
	PUSH EAX
	LEA ECX,DWORD PTR [EBP+var_14+0x4]
	CALL_LONG(offset [LEGO1_text.mB7ED0_sub_100B8ED0])
	MOV EDI,DWORD PTR [EBP+arg1+0x4]
	MOV ECX, ESI
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	PUSH EDI
	MOV EAX,DWORD PTR [ESI]
	CALL_LONG(DWORD PTR [EAX+0x30])
	PUSH 0x01
	LEA ECX,DWORD PTR [ESI+0x54]
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.mBEA80_sub_100BFA80])
	MOV DWORD PTR [ESI+0x60],EAX
	TEST EAX, EAX
	JNZ loc_100C17B2
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mC07EC_sub_100C17EC])
	MOV EAX, 0xFFFFFFFF
loc_100C17A0:
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP EDI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
loc_100C17B2:
	MOV AX,WORD PTR DS:[EAX+0x24]
	MOV WORD PTR DS:[EDI+0x24],AX
	MOV ECX,DWORD PTR [ESI+0x60]
	MOV EDX,DWORD PTR [ECX+0x1C]
	MOV DWORD PTR [EDI+0x1C],EDX
	MOV ECX,DWORD PTR [ESI+0x60]
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mC0F00_sub_100C1F00])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	CALL_LONG(offset [LEGO1_text.mC07EC_sub_100C17EC])
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	JMP loc_100C17A0
}
}

__declspec(naked) DWORD LEGO1_sub_100C17EC()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD LEGO1_sub_100C1800(DWORD arg1, DWORD arg2)
{
	enum{
		var_18 = -0x18,
		var_14 = -0x14,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC08DB_proc_100C18DB]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH 0x14
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV ESI, EAX
	TEST ESI, ESI
	JZ_LONG(offset [LEGO1_text.mC0873_loc_100C1873])
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV ECX, ESI
	MOV DI,WORD PTR DS:[EAX+0x24]
	MOV EBX,DWORD PTR [EAX+0x1C]
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	MOV EAX,DWORD PTR [EBP+arg2+0x4]
	MOV DWORD PTR [ESI+0x08],EBX
	MOV BYTE PTR [EBP+var_8+0x4],0x00
	MOV WORD PTR DS:[ESI+0x0C],DI
	MOV EDI, ESI
	MOV DWORD PTR [ESI+0x10],EAX
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m89A0_ptr]
	JMP_LONG(offset [LEGO1_text.mC0875_loc_100C1875])
}
}

__declspec(naked) DWORD LEGO1_sub_100C19E9()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C1A00(DWORD arg1, DWORD arg2)
{
	enum{
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC0BA7_proc_100C1BA7]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x0C
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [EBP+arg1+0x4]
	CMP WORD PTR DS:[ESI+0x24],-0x01
	JNZ FAR loc_100C1B05
	MOV CX, 0xFFFF
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV EDX,DWORD PTR [EAX+0x58]
	MOV EBX,DWORD PTR [EDX]
	MOV EDI, EBX
	CMP EBX, EDX
	JZ loc_100C1A61
loc_100C1A41:
	MOV EBX,DWORD PTR [EDI+0x08]
	MOV EAX,DWORD PTR [ESI+0x1C]
	CMP DWORD PTR [EBX+0x1C],EAX
	JNZ loc_100C1A5B
	MOV AX,WORD PTR DS:[EBX+0x24]
	CMP AX, CX
	JG loc_100C1A58
	MOV AX, CX
loc_100C1A58:
	MOV CX, AX
loc_100C1A5B:
	MOV EDI,DWORD PTR [EDI]
	CMP EDI, EDX
	JNZ loc_100C1A41
loc_100C1A61:
	CMP CX, -0x01
	JNZ loc_100C1AD3
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV EDX,DWORD PTR [EAX+0x40]
	MOV EBX,DWORD PTR [EDX]
	MOV EDI, EBX
	CMP EBX, EDX
	JZ loc_100C1A95
loc_100C1A75:
	MOV EBX,DWORD PTR [EDI+0x08]
	MOV EAX,DWORD PTR [ESI+0x1C]
	CMP DWORD PTR [EBX+0x1C],EAX
	JNZ loc_100C1A8F
	MOV AX,WORD PTR DS:[EBX+0x24]
	CMP AX, CX
	JG loc_100C1A8C
	MOV AX, CX
loc_100C1A8C:
	MOV CX, AX
loc_100C1A8F:
	MOV EDI,DWORD PTR [EDI]
	CMP EDI, EDX
	JNZ loc_100C1A75
loc_100C1A95:
	CMP CX, -0x01
	JNZ loc_100C1AD3
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV EDX,DWORD PTR [EAX+0x34]
	MOV EBX,DWORD PTR [EDX]
	MOV DWORD PTR [EBP+var_14+0x4],EBX
	CMP EBX, EDX
	JZ loc_100C1AD3
	MOV EDI,DWORD PTR [ESI+0x1C]
loc_100C1AAD:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EAX+0x08]
	CMP DWORD PTR [EAX+0x44],EDI
	JNZ loc_100C1AC7
	MOV AX,WORD PTR DS:[EAX+0x48]
	CMP AX, CX
	JG loc_100C1AC4
	MOV AX, CX
loc_100C1AC4:
	MOV CX, AX
loc_100C1AC7:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EBX,DWORD PTR [EAX]
	MOV DWORD PTR [EBP+var_14+0x4],EBX
	CMP EBX, EDX
	JNZ loc_100C1AAD
loc_100C1AD3:
	INC CX
	MOV WORD PTR DS:[ESI+0x24],CX
loc_100C1AD9:
	PUSH 0x000000B4
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	TEST EAX, EAX
	JZ loc_100C1B2F
	MOV EAX,DWORD PTR [EBP+arg2+0x4]
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.mCC010_sub_100CD010])
	MOV EDI, EAX
	JMP loc_100C1B31
loc_100C1B05:
	PUSH 0x00
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	PUSH ESI
	ADD ECX, 0x3C
	CALL_LONG(offset [LEGO1_text.mBEA80_sub_100BFA80])
	TEST EAX, EAX
	JZ loc_100C1AD9
loc_100C1B17:
	MOV EAX, 0xFFFFFFFF
loc_100C1B1C:
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP EDI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0008
loc_100C1B2F:
	XOR EDI, EDI
loc_100C1B31:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	TEST EDI, EDI
	JZ loc_100C1B17
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV ECX,DWORD PTR [EAX+0x28]
	MOV EBX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EBX+0x18])
	MOV ECX, EAX
	SUB EDX, EDX
	MOV EAX,DWORD PTR [EBP+arg2+0x4]
	DIV ECX
	IMUL EAX,ECX
	MOV DWORD PTR [EDI+0x00000098],EAX
	MOV ECX,DWORD PTR [ESI+0x1C]
	MOV DWORD PTR [EDI+0x1C],ECX
	CALL_LONG(offset [LEGO1_text.mABED0__Timer__YAPAVMxTimer__XZ])
	CMP BYTE PTR [EAX+0x0C],0x00
	JZ loc_100C1B72
	MOV ECX,DWORD PTR [offset LEGO1_data + 0x11418]
	JMP loc_100C1B7B
loc_100C1B72:
	MOV ECX,DWORD PTR [offset LEGO1_data + 0x11414]
	SUB ECX,DWORD PTR [EAX+0x08]
loc_100C1B7B:
	PUSH ECX
	MOV EAX,DWORD PTR [EDI]
	MOV ECX, EDI
	CALL_LONG(DWORD PTR [EAX+0x38])
	MOV DWORD PTR [EBP+var_1C+0x4],EDI
	LEA EDI,DWORD PTR [EBP+var_1C+0x4]
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	PUSH EDI
	MOV ECX,DWORD PTR [EAX+0x40]
	LEA EAX,DWORD PTR [EBP+var_18+0x4]
	PUSH ECX
	PUSH EAX
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	ADD ECX, 0x3C
	CALL_LONG(offset [LEGO1_text.mC0BC0_sub_100C1BC0])
	XOR EAX, EAX
	JMP FAR loc_100C1B1C
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C1BC0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EBX,DWORD PTR [ESP+arg2+0xC]
	PUSH 0x0C
	MOV EDI,DWORD PTR [EBX+0x04]
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	TEST EDI, EDI
	JZ loc_100C1BE1
	MOV DWORD PTR [EAX],EBX
	MOV DWORD PTR [EAX+0x04],EDI
	JMP loc_100C1BE6
loc_100C1BE1:
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EAX+0x04],EAX
loc_100C1BE6:
	LEA EDX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [EBX+0x04],EAX
	MOV ECX,DWORD PTR [EAX+0x04]
	TEST EDX, EDX
	MOV DWORD PTR [ECX],EAX
	JZ loc_100C1BFD
	MOV ECX,DWORD PTR [ESP+arg3+0xC]
	MOV EBX,DWORD PTR [ECX]
	MOV DWORD PTR [EDX],EBX
loc_100C1BFD:
	MOV ECX,DWORD PTR [ESP+arg1+0xC]
	INC DWORD PTR [ESI+0x08]
	POP EDI
	POP ESI
	POP EBX
	MOV DWORD PTR [ECX],EAX
	MOV EAX, ECX
	RETN 0x000C
}
}

__declspec(naked) DWORD LEGO1_sub_100C1CC9()
{
	enum{
		arg1217219 = 0x4A4B0C,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217219-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C1CE0(DWORD arg1)
{
	enum{
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC0D80_proc_100C1D80]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	PUSH ESI
	PUSH EDI
	LEA EAX,DWORD PTR [ECX+0x08]
	MOV ESI, ECX
	PUSH EAX
	LEA ECX,DWORD PTR [EBP+var_18+0x4]
	CALL_LONG(offset [LEGO1_text.mB7ED0_sub_100B8ED0])
	PUSH 0x01
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	PUSH EAX
	LEA ECX,DWORD PTR [ESI+0x3C]
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV DWORD PTR [EBP+var_14+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mBEA80_sub_100BFA80])
	MOV EDI, EAX
	TEST EDI, EDI
	JZ loc_100C1D5F
	MOV AX,WORD PTR DS:[EDI+0x24]
	MOV ECX,DWORD PTR [EDI+0x1C]
	PUSH EAX
	PUSH ECX
	LEA ECX,DWORD PTR [ESI+0x48]
	CALL_LONG(offset [LEGO1_text.mC1240_sub_100C2240])
	MOV ESI, EAX
	TEST EDI, EDI
	JZ loc_100C1D4C
	PUSH 0x01
	MOV EAX,DWORD PTR [EDI]
	MOV ECX, EDI
	CALL_LONG(DWORD PTR [EAX])
loc_100C1D4C:
	TEST ESI, ESI
	JZ loc_100C1D58
	PUSH 0x01
	MOV EAX,DWORD PTR [ESI]
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [EAX])
loc_100C1D58:
	MOV DWORD PTR [EBP+var_14+0x4],0x00000000
loc_100C1D5F:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mC0D8A_sub_100C1D8A])
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP EDI
	POP ESI
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100C1D8A()
{
	enum{
		arg1217219 = 0x4A4B0C,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217219-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C1DA0(DWORD arg1)
{
	enum{
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC0E52_proc_100C1E52]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x0C
	PUSH EBX
	PUSH ESI
	LEA EAX,DWORD PTR [ECX+0x08]
	PUSH EDI
	MOV ESI, ECX
	PUSH EAX
	LEA ECX,DWORD PTR [EBP+var_1C+0x4]
	CALL_LONG(offset [LEGO1_text.mB7ED0_sub_100B8ED0])
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x2C])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	TEST EAX, EAX
	JNZ loc_100C1E06
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mC0E5C_sub_100C1E5C])
	MOV EAX, 0xFFFFFFFF
loc_100C1DF3:
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP EDI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
loc_100C1E06:
	MOV EAX,DWORD PTR [ESI+0x58]
	PUSH 0x0C
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	LEA EBX,DWORD PTR [EAX+0x04]
	MOV EDI,DWORD PTR [EBX]
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	TEST EDI, EDI
	JZ loc_100C1E29
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	MOV DWORD PTR [EAX],ECX
	MOV DWORD PTR [EAX+0x04],EDI
	JMP loc_100C1E2E
loc_100C1E29:
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EAX+0x04],EAX
loc_100C1E2E:
	MOV DWORD PTR [EBX],EAX
	MOV ECX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [ECX],EAX
	ADD EAX, 0x08
	JZ loc_100C1E3F
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	MOV DWORD PTR [EAX],ECX
loc_100C1E3F:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	INC DWORD PTR [ESI+0x5C]
	CALL_LONG(offset [LEGO1_text.mC0E5C_sub_100C1E5C])
	XOR EAX, EAX
	JMP loc_100C1DF3
}
}

__declspec(naked) DWORD LEGO1_sub_100C1E5C()
{
	enum{
		arg1217218 = 0x4A4B08,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217218-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C1E70(DWORD arg1)
{
	enum{
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC0EE6_proc_100C1EE6]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	PUSH ESI
	LEA EAX,DWORD PTR [ECX+0x08]
	MOV ESI, ECX
	PUSH EAX
	LEA ECX,DWORD PTR [EBP+var_18+0x4]
	CALL_LONG(offset [LEGO1_text.mB7ED0_sub_100B8ED0])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV DWORD PTR [EBP+var_14+0x4],0x00000000
	CMP DWORD PTR [EAX+0x1C],-0x01
	JZ loc_100C1EC6
	PUSH 0x00
	LEA ECX,DWORD PTR [ESI+0x3C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mBEA80_sub_100BFA80])
	TEST EAX, EAX
	JZ loc_100C1EC6
	MOV EAX,DWORD PTR [EAX+0x28]
	MOV DWORD PTR [EBP+var_14+0x4],EAX
loc_100C1EC6:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mC0EF0_sub_100C1EF0])
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100C1EF0()
{
	enum{
		arg1217219 = 0x4A4B0C,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217219-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD LEGO1_sub_100C1F00(DWORD arg1)
{
	enum{
		var_28 = -0x28,
		var_18 = -0x18,
		var_14 = -0x14,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC1098_proc_100C2098]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x18
	PUSH EBX
	PUSH ESI
	LEA EAX,DWORD PTR [ECX+0x08]
	PUSH EDI
	MOV ESI, ECX
	PUSH EAX
	LEA ECX,DWORD PTR [EBP+var_28+0x4]
	XOR EBX, EBX
	CALL_LONG(offset [LEGO1_text.mB7ED0_sub_100B8ED0])
	MOV EDI,DWORD PTR [EBP+arg1+0x4]
	PUSH 0x20
	MOV DWORD PTR [EBP+var_8+0x4],EBX
	MOV EAX,DWORD PTR [EDI+0x1C]
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	CMP EAX, EBX
	JZ_LONG(offset [LEGO1_text.mC0F76_loc_100C1F76])
	MOV ECX, EAX
	CALL_LONG(offset [LEGO1_text.mBD050_sub_100BE050])
	MOV BYTE PTR [EBP+var_8+0x4],0x02
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	MOV DWORD PTR [EAX+0x1C],EBX
	MOV EBX, EAX
	MOV DWORD PTR [EAX], offset [LEGO1_rdata.m82A8_ptr]
	JMP_LONG(offset [LEGO1_text.mC0F78_loc_100C1F78])
}
}

__declspec(naked) DWORD LEGO1_sub_100C2083()
{
	enum{
		arg1217216 = 0x4A4B00,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217216-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m49E40_loc_1004AE40])
}
}

__declspec(naked) DWORD LEGO1_proc_100C208B()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C20A2()
{
	enum{
		arg1217215 = 0x4A4AFC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217215-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C20B0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	ADD ECX, 0x48
	MOV DX,WORD PTR DS:[EAX+0x24]
	MOV EAX,DWORD PTR [EAX+0x1C]
	PUSH EDX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mC11E0_sub_100C21E0])
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C20D0(DWORD arg1)
{
	enum{
		var_24 = -0x24,
		var_20 = -0x20,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC11CD_proc_100C21CD]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x14
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI,DWORD PTR [EBP+arg1+0x4]
	LEA ECX,DWORD PTR [ESI+0x30]
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.mB7450_sub_100B8450])
	TEST EAX, EAX
	JZ loc_100C2107
	XOR AL, AL
	JMP FAR loc_100C21AA
loc_100C2107:
	PUSH offset [LEGO1_data.m11DBC_str]
	MOV EAX,DWORD PTR [EDI]
	MOV ECX, EDI
	CALL_LONG(DWORD PTR [EAX+0x10])
	TEST AL, AL
	JZ FAR loc_100C21A8
	MOV EDI,DWORD PTR [EDI+0x00000098]
	LEA ECX,DWORD PTR [EBP+var_20+0x4]
	XOR EBX, EBX
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	MOV EAX, 0xFFFFFFFF
	MOV DWORD PTR [EBP+var_8+0x4],EBX
	MOV DWORD PTR [EBP+var_18+0x4],EDI
	MOV DWORD PTR [EBP+var_14+0x4],EBX
	MOV DWORD PTR [EBP+var_20+0x4],offset [LEGO1_rdata.m3E68_ptr]
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	MOV DWORD PTR [EBP+var_20+0x4],offset [LEGO1_rdata.m3E50_ptr]
	MOV DWORD PTR [EBP+var_8+0x4],0x00000002
loc_100C2155:
	CMP DWORD PTR [EBP+var_14+0x4],EBX
	JNZ loc_100C2162
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV ECX,DWORD PTR [EAX+0x10]
	JMP loc_100C2168
loc_100C2162:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EAX+0x08]
loc_100C2168:
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	CMP DWORD PTR [EBP+var_14+0x4],EBX
	JZ loc_100C219C
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	CMP DWORD PTR [EBP+var_14+0x4],EBX
	MOV ECX,DWORD PTR [EAX]
	MOV DWORD PTR [EBP+var_24+0x4],ECX
	JZ loc_100C219C
	MOV EAX,DWORD PTR [EBP+var_24+0x4]
	MOV ECX, ESI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mC10D0_sub_100C20D0])
	TEST AL, AL
	JNZ loc_100C2155
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mC11D7_sub_100C21D7])
	XOR AL, AL
	JMP loc_100C21AA
loc_100C219C:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mC11D7_sub_100C21D7])
loc_100C21A8:
	MOV AL, 0x01
loc_100C21AA:
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP EDI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100C21D7()
{
	enum{
		arg1217217 = 0x4A4B04,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217217-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m49E40_loc_1004AE40])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C21E0(DWORD arg1, DWORD arg2)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x04
	MOV EDX,DWORD PTR [ECX+0x04]
	PUSH ESI
	MOV EAX,DWORD PTR [EDX]
	MOV DWORD PTR [ESP+var_4+0x8],EAX
	CMP EDX, EAX
	JZ loc_100C221A
	MOV SI,WORD PTR SS:[ESP+arg2+0x8]
	MOV ECX,DWORD PTR [ESP+arg1+0x8]
loc_100C21FA:
	MOV EAX,DWORD PTR [ESP+var_4+0x8]
	MOV EAX,DWORD PTR [EAX+0x08]
	CMP DWORD PTR [EAX+0x08],ECX
	JNZ loc_100C220C
	CMP WORD PTR DS:[EAX+0x0C],SI
	JZ loc_100C2223
loc_100C220C:
	MOV EAX,DWORD PTR [ESP+var_4+0x8]
	MOV EAX,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_4+0x8],EAX
	CMP EDX, EAX
	JNZ loc_100C21FA
loc_100C221A:
	XOR EAX, EAX
	POP ESI
	ADD ESP, 0x04
	RETN 0x0008
loc_100C2223:
	MOV EAX,DWORD PTR [ESP+var_4+0x8]
	POP ESI
	MOV EAX,DWORD PTR [EAX+0x08]
	ADD ESP, 0x04
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C2240(DWORD arg1, DWORD arg2)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	MOV EDX,DWORD PTR [ECX+0x04]
	PUSH EDI
	MOV ESI, ECX
	XOR EDI, EDI
	MOV EAX,DWORD PTR [EDX]
	MOV DWORD PTR [ESP+var_4+0x10],EAX
	CMP EDX, EAX
	JZ loc_100C22B4
	MOV BX,WORD PTR SS:[ESP+arg2+0x10]
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
loc_100C2260:
	MOV EAX,DWORD PTR [ESP+var_4+0x10]
	MOV EAX,DWORD PTR [EAX+0x08]
	CMP DWORD PTR [EAX+0x08],ECX
	JNZ loc_100C2278
	CMP BX, -0x02
	JZ loc_100C2291
	CMP WORD PTR DS:[EAX+0x0C],BX
	JZ loc_100C2291
loc_100C2278:
	MOV EAX,DWORD PTR [ESP+var_4+0x10]
	MOV EAX,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_4+0x10],EAX
	CMP EDX, EAX
	JNZ loc_100C2260
	MOV EAX, EDI
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
loc_100C2291:
	MOV EAX,DWORD PTR [ESP+var_4+0x10]
	MOV EDI,DWORD PTR [EAX+0x08]
	LEA EDX,DWORD PTR [EAX+0x04]
	MOV ECX,DWORD PTR [EDX]
	MOV EBX,DWORD PTR [EAX]
	PUSH EAX
	MOV DWORD PTR [ECX],EBX
	MOV ECX,DWORD PTR [EDX]
	MOV EBX,DWORD PTR [EAX]
	MOV DWORD PTR [EBX+0x04],ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	DEC DWORD PTR [ESI+0x08]
loc_100C22B4:
	MOV EAX, EDI
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_100C22C0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC1380_proc_100C2380]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	PUSH EDI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	LEA ECX,DWORD PTR [ESI+0x20]
	MOV EDI, 0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mB5D20___0MxCriticalSection__QAE_XZ])
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	MOV ECX, ESI
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.mD38_ptr]
	CALL_LONG(offset [LEGO1_text.mB3D50__Init_MxPresenter__IAEXXZ])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000002
	MOV ECX, ESI
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.mCD8_ptr]
	CALL_LONG(offset [LEGO1_text.mB44E0_sub_100B54E0])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000003
	MOV ECX, ESI
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.mC70_ptr]
	MOV DWORD PTR [ESI+0x50],0x00000064
	MOV DWORD PTR [EBP+var_8+0x4],0x00000004
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m89B8_ptr]
	CALL_LONG(offset [LEGO1_text.mC1540_nullsub_5])
	MOV EAX, ESI
	MOV DWORD PTR [EBP+var_8+0x4],EDI
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP EDI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C24E0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC152B_proc_100C252B]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m89B8_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	PUSH 0x01
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	CALL_LONG(offset [LEGO1_text.mC1550_sub_100C2550])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mC1535_sub_100C2535])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C2535()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC3E0_loc_1000D3E0])
}
}

__declspec(naked) DWORD LEGO1_nullsub_5()
{
__asm{
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C2550(DWORD arg1)
{
	enum{
		r = 0x0,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI, ECX
	CALL_LONG(offset [LEGO1_text.mABF30__MusicManager__YAPAVMxMusicManager__XZ])
	TEST EAX, EAX
	JZ loc_100C256A
	CALL_LONG(offset [LEGO1_text.mABF30__MusicManager__YAPAVMxMusicManager__XZ])
	PUSH EDI
	MOV EDX,DWORD PTR [EAX]
	MOV ECX, EAX
	CALL_LONG(DWORD PTR [EDX+0x20])
loc_100C256A:
	LEA ESI,DWORD PTR [EDI+0x20]
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB5D80_sub_100B6D80])
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mC1540_nullsub_5])
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB5DE0_sub_100B6DE0])
	CMP BYTE PTR [ESP+r+0xC],0x00
	JNZ loc_100C2592
	PUSH 0x00
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mB44F0_sub_100B54F0])
loc_100C2592:
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100C25D0()
{
__asm{
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.mC1550_sub_100C2550])
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C25E0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC1632_proc_100C2632]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.mC12C0_sub_100C22C0])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV ECX, ESI
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8A20_ptr]
	CALL_LONG(offset [LEGO1_text.mC1820_sub_100C2820])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV EAX, ESI
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C27C0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC180B_proc_100C280B]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m8A20_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	PUSH 0x01
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	CALL_LONG(offset [LEGO1_text.mC1830_sub_100C2830])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mC1815_sub_100C2815])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C2815()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC14E0_sub_100C24E0])
}
}

__declspec(naked) DWORD LEGO1_sub_100C2820()
{
__asm{
	MOV DWORD PTR [ECX+0x54],0x00000000
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C2830(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI, ECX
	CALL_LONG(offset [LEGO1_text.mABF30__MusicManager__YAPAVMxMusicManager__XZ])
	TEST EAX, EAX
	JZ loc_100C2849
	CALL_LONG(offset [LEGO1_text.mABF30__MusicManager__YAPAVMxMusicManager__XZ])
	MOV ECX, EAX
	CALL_LONG(offset [LEGO1_text.mBFB20_sub_100C0B20])
loc_100C2849:
	LEA ESI,DWORD PTR [EDI+0x20]
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB5D80_sub_100B6D80])
	MOV ECX,DWORD PTR [EDI+0x40]
	TEST ECX, ECX
	JZ loc_100C2867
	MOV EAX,DWORD PTR [EDI+0x54]
	TEST EAX, EAX
	JZ loc_100C2867
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mB7390_sub_100B8390])
loc_100C2867:
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mC1820_sub_100C2820])
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB5DE0_sub_100B6DE0])
	CMP BYTE PTR [ESP+arg1+0x8],0x00
	JNZ loc_100C2883
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mC15D0_sub_100C25D0])
loc_100C2883:
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100C2910()
{
__asm{
	PUSH ESI
	MOV ESI, ECX
	CMP DWORD PTR [ECX+0x54],0x00
	JZ loc_100C292F
	MOV EAX, 0x00000001
	MOV CL,BYTE PTR [ESI+0x08]
	SHL EAX, CL
	MOV DWORD PTR [ESI+0x08],0x00000006
	OR DWORD PTR [ESI+0x0C],EAX
	POP ESI
	RET
loc_100C292F:
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB46B0_sub_100B56B0])
	MOV DWORD PTR [ESI+0x54],EAX
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C2A44()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD LEGO1_sub_100C2B70()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC1C11_proc_100C2C11]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	LEA ECX,DWORD PTR [ESI+0x20]
	CALL_LONG(offset [LEGO1_text.mB5D20___0MxCriticalSection__QAE_XZ])
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	MOV ECX, ESI
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.mD38_ptr]
	CALL_LONG(offset [LEGO1_text.mB3D50__Init_MxPresenter__IAEXXZ])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000002
	MOV ECX, ESI
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.mCD8_ptr]
	CALL_LONG(offset [LEGO1_text.mB44E0_sub_100B54E0])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000003
	MOV ECX, ESI
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8A88_ptr]
	CALL_LONG(offset [LEGO1_text.mC1DA0_sub_100C2DA0])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV EAX, ESI
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C2D40()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC1D89_proc_100C2D89]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m8A88_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	CALL_LONG(offset [LEGO1_text.mC1DE0_sub_100C2DE0])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mC1D93_sub_100C2D93])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C2D93()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB550_loc_1000C550])
}
}

__declspec(naked) DWORD LEGO1_sub_100C2DA0()
{
__asm{
	MOV DWORD PTR [ECX+0x50],0x00000000
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C2DE0()
{
__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI, ECX
	CALL_LONG(offset [LEGO1_text.mABF40__EventManager__YAPAVMxEventManager__XZ])
	TEST EAX, EAX
	JZ loc_100C2DFA
	CALL_LONG(offset [LEGO1_text.mABF40__EventManager__YAPAVMxEventManager__XZ])
	PUSH EDI
	MOV EDX,DWORD PTR [EAX]
	MOV ECX, EAX
	CALL_LONG(DWORD PTR [EDX+0x20])
loc_100C2DFA:
	LEA ESI,DWORD PTR [EDI+0x20]
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB5D80_sub_100B6D80])
	MOV EAX,DWORD PTR [EDI+0x50]
	TEST EAX, EAX
	JZ loc_100C2E14
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100C2E14:
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mC1DA0_sub_100C2DA0])
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mB5DE0_sub_100B6DE0])
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C2FC9()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD LEGO1_sub_100C2FE0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC2034_proc_100C3034]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m82A8_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ECX,DWORD PTR [ECX+0x1C]
	TEST ECX, ECX
	JZ loc_100C301B
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mC5EC0_sub_100C6EC0])
loc_100C301B:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mC203E_sub_100C303E])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C303E()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mBD170_loc_100BE170])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C3050(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	PUSH ESI
	PUSH EDI
	MOV ESI, 0xFFFFFFFF
	MOV EDI, ECX
	TEST EAX, EAX
	JZ loc_100C3090
	CMP DWORD PTR [EAX], 0x6843784D
	JNZ loc_100C3090
	ADD EAX, 0x08
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mC20A0_sub_100C30A0])
	TEST EAX, EAX
	JZ loc_100C3090
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	TEST ESI, ESI
	JZ loc_100C308E
	PUSH ESI
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mC2170_sub_100C3170])
	PUSH EDI
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mC5EE0_sub_100C6EE0])
loc_100C308E:
	XOR ESI, ESI
loc_100C3090:
	MOV EAX, ESI
	POP EDI
	POP ESI
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C30A0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	XOR EAX, EAX
	MOV EDX,DWORD PTR [ESP+arg1+0x4]
	CMP EDX, EAX
	JZ loc_100C30D9
	MOV AX,WORD PTR DS:[EDX]
	MOV ESI, EDX
	MOV WORD PTR DS:[ECX+0x08],AX
	ADD EDX, 0x02
	ADD EDX, 0x04
	ADD EDX, 0x04
	MOV EAX,DWORD PTR [EDX-0x08]
	ADD EDX, 0x04
	MOV DWORD PTR [ECX+0x0C],EAX
	MOV EAX,DWORD PTR [EDX-0x08]
	MOV DWORD PTR [ECX+0x10],EAX
	MOV EAX,DWORD PTR [EDX-0x04]
	MOV DWORD PTR [ECX+0x14],EAX
	MOV DWORD PTR [ECX+0x18],EDX
	SUB EDX, ESI
	MOV EAX, EDX
loc_100C30D9:
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C30E0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x04
	PUSH ESI
	MOV EDX,DWORD PTR [EAX+0x04]
	PUSH EDI
	MOV ESI, ECX
	MOV ECX,DWORD PTR [EDX]
	MOV DWORD PTR [ESP+var_4+0xC],ECX
	CMP ECX, EDX
	JZ loc_100C3120
	MOV DI,WORD PTR SS:[ESP+arg3+0xC]
	MOV ECX,DWORD PTR [ESI+0x0C]
loc_100C3100:
	MOV EAX,DWORD PTR [ESP+var_4+0xC]
	MOV EAX,DWORD PTR [EAX+0x08]
	CMP DWORD PTR [EAX+0x44],ECX
	JNZ loc_100C3112
	CMP WORD PTR DS:[EAX+0x48],DI
	JZ loc_100C312D
loc_100C3112:
	MOV EAX,DWORD PTR [ESP+var_4+0xC]
	MOV EAX,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_4+0xC],EAX
	CMP EAX, EDX
	JNZ loc_100C3100
loc_100C3120:
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	ADD ESP, 0x04
	RETN 0x000C
loc_100C312D:
	TEST BYTE PTR [ESI+0x08],0x02
	JZ loc_100C3147
	MOV ECX,DWORD PTR [ESI+0x1C]
	TEST ECX, ECX
	JZ loc_100C3147
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.mC5EC0_sub_100C6EC0])
	MOV DWORD PTR [ESI+0x1C],0x00000000
loc_100C3147:
	MOV EAX,DWORD PTR [ESP+arg2+0xC]
	MOV EDX,DWORD PTR [ESP+var_4+0xC]
	PUSH EAX
	PUSH ESI
	MOV ECX,DWORD PTR [EDX+0x08]
	CALL_LONG(offset [LEGO1_text.mB7150_sub_100B8150])
	XOR EAX, EAX
	POP EDI
	POP ESI
	ADD ESP, 0x04
	RETN 0x000C
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C3170(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	MOV DWORD PTR [ECX+0x1C],EAX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100C3180(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	ADD EAX, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C3190(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	ADD EAX, 0x0A
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C31A0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	ADD EAX, 0x0E
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C31B0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	ADD EAX, 0x12
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C31C0()
{
	enum{
		var_18 = -0x18,
		var_14 = -0x14,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC22CB_proc_100C32CB]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	PUSH EDI
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	PUSH 0x18
	MOV EBX, 0x00000001
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8AE8_ptr]
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	ADD ESP, 0x04
	MOV EDI, EAX
	MOV BYTE PTR [EBP+var_8+0x4],BL
	TEST EDI, EDI
	JZ_LONG(offset [LEGO1_text.mC2289_loc_100C3289])
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	MOV BYTE PTR [EBP+var_8+0x4],0x02
	MOV BYTE PTR [EBP+var_8+0x4],0x03
	MOV BYTE PTR [EBP+var_8+0x4],0x04
	MOV DWORD PTR [EDI], offset [LEGO1_rdata.m8B10_ptr]
	MOV DWORD PTR [EDI+0x08],0x00000000
	MOV DWORD PTR [EDI+0x0C],offset [LEGO1_text.mC2340_proc_100C3340]
	MOV BYTE PTR [EBP+var_8+0x4],0x05
	MOV DWORD PTR [EDI], offset [LEGO1_rdata.m8B28_ptr]
	MOV BYTE PTR [EBP+var_8+0x4],BL
	MOV DWORD PTR [EDI+0x14],0x00000000
	MOV DWORD PTR [EDI+0x10],0x00000000
	MOV EAX, EDI
	MOV DWORD PTR [EDI], offset [LEGO1_rdata.m8B40_ptr]
	MOV DWORD PTR [EDI+0x0C],offset [LEGO1_text.mC23E0_proc_100C33E0]
	MOV DWORD PTR [EDI], offset [LEGO1_rdata.m8B58_ptr]
	JMP_LONG(offset [LEGO1_text.mC228B_loc_100C328B])
}
}

__declspec(naked) DWORD LEGO1_proc_100C3269()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_proc_100C3271()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC22F0_loc_100C32F0])
}
}

__declspec(naked) DWORD LEGO1_proc_100C3279()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC2350_loc_100C3350])
}
}

__declspec(naked) DWORD LEGO1_proc_100C3281()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC2480_loc_100C3480])
}
}

__declspec(naked) DWORD LEGO1_loc_100C3289()
{
__asm{
	XOR EAX, EAX
	JMP_LONG(offset [LEGO1_text.mC228B_loc_100C328B])
}
}

__declspec(naked) DWORD LEGO1_loc_100C328B()
{
	enum{
		arg1217221 = 0x4A4B14,
		arg1217223 = 0x4A4B1C,
	};

__asm{
	MOV BYTE PTR [EBP+arg1217223-0x4A4B20],0x00
	MOV DWORD PTR [ESI+0x08],EAX
	MOV EAX, 0x7FFFFFFF
	MOV DWORD PTR [ESI+0x0C],EAX
	MOV DWORD PTR [ESI+0x10],EAX
	MOV EAX, 0xFFFFFFFF
	POP EDI
	MOV DWORD PTR [ESI+0x14],EAX
	MOV DWORD PTR [ESI+0x18],EAX
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],EAX
	MOV EAX, ESI
	MOV ECX,DWORD PTR [EBP+arg1217221-0x4A4B20]
	POP ESI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP EBX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100C32BE()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C3337()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100C33D3()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC22F0_loc_100C32F0])
}
}

__declspec(naked) DWORD LEGO1_sub_100C3469()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC2480_loc_100C3480])
}
}

__declspec(naked) DWORD LEGO1_sub_100C34C1()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC2350_loc_100C3350])
}
}

__declspec(naked) DWORD LEGO1_sub_100C352F()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100C35DB()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC22F0_loc_100C32F0])
}
}

__declspec(naked) DWORD LEGO1_sub_100C3649()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC2350_loc_100C3350])
}
}

__declspec(naked) DWORD LEGO1_sub_100C3690()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC26E1_proc_100C36E1]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m8AE8_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ECX,DWORD PTR [ECX+0x08]
	TEST ECX, ECX
	JZ loc_100C36C8
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
loc_100C36C8:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mC26EB_sub_100C36EB])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C36EB()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100C3BCD()
{
	enum{
		arg1217209 = 0x4A4AE4,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217209-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC2DD0_loc_100C3DD0])
}
}

__declspec(naked) DWORD LEGO1_sub_100C3C39()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC2C50_loc_100C3C50])
}
}

__declspec(naked) DWORD LEGO1_sub_100C3C91()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC2D80_loc_100C3D80])
}
}

__declspec(naked) DWORD LEGO1_sub_100C3CF9()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100C3D69()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC2D80_loc_100C3D80])
}
}

__declspec(naked) DWORD LEGO1_sub_100C3DC1()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100C3E11()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC2C50_loc_100C3C50])
}
}

__declspec(naked) DWORD LEGO1_sub_100C3F49()
{
	enum{
		arg1217217 = 0x4A4B04,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217217-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC2DD0_loc_100C3DD0])
}
}

__declspec(naked) DWORD LEGO1_sub_100C3F70(DWORD arg1)
{
	enum{
		var_18 = -0x18,
		var_14 = -0x14,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC3054_proc_100C4054]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	MOV EDI, ECX
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	PUSH 0x10
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV DWORD PTR [EDI], offset [LEGO1_rdata.m8BB8_ptr]
	MOV DWORD PTR [EDI+0x08],EAX
	MOV DWORD PTR [EDI+0x0C],0x00000000
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	ADD ESP, 0x04
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	MOV ESI, EAX
	TEST ESI, ESI
	JZ_LONG(offset [LEGO1_text.mC301E_loc_100C401E])
	MOV EAX,DWORD PTR [EDI+0x08]
	MOV ECX, ESI
	MOV EBX,DWORD PTR [EAX+0x08]
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	MOV BYTE PTR [EBP+var_8+0x4],0x02
	MOV BYTE PTR [EBP+var_8+0x4],0x03
	MOV BYTE PTR [EBP+var_8+0x4],0x04
	MOV EAX, ESI
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8BA0_ptr]
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	MOV DWORD PTR [ESI+0x08],EBX
	MOV DWORD PTR [ESI+0x0C],0x00000000
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8B70_ptr]
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8B88_ptr]
	JMP_LONG(offset [LEGO1_text.mC3020_loc_100C4020])
}
}

__declspec(naked) DWORD LEGO1_proc_100C4006()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_proc_100C400E()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC2D80_loc_100C3D80])
}
}

__declspec(naked) DWORD LEGO1_proc_100C4016()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC2C50_loc_100C3C50])
}
}

__declspec(naked) DWORD LEGO1_loc_100C401E()
{
__asm{
	XOR EAX, EAX
	JMP_LONG(offset [LEGO1_text.mC3020_loc_100C4020])
}
}

__declspec(naked) DWORD __stdcall LEGO1_loc_100C4020(DWORD arg1)
{
	enum{
		arg1217221 = 0x4A4B14,
		arg1217223 = 0x4A4B1C,
	};

__asm{
	XOR ECX, ECX
	MOV BYTE PTR [EBP+arg1217223-0x4A4B20],CL
	MOV DWORD PTR [EDI+0x10],EAX
	MOV DWORD PTR [EDI+0x14],ECX
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0xFFFFFFFF
	MOV EAX, EDI
	MOV ECX,DWORD PTR [EBP+arg1217221-0x4A4B20]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP EDI
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_proc_100C4047()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_loc_100C40B0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC3124_proc_100C4124]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m8BB8_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EAX,DWORD PTR [ECX+0x0C]
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	TEST EAX, EAX
	JZ loc_100C40EB
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100C40EB:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EAX+0x10]
	TEST ECX, ECX
	JZ loc_100C40FB
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
loc_100C40FB:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EAX+0x14]
	TEST ECX, ECX
	JZ loc_100C410B
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
loc_100C410B:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mC312E_sub_100C412E])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100C412E()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C44A0(DWORD arg1)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	PUSH EBP
	MOV ECX,DWORD PTR [ESI+0x14]
	TEST ECX, ECX
	JZ FAR loc_100C4569
	MOV EAX,DWORD PTR [ECX+0x0C]
	TEST EAX, EAX
	JNZ loc_100C44C6
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV EDX,DWORD PTR [EAX+0x10]
	MOV DWORD PTR [ECX+0x0C],EDX
	JMP loc_100C44CC
loc_100C44C6:
	MOV EAX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [ECX+0x0C],EAX
loc_100C44CC:
	MOV EAX,DWORD PTR [ECX+0x0C]
	TEST EAX, EAX
	JZ FAR loc_100C4569
	MOV ECX,DWORD PTR [EAX]
	TEST EAX, EAX
	MOV DWORD PTR [ESP+var_4+0x18],ECX
	JZ FAR loc_100C4569
	MOV EAX,DWORD PTR [ESI+0x10]
	MOV EAX,DWORD PTR [EAX+0x0C]
	TEST EAX, EAX
	JZ loc_100C44F5
	MOV EAX,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_8+0x18],EAX
loc_100C44F5:
	MOV EDI,DWORD PTR [ESP+arg1+0x18]
	MOV EAX,DWORD PTR [ESP+var_8+0x18]
	MOV EDX,DWORD PTR [EAX]
	CMP DWORD PTR [EDI+0x0C],EDX
	JLE loc_100C456D
	MOV ECX,DWORD PTR [EAX+0x04]
	MOV EBX,DWORD PTR [EDI+0x04]
	CMP ECX, EBX
	JLE loc_100C456D
	MOV EAX,DWORD PTR [ESP+var_4+0x18]
	MOV EBP,DWORD PTR [EAX]
	CMP DWORD PTR [EDI+0x08],EBP
	JLE loc_100C456D
	MOV EAX,DWORD PTR [EAX+0x04]
	CMP EAX, EBX
	JLE loc_100C456D
	PUSH ECX
	PUSH EAX
	PUSH EDX
	MOV ECX, ESI
	PUSH EBP
	CALL_LONG(offset [LEGO1_text.mC3980_sub_100C4980])
	MOV EDX,DWORD PTR [ESI+0x0C]
	MOV EAX,DWORD PTR [EDI]
	MOV ECX,DWORD PTR [EDX]
	CMP EAX, ECX
	JG loc_100C4538
	MOV EAX, ECX
loc_100C4538:
	MOV DWORD PTR [EDX],EAX
	MOV EAX,DWORD PTR [EDI+0x04]
	MOV ECX,DWORD PTR [EDX+0x04]
	CMP EAX, ECX
	JG loc_100C4546
	MOV EAX, ECX
loc_100C4546:
	MOV DWORD PTR [EDX+0x04],EAX
	MOV EAX,DWORD PTR [EDI+0x08]
	MOV ECX,DWORD PTR [EDX+0x08]
	CMP EAX, ECX
	JL loc_100C4555
	MOV EAX, ECX
loc_100C4555:
	MOV DWORD PTR [EDX+0x08],EAX
	MOV EAX,DWORD PTR [EDI+0x0C]
	MOV ECX,DWORD PTR [EDX+0x0C]
	CMP EAX, ECX
	JL loc_100C4564
	MOV EAX, ECX
loc_100C4564:
	MOV DWORD PTR [EDX+0x0C],EAX
	JMP loc_100C4575
loc_100C4569:
	MOV EDI,DWORD PTR [ESP+arg1+0x18]
loc_100C456D:
	PUSH EDI
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mC3A20_sub_100C4A20])
loc_100C4575:
	MOV EAX,DWORD PTR [ESI+0x0C]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100C46C0(DWORD arg1)
{
	enum{
		var_14 = -0x14,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC3770_proc_100C4770]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EDI, ECX
	MOV ECX,DWORD PTR [ECX+0x14]
	TEST ECX, ECX
	JZ loc_100C46ED
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
loc_100C46ED:
	PUSH 0x10
	XOR EBX, EBX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	ADD ESP, 0x04
	MOV ESI, EAX
	MOV DWORD PTR [EBP+var_8+0x4],EBX
	TEST ESI, ESI
	JZ_LONG(offset [LEGO1_text.mC3752_loc_100C4752])
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8C28_ptr]
	MOV BYTE PTR [EBP+var_8+0x4],0x02
	MOV BYTE PTR [EBP+var_8+0x4],0x03
	MOV DWORD PTR [ESI+0x08],EAX
	MOV BYTE PTR [EBP+var_8+0x4],BL
	MOV EAX, ESI
	MOV DWORD PTR [ESI+0x0C],EBX
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8BF8_ptr]
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m8C10_ptr]
	JMP_LONG(offset [LEGO1_text.mC3754_loc_100C4754])
}
}

__declspec(naked) DWORD LEGO1_proc_100C473A()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_proc_100C4742()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC3930_loc_100C4930])
}
}

__declspec(naked) DWORD LEGO1_proc_100C474A()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC3800_loc_100C4800])
}
}

__declspec(naked) DWORD LEGO1_loc_100C4752()
{
__asm{
	XOR EAX, EAX
	JMP_LONG(offset [LEGO1_text.mC3754_loc_100C4754])
}
}

__declspec(naked) DWORD __stdcall LEGO1_loc_100C4754(DWORD arg1)
{
	enum{
		arg1217221 = 0x4A4B14,
		arg1217223 = 0x4A4B1C,
	};

__asm{
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0xFFFFFFFF
	MOV DWORD PTR [EDI+0x14],EAX
	MOV EAX,DWORD PTR [EBP+arg1217221-0x4A4B20]
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EDI
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100C47E9()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC3800_loc_100C4800])
}
}

__declspec(naked) DWORD LEGO1_sub_100C4841()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC3930_loc_100C4930])
}
}

__declspec(naked) DWORD LEGO1_sub_100C48A9()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100C4919()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mC3930_loc_100C4930])
}
}

__declspec(naked) DWORD LEGO1_sub_100C4971()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C4980(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mC3A06_proc_100C4A06]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	PUSH EDI
	CMP DWORD PTR [ECX+0x0C],0x00
	MOV ESI, ECX
	JNZ loc_100C49D2
	PUSH 0x10
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	ADD ESP, 0x04
	CMP EAX, 0x01
	MOV EDI, EAX
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV EAX, 0x00000000
	ADC EAX, -0x01
	AND EAX, EDI
	MOV DWORD PTR [ESI+0x0C],EAX
loc_100C49D2:
	MOV ECX,DWORD PTR [ESI+0x0C]
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV EDX,DWORD PTR [EBP+arg2+0x4]
	MOV DWORD PTR [ECX],EAX
	MOV ECX,DWORD PTR [ESI+0x0C]
	MOV EAX,DWORD PTR [EBP+arg3+0x4]
	MOV DWORD PTR [ECX+0x04],EDX
	MOV ECX,DWORD PTR [ESI+0x0C]
	MOV EDX,DWORD PTR [EBP+arg4+0x4]
	POP EDI
	MOV DWORD PTR [ECX+0x08],EAX
	MOV ECX,DWORD PTR [ESI+0x0C]
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	POP ESI
	MOV DWORD PTR FS:[0x00000000], EAX
	MOV DWORD PTR [ECX+0x0C],EDX
	MOV ESP, EBP
	POP EBP
	RETN 0x0010
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100C4A20(DWORD arg1)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x10]
	PUSH EDI
	MOV EDI, ECX
loc_100C4A2C:
	MOV ECX,DWORD PTR [EDI+0x10]
	MOV EAX,DWORD PTR [ECX+0x0C]
	TEST EAX, EAX
	JNZ loc_100C4A41
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV EDX,DWORD PTR [EAX+0x10]
	MOV DWORD PTR [ECX+0x0C],EDX
	JMP loc_100C4A47
loc_100C4A41:
	MOV EAX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [ECX+0x0C],EAX
loc_100C4A47:
	MOV EAX,DWORD PTR [ECX+0x0C]
	TEST EAX, EAX
	JZ FAR loc_100C4B3F
	MOV ECX,DWORD PTR [EAX]
	TEST EAX, EAX
	MOV DWORD PTR [ESP+var_8+0x14],ECX
	JZ FAR loc_100C4B3F
	MOV ECX,DWORD PTR [ESP+var_8+0x14]
	MOV EAX,DWORD PTR [ESI+0x0C]
	CMP DWORD PTR [ECX],EAX
	JGE FAR loc_100C4B2F
	LEA EBX,DWORD PTR [ECX+0x04]
	MOV EAX,DWORD PTR [ESI+0x04]
	CMP DWORD PTR [EBX],EAX
	JLE loc_100C4A2C
	MOV ECX,DWORD PTR [ECX+0x08]
	PUSH ECX
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mC36C0_sub_100C46C0])
loc_100C4A84:
	MOV ECX,DWORD PTR [EDI+0x14]
	MOV EAX,DWORD PTR [ECX+0x0C]
	TEST EAX, EAX
	JNZ loc_100C4A99
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV EDX,DWORD PTR [EAX+0x10]
	MOV DWORD PTR [ECX+0x0C],EDX
	JMP loc_100C4A9F
loc_100C4A99:
	MOV EAX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [ECX+0x0C],EAX
loc_100C4A9F:
	MOV EAX,DWORD PTR [ECX+0x0C]
	TEST EAX, EAX
	JZ loc_100C4A2C
	MOV ECX,DWORD PTR [EAX]
	TEST EAX, EAX
	MOV DWORD PTR [ESP+var_8+0x18],ECX
	JZ FAR loc_100C4A2C
	MOV EAX,DWORD PTR [ESP+var_8+0x18]
	MOV ECX,DWORD PTR [ESI+0x08]
	CMP DWORD PTR [EAX],ECX
	JGE FAR loc_100C4A2C
	MOV ECX,DWORD PTR [ESI]
	CMP DWORD PTR [EAX+0x04],ECX
	JLE loc_100C4A84
	MOV EAX,DWORD PTR [EBX]
	MOV ECX,DWORD PTR [ESP+var_8+0x18]
	PUSH EAX
	MOV EDX,DWORD PTR [ECX+0x04]
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	PUSH EDX
	MOV EDX,DWORD PTR [ESP+var_8+0x20]
	MOV ECX,DWORD PTR [EAX]
	PUSH ECX
	MOV EAX,DWORD PTR [EDX]
	PUSH EAX
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mC3980_sub_100C4980])
	MOV EDX,DWORD PTR [EDI+0x0C]
	MOV ECX,DWORD PTR [ESI]
	MOV EAX,DWORD PTR [EDX]
	CMP EAX, ECX
	JG loc_100C4AF7
	MOV EAX, ECX
loc_100C4AF7:
	MOV DWORD PTR [EDX],EAX
	MOV EAX,DWORD PTR [EDX+0x04]
	MOV ECX,DWORD PTR [ESI+0x04]
	CMP EAX, ECX
	JG loc_100C4B05
	MOV EAX, ECX
loc_100C4B05:
	MOV DWORD PTR [EDX+0x04],EAX
	MOV EAX,DWORD PTR [EDX+0x08]
	MOV ECX,DWORD PTR [ESI+0x08]
	CMP EAX, ECX
	JL loc_100C4B14
	MOV EAX, ECX
loc_100C4B14:
	MOV DWORD PTR [EDX+0x08],EAX
	MOV EAX,DWORD PTR [ESI+0x0C]
	MOV ECX,DWORD PTR [EDX+0x0C]
	CMP ECX, EAX
	JL loc_100C4B23
	MOV ECX, EAX
loc_100C4B23:
	POP EDI
	MOV DWORD PTR [EDX+0x0C],ECX
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0004
loc_100C4B2F:
	MOV EAX,DWORD PTR [EDI]
	MOV ECX, EDI
	CALL_LONG(DWORD PTR [EAX+0x3C])
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0004
loc_100C4B3F:
	MOV EAX,DWORD PTR [EDI]
	MOV ECX, EDI
	CALL_LONG(DWORD PTR [EAX+0x3C])
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0004
}
}

