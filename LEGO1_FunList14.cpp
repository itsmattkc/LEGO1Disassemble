#include "stdafx.h"
#include "LEGO1.h"

#pragma warning (disable:4730)
#pragma warning (disable:4733)
#pragma warning (disable:4799)
#define DB(b) __asm _emit b

__declspec(naked) DWORD __stdcall LEGO1_loc_100848C3(DWORD arg1)
{
	enum{
		arg1217217 = 0x4A4B04,
		arg1217221 = 0x4A4B14,
	};

__asm{
	TEST BL, BL
	JNZ loc_100848DF
	CMP DWORD PTR [EBP+arg1217217-0x4A4B20],0x00
	JZ loc_100848DF
	PUSH 0x01
	MOV EAX,DWORD PTR [EBP+arg1217217-0x4A4B20]
	MOV ECX, EAX
	MOV EBX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBX])
	MOV DWORD PTR [EBP+arg1217217-0x4A4B20],0x00000000
loc_100848DF:
	MOV EAX,DWORD PTR [EBP+arg1217217-0x4A4B20]
	MOV ECX,DWORD PTR [EBP+arg1217221-0x4A4B20]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP EDI
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_proc_100848F5()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_10084902()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100849A0(DWORD arg1, DWORD arg2)
{
	enum{
		var_128 = -0x128,
		var_124 = -0x124,
		var_120 = -0x120,
		var_11C = -0x11C,
		var_118 = -0x118,
		var_114 = -0x114,
		var_110 = -0x110,
		var_10C = -0x10C,
		var_100 = -0x100,
		r = 0x0,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x00000120
	MOV EAX, DWORD PTR [offset LEGO1_rdata.m6510_ptr]
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX, ECX
	MOV EDI,DWORD PTR [ESP+arg1+0x12C]
	PUSH EBP
	PUSH EAX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m83CF0_sub_10084CF0])
	MOV DWORD PTR [ESP+var_11C+0x130],EAX
	TEST EAX, EAX
	JZ FAR loc_10084BE6
	PUSH offset [LEGO1_rdata.m6514_ptr]
	CALL_LONG(offset [LEGO1_text.m14810_sub_10015810])
	MOV ECX, EAX
	CALL_LONG(offset [LEGO1_text.mA65B0_sub_100A75B0])
	MOV EDX,DWORD PTR [offset LEGO1_data + 0xC4E8]
	MOV DWORD PTR [ESP+var_120+0x130],EAX
	MOV EAX,DWORD PTR [EAX+0x0C]
	PUSH EDX
	MOV DWORD PTR [ESP+var_10C+0x134],EAX
	PUSH offset LEGO1_data + 0x848
	LEA EAX,DWORD PTR [ESP+var_100+0x138]
	INC DWORD PTR [offset LEGO1_data + 0xC4E8]
	MOV ECX,DWORD PTR [EDI+0x000000E4]
	PUSH ECX
	PUSH offset [LEGO1_data.mC514_str]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8A5A0_sub_1008B5A0])
	LEA ECX,DWORD PTR [ESP+var_100+0x144]
	MOV EDX,DWORD PTR [ESP+var_10C+0x144]
	MOV DWORD PTR [ESP+var_118+0x144],ECX
	ADD ESP, 0x14
	LEA ECX,DWORD PTR [ESP+var_118+0x130]
	PUSH EDX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m14810_sub_10015810])
	MOV ECX, EAX
	CALL_LONG(offset [LEGO1_text.mA62C0_sub_100A72C0])
	MOV ESI, EAX
	CALL_LONG(offset [LEGO1_text.m14720__VideoManager__YAPAVLegoVideoManager__XZ])
	MOV ECX,DWORD PTR [EAX+0x64]
	MOV EBP,DWORD PTR [ESP+r+0x138]
	MOV DWORD PTR [ESP+var_10C+0x138],ECX
	TEST EBP, EBP
	JNZ FAR loc_10084B27
	MOV EAX,DWORD PTR [EDI+0x000000E4]
	MOV ECX, EBX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m83C60_sub_10084C60])
	MOV EDI,DWORD PTR [EAX+0x6C]
	ADD EAX, 0x60
	XOR EDX, EDX
	XOR ECX, ECX
	MOV DL,BYTE PTR [EAX+0x14]
	XOR EBP, EBP
	MOV EAX,DWORD PTR [EAX+0x10]
	MOV CL,BYTE PTR [EDI+EDX]
	MOV EDX,DWORD PTR [ECX*4+EAX]
	MOV DWORD PTR [ESP+var_11C+0x138],EDX
	CALL_LONG(offset [LEGO1_text.m14800_sub_10015800])
	MOV EDX,DWORD PTR [EAX+0x0C]
	MOV DWORD PTR [ESP+var_118+0x138],EDX
	MOV ECX,DWORD PTR [EDX+0x04]
	CMP DWORD PTR [offset LEGO1_data + 0x100],ECX
	JZ loc_10084AD1
loc_10084A8E:
	MOV EDI,DWORD PTR [ECX+0x0C]
	MOV EBX,DWORD PTR [ESP+var_11C+0x138]
loc_10084A95:
	MOV DL,BYTE PTR [EDI]
	CMP DL,BYTE PTR [EBX]
	JNZ loc_10084AB5
	OR DL, DL
	JZ loc_10084AB1
	MOV DL,BYTE PTR [EDI+0x01]
	CMP DL,BYTE PTR [EBX+0x01]
	JNZ loc_10084AB5
	ADD EDI, 0x02
	ADD EBX, 0x02
	OR DL, DL
	JNZ loc_10084A95
loc_10084AB1:
	XOR EDX, EDX
	JMP loc_10084ABA
loc_10084AB5:
	SBB EDX, EDX
	SBB EDX, -0x01
loc_10084ABA:
	TEST EDX, EDX
	JG loc_10084AC6
	MOV DWORD PTR [ESP+var_118+0x138],ECX
	MOV ECX,DWORD PTR [ECX]
	JMP loc_10084AC9
loc_10084AC6:
	MOV ECX,DWORD PTR [ECX+0x08]
loc_10084AC9:
	CMP DWORD PTR [offset LEGO1_data + 0x100],ECX
	JNZ loc_10084A8E
loc_10084AD1:
	MOV ECX,DWORD PTR [ESP+var_118+0x138]
	MOV DWORD PTR [ESP+var_120+0x138],ECX
	CMP DWORD PTR [EAX+0x0C],ECX
	JZ loc_10084B12
	MOV EDX,DWORD PTR [ESP+var_11C+0x138]
	MOV EDI,DWORD PTR [ECX+0x0C]
loc_10084AE5:
	MOV CL,BYTE PTR [EDX]
	CMP CL,BYTE PTR [EDI]
	JNZ loc_10084B05
	OR CL, CL
	JZ loc_10084B01
	MOV CL,BYTE PTR [EDX+0x01]
	CMP CL,BYTE PTR [EDI+0x01]
	JNZ loc_10084B05
	ADD EDX, 0x02
	ADD EDI, 0x02
	OR CL, CL
	JNZ loc_10084AE5
loc_10084B01:
	XOR ECX, ECX
	JMP loc_10084B0A
loc_10084B05:
	SBB ECX, ECX
	SBB ECX, -0x01
loc_10084B0A:
	TEST ECX, ECX
	LEA ECX,DWORD PTR [ESP+var_120+0x138]
	JLE loc_10084B1D
loc_10084B12:
	MOV ECX,DWORD PTR [EAX+0x0C]
	MOV DWORD PTR [ESP+var_110+0x138],ECX
	LEA ECX,DWORD PTR [ESP+var_110+0x138]
loc_10084B1D:
	MOV ECX,DWORD PTR [ECX]
	CMP DWORD PTR [EAX+0x0C],ECX
	JZ loc_10084B27
	MOV EBP,DWORD PTR [ECX+0x10]
loc_10084B27:
	CMP DWORD PTR [ESP+var_114+0x138],0x00
	JLE loc_10084B6F
	XOR EDI, EDI
	MOV EAX,DWORD PTR [ESP+var_114+0x138]
	MOV DWORD PTR [ESP+var_120+0x138],EAX
loc_10084B38:
	MOV ECX,DWORD PTR [ESP+var_128+0x138]
	MOV EDX,DWORD PTR [ESP+var_10C+0x138]
	PUSH EDX
	MOV EAX,DWORD PTR [ECX+0x04]
	MOV ECX,DWORD PTR [EDI+EAX]
	CALL_LONG(offset [LEGO1_text.mA9BB0_sub_100AABB0])
	MOV EBX, EAX
	TEST EBP, EBP
	JZ loc_10084B5A
	PUSH EBP
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.mA9D70_sub_100AAD70])
loc_10084B5A:
	MOV EAX,DWORD PTR [ESI+0x0C]
	MOV ECX,DWORD PTR [ESI+0x04]
	ADD EDI, 0x04
	MOV DWORD PTR [EAX*4+ECX],EBX
	INC DWORD PTR [ESI+0x0C]
	DEC DWORD PTR [ESP+var_120+0x138]
	JNZ loc_10084B38
loc_10084B6F:
	MOV ECX,DWORD PTR [ESP+var_128+0x138]
	MOV EAX,DWORD PTR [ECX+0x10]
	DEC EAX
	MOV DWORD PTR [ECX+0x10],EAX
	JNZ loc_10084B85
	PUSH ECX
	MOV ECX,DWORD PTR [ECX+0x14]
	CALL_LONG(offset [LEGO1_text.mA6680_sub_100A7680])
loc_10084B85:
	MOV ECX,DWORD PTR [ESP+var_124+0x138]
	CMP DWORD PTR [ECX+0x000000E0],0x00
	JL loc_10084BAD
	CALL_LONG(offset [LEGO1_text.m14720__VideoManager__YAPAVLegoVideoManager__XZ])
	MOV ECX,DWORD PTR [ESP+var_124+0x138]
	MOV EAX,DWORD PTR [EAX+0x68]
	PUSH ECX
	MOV EDX,DWORD PTR [EAX+0x08]
	MOV ECX,DWORD PTR [EDX+0x00000088]
	CALL_LONG(offset [LEGO1_text.mA56A0_sub_100A66A0])
loc_10084BAD:
	MOV ECX,DWORD PTR [ESP+var_124+0x138]
	MOV EAX,DWORD PTR [ECX+0x08]
	TEST EAX, EAX
	JZ loc_10084BC6
	DEC DWORD PTR [EAX+0x10]
	JNZ loc_10084BC6
	PUSH EAX
	MOV ECX,DWORD PTR [EAX+0x14]
	CALL_LONG(offset [LEGO1_text.mA6680_sub_100A7680])
loc_10084BC6:
	MOV ECX,DWORD PTR [ESP+var_124+0x138]
	TEST ESI, ESI
	MOV DWORD PTR [ECX+0x08],ESI
	JZ loc_10084BD4
	INC DWORD PTR [ESI+0x10]
loc_10084BD4:
	MOV EAX,DWORD PTR [ESI+0x10]
	DEC EAX
	MOV DWORD PTR [ESI+0x10],EAX
	JNZ loc_10084BE6
	PUSH ESI
	MOV ECX,DWORD PTR [ESI+0x14]
	CALL_LONG(offset [LEGO1_text.mA6680_sub_100A7680])
loc_10084BE6:
	CMP DWORD PTR [ESP+var_124+0x138],0x01
	SBB AL, AL
	POP EBP
	INC AL
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000120
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_10084C00(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI, offset LEGO1_data + 0x14F20
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
loc_10084C0B:
	PUSH ESI
	MOV EAX,DWORD PTR [EDI]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8B110_sub_1008C110])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ loc_10084C2E
	ADD EDI, 0x00000108
	CMP EDI, offset LEGO1_data + 0x19330
	JB loc_10084C0B
	XOR AL, AL
	POP EDI
	POP ESI
	RET
loc_10084C2E:
	MOV AL, 0x01
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10084C40(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m83C60_sub_10084C60])
	TEST EAX, EAX
	JZ loc_10084C54
	MOV EAX,DWORD PTR [EAX+0x08]
	RETN 0x0004
loc_10084C54:
	XOR EAX, EAX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10084C60(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX, offset LEGO1_data + 0x14F20
	XOR EDI, EDI
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
loc_10084C6E:
	PUSH ESI
	MOV EAX,DWORD PTR [EBX]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8B110_sub_1008C110])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ loc_10084C8D
	ADD EBX, 0x00000108
	INC EDI
	CMP EBX, offset LEGO1_data + 0x19330
	JB loc_10084C6E
loc_10084C8D:
	CMP EDI, 0x42
	JNB loc_10084CA6
	MOV EAX, EDI
	SHL EAX, 0x05
	ADD EAX, EDI
	POP EDI
	POP ESI
	POP EBX
	LEA EAX,DWORD PTR [offset LEGO1_data + 0x14F20+EAX*8]
	RETN 0x0004
loc_10084CA6:
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10084CB0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	XOR EDX, EDX
	MOV ECX, offset LEGO1_data + 0x14F24
	MOV EAX,DWORD PTR [ESP+arg1]
loc_10084CBB:
	CMP DWORD PTR [ECX],EAX
	JZ loc_10084CCE
	ADD ECX, 0x00000108
	INC EDX
	CMP ECX, offset LEGO1_data + 0x19334
	JB loc_10084CBB
loc_10084CCE:
	CMP EDX, 0x42
	JNB loc_10084CE4
	MOV EAX, EDX
	SHL EAX, 0x05
	ADD EAX, EDX
	LEA EAX,DWORD PTR [offset LEGO1_data + 0x14F20+EAX*8]
	RETN 0x0004
loc_10084CE4:
	XOR EAX, EAX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10084CF0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg1217224 = 0x4A4B20,
		arg1217226 = 0x4A4B28,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [EAX+0x04]
	PUSH EBP
	MOV ECX,DWORD PTR [ESI+0x04]
	MOV EAX,DWORD PTR [ECX]
	MOV EBP, EAX
	CMP EAX, ECX
	JZ loc_10084D2C
	MOV EBX,DWORD PTR [ESP+arg2+0x18]
loc_10084D0D:
	MOV EDI,DWORD PTR [EBP+arg1217226-0x4A4B20]
	MOV EAX,DWORD PTR [EDI+0x000000E4]
	PUSH EAX
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m8B110_sub_1008C110])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ loc_10084D38
	MOV EBP,DWORD PTR [EBP+arg1217224-0x4A4B20]
	CMP DWORD PTR [ESI+0x04],EBP
	JNZ loc_10084D0D
loc_10084D2C:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0008
loc_10084D38:
	MOV EAX, EDI
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10084D50(DWORD arg1, DWORD arg2)
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	SUB ESP, 0x14
	MOV DWORD PTR [ESP+var_14+0x14],ECX
	PUSH EBX
	PUSH ESI
	MOV ECX,DWORD PTR [EAX+0x000000E4]
	PUSH EDI
	XOR ESI, ESI
	PUSH EBP
	MOV EDI, offset [LEGO1_rdata.m6408_ptr]
loc_10084D6C:
	MOV EAX, ECX
	MOV EBX,DWORD PTR [EDI]
loc_10084D70:
	MOV DL,BYTE PTR [EAX]
	CMP DL,BYTE PTR [EBX]
	JNZ loc_10084D90
	OR DL, DL
	JZ loc_10084D8C
	MOV DL,BYTE PTR [EAX+0x01]
	CMP DL,BYTE PTR [EBX+0x01]
	JNZ loc_10084D90
	ADD EAX, 0x02
	ADD EBX, 0x02
	OR DL, DL
	JNZ loc_10084D70
loc_10084D8C:
	XOR EAX, EAX
	JMP loc_10084D95
loc_10084D90:
	SBB EAX, EAX
	SBB EAX, -0x01
loc_10084D95:
	TEST EAX, EAX
	JZ loc_10084DA5
	ADD EDI, 0x58
	INC ESI
	CMP EDI, offset LEGO1_rdata + 0x6778
	JB loc_10084D6C
loc_10084DA5:
	MOV BL, 0x01
	CMP ESI, 0x06
	JNZ loc_10084DB3
	MOV ESI, 0x00000004
	JMP loc_10084DD8
loc_10084DB3:
	CMP ESI, 0x07
	JNZ loc_10084DBF
	MOV ESI, 0x00000005
	JMP loc_10084DD8
loc_10084DBF:
	CMP ESI, 0x03
	JNZ loc_10084DCB
	MOV ESI, 0x00000001
	JMP loc_10084DD8
loc_10084DCB:
	TEST ESI, ESI
	JNZ loc_10084DD6
	MOV ESI, 0x00000002
	JMP loc_10084DD8
loc_10084DD6:
	XOR BL, BL
loc_10084DD8:
	LEA EAX,DWORD PTR [ESI*4+ESI]
	LEA ECX,DWORD PTR [EAX*2+ESI]
	LEA EBP,DWORD PTR [ECX*8+0x00000000]
	TEST BYTE PTR [offset LEGO1_rdata.m6410+EBP],0x02
	JNZ loc_10084DFA
	XOR AL, AL
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x14
	RETN 0x0008
loc_10084DFA:
	MOV EAX,DWORD PTR [ESP+arg1+0x24]
	MOV ECX,DWORD PTR [EAX+0x000000E4]
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+var_14+0x28]
	CALL_LONG(offset [LEGO1_text.m83C60_sub_10084C60])
	MOV EDI, EAX
	TEST EDI, EDI
	JNZ loc_10084E20
	XOR AL, AL
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x14
	RETN 0x0008
loc_10084E20:
	TEST BL, BL
	JZ loc_10084E3D
	MOV EAX,DWORD PTR [offset LEGO1_rdata.m6408_ptr+EBP]
	MOV ECX,DWORD PTR [ESP+arg1+0x24]
	PUSH EAX
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+var_14+0x2C]
	CALL_LONG(offset [LEGO1_text.m83CF0_sub_10084CF0])
	MOV DWORD PTR [ESP+arg2+0x24],EAX
loc_10084E3D:
	LEA EAX,DWORD PTR [ESI*2+ESI]
	XOR EDX, EDX
	LEA ECX,DWORD PTR [EAX*8+EDI+0x18]
	MOV AL,BYTE PTR [EAX*8+EDI+0x2C]
	INC AL
	MOV DL, AL
	MOV BYTE PTR [ECX+0x14],AL
	MOV EAX,DWORD PTR [ECX+0x0C]
	CMP BYTE PTR [EAX+EDX],0xFF
	JNZ loc_10084E5E
	MOV BYTE PTR [ECX+0x14],0x00
loc_10084E5E:
	LEA EAX,DWORD PTR [ESP+var_10+0x24]
	LEA EDX,DWORD PTR [ESP+var_C+0x24]
	LEA EBX,DWORD PTR [ESP+var_8+0x24]
	PUSH EAX
	LEA EAX,DWORD PTR [ESP+var_4+0x28]
	PUSH EDX
	PUSH EBX
	XOR EDX, EDX
	PUSH EAX
	XOR EBX, EBX
	MOV BL,BYTE PTR [ECX+0x14]
	MOV EAX,DWORD PTR [ECX+0x0C]
	MOV DL,BYTE PTR [EAX+EBX]
	MOV EAX,DWORD PTR [ECX+0x10]
	MOV ECX,DWORD PTR [EDX*4+EAX]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.mA8BF0_sub_100A9BF0])
	MOV ECX,DWORD PTR [ESP+var_10+0x38]
	MOV EDX,DWORD PTR [ESP+var_C+0x38]
	MOV EAX,DWORD PTR [ESP+var_8+0x38]
	ADD ESP, 0x14
	PUSH ECX
	PUSH EDX
	MOV ECX,DWORD PTR [ESP+var_4+0x2C]
	PUSH EAX
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+arg2+0x34]
	CALL_LONG(offset [LEGO1_text.mA8170_sub_100A9170])
	MOV AL, 0x01
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x14
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10084EC0(DWORD arg1)
{
	enum{
		var_124 = -0x124,
		var_120 = -0x120,
		var_11C = -0x11C,
		var_118 = -0x118,
		var_114 = -0x114,
		var_110 = -0x110,
		var_10C = -0x10C,
		var_100 = -0x100,
		arg1 = 0x4,
		arg1217224 = 0x4A4B20,
		arg1217225 = 0x4A4B24,
		arg1217226 = 0x4A4B28,
		arg1217227 = 0x4A4B2C,
		arg1217228 = 0x4A4B30,
		arg1217229 = 0x4A4B34,
	};

__asm{
	SUB ESP, 0x0000011C
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI,DWORD PTR [ESP+arg1+0x128]
	PUSH EBP
	MOV EAX,DWORD PTR [EDI+0x000000E4]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m83C60_sub_10084C60])
	TEST EAX, EAX
	JNZ loc_10084EEA
	XOR AL, AL
	JMP FAR loc_10085082
loc_10084EEA:
	LEA EBP,DWORD PTR [EAX+0x30]
	XOR ECX, ECX
	MOV AL,BYTE PTR [EBP+arg1217226-0x4A4B20]
	INC AL
	MOV CL, AL
	MOV BYTE PTR [EBP+arg1217226-0x4A4B20],AL
	MOV EAX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	MOV BL,BYTE PTR [EAX+ECX]
	CMP BL, -0x01
	JNZ loc_10084F0D
	MOV BYTE PTR [EBP+arg1217226-0x4A4B20],0x00
	MOV EAX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	MOV BL,BYTE PTR [EAX]
loc_10084F0D:
	MOV EAX, DWORD PTR [offset LEGO1_rdata.m6460_ptr]
	MOV ECX, ESI
	PUSH EAX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m83CF0_sub_10084CF0])
	MOV DWORD PTR [ESP+var_11C+0x12C],EAX
	TEST EAX, EAX
	JZ FAR loc_10085080
	XOR EAX, EAX
	MOV AL, BL
	SHL EAX, 0x02
	ADD EAX,DWORD PTR [EBP+arg1217225-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m14810_sub_10015810])
	MOV ECX, EAX
	CALL_LONG(offset [LEGO1_text.mA65B0_sub_100A75B0])
	MOV EBX,DWORD PTR [EAX+0x0C]
	MOV ESI, EAX
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC4EC]
	LEA EDX,DWORD PTR [ESP+var_100+0x12C]
	PUSH EAX
	INC DWORD PTR [offset LEGO1_data + 0xC4EC]
	MOV ECX,DWORD PTR [EDI+0x000000E4]
	PUSH ECX
	PUSH offset LEGO1_data + 0xC50C
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m8A5A0_sub_1008B5A0])
	LEA ECX,DWORD PTR [ESP+var_100+0x13C]
	ADD ESP, 0x10
	MOV DWORD PTR [ESP+var_118+0x12C],ECX
	PUSH EBX
	LEA ECX,DWORD PTR [ESP+var_118+0x130]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m14810_sub_10015810])
	MOV ECX, EAX
	CALL_LONG(offset [LEGO1_text.mA62C0_sub_100A72C0])
	MOV EDI, EAX
	CALL_LONG(offset [LEGO1_text.m14720__VideoManager__YAPAVLegoVideoManager__XZ])
	MOV ECX,DWORD PTR [EAX+0x64]
	LEA EDX,DWORD PTR [ESP+var_114+0x134]
	LEA EAX,DWORD PTR [ESP+var_118+0x134]
	MOV DWORD PTR [ESP+var_120+0x134],ECX
	LEA ECX,DWORD PTR [ESP+var_110+0x134]
	PUSH EAX
	LEA EAX,DWORD PTR [ESP+var_10C+0x138]
	PUSH EDX
	PUSH ECX
	MOV EDX,DWORD PTR [EBP+arg1217227-0x4A4B20]
	PUSH EAX
	XOR ECX, ECX
	XOR EAX, EAX
	MOV AL,BYTE PTR [EBP+arg1217229-0x4A4B20]
	MOV CL,BYTE PTR [EDX+EAX]
	MOV EAX,DWORD PTR [EBP+arg1217228-0x4A4B20]
	MOV EDX,DWORD PTR [ECX*4+EAX]
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.mA8BF0_sub_100A9BF0])
	ADD ESP, 0x14
	TEST EBX, EBX
	JLE loc_1008500D
	XOR EBP, EBP
loc_10084FC6:
	MOV EAX,DWORD PTR [ESI+0x04]
	MOV ECX,DWORD PTR [ESP+var_120+0x134]
	PUSH ECX
	MOV ECX,DWORD PTR [EBP+EAX]
	ADD EBP, 0x04
	CALL_LONG(offset [LEGO1_text.mA9BB0_sub_100AABB0])
	MOV ECX,DWORD PTR [ESP+var_118+0x134]
	MOV EDX,DWORD PTR [ESP+var_114+0x134]
	MOV DWORD PTR [ESP+var_11C+0x134],EAX
	PUSH ECX
	MOV EAX,DWORD PTR [ESP+var_110+0x138]
	PUSH EDX
	MOV ECX,DWORD PTR [ESP+var_10C+0x13C]
	PUSH EAX
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+var_11C+0x144]
	CALL_LONG(offset [LEGO1_text.mA9CB0_sub_100AACB0])
	MOV ECX,DWORD PTR [EDI+0x0C]
	MOV EDX,DWORD PTR [EDI+0x04]
	MOV EAX,DWORD PTR [ESP+var_11C+0x134]
	MOV DWORD PTR [ECX*4+EDX],EAX
	INC DWORD PTR [EDI+0x0C]
	DEC EBX
	JNZ loc_10084FC6
loc_1008500D:
	MOV EAX,DWORD PTR [ESI+0x10]
	DEC EAX
	MOV DWORD PTR [ESI+0x10],EAX
	JNZ loc_1008501F
	PUSH ESI
	MOV ECX,DWORD PTR [ESI+0x14]
	CALL_LONG(offset [LEGO1_text.mA6680_sub_100A7680])
loc_1008501F:
	MOV ECX,DWORD PTR [ESP+var_124+0x134]
	CMP DWORD PTR [ECX+0x000000E0],0x00
	JL loc_10085047
	CALL_LONG(offset [LEGO1_text.m14720__VideoManager__YAPAVLegoVideoManager__XZ])
	MOV ECX,DWORD PTR [ESP+var_124+0x134]
	MOV EAX,DWORD PTR [EAX+0x68]
	PUSH ECX
	MOV EDX,DWORD PTR [EAX+0x08]
	MOV ECX,DWORD PTR [EDX+0x00000088]
	CALL_LONG(offset [LEGO1_text.mA56A0_sub_100A66A0])
loc_10085047:
	MOV ECX,DWORD PTR [ESP+var_124+0x134]
	MOV ECX,DWORD PTR [ECX+0x08]
	TEST ECX, ECX
	JZ loc_10085060
	DEC DWORD PTR [ECX+0x10]
	JNZ loc_10085060
	PUSH ECX
	MOV ECX,DWORD PTR [ECX+0x14]
	CALL_LONG(offset [LEGO1_text.mA6680_sub_100A7680])
loc_10085060:
	MOV ECX,DWORD PTR [ESP+var_124+0x134]
	TEST EDI, EDI
	MOV DWORD PTR [ECX+0x08],EDI
	JZ loc_1008506E
	INC DWORD PTR [EDI+0x10]
loc_1008506E:
	MOV EAX,DWORD PTR [EDI+0x10]
	DEC EAX
	MOV DWORD PTR [EDI+0x10],EAX
	JNZ loc_10085080
	PUSH EDI
	MOV ECX,DWORD PTR [EDI+0x14]
	CALL_LONG(offset [LEGO1_text.mA6680_sub_100A7680])
loc_10085080:
	MOV AL, 0x01
loc_10085082:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0000011C
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10085090(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH EBX
	XOR BL, BL
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m83CB0_sub_10084CB0])
	TEST EAX, EAX
	JZ loc_100850B9
	MOV ECX,DWORD PTR [EAX+0x0C]
	INC ECX
	MOV DWORD PTR [EAX+0x0C],ECX
	CMP DWORD PTR [offset LEGO1_data + 0xC4D4],ECX
	JA loc_100850B7
	MOV DWORD PTR [EAX+0x0C],0x00000000
loc_100850B7:
	MOV BL, 0x01
loc_100850B9:
	MOV AL, BL
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100850C0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH EBX
	XOR BL, BL
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m83CB0_sub_10084CB0])
	TEST EAX, EAX
	JZ loc_100850E9
	MOV ECX,DWORD PTR [EAX+0x10]
	INC ECX
	MOV DWORD PTR [EAX+0x10],ECX
	CMP DWORD PTR [offset LEGO1_data + 0xC4D0],ECX
	JA loc_100850E7
	MOV DWORD PTR [EAX+0x10],0x00000000
loc_100850E7:
	MOV BL, 0x01
loc_100850E9:
	MOV AL, BL
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100850F0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH EBX
	XOR BL, BL
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m83CB0_sub_10084CB0])
	TEST EAX, EAX
	JZ loc_10085113
	MOV CL,BYTE PTR [EAX+0x14]
	INC CL
	MOV BYTE PTR [EAX+0x14],CL
	CMP CL, 0x03
	JBE loc_10085111
	MOV BYTE PTR [EAX+0x14],BL
loc_10085111:
	MOV BL, 0x01
loc_10085113:
	MOV AL, BL
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10085120(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m83CB0_sub_10084CB0])
	TEST EAX, EAX
	JZ loc_1008513A
	MOV EAX,DWORD PTR [EAX+0x10]
	ADD EAX,DWORD PTR [offset LEGO1_data + 0xC4E0]
	RETN 0x0004
loc_1008513A:
	XOR EAX, EAX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10085140(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m83CB0_sub_10084CB0])
	CMP BYTE PTR [ESP+arg2],0x00
	JZ loc_10085161
	XOR ECX, ECX
	MOV CL,BYTE PTR [EAX+0x14]
	ADD ECX,DWORD PTR [offset LEGO1_data + 0xC4DC]
	MOV EAX, ECX
	RETN 0x0008
loc_10085161:
	TEST EAX, EAX
	JZ loc_10085171
	MOV EAX,DWORD PTR [EAX+0x0C]
	ADD EAX,DWORD PTR [offset LEGO1_data + 0xC4D8]
	RETN 0x0008
loc_10085171:
	XOR EAX, EAX
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10085180(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m83CB0_sub_10084CB0])
	TEST EAX, EAX
	JZ loc_10085194
	MOV AL,BYTE PTR [EAX+0x14]
	RETN 0x0004
loc_10085194:
	XOR AL, AL
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100851A0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC4E4]
	PUSH EDI
	TEST EAX, EAX
	JZ loc_100851B4
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100851B4:
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	TEST ESI, ESI
	JZ loc_10085201
	MOV EDI, ESI
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [offset LEGO1_data + 0xC4E4], EAX
	ADD ESP, 0x04
	MOV EDX, EAX
	TEST EDX, EDX
	JZ loc_1008520B
	MOV EDI, ESI
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI, EDX
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	POP EDI
	POP ESI
	RET
loc_10085201:
	MOV DWORD PTR [offset LEGO1_data + 0xC4E4],0x00000000
loc_1008520B:
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10085210(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_84 = -0x84,
		var_80 = -0x80,
		var_7C = -0x7C,
		var_3C = -0x3C,
		var_28 = -0x28,
		var_24 = -0x24,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m844C8_proc_100854C8]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x74
	LEA EAX,DWORD PTR [EBP+var_7C+0x4]
	MOV DWORD PTR [EBP+var_24+0x4],ECX
	PUSH EBX
	MOV DWORD PTR [EBP+var_80+0x4],EAX
	MOV DWORD PTR [EBP+var_84+0x4],offset [LEGO1_rdata.m300_ptr]
	PUSH ESI
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m14720__VideoManager__YAPAVLegoVideoManager__XZ])
	MOV ESI,DWORD PTR [EAX+0x64]
	CALL_LONG(offset [LEGO1_text.m14810_sub_10015810])
	MOV EDI, EAX
	CALL_LONG(offset [LEGO1_text.m14800_sub_10015800])
	LEA EAX,DWORD PTR [EBP+arg2+0x4]
	MOV ECX, EDI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mA65B0_sub_100A75B0])
	MOV EDI, EAX
	TEST EDI, EDI
	JZ_LONG(offset [LEGO1_text.m844DF_loc_100854DF])
	CMP DWORD PTR [EDI+0x0C],0x00
	JZ_LONG(offset [LEGO1_text.m844DF_loc_100854DF])
	PUSH 0x00000108
	MOV EBX, 0x00000000
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	TEST EAX, EAX
	JZ loc_1008529C
	PUSH EDI
	MOV ECX, EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.mA72D0_sub_100A82D0])
	MOV EBX, EAX
loc_1008529C:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV ESI,DWORD PTR [EBP+arg1+0x4]
	TEST ESI, ESI
	JNZ loc_100852CA
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC4F0]
	LEA ECX,DWORD PTR [EBP+var_3C+0x4]
	PUSH EAX
	LEA ESI,DWORD PTR [EBP+var_3C+0x4]
	PUSH offset [LEGO1_data.mC51C_str]
	INC DWORD PTR [offset LEGO1_data + 0xC4F0]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8A5A0_sub_1008B5A0])
	ADD ESP, 0x0C
loc_100852CA:
	PUSH ESI
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.mA8D40_sub_100A9D40])
	MOV EAX,DWORD PTR [EDI+0x10]
	DEC EAX
	MOV DWORD PTR [EDI+0x10],EAX
	JNZ loc_100852E4
	PUSH EDI
	MOV ECX,DWORD PTR [EDI+0x14]
	CALL_LONG(offset [LEGO1_text.mA6680_sub_100A7680])
loc_100852E4:
	TEST EBX, EBX
	JZ_LONG(offset [LEGO1_text.m844AA_loc_100854AA])
	PUSH EBX
	MOV ECX,DWORD PTR [EBP+var_24+0x4]
	CALL_LONG(offset [LEGO1_text.m84870_sub_10085870])
	TEST EAX, EAX
	JZ loc_10085307
	TEST EBX, EBX
	JZ loc_10085305
	PUSH 0x01
	MOV EAX,DWORD PTR [EBX]
	MOV ECX, EBX
	CALL_LONG(DWORD PTR [EAX])
loc_10085305:
	XOR EBX, EBX
loc_10085307:
	TEST EBX, EBX
	JZ_LONG(offset [LEGO1_text.m844AA_loc_100854AA])
	MOV BYTE PTR [EBX+0x0C],0x00
	PUSH 0x08
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV ECX, 0x00000001
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	MOV DWORD PTR [EBP+var_8+0x4],ECX
	TEST EAX, EAX
	JZ loc_10085336
	MOV DWORD PTR [EAX],EBX
	MOV DWORD PTR [EBP+var_20+0x4],EAX
	MOV DWORD PTR [EAX+0x04],ECX
	JMP loc_1008533D
loc_10085336:
	MOV DWORD PTR [EBP+var_20+0x4],0x00000000
loc_1008533D:
	MOV EDI, ESI
	MOV ECX, 0xFFFFFFFF
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	TEST EAX, EAX
	JZ_LONG(offset [LEGO1_text.m844AA_loc_100854AA])
	MOV EDI, ESI
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI,DWORD PTR [EBP+var_18+0x4]
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	LEA EAX,DWORD PTR [EBP+var_28+0x4]
	MOV DWORD PTR [EBP+var_1C+0x4],ECX
	LEA ECX,DWORD PTR [EBP+var_1C+0x4]
	MOV DWORD PTR [EBP+var_18+0x4],0x00000000
	PUSH ECX
	MOV EDX,DWORD PTR [EBP+var_24+0x4]
	PUSH EAX
	MOV ECX,DWORD PTR [EDX]
	CALL_LONG(offset [LEGO1_text.m84500_sub_10085500])
	MOV ECX,DWORD PTR [EBP+var_28+0x4]
	MOV EDX,DWORD PTR [EBP+var_20+0x4]
	MOV DWORD PTR [ECX+0x10],EDX
	CALL_LONG(offset [LEGO1_text.m14720__VideoManager__YAPAVLegoVideoManager__XZ])
	PUSH EBX
	MOV EDX,DWORD PTR [EAX+0x68]
	MOV ECX,DWORD PTR [EDX+0x08]
	CALL_LONG(offset [LEGO1_text.mAA100_sub_100AB100])
	CMP BYTE PTR [EBP+arg3+0x4],0x00
	JZ_LONG(offset [LEGO1_text.m844AA_loc_100854AA])
	CMP DWORD PTR [EBX+0x00000104],0x00
	JNZ_LONG(offset [LEGO1_text.m844AA_loc_100854AA])
	PUSH 0x68
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000002
	MOV ESI, EAX
	TEST ESI, ESI
	JZ_LONG(offset [LEGO1_text.m84488_loc_10085488])
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	MOV BYTE PTR [EBP+var_8+0x4],0x03
	MOV DWORD PTR [ESI+0x0C],0x00000000
	MOV BYTE PTR [EBP+var_8+0x4],0x04
	LEA EAX,DWORD PTR [ESI+0x1C]
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m1390_ptr]
	MOV DWORD PTR [ESI+0x08],0xFFFFFFFF
	MOV BYTE PTR [EBP+var_8+0x4],0x05
	MOV DWORD PTR [ESI+0x14],offset [LEGO1_rdata.m288_ptr]
	LEA ECX,DWORD PTR [ESI+0x30]
	MOV DWORD PTR [ESI+0x18],EAX
	MOV DWORD PTR [ESI+0x14],offset [LEGO1_rdata.m488_ptr]
	MOV DWORD PTR [ESI+0x28],offset [LEGO1_rdata.m288_ptr]
	LEA EDX,DWORD PTR [ESI+0x44]
	MOV DWORD PTR [ESI+0x2C],ECX
	MOV DWORD PTR [ESI+0x28],offset [LEGO1_rdata.m488_ptr]
	MOV DWORD PTR [ESI+0x3C],offset [LEGO1_rdata.m288_ptr]
	MOV ECX, ESI
	MOV EDI, ESI
	MOV DWORD PTR [ESI+0x40],EDX
	MOV DWORD PTR [ESI+0x3C],offset [LEGO1_rdata.m488_ptr]
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m858_ptr]
	CALL_LONG(offset [LEGO1_text.mF5F0_sub_100105F0])
	MOV BYTE PTR [EBP+var_8+0x4],0x02
	JMP_LONG(offset [LEGO1_text.m8448A_loc_1008548A])
}
}

__declspec(naked) DWORD LEGO1_proc_1008546D()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x0C
	JMP_LONG(offset [LEGO1_text.mABFD0___1MxAtomId__QAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_proc_10085478()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_proc_10085480()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB110_loc_1000C110])
}
}

__declspec(naked) DWORD LEGO1_loc_10085488()
{
__asm{
	XOR EDI, EDI
	JMP_LONG(offset [LEGO1_text.m8448A_loc_1008548A])
}
}

__declspec(naked) DWORD LEGO1_loc_1008548A()
{
	enum{
		arg1217223 = 0x4A4B1C,
	};

__asm{
	PUSH 0x00
	MOV ECX, EDI
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0xFFFFFFFF
	PUSH 0x00
	MOV EAX,DWORD PTR [EDI]
	PUSH EBX
	CALL_LONG(DWORD PTR [EAX+0x24])
	PUSH 0x04
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m104E0_sub_100114E0])
	OR BYTE PTR [EDI+0x11],0x02
	JMP_LONG(offset [LEGO1_text.m844AA_loc_100854AA])
}
}

__declspec(naked) DWORD LEGO1_loc_100854AA()
{
__asm{
	MOV EAX, EBX
	JMP_LONG(offset [LEGO1_text.m844E1_loc_100854E1])
}
}

__declspec(naked) DWORD LEGO1_proc_100854AE()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100854BB()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10085500(DWORD arg1, DWORD arg2)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg1217225 = 0x4A4B24,
		arg1217226 = 0x4A4B28,
		arg1217227 = 0x4A4B2C,
	};

__asm{
	SUB ESP, 0x0C
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EAX, 0x00000001
	MOV EBX,DWORD PTR [ESP+arg2+0x18]
	PUSH EBP
	MOV EDI,DWORD PTR [ECX+0x04]
	MOV EBP, ECX
	MOV ESI,DWORD PTR [EDI+0x04]
	CMP ESI,DWORD PTR [offset LEGO1_data.mC508]
	JZ loc_1008554D
loc_10085520:
	MOV EDI, ESI
	MOV EAX,DWORD PTR [ESI+0x0C]
	PUSH EAX
	MOV ECX,DWORD PTR [EBX]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8B110_sub_1008C110])
	ADD ESP, 0x08
	TEST EAX, EAX
	SETL CL
	XOR EAX, EAX
	MOV AL, CL
	TEST EAX, EAX
	JNZ loc_10085543
	MOV ESI,DWORD PTR [ESI+0x08]
	JMP loc_10085545
loc_10085543:
	MOV ESI,DWORD PTR [ESI]
loc_10085545:
	CMP ESI,DWORD PTR [offset LEGO1_data.mC508]
	JNZ loc_10085520
loc_1008554D:
	CMP DWORD PTR [EBP+arg1217226-0x4A4B20],0x00
	JZ loc_10085583
	LEA EAX,DWORD PTR [ESP+var_C+0x1C]
	PUSH EBX
	PUSH EDI
	MOV ECX, EBP
	MOV DWORD PTR [ESP+var_8+0x24],0x00000001
	PUSH ESI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m82890_sub_10083890])
	MOV ECX,DWORD PTR [EAX]
	MOV EAX,DWORD PTR [ESP+arg1+0x1C]
	MOV DWORD PTR [EAX],ECX
	MOV EDX,DWORD PTR [ESP+var_8+0x1C]
	POP EBP
	POP EDI
	MOV DWORD PTR [EAX+0x04],EDX
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x0008
loc_10085583:
	MOV DWORD PTR [ESP+var_4+0x1C],EDI
	TEST EAX, EAX
	JZ loc_100855CB
	MOV EAX,DWORD PTR [EBP+arg1217225-0x4A4B20]
	CMP DWORD PTR [EAX],EDI
	JNZ loc_100855C2
	LEA EAX,DWORD PTR [ESP+var_C+0x1C]
	PUSH EBX
	PUSH EDI
	MOV ECX, EBP
	MOV DWORD PTR [ESP+var_8+0x24],0x00000001
	PUSH ESI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m82890_sub_10083890])
	MOV ECX,DWORD PTR [EAX]
	MOV EAX,DWORD PTR [ESP+arg1+0x1C]
	MOV DWORD PTR [EAX],ECX
	MOV EDX,DWORD PTR [ESP+var_8+0x1C]
	POP EBP
	POP EDI
	MOV DWORD PTR [EAX+0x04],EDX
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x0008
loc_100855C2:
	LEA ECX,DWORD PTR [ESP+var_4+0x1C]
	CALL_LONG(offset [LEGO1_text.m82840_sub_10083840])
loc_100855CB:
	MOV EAX,DWORD PTR [ESP+var_4+0x1C]
	MOV ECX,DWORD PTR [EBX]
	PUSH ECX
	MOV EDX,DWORD PTR [EAX+0x0C]
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m8B110_sub_1008C110])
	ADD ESP, 0x08
	TEST EAX, EAX
	JGE FAR loc_10085772
	PUSH 0x00
	MOV ECX, EBP
	MOV DWORD PTR [ESP+var_8+0x20],0x00000001
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m84790_sub_10085790])
	MOV DWORD PTR [ESP+var_C+0x1C],EAX
	MOV EAX, DWORD PTR [offset LEGO1_data.mC508]
	MOV ECX,DWORD PTR [ESP+var_C+0x1C]
	MOV DWORD PTR [ECX],EAX
	MOV EAX, DWORD PTR [offset LEGO1_data.mC508]
	MOV DWORD PTR [ECX+0x08],EAX
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	ADD EAX, 0x0C
	JZ loc_10085622
	MOV ECX,DWORD PTR [EBX]
	MOV EDX,DWORD PTR [EBX+0x04]
	MOV DWORD PTR [EAX],ECX
	MOV DWORD PTR [EAX+0x04],EDX
loc_10085622:
	INC DWORD PTR [EBP+arg1217227-0x4A4B20]
	CMP DWORD PTR [EBP+arg1217225-0x4A4B20],EDI
	JZ loc_1008565A
	CMP ESI,DWORD PTR [offset LEGO1_data.mC508]
	JNZ loc_1008565A
	MOV EAX,DWORD PTR [EDI+0x0C]
	MOV ECX,DWORD PTR [EBX]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8B110_sub_1008C110])
	ADD ESP, 0x08
	TEST EAX, EAX
	JL loc_1008565A
	MOV ECX,DWORD PTR [ESP+var_C+0x1C]
	MOV DWORD PTR [EDI+0x08],ECX
	MOV EAX,DWORD PTR [EBP+arg1217225-0x4A4B20]
	ADD EAX, 0x08
	CMP DWORD PTR [EAX],EDI
	JNZ loc_1008567C
	MOV DWORD PTR [EAX],ECX
	JMP loc_1008567C
loc_1008565A:
	MOV ECX,DWORD PTR [ESP+var_C+0x1C]
	MOV DWORD PTR [EDI],ECX
	MOV EAX,DWORD PTR [EBP+arg1217225-0x4A4B20]
	CMP EDI, EAX
	JZ loc_1008566F
	CMP DWORD PTR [EAX],EDI
	JNZ loc_1008567C
	MOV DWORD PTR [EAX],ECX
	JMP loc_1008567C
loc_1008566F:
	MOV ECX,DWORD PTR [ESP+var_C+0x1C]
	MOV DWORD PTR [EAX+0x04],ECX
	MOV EAX,DWORD PTR [EBP+arg1217225-0x4A4B20]
	MOV DWORD PTR [EAX+0x08],ECX
loc_1008567C:
	MOV ESI,DWORD PTR [ESP+var_C+0x1C]
	MOV EAX,DWORD PTR [EBP+arg1217225-0x4A4B20]
	CMP DWORD PTR [EAX+0x04],ESI
	JZ FAR loc_1008574A
loc_1008568C:
	LEA ECX,DWORD PTR [ESI+0x04]
	MOV EDI,DWORD PTR [ECX]
	LEA EDX,DWORD PTR [EDI+0x14]
	CMP DWORD PTR [EDX],0x00
	JNZ FAR loc_1008574A
	MOV EBX,DWORD PTR [EDI+0x04]
	MOV EAX,DWORD PTR [EBX]
	CMP EAX, EDI
	JNZ loc_100856E5
	MOV EAX,DWORD PTR [EBX+0x08]
	CMP DWORD PTR [EAX+0x14],0x00
	JZ loc_10085720
	CMP DWORD PTR [EDI+0x08],ESI
	JNZ loc_100856BE
	PUSH EDI
	MOV ESI, EDI
	MOV ECX, EBP
	CALL_LONG(offset [LEGO1_text.m847B0_sub_100857B0])
loc_100856BE:
	MOV EAX,DWORD PTR [ESI+0x04]
	MOV DWORD PTR [EAX+0x14],0x00000001
	MOV EAX,DWORD PTR [ESI+0x04]
	MOV ECX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [ECX+0x14],0x00000000
	MOV EAX,DWORD PTR [ESI+0x04]
	MOV ECX,DWORD PTR [EAX+0x04]
	PUSH ECX
	MOV ECX, EBP
	CALL_LONG(offset [LEGO1_text.m84810_sub_10085810])
	JMP loc_1008573E
loc_100856E5:
	CMP DWORD PTR [EAX+0x14],0x00
	JZ loc_10085720
	CMP DWORD PTR [EDI],ESI
	JNZ loc_100856F9
	PUSH EDI
	MOV ESI, EDI
	MOV ECX, EBP
	CALL_LONG(offset [LEGO1_text.m84810_sub_10085810])
loc_100856F9:
	MOV EAX,DWORD PTR [ESI+0x04]
	MOV DWORD PTR [EAX+0x14],0x00000001
	MOV EAX,DWORD PTR [ESI+0x04]
	MOV ECX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [ECX+0x14],0x00000000
	MOV EAX,DWORD PTR [ESI+0x04]
	MOV ECX,DWORD PTR [EAX+0x04]
	PUSH ECX
	MOV ECX, EBP
	CALL_LONG(offset [LEGO1_text.m847B0_sub_100857B0])
	JMP loc_1008573E
loc_10085720:
	MOV DWORD PTR [EDX], 0x00000001
	MOV DWORD PTR [EAX+0x14],0x00000001
	MOV EAX,DWORD PTR [ECX]
	MOV EDX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [EDX+0x14],0x00000000
	MOV EAX,DWORD PTR [ECX]
	MOV ESI,DWORD PTR [EAX+0x04]
loc_1008573E:
	MOV EAX,DWORD PTR [EBP+arg1217225-0x4A4B20]
	CMP DWORD PTR [EAX+0x04],ESI
	JNZ FAR loc_1008568C
loc_1008574A:
	MOV EAX,DWORD PTR [EBP+arg1217225-0x4A4B20]
	MOV ECX,DWORD PTR [EAX+0x04]
	MOV EAX,DWORD PTR [ESP+arg1+0x1C]
	MOV DWORD PTR [ECX+0x14],0x00000001
	MOV EDX,DWORD PTR [ESP+var_C+0x1C]
	MOV DWORD PTR [EAX],EDX
	MOV ECX,DWORD PTR [ESP+var_8+0x1C]
	POP EBP
	POP EDI
	MOV DWORD PTR [EAX+0x04],ECX
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x0008
loc_10085772:
	MOV ECX,DWORD PTR [ESP+var_4+0x1C]
	MOV EAX,DWORD PTR [ESP+arg1+0x1C]
	POP EBP
	POP EDI
	POP ESI
	MOV DWORD PTR [EAX],ECX
	MOV DWORD PTR [EAX+0x04],0x00000000
	POP EBX
	ADD ESP, 0x0C
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10085790(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH 0x18
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV ECX,DWORD PTR [ESP+arg1+0x4]
	MOV EDX,DWORD PTR [ESP+arg2+0x4]
	ADD ESP, 0x04
	MOV DWORD PTR [EAX+0x04],ECX
	MOV DWORD PTR [EAX+0x14],EDX
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100857B0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x4]
	MOV EDX,DWORD PTR [ESI+0x08]
	MOV EAX,DWORD PTR [EDX]
	MOV DWORD PTR [ESI+0x08],EAX
	MOV EAX,DWORD PTR [EDX]
	CMP EAX,DWORD PTR [offset LEGO1_data.mC508]
	JZ loc_100857CA
	MOV DWORD PTR [EAX+0x04],ESI
loc_100857CA:
	MOV EAX,DWORD PTR [ESI+0x04]
	MOV DWORD PTR [EDX+0x04],EAX
	MOV EAX,DWORD PTR [ECX+0x04]
	ADD EAX, 0x04
	CMP DWORD PTR [EAX],ESI
	JZ loc_100857F8
	MOV EAX,DWORD PTR [ESI+0x04]
	CMP DWORD PTR [EAX],ESI
	JZ loc_100857ED
	MOV DWORD PTR [EAX+0x08],EDX
	MOV DWORD PTR [EDX],ESI
	MOV DWORD PTR [ESI+0x04],EDX
	POP ESI
	RETN 0x0004
loc_100857ED:
	MOV DWORD PTR [EAX],EDX
	MOV DWORD PTR [EDX],ESI
	MOV DWORD PTR [ESI+0x04],EDX
	POP ESI
	RETN 0x0004
loc_100857F8:
	MOV DWORD PTR [EAX],EDX
	MOV DWORD PTR [EDX],ESI
	MOV DWORD PTR [ESI+0x04],EDX
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10085810(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg1]
	PUSH ESI
	MOV ESI,DWORD PTR [EDX]
	MOV EAX,DWORD PTR [ESI+0x08]
	MOV DWORD PTR [EDX],EAX
	MOV EAX,DWORD PTR [ESI+0x08]
	CMP EAX,DWORD PTR [offset LEGO1_data.mC508]
	JZ loc_1008582A
	MOV DWORD PTR [EAX+0x04],EDX
loc_1008582A:
	MOV EAX,DWORD PTR [EDX+0x04]
	MOV DWORD PTR [ESI+0x04],EAX
	MOV EAX,DWORD PTR [ECX+0x04]
	ADD EAX, 0x04
	CMP DWORD PTR [EAX],EDX
	JZ loc_1008585C
	MOV ECX,DWORD PTR [EDX+0x04]
	LEA EAX,DWORD PTR [ECX+0x08]
	CMP DWORD PTR [EAX],EDX
	JZ loc_10085850
	MOV DWORD PTR [ECX],ESI
	MOV DWORD PTR [ESI+0x08],EDX
	MOV DWORD PTR [EDX+0x04],ESI
	POP ESI
	RETN 0x0004
loc_10085850:
	MOV DWORD PTR [EAX],ESI
	MOV DWORD PTR [ESI+0x08],EDX
	MOV DWORD PTR [EDX+0x04],ESI
	POP ESI
	RETN 0x0004
loc_1008585C:
	MOV DWORD PTR [EAX],ESI
	MOV DWORD PTR [ESI+0x08],EDX
	MOV DWORD PTR [EDX+0x04],ESI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10085870(DWORD arg1)
{
	enum{
		var_6C = -0x6C,
		var_68 = -0x68,
		var_64 = -0x64,
		var_60 = -0x60,
		var_5C = -0x5C,
		var_58 = -0x58,
		var_54 = -0x54,
		var_50 = -0x50,
		var_4C = -0x4C,
		var_48 = -0x48,
		var_44 = -0x44,
		var_40 = -0x40,
		var_3C = -0x3C,
		var_38 = -0x38,
		var_34 = -0x34,
		var_2C = -0x2C,
		var_28 = -0x28,
		var_24 = -0x24,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x64
	MOV EAX, 0xFFFFFFFF
	MOV EDX, offset [LEGO1_rdata.m488_ptr]
	PUSH ESI
	LEA ECX,DWORD PTR [ESP+var_38+0x68]
	LEA ESI,DWORD PTR [ESP+var_20+0x68]
	MOV DWORD PTR [ESP+var_3C+0x68],ECX
	MOV DWORD PTR [ESP+var_40+0x68],EDX
	LEA ECX,DWORD PTR [ESP+var_C+0x68]
	MOV DWORD PTR [ESP+var_24+0x68],ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x68]
	MOV DWORD PTR [ESP+var_28+0x68],EDX
	MOV DWORD PTR [ESP+var_10+0x68],ECX
	MOV DWORD PTR [ESP+var_14+0x68],EDX
	MOV EDX,DWORD PTR [ESI+0x08]
	MOV ECX,DWORD PTR [EDX+0x04]
	MOV EDX,DWORD PTR [ECX]
	MOV ECX,DWORD PTR [EDX+0x04]
	TEST ECX, ECX
	JZ FAR loc_10085A70
	MOV EAX, 0x47AD9C00
	MOV DWORD PTR [ESP+var_50+0x68],EAX
	MOV DWORD PTR [ESP+var_54+0x68],EAX
	MOV DWORD PTR [ESP+var_58+0x68],EAX
	MOV EAX, 0xC7AD9C00
	LEA EDX,DWORD PTR [ESP+var_58+0x68]
	MOV DWORD PTR [ESP+var_44+0x68],EAX
	MOV DWORD PTR [ESP+var_48+0x68],EAX
	MOV DWORD PTR [ESP+var_4C+0x68],EAX
	LEA EAX,DWORD PTR [ESP+var_4C+0x68]
	PUSH EAX
	PUSH EDX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x0C])
	FLD DWORD PTR [ESP+var_50+0x70]
	FADD DWORD PTR [ESP+var_5C+0x70]
	FMUL DWORD PTR [offset LEGO1_rdata + 0x6860]
	FSTP DWORD PTR [ESP+var_68+0x70]
	FLD DWORD PTR [ESP+var_4C+0x70]
	FADD DWORD PTR [ESP+var_58+0x70]
	MOV ECX,DWORD PTR [ESP+var_44+0x70]
	FMUL DWORD PTR [offset LEGO1_rdata + 0x6860]
	FSTP DWORD PTR [ESP+var_64+0x70]
	FLD DWORD PTR [ESP+var_54+0x70]
	FADD DWORD PTR [ESP+var_60+0x70]
	FMUL DWORD PTR [offset LEGO1_rdata + 0x6860]
	FSTP DWORD PTR [ECX]
	MOV ECX,DWORD PTR [ESP+var_44+0x70]
	MOV EAX,DWORD PTR [ESP+var_68+0x70]
	MOV EDX,DWORD PTR [ESP+var_64+0x70]
	MOV DWORD PTR [ECX+0x04],EAX
	MOV ECX,DWORD PTR [ESP+var_44+0x70]
	MOV DWORD PTR [ECX+0x08],EDX
	FLD DWORD PTR [ESP+var_54+0x70]
	FSUB DWORD PTR [ESP+var_60+0x70]
	FSTP DWORD PTR [ESP+var_6C+0x70]
	FLD DWORD PTR [ESP+var_50+0x70]
	FSUB DWORD PTR [ESP+var_5C+0x70]
	FSTP DWORD PTR [ESP+var_68+0x70]
	FLD DWORD PTR [ESP+var_4C+0x70]
	FSUB DWORD PTR [ESP+var_58+0x70]
	FSTP DWORD PTR [ESP+var_64+0x70]
	FLD DWORD PTR [ESP+var_68+0x70]
	FMUL DWORD PTR [ESP+var_68+0x70]
	FLD DWORD PTR [ESP+var_64+0x70]
	FMUL DWORD PTR [ESP+var_64+0x70]
	FADDP ST(1),ST
	FLD DWORD PTR [ESP+var_6C+0x70]
	FMUL DWORD PTR [ESP+var_6C+0x70]
	LEA ECX,DWORD PTR [ESI+0x000000A8]
	FADDP ST(1),ST
	FSQRT
	FMUL QWORD PTR [offset LEGO1_rdata + 0x6870]
	FSTP DWORD PTR [ESP+var_34+0x70]
	MOV EAX,DWORD PTR [ESP+var_44+0x70]
	PUSH EAX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x20])
	LEA EDX,DWORD PTR [ESI+0x000000B0]
	LEA ECX,DWORD PTR [ESP+var_40+0x70]
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [EDX],EAX
	MOV EAX,DWORD PTR [ECX+0x04]
	MOV ECX,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [EDX+0x04],EAX
	MOV EAX,DWORD PTR [ESP+var_34+0x70]
	MOV DWORD PTR [EDX+0x08],ECX
	LEA ECX,DWORD PTR [ESI+0x000000E8]
	MOV EDX,DWORD PTR [ESI+0x000000AC]
	PUSH EDX
	MOV DWORD PTR [ESI+0x000000BC],EAX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x20])
	LEA ECX,DWORD PTR [ESI+0x000000F0]
	MOV EAX, 0x00000003
loc_100859D5:
	MOV EDX,DWORD PTR [ECX-0x40]
	ADD ECX, 0x04
	DEC EAX
	MOV DWORD PTR [ECX-0x04],EDX
	JNZ loc_100859D5
	MOV EAX,DWORD PTR [ESI+0x000000BC]
	MOV EDX,DWORD PTR [ESP+var_2C+0x70]
	MOV ECX,DWORD PTR [ESP+var_60+0x70]
	MOV DWORD PTR [ESI+0x000000FC],EAX
	MOV DWORD PTR [EDX],ECX
	MOV EDX,DWORD PTR [ESP+var_2C+0x70]
	MOV EAX,DWORD PTR [ESP+var_5C+0x70]
	MOV DWORD PTR [EDX+0x04],EAX
	MOV EDX,DWORD PTR [ESP+var_2C+0x70]
	MOV ECX,DWORD PTR [ESP+var_58+0x70]
	MOV DWORD PTR [EDX+0x08],ECX
	MOV EDX,DWORD PTR [ESP+var_18+0x70]
	MOV EAX,DWORD PTR [ESP+var_54+0x70]
	MOV DWORD PTR [EDX],EAX
	MOV EDX,DWORD PTR [ESP+var_18+0x70]
	MOV ECX,DWORD PTR [ESP+var_50+0x70]
	MOV DWORD PTR [EDX+0x04],ECX
	MOV EDX,DWORD PTR [ESP+var_18+0x70]
	MOV EAX,DWORD PTR [ESP+var_4C+0x70]
	LEA ECX,DWORD PTR [ESI+0x00000080]
	MOV DWORD PTR [EDX+0x08],EAX
	MOV EDX,DWORD PTR [ESP+var_2C+0x70]
	PUSH EDX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x20])
	LEA EDX,DWORD PTR [ESI+0x00000088]
	LEA ECX,DWORD PTR [ESP+var_28+0x70]
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [EDX],EAX
	MOV EAX,DWORD PTR [ECX+0x04]
	MOV ECX,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [EDX+0x04],EAX
	LEA EAX,DWORD PTR [ESP+var_1C+0x70]
	MOV DWORD PTR [EDX+0x08],ECX
	PUSH EAX
	LEA ECX,DWORD PTR [ESI+0x00000094]
	CALL_LONG(offset [LEGO1_text.mFC00_sub_10010C00])
	MOV EAX,DWORD PTR [ESI]
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [EAX+0x14])
	XOR EAX, EAX
loc_10085A70:
	POP ESI
	ADD ESP, 0x64
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10085A80(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg3]
	MOV EDX,DWORD PTR [ESP+arg2]
	PUSH EAX
	PUSH EDX
	MOV EAX,DWORD PTR [ESP+arg1+0x8]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m84210_sub_10085210])
	RETN 0x000C
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10085AA0(DWORD arg1)
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m84B35_proc_10085B35]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	PUSH EDI
	LEA EDI,DWORD PTR [ECX+0x04]
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mAD200_sub_100AE200])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	LEA ECX,DWORD PTR [ESI+0x14]
	CALL_LONG(offset [LEGO1_text.mAD200_sub_100AE200])
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV ECX, EDI
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	PUSH EAX
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m3498_ptr]
	MOV DWORD PTR [EBP+var_8+0x4],0x00000002
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m6878_ptr]
	CALL_LONG(offset [LEGO1_text.mAD510___4MxString__QAEABV0_PBD_Z])
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mAD490_sub_100AE490])
	MOV EAX, ESI
	POP EDI
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP ESI
	MOV DWORD PTR FS:[0x00000000],ECX
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_10085BC0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m84CA1_proc_10085CA1]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	PUSH EDI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	MOV EDI, 0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV DWORD PTR [ESI+0x0C],0x00000000
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	LEA EAX,DWORD PTR [ESI+0x1C]
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m1390_ptr]
	LEA ECX,DWORD PTR [ESI+0x30]
	MOV DWORD PTR [ESI+0x08],EDI
	MOV DWORD PTR [EBP+var_8+0x4],0x00000002
	MOV DWORD PTR [ESI+0x18],EAX
	MOV DWORD PTR [ESI+0x2C],ECX
	MOV DWORD PTR [ESI+0x14],offset [LEGO1_rdata.m288_ptr]
	MOV DWORD PTR [ESI+0x14],offset [LEGO1_rdata.m488_ptr]
	LEA EDX,DWORD PTR [ESI+0x44]
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m858_ptr]
	MOV ECX, ESI
	MOV DWORD PTR [ESI+0x40],EDX
	MOV DWORD PTR [ESI+0x28],offset [LEGO1_rdata.m288_ptr]
	MOV DWORD PTR [ESI+0x28],offset [LEGO1_rdata.m488_ptr]
	MOV DWORD PTR [ESI+0x3C],offset [LEGO1_rdata.m288_ptr]
	MOV DWORD PTR [ESI+0x3C],offset [LEGO1_rdata.m488_ptr]
	CALL_LONG(offset [LEGO1_text.mF5F0_sub_100105F0])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000003
	PUSH ESI
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m68A0_ptr]
	CALL_LONG(offset [LEGO1_text.mABEB0__NotificationManager__YAPAVMxNotificationManager__XZ])
	MOV ECX, EAX
	CALL_LONG(offset [LEGO1_text.mABD20_sub_100ACD20])
	MOV EAX, ESI
	MOV DWORD PTR [EBP+var_8+0x4],EDI
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP EDI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10085DD0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m84E21_proc_10085E21]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m68A0_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	PUSH ECX
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	CALL_LONG(offset [LEGO1_text.mABEB0__NotificationManager__YAPAVMxNotificationManager__XZ])
	MOV ECX, EAX
	CALL_LONG(offset [LEGO1_text.mABDF0_sub_100ACDF0])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m84E2B_sub_10085E2B])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10085E2B()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB290___1LegoEntity__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_10085ED0()
{
	enum{
		var_AC = -0xAC,
		var_18 = -0x18,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m850BD_proc_100860BD]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x0000009C
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	LEA ECX,DWORD PTR [EBP+var_AC+0x4]
	CALL_LONG(offset [LEGO1_text.mAC810___0MxDSAction__QAE_XZ])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	CALL_LONG(offset [LEGO1_text.m14730__BackgroundAudioManager__YAPAVMxBackgroundAudioManager__XZ])
	MOV ECX, EAX
	CALL_LONG(offset [LEGO1_text.m7E470_sub_1007F470])
	PUSH offset [LEGO1_data.m2BC_str]
	CALL_LONG(offset [LEGO1_text.m14760__GameState__YAPAVLegoGameState__XZ])
	MOV ECX, EAX
	CALL_LONG(offset [LEGO1_text.m3ABB0_sub_1003BBB0])
	MOV DWORD PTR [EAX+0x0C],0x00000001
	MOV EAX,DWORD PTR [EAX+0x08]
	CMP EAX, 0x05
	JA_LONG(offset [LEGO1_text.m8502E_loc_1008602E])
	JMP_LONG(DWORD PTR [offset LEGO1_text.m850D4_proc_100860D4+EAX*4])
}
}

__declspec(naked) DWORD LEGO1_sub_100860B5()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mABFD0___1MxAtomId__QAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100860C7()
{
	enum{
		arg1217182 = 0x4A4A78,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217182-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mACA80___1MxDSAction__UAE_XZ])
	MOV EDI, EDI
	JMP_LONG(offset [LEGO1_text.m850D4_proc_100860D4])
}
}

__declspec(naked) DWORD LEGO1_sub_100860F0()
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH offset [LEGO1_data.m2BC_str]
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.m14760__GameState__YAPAVLegoGameState__XZ])
	MOV ECX, EAX
	CALL_LONG(offset [LEGO1_text.m3ABB0_sub_1003BBB0])
	TEST EAX, EAX
	JZ_LONG(offset [LEGO1_text.m851A7_loc_100861A7])
	CMP DWORD PTR [EAX+0x0C],0x00
	JZ_LONG(offset [LEGO1_text.m851A7_loc_100861A7])
	MOV ECX,DWORD PTR [ESP+arg1+0x4]
	SUB ECX, 0x37
	CMP ECX, 0x05
	JA_LONG(offset [LEGO1_text.m85197_loc_10086197])
	JMP_LONG(DWORD PTR [offset LEGO1_text.m851AC_proc_100861AC+ECX*4])
}
}

__declspec(naked) DWORD LEGO1_sub_100861D0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EDI,DWORD PTR [ESP+arg1+0xC]
	TEST EDI, EDI
	JNZ loc_100861DC
	INC EDI
loc_100861DC:
	TEST BYTE PTR [offset LEGO1_data + 0xC554],0x8
	MOV EBX,DWORD PTR [ESP+arg2+0xC]
	JZ loc_100861EC
	OR EBX, 0x01
loc_100861EC:
	MOV ESI,DWORD PTR [ESP+arg3+0xC]
loc_100861F0:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC530]
loc_100861F5:
	TEST ESI, ESI
	JNZ loc_1008620A
	MOV ESI, EAX
	TEST EAX, EAX
	JNZ loc_10086206
	CALL_LONG(offset [LEGO1_text.m85270_sub_10086270])
	MOV ESI, EAX
loc_10086206:
	TEST ESI, ESI
	JZ loc_10086216
loc_1008620A:
	PUSH EBX
	PUSH EDI
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m85DC0_sub_10086DC0])
	TEST EAX, EAX
	JNZ loc_1008623A
loc_10086216:
	PUSH 0x00
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m852E0_sub_100862E0])
	ADD ESP, 0x08
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xC528]
	TEST EAX, EAX
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC530]
	JNZ loc_100861F5
	TEST ECX, ECX
	JZ loc_10086238
	CALL_LONG(ECX)
	JMP loc_100861F0
loc_10086238:
	XOR EAX, EAX
loc_1008623A:
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10086240(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH 0x00
	PUSH 0x00
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m851D0_sub_100861D0])
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10086260(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	TEST EAX, EAX
	JZ loc_1008626E
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m86380_sub_10087380])
loc_1008626E:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10086270()
{
__asm{
	CALL_LONG(offset [LEGO1_text.m88140_sub_10089140])
	TEST EAX, EAX
	JNZ loc_1008627C
	XOR EAX, EAX
	RET
loc_1008627C:
	CMP DWORD PTR [offset LEGO1_data + 0xC530],0x00
	JNZ loc_100862D3
	MOV DWORD PTR [offset LEGO1_data + 0xC5B4],0x00000001
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC554]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m88470_sub_10089470])
	MOV DWORD PTR [offset LEGO1_data + 0xC530], EAX
	TEST EAX, EAX
	JZ loc_100862D3
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xC5B0]
	TEST ECX, ECX
	JZ loc_100862B9
	PUSH ECX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m887E0_sub_100897E0])
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC530]
loc_100862B9:
	MOV CX,WORD PTR DS:[offset LEGO1_data + 0xC5AC]
	MOV DWORD PTR [offset LEGO1_data + 0xC530], EAX
	CMP CX, 0xFFFF
	JZ loc_100862D3
	PUSH ECX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m888F0_sub_100898F0])
loc_100862D3:
	CALL_LONG(offset [LEGO1_text.m88160_sub_10089160])
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC530]
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100862E0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	CMP DWORD PTR [ESP+arg2],0x00
	JZ loc_100862F0
	CALL_LONG(offset [LEGO1_text.m8B970_sub_1008C970])
	TEST EAX, EAX
	JZ loc_1008630D
loc_100862F0:
	CALL_LONG(offset [LEGO1_text.m8B960_sub_1008C960])
	TEST EAX, EAX
	JZ loc_1008630D
	MOV ECX,DWORD PTR [ESP+arg1]
	PUSH ECX
	CALL_LONG(EAX)
	ADD ESP, 0x04
	TEST EAX, EAX
	JZ loc_1008630D
	MOV EAX, 0x00000001
	RET
loc_1008630D:
	XOR EAX, EAX
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10086310(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	CMP WORD PTR DS:[ESI+0x20],0xBEAD
	JZ loc_10086334
	MOV EDX, 0x0000000A
	XOR ECX, ECX
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	RETN 0x0004
loc_10086334:
	MOV AX,WORD PTR DS:[ESI+0x22]
	TEST AL, 0x02
	JZ loc_10086362
	TEST AL, 0x01
	JZ loc_10086355
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88100_sub_10089100])
	TEST EAX, EAX
	JNZ loc_1008635F
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	RETN 0x0004
loc_10086355:
	LEA EAX,DWORD PTR [ESI+0x60]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
loc_1008635F:
	INC DWORD PTR [ESI+0x78]
loc_10086362:
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m853A0_sub_100863A0])
	MOV EDI, EAX
	MOV AX,WORD PTR DS:[ESI+0x22]
	TEST AL, 0x02
	JZ loc_10086392
	DEC DWORD PTR [ESI+0x78]
	TEST AL, 0x01
	JZ loc_10086388
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88120_sub_10089120])
	MOV EAX, EDI
	POP EDI
	POP ESI
	RETN 0x0004
loc_10086388:
	ADD ESI, 0x60
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
loc_10086392:
	MOV EAX, EDI
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100863A0()
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
	};

__asm{
	SUB ESP, 0x08
	MOV DWORD PTR [ESP+var_8+0x8],ECX
	PUSH EBX
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x2C]
	MOV DWORD PTR [ESP+var_4+0x10],EAX
	PUSH EDI
	XOR DI, DI
	PUSH EBP
loc_100863B5:
	MOV ECX,DWORD PTR [ESP+var_8+0x18]
	MOVZX EAX,DI
	MOV ESI,DWORD PTR [EAX*4+ECX]
	TEST ESI, ESI
	JZ loc_10086400
	CMP DI, 0x03
	JZ loc_10086400
	CMP DI, 0x04
	JZ loc_10086400
	XOR EBP, EBP
loc_100863D1:
	MOV EBX,DWORD PTR [ESI+0x08]
	MOV ECX,DWORD PTR [ESI+0x04]
	CMP WORD PTR DS:[ECX+0x0C],0x00
	JNZ loc_100863F4
	MOV EDX, 0x00000001
	CALL_LONG(offset [LEGO1_text.m85A10_sub_10086A10])
	TEST EAX, EAX
	JZ loc_10086420
	CMP EBX, ESI
	JNZ loc_100863FA
	XOR EBX, EBX
	JMP loc_100863FA
loc_100863F4:
	TEST EBP, EBP
	JNZ loc_100863FA
	MOV EBP, ESI
loc_100863FA:
	MOV ESI, EBX
	CMP EBP, EBX
	JNZ loc_100863D1
loc_10086400:
	INC DI
	CMP DI, 0x05
	JB loc_100863B5
	CMP DWORD PTR [offset LEGO1_data.mC54C],0x00
	JZ loc_10086420
	MOV EDX, 0x0000FFFF
	MOV ECX,DWORD PTR [ESP+var_8+0x18]
	CALL_LONG(DWORD PTR [offset LEGO1_data.mC54C])
loc_10086420:
	MOV EAX,DWORD PTR [ESP+var_4+0x18]
	MOV ECX,DWORD PTR [ESP+var_8+0x18]
	POP EBP
	POP EDI
	SUB EAX,DWORD PTR [ECX+0x2C]
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10086440(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR ESI, ESI
	MOV EDI,DWORD PTR [ESP+arg1+0x14]
	PUSH EBP
	CMP WORD PTR DS:[EDI+0x20],0xBEAD
	JZ loc_10086470
	MOV EDX, 0x0000000A
	XOR ECX, ECX
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x000C
loc_10086470:
	MOV DWORD PTR [offset LEGO1_data + 0xC5B4],0x00000001
	MOV EAX,DWORD PTR [ESP+arg3+0x18]
	CMP EAX, 0x01
	JZ loc_1008649C
	CMP EAX, 0x02
	JZ loc_100864C5
	CMP EAX, 0x04
	JZ loc_100864CE
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x000C
loc_1008649C:
	MOV WORD PTR SS:[ESP+var_4+0x16],0x0001
	CMP WORD PTR DS:[EDI+0x24],0x00
	JNZ loc_100864D5
	MOV EDX, 0x00000004
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x000C
loc_100864C5:
	MOV WORD PTR SS:[ESP+var_4+0x16],0x0002
	JMP loc_100864D5
loc_100864CE:
	MOV WORD PTR SS:[ESP+var_4+0x16],0x0000
loc_100864D5:
	MOV AX,WORD PTR DS:[EDI+0x22]
	TEST AL, 0x02
	JZ loc_10086508
	TEST AL, 0x01
	JZ loc_100864FB
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m88100_sub_10089100])
	TEST EAX, EAX
	JNZ loc_10086505
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x000C
loc_100864FB:
	LEA EAX,DWORD PTR [EDI+0x60]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
loc_10086505:
	INC DWORD PTR [EDI+0x78]
loc_10086508:
	MOV EAX,DWORD PTR [ESP+var_4+0x16]
	MOV EBP,DWORD PTR [ESP+arg2+0x18]
	AND EAX, 0x0000FFFF
	TEST EBP, EBP
	LEA ECX,DWORD PTR [EAX*4+EDI]
	MOV DWORD PTR [ESP+var_4+0x18],ECX
	MOV EBX,DWORD PTR [ECX]
	JZ loc_1008657B
loc_10086522:
	PUSH 0x00
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[EDI+0x28]
	MOV EDX,DWORD PTR [ESP+var_4+0x1A]
	PUSH EAX
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m85870_sub_10086870])
	TEST EAX, EAX
	JZ loc_1008657B
	MOV ECX,DWORD PTR [EAX]
	TEST BYTE PTR [ECX+0x22],0x11
	JZ loc_10086565
	AND EAX, 0x0000FFFF
	JNZ loc_1008655B
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[EDI+0x28]
	ADD EAX, 0x0000FFFF
	AND EAX, 0xFFFF0000
	JMP loc_10086575
loc_1008655B:
	SUB ESI, EAX
	ADD ESI, 0x00010000
	JMP loc_10086577
loc_10086565:
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[EDI+0x28]
	ADD EAX, 0x00000FFF
	AND EAX, 0xFFFFF000
loc_10086575:
	ADD ESI, EAX
loc_10086577:
	CMP ESI, EBP
	JB loc_10086522
loc_1008657B:
	TEST EBX, EBX
	JZ loc_10086585
	MOV EAX,DWORD PTR [ESP+var_4+0x18]
	MOV DWORD PTR [EAX],EBX
loc_10086585:
	MOV AX,WORD PTR DS:[EDI+0x22]
	TEST AL, 0x02
	JZ loc_100865A7
	DEC DWORD PTR [EDI+0x78]
	TEST AL, 0x01
	JZ loc_1008659D
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m88120_sub_10089120])
	JMP loc_100865A7
loc_1008659D:
	ADD EDI, 0x60
	PUSH EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
loc_100865A7:
	MOV EAX, ESI
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x000C
}
}

__declspec(naked) DWORD LEGO1_sub_100865C0()
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1217061 = 0x4A4894,
		arg1217219 = 0x4A4B0C,
	};

__asm{
	SUB ESP, 0x0C
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	PUSH EBP
	XOR EDI, EDI
	XOR EBX, EBX
	MOV DWORD PTR [ESP+var_8+0x1C],EDI
	MOV DWORD PTR [ESP+var_C+0x1C],EDI
	CMP DWORD PTR [ESI+0x00000280],EDI
	JZ loc_10086655
	MOV EDX, ESI
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m87AA0_sub_10088AA0])
	MOV DWORD PTR [ESP+var_C+0x1C],EAX
	CMP EAX, 0x0000FFFF
	JNB FAR loc_1008667D
	MOV EAX, 0x00004000
	CMP DWORD PTR [ESP+var_C+0x1C],EAX
	JNB loc_10086609
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	AND EAX, 0x0000FFFF
loc_10086609:
	MOVZX EBP,AX
	ADD EBP,DWORD PTR [ESP+var_C+0x1C]
	CMP EBP, 0x0000FFFF
	JB loc_1008661D
	MOV EBP, 0x0000FFFF
loc_1008661D:
	MOV AX,WORD PTR DS:[ESI+0x22]
	MOV EDX, ESI
	OR AH, 0x10
	MOVZX ECX,AX
	PUSH ECX
	PUSH EBP
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m877E0_sub_100887E0])
	TEST EAX, EAX
	JZ loc_10086681
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	SUB EAX, 0x0000028C
	SHR EAX, 0x04
	SHL EAX, 0x04
	LEA EDI,DWORD PTR [ESI+EAX+0x0000028C]
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	SUB DWORD PTR [ESI+0x2C],EAX
	JMP loc_10086681
loc_10086655:
	TEST BYTE PTR [ESI+0x22],0x11
	JZ loc_1008666D
	MOV EAX, ESI
	MOV EBP, 0x00010000
	AND EAX, 0x0000FFFF
	JZ loc_10086672
	SUB EBP, EAX
	JMP loc_10086672
loc_1008666D:
	MOV EBP, 0x00001000
loc_10086672:
	LEA EDI,DWORD PTR [ESI+0x0000027C]
	SUB DWORD PTR [ESI+0x2C],EBP
	JMP loc_10086681
loc_1008667D:
	MOV EBP,DWORD PTR [ESP+var_4+0x1C]
loc_10086681:
	TEST EDI, EDI
	JZ loc_100866D3
	TEST BYTE PTR [ESI+0x22],0x11
	JZ loc_100866AB
	MOV EAX, ESI
	AND EAX, 0x0000FFFF
	JNZ loc_100866A2
	ADD EBP, 0x0000FFFF
	AND EBP, 0xFFFF0000
	JMP loc_100866B7
loc_100866A2:
	MOV EBP, 0x00010000
	SUB EBP, EAX
	JMP loc_100866B7
loc_100866AB:
	ADD EBP, 0x00000FFF
	AND EBP, 0xFFFFF000
loc_100866B7:
	LEA EAX,DWORD PTR [EBP+arg1217061-0x4A4B20]
	SHR EAX, 0x04
	SHL EAX, 0x04
	LEA ECX,DWORD PTR [ESI+EAX+0x0000027C]
	MOV DWORD PTR [ESP+var_8+0x1C],ECX
	JMP FAR loc_1008679E
loc_100866D3:
	MOV EBX,DWORD PTR [ESI+0x00000278]
	TEST EBX, EBX
	JZ loc_1008673D
	MOV EDX, EBX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m87AA0_sub_10088AA0])
	MOV DWORD PTR [ESP+var_C+0x1C],EAX
	CMP EAX, 0x0000FFFF
	JNB loc_1008673D
	MOV EAX, 0x00004000
	CMP DWORD PTR [ESP+var_C+0x1C],EAX
	JNB loc_10086705
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	AND EAX, 0x0000FFFF
loc_10086705:
	MOVZX EAX,AX
	MOV EBP,DWORD PTR [ESP+var_C+0x1C]
	ADD EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x22]
	MOV AX,WORD PTR DS:[ESI+0x22]
	MOV EDX, EBX
	OR AH, 0x10
	MOVZX ECX,AX
	PUSH ECX
	PUSH EBP
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m877E0_sub_100887E0])
	TEST EAX, EAX
	JZ loc_1008673D
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	SUB EAX, 0x14
	SHR EAX, 0x04
	SHL EAX, 0x04
	LEA EDI,DWORD PTR [EBX+EAX+0x14]
	JMP loc_1008679E
loc_1008673D:
	MOV DWORD PTR [ESP+var_C+0x1C],0x00000000
	MOV EBP, 0x00001000
loc_1008674A:
	MOV AX,WORD PTR DS:[ESI+0x22]
	MOV EDX, EBP
	OR AH, 0x10
	MOVZX ECX,AX
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m875C0_sub_100885C0])
	MOV EBX, EAX
	TEST EBX, EBX
	JNZ loc_1008678D
	SHR EBP, 0x01
	CMP EBP, 0x14
	JNB loc_1008674A
	ADD EBP, EBP
	MOV EDX, 0x00000002
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	TEST EAX, EAX
	JNZ loc_1008674A
	CMP DWORD PTR [ESI+0x14],0x01
	SBB EAX, EAX
	POP EBP
	INC EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_1008678D:
	MOV EAX,DWORD PTR [ESI+0x00000278]
	LEA EDI,DWORD PTR [EBX+0x04]
	MOV DWORD PTR [EBX],EAX
	MOV DWORD PTR [ESI+0x00000278],EBX
loc_1008679E:
	CMP DWORD PTR [ESP+var_8+0x1C],0x00
	JNZ loc_100867EF
	MOV ECX,DWORD PTR [ESP+var_C+0x1C]
	SUB DWORD PTR [ESI+0x2C],ECX
	TEST BYTE PTR [ESI+0x22],0x11
	JZ loc_100867D2
	MOV EAX, EBX
	AND EAX, 0x0000FFFF
	JNZ loc_100867C9
	ADD EBP, 0x0000FFFF
	AND EBP, 0xFFFF0000
	JMP loc_100867DE
loc_100867C9:
	MOV EBP, 0x00010000
	SUB EBP, EAX
	JMP loc_100867DE
loc_100867D2:
	ADD EBP, 0x00000FFF
	AND EBP, 0xFFFFF000
loc_100867DE:
	LEA EAX,DWORD PTR [EBP+arg1217219-0x4A4B20]
	SHR EAX, 0x04
	SHL EAX, 0x04
	LEA ECX,DWORD PTR [EBX+EAX+0x04]
	MOV DWORD PTR [ESP+var_8+0x1C],ECX
loc_100867EF:
	MOV EAX,DWORD PTR [ESI+0x14]
	ADD DWORD PTR [ESI+0x2C],EBP
loc_100867F5:
	MOV ECX, EDI
	MOV DWORD PTR [EDI+0x08],EAX
	MOV AX,WORD PTR DS:[EDI+0x02]
	AND AX, 0x8FFF
	MOV WORD PTR DS:[EDI+0x02],AX
	OR AH, 0x50
	MOV WORD PTR DS:[EDI+0x02],AX
	MOV EAX, EDI
	ADD EDI, 0x10
	CMP DWORD PTR [ESP+var_8+0x1C],ECX
	JA loc_100867F5
	POP EBP
	MOV DWORD PTR [ESI+0x14],EAX
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10086830()
{
__asm{
	PUSH ESI
	MOV ESI, ECX
	CMP DWORD PTR [ECX+0x14],0x00
	JNZ loc_10086848
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m855C0_sub_100865C0])
	TEST EAX, EAX
	JNZ loc_10086848
	XOR EAX, EAX
	POP ESI
	RET
loc_10086848:
	MOV EAX,DWORD PTR [ESI+0x14]
	MOV ECX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [ESI+0x14],ECX
	POP ESI
	MOV DWORD PTR [EAX+0x04],0xFFFFFFFF
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10086860()
{
__asm{
	MOV EAX,DWORD PTR [ECX+0x14]
	MOV DWORD PTR [EDX+0x08],EAX
	MOV DWORD PTR [ECX+0x14],EDX
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10086870(DWORD arg1, DWORD arg2)
{
	enum{
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
		arg1217224 = 0x4A4B20,
		arg1217225 = 0x4A4B24,
		arg1217227 = 0x4A4B2C,
		arg1217228 = 0x4A4B30,
	};

__asm{
	SUB ESP, 0x04
	MOV WORD PTR SS:[ESP+r+0x2],DX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EAX,DWORD PTR [ECX+0x2C]
	PUSH EBP
	MOV EDI, ECX
	MOV ESI,DWORD PTR [ESP+arg1+0x14]
	ADD ESI, 0x00000FFF
	AND ESI, 0xFFFFF000
	ADD EAX, ESI
	CMP EAX,DWORD PTR [EDI+0x34]
	JBE loc_100868B0
	MOV EDX, 0x00000007
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
loc_100868B0:
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m85830_sub_10086830])
	MOV EBX, EAX
	TEST EBX, EBX
	JNZ loc_100868C9
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
loc_100868C9:
	CMP WORD PTR SS:[ESP+r+0x12],0x03
	MOV EAX, 0x00001000
	JNZ loc_100868E5
	MOV EAX,DWORD PTR [ESP+arg2+0x14]
	AND EAX, 0x01
	SHL EAX, 0x08
	OR EAX, 0x00002000
loc_100868E5:
	XOR ECX, ECX
	MOV EDX,DWORD PTR [ESP+arg1+0x14]
	MOV CX,WORD PTR DS:[EDI+0x22]
	OR ECX, EAX
	PUSH ECX
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m875C0_sub_100885C0])
	MOV EBP, EAX
	TEST EBP, EBP
	JNZ loc_10086914
	MOV EDX, EBX
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m85860_sub_10086860])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
loc_10086914:
	MOV DWORD PTR [EBX+0x04],EBP
	MOV ECX,DWORD PTR [ESP+r+0x12]
	AND ECX, 0x0000FFFF
	MOV EAX,DWORD PTR [ECX*4+EDI]
	TEST EAX, EAX
	JNZ loc_10086930
	MOV DWORD PTR [EBX+0x0C],EBX
	MOV DWORD PTR [EBX+0x08],EBX
	JMP loc_10086942
loc_10086930:
	MOV DWORD PTR [EBX+0x0C],EAX
	MOV EDX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [EBX+0x08],EDX
	MOV EDX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [EDX+0x0C],EBX
	MOV DWORD PTR [EAX+0x08],EBX
loc_10086942:
	MOV DX,WORD PTR SS:[ESP+r+0x12]
	MOV DWORD PTR [ECX*4+EDI],EBX
	MOV AX,WORD PTR DS:[EBX+0x02]
	AND AX, 0x8FFF
	SHL DX, 0x0C
	OR DX, AX
	MOV WORD PTR DS:[EBX+0x02],AX
	MOV AX,WORD PTR SS:[ESP+r+0x12]
	OR AX, 0xCAD0
	MOV WORD PTR DS:[EBX+0x02],DX
	MOV WORD PTR SS:[EBP+arg1217228-0x4A4B22],AX
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],EDI
	MOV DWORD PTR [EBP+arg1217225-0x4A4B20],EBX
	MOV WORD PTR SS:[EBP+arg1217227-0x4A4B20],0x0000
	MOV EDX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	TEST BYTE PTR [EDX+0x22],0x11
	JZ loc_100869A5
	MOV EAX, EBP
	AND EAX, 0x0000FFFF
	JNZ loc_1008699E
	MOV ESI,DWORD PTR [ESP+arg1+0x14]
	ADD ESI, 0x0000FFFF
	AND ESI, 0xFFFF0000
	JMP loc_100869A5
loc_1008699E:
	MOV ESI, 0x00010000
	SUB ESI, EAX
loc_100869A5:
	CMP ECX, 0x01
	JZ loc_100869BF
	CMP ECX, 0x03
	JZ loc_100869CB
	MOV EDX, ESI
	CMP ECX, 0x04
	MOV ECX, EBP
	JZ loc_100869D8
	CALL_LONG(offset [LEGO1_text.m85D10_sub_10086D10])
	JMP loc_100869DD
loc_100869BF:
	PUSH ESI
	MOV EDX, EBP
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m85C50_sub_10086C50])
	JMP loc_100869DD
loc_100869CB:
	MOV EDX,DWORD PTR [ESP+arg2+0x14]
	MOV ECX, EBP
	CALL_LONG(offset [LEGO1_text.m85AD0_sub_10086AD0])
	JMP loc_100869DD
loc_100869D8:
	CALL_LONG(offset [LEGO1_text.m85DA0_sub_10086DA0])
loc_100869DD:
	MOV WORD PTR DS:[EBX],AX
	MOV WORD PTR DS:[EBX+0x02],0x8000
	MOV AX,WORD PTR SS:[ESP+r+0x12]
	OR AX, 0xFFF8
	SHL AX, 0x0C
	MOV WORD PTR DS:[EBX+0x02],AX
	MOV EAX, EBP
	POP EBP
	ADD DWORD PTR [EDI+0x2C],ESI
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_10086A10()
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
	};

__asm{
	SUB ESP, 0x08
	MOV DWORD PTR [ESP+var_4+0x8],EDX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EDI,DWORD PTR [ECX]
	MOV EBX,DWORD PTR [ECX+0x04]
	PUSH EBP
	MOV ESI, ECX
	MOV BP,WORD PTR DS:[ESI+0x0E]
	MOV ECX, ESI
	AND BP, 0x07
	CALL_LONG(offset [LEGO1_text.m87A70_sub_10088A70])
	CMP DWORD PTR [ESP+var_4+0x18],0x00
	MOV DWORD PTR [ESP+var_8+0x18],EAX
	JZ loc_10086A4C
	MOV EAX,DWORD PTR [EDI+0x2C]
	SUB EAX,DWORD PTR [ESP+var_8+0x18]
	CMP EAX,DWORD PTR [EDI+0x30]
	JNB loc_10086A4C
	XOR EAX, EAX
	JMP loc_10086AA5
loc_10086A4C:
	MOV EAX,DWORD PTR [EBX+0x08]
	CMP EBX, EAX
	JNZ loc_10086A5F
	MOVZX EAX,BP
	MOV DWORD PTR [EAX*4+EDI],0x00000000
	JMP loc_10086A7D
loc_10086A5F:
	MOV ECX,DWORD PTR [EBX+0x0C]
	MOV DWORD PTR [ECX+0x08],EAX
	MOV EAX,DWORD PTR [EBX+0x0C]
	MOV EDX,DWORD PTR [EBX+0x08]
	MOVZX ECX,BP
	MOV DWORD PTR [EDX+0x0C],EAX
	LEA EAX,DWORD PTR [ECX*4+EDI]
	CMP DWORD PTR [EAX],EBX
	JNZ loc_10086A7D
	MOV ECX,DWORD PTR [EBX+0x08]
	MOV DWORD PTR [EAX],ECX
loc_10086A7D:
	MOV AX,WORD PTR DS:[EBX+0x02]
	MOV EDX, EBX
	AND AX, 0x8FFF
	MOV ECX, EDI
	MOV WORD PTR DS:[EBX+0x02],AX
	OR AH, 0x50
	MOV WORD PTR DS:[EBX+0x02],AX
	CALL_LONG(offset [LEGO1_text.m85860_sub_10086860])
	MOV ECX,DWORD PTR [ESP+var_8+0x18]
	MOV EAX, 0x00000001
	SUB DWORD PTR [EDI+0x2C],ECX
loc_10086AA5:
	TEST EAX, EAX
	JZ loc_10086ABD
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m87950_sub_10088950])
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RET
loc_10086ABD:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10086AD0()
{
__asm{
	XOR AX, AX
	AND DL, 0x02
	MOV DWORD PTR [ECX+0x08],offset [LEGO1_text.m85B50_proc_10086B50]
	MOV DWORD PTR [ECX+0x10],0x00000000
	MOV WORD PTR DS:[ECX+0x0C],0x0001
	MOV BYTE PTR [ECX+0x16],DL
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10086AF0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI, EDX
	MOV EBX,DWORD PTR [ESP+arg1+0xC]
	ADD EBX, 0x20
loc_10086AFE:
	PUSH EDI
	MOV EDX, 0x00000003
	PUSH EBX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m85870_sub_10086870])
	TEST EAX, EAX
	JNZ loc_10086B47
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m853A0_sub_100863A0])
	LEA ECX,DWORD PTR [EBX+0x00000FFF]
	AND ECX, 0xFFFFF000
	ADD ECX,DWORD PTR [ESI+0x2C]
	CMP ECX,DWORD PTR [ESI+0x34]
	JA loc_10086B3F
	TEST EAX, EAX
	JNZ loc_10086AFE
	MOV EDX, 0x00000002
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	TEST EAX, EAX
	JNZ loc_10086AFE
loc_10086B3F:
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_10086B47:
	ADD EAX, 0x20
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10086B60(DWORD arg1, DWORD arg2)
{
	enum{
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x10
	MOV DWORD PTR [ESP+var_C+0x10],EDX
	PUSH EBX
	MOV DWORD PTR [ESP+var_10+0x14],ECX
	PUSH ESI
	PUSH EDI
	MOV EBX,DWORD PTR [ECX]
	PUSH EBP
	CALL_LONG(offset [LEGO1_text.m87A70_sub_10088A70])
	MOV EBP,DWORD PTR [ESP+arg1+0x20]
	MOV DWORD PTR [ESP+var_8+0x20],EAX
	ADD EBP, 0x20
	MOV EAX,DWORD PTR [ESP+arg2+0x20]
	MOV ESI, EAX
	AND EAX, 0x04
	SHL EAX, 0x08
	AND ESI, 0x01
	SHL ESI, 0x08
	OR ESI, EAX
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[EBX+0x22]
	OR ESI, EAX
	CMP DWORD PTR [ESP+var_C+0x20],0x00
	JZ loc_10086C04
	MOV EAX,DWORD PTR [ESP+var_10+0x20]
	OR ESI, 0x00002000
	MOV ECX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [ESP+var_4+0x20],ECX
loc_10086BB5:
	MOV EDX,DWORD PTR [ESP+var_10+0x20]
	PUSH ESI
	PUSH EBP
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m87760_sub_10088760])
	MOV EDI, EAX
	TEST EDI, EDI
	JNZ loc_10086BDC
	MOV EDX, 0x00000002
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	TEST EAX, EAX
	JNZ loc_10086BB5
	TEST EDI, EDI
	JZ loc_10086BEE
loc_10086BDC:
	MOV EAX,DWORD PTR [ESP+var_4+0x20]
	LEA ECX,DWORD PTR [EDI+0x20]
	MOV EDX,DWORD PTR [ESP+var_C+0x20]
	MOV DWORD PTR [EAX+0x04],EDI
	MOV DWORD PTR [EDX],ECX
	JMP loc_10086C1F
loc_10086BEE:
	MOV EAX,DWORD PTR [ESP+var_C+0x20]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	MOV DWORD PTR [EAX], 0x00000000
	XOR EAX, EAX
	ADD ESP, 0x10
	RETN 0x0008
loc_10086C04:
	OR ESI, 0x00002000
	MOV EDX,DWORD PTR [ESP+var_10+0x20]
	PUSH ESI
	MOV ECX, EBX
	PUSH EBP
	CALL_LONG(offset [LEGO1_text.m877E0_sub_100887E0])
	TEST EAX, EAX
	JZ loc_10086C3C
	MOV EDI,DWORD PTR [ESP+var_10+0x20]
loc_10086C1F:
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m87A70_sub_10088A70])
	SUB EAX,DWORD PTR [ESP+var_8+0x20]
	POP EBP
	POP EDI
	ADD DWORD PTR [EBX+0x2C],EAX
	MOV EAX, 0x00000001
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RETN 0x0008
loc_10086C3C:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10086C50(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	LEA EAX,DWORD PTR [EDX+0x20]
	MOV DWORD PTR [EDX+0x14],EAX
	MOV ESI, EDX
	MOV DWORD PTR [EDX+0x10],0x00000000
	MOV DWORD PTR [ESI+0x08],offset [LEGO1_text.m85CD0_proc_10086CD0]
	MOV DX,WORD PTR SS:[ESP+arg1+0x4]
	PUSH EDX
	MOV DX,WORD PTR DS:[ECX+0x24]
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m85C80_sub_10086C80])
	MOV AX, 0x0001
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10086C80(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV AX,WORD PTR SS:[ESP+arg1+0x8]
	PUSH EDI
	MOV DI, DX
	MOV ESI,DWORD PTR [ECX+0x14]
	SUB DX, DX
	MOV EBX, ECX
	SUB EBX, ESI
	MOV DWORD PTR [ECX+0x10],ESI
	ADD AX, BX
	MOVZX EBX,AX
	DIV DI
	MOVZX EDX,DX
	SUB EBX, EDX
	LEA EDX,DWORD PTR [ESI+EBX]
	MOV DWORD PTR [ECX+0x14],EDX
	MOVZX ECX,DI
	SUB EDX, ECX
	CMP EDX, ESI
	JBE loc_10086CC0
loc_10086CB5:
	LEA EAX,DWORD PTR [ESI+ECX]
	MOV DWORD PTR [ESI],EAX
	CMP EDX, EAX
	MOV ESI, EAX
	JA loc_10086CB5
loc_10086CC0:
	POP EDI
	MOV DWORD PTR [ESI], 0x00000000
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_10086D10()
{
__asm{
	PUSH ESI
	MOV EAX, ECX
	LEA ESI,DWORD PTR [ECX+0x1E]
	SUB EAX, ESI
	ADD AX, DX
	SUB AX, 0x000A
	AND AX, 0xFFF8
	MOVZX EAX,AX
	LEA EDX,DWORD PTR [ESI+EAX]
	MOV WORD PTR DS:[EDX],0x0001
	MOV DWORD PTR [ECX+0x10],ESI
	MOV DWORD PTR [EDX+0x06],EDX
	MOV DWORD PTR [EDX+0x02],EDX
	MOV AX,WORD PTR DS:[ECX+0x0E]
	MOV DWORD PTR [ECX+0x14],EDX
	MOV WORD PTR DS:[ECX+0x18],0x0010
	AND AL, 0x07
	CMP AL, 0x02
	JZ loc_10086D66
	MOV EAX,DWORD PTR [ECX]
	MOV AX,WORD PTR DS:[EAX+0x26]
	SHR AX, 0x02
	CMP AX, 0x0010
	JBE loc_10086D66
	ADD AX, 0x0007
	AND AX, 0xFFF8
	MOV WORD PTR DS:[ECX+0x18],AX
loc_10086D66:
	MOV EAX, EDX
	SUB EAX, ESI
	MOV WORD PTR DS:[EDX-0x02],AX
	OR AL, 0x02
	MOV WORD PTR DS:[ESI],AX
	MOV DWORD PTR [ESI+0x06],EDX
	MOV EAX,DWORD PTR [EDX+0x02]
	MOV DWORD PTR [ESI+0x02],EAX
	MOV EAX,DWORD PTR [EDX+0x02]
	MOV DWORD PTR [EAX+0x06],ESI
	MOV DWORD PTR [EDX+0x02],ESI
	MOV DWORD PTR [ECX+0x08],offset [LEGO1_text.m86430_proc_10087430]
	MOV AX,WORD PTR DS:[ESI]
	POP ESI
	AND AX, 0xFFFC
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10086DA0()
{
__asm{
	ADD EDX, ECX
	LEA EAX,DWORD PTR [ECX+0x20]
	MOV DWORD PTR [ECX+0x14],EDX
	MOV DWORD PTR [ECX+0x10],EAX
	MOV DWORD PTR [ECX+0x08],offset [LEGO1_text.m85FF0_proc_10086FF0]
	MOV AX, 0x0001
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10086DC0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	CMP WORD PTR DS:[ESI+0x20],0xBEAD
	JZ loc_10086DE1
	MOV EDX, 0x0000000A
	XOR ECX, ECX
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	XOR EAX, EAX
	POP EDI
	POP ESI
	RETN 0x000C
loc_10086DE1:
	MOV AX,WORD PTR DS:[ESI+0x22]
	TEST AL, 0x02
	JZ loc_10086E0C
	TEST AL, 0x01
	JZ loc_10086DFF
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88100_sub_10089100])
	TEST EAX, EAX
	JNZ loc_10086E09
	XOR EAX, EAX
	POP EDI
	POP ESI
	RETN 0x000C
loc_10086DFF:
	LEA EAX,DWORD PTR [ESI+0x60]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
loc_10086E09:
	INC DWORD PTR [ESI+0x78]
loc_10086E0C:
	XOR EAX, EAX
	MOV ECX,DWORD PTR [ESP+arg2+0x8]
	MOV AX,WORD PTR DS:[ESI+0x26]
	CMP EAX, ECX
	JB loc_10086E28
	MOV EDX,DWORD PTR [ESP+arg3+0x8]
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m85E80_sub_10086E80])
	JMP loc_10086E4D
loc_10086E28:
	XOR EAX, EAX
	PUSH ECX
	MOV AX,WORD PTR DS:[ESI+0x2A]
	MOV EDX,DWORD PTR [ESP+arg3+0xC]
	CMP EAX, ECX
	JB loc_10086E43
	AND EDX, -0x03
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m86020_sub_10087020])
	JMP loc_10086E4D
loc_10086E43:
	AND EDX, -0x03
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m85AF0_sub_10086AF0])
loc_10086E4D:
	MOV EDI, EAX
	MOV AX,WORD PTR DS:[ESI+0x22]
	TEST AL, 0x02
	JZ loc_10086E76
	DEC DWORD PTR [ESI+0x78]
	TEST AL, 0x01
	JZ loc_10086E6C
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88120_sub_10089120])
	MOV EAX, EDI
	POP EDI
	POP ESI
	RETN 0x000C
loc_10086E6C:
	ADD ESI, 0x60
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
loc_10086E76:
	MOV EAX, EDI
	POP EDI
	POP ESI
	RETN 0x000C
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10086E80(DWORD arg1)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg1217224 = 0x4A4B20,
		arg1217225 = 0x4A4B24,
	};

__asm{
	SUB ESP, 0x0C
	CMP WORD PTR SS:[ESP+arg1+0xC],0x04
	MOV DWORD PTR [ESP+var_4+0xC],EDX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	MOV ESI, ECX
	JNB loc_10086E9C
	MOV WORD PTR SS:[ESP+arg1+0x1C],0x0004
loc_10086E9C:
	MOV AX,WORD PTR SS:[ESP+arg1+0x1C]
	SHR AX, 0x03
	MOVZX ECX,AX
	MOV DWORD PTR [ESP+var_8+0x1C],ECX
	LEA EDI,DWORD PTR [ECX*4+ESI+0x00000080]
	MOV EDX,DWORD PTR [EDI]
	TEST EDX, EDX
	JZ loc_10086EF7
	MOV EAX, EDX
	MOV ECX,DWORD PTR [EDX]
	AND EAX, 0xFFFF0000
	MOV DWORD PTR [EDI],ECX
	INC WORD PTR DS:[EAX+0x0C]
	TEST BYTE PTR [ESP+var_4+0x1C],0x1
	JZ loc_10086EEB
	MOV ESI,DWORD PTR [ESP+var_8+0x1C]
	MOV EDI, EDX
	SHL ESI, 0x03
	XOR EAX, EAX
	ADD ESI, 0x07
	MOV ECX, ESI
	SHR ECX, 0x02
	REP STOSD
	MOV ECX, ESI
	AND ECX, 0x03
	REP STOSB
loc_10086EEB:
	MOV EAX, EDX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x0004
loc_10086EF7:
	MOV AX,WORD PTR SS:[ESP+var_8+0x1C]
	MOV EBP,DWORD PTR [ESI+0x10]
	TEST EBP, EBP
	LEA EAX,DWORD PTR [EAX*8+0x00000008]
	MOV WORD PTR SS:[ESP+var_8+0x1A],AX
	JZ loc_10086F21
	MOV EDI,DWORD PTR [EBP+arg1217225-0x4A4B20]
	MOV EAX,DWORD PTR [EDI+0x14]
	SUB EAX,DWORD PTR [EDI+0x10]
	CMP AX,WORD PTR SS:[ESP+var_8+0x1A]
	JNB loc_10086F87
	JMP loc_10086F25
loc_10086F21:
	MOV EDI,DWORD PTR [ESP+var_4+0x1C]
loc_10086F25:
	TEST EBP, EBP
	JZ loc_10086F63
	CMP WORD PTR SS:[EBP+arg1217224-0x4A4B20],0x00
	JZ loc_10086F63
	MOV EBX,DWORD PTR [EDI+0x14]
	MOV ECX,DWORD PTR [EDI+0x10]
	CMP EBX, ECX
	JZ loc_10086F63
	SUB EBX, ECX
	CMP EBX, 0x0C
	JB loc_10086F5D
	SUB EBX, 0x08
	SAR EBX, 0x03
	MOV BYTE PTR [ECX-0x01],BL
	INC WORD PTR DS:[EDI+0x0C]
	CALL_LONG(offset [LEGO1_text.m85FF0_proc_10086FF0])
	LEA EAX,DWORD PTR [EBX*8+0x00000008]
	ADD DWORD PTR [EDI+0x10],EAX
loc_10086F5D:
	MOV WORD PTR SS:[EBP+arg1217224-0x4A4B20],0x0000
loc_10086F63:
	TEST BYTE PTR [ESP+var_4+0x1C],0x10
	JNZ loc_10086FD0
	PUSH 0x00
	MOV EDX, 0x00000004
	PUSH 0x00010000
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m85870_sub_10086870])
	TEST EAX, EAX
	JZ loc_10086FD0
	MOV EAX,DWORD PTR [ESI+0x10]
	MOV EDI,DWORD PTR [EAX+0x04]
loc_10086F87:
	MOV EDX,DWORD PTR [EDI+0x10]
	MOV AL,BYTE PTR [ESP+var_8+0x1C]
	MOV BYTE PTR [EDX-0x01],AL
	MOV EAX,DWORD PTR [ESP+var_8+0x1A]
	AND EAX, 0x0000FFFF
	ADD DWORD PTR [EDI+0x10],EAX
	INC WORD PTR DS:[EDI+0x0C]
	TEST BYTE PTR [ESP+var_4+0x1C],0x1
	JZ loc_10086FC4
	MOV ESI,DWORD PTR [ESP+var_8+0x1C]
	MOV EDI, EDX
	SHL ESI, 0x03
	XOR EAX, EAX
	ADD ESI, 0x07
	MOV ECX, ESI
	SHR ECX, 0x02
	REP STOSD
	MOV ECX, ESI
	AND ECX, 0x03
	REP STOSB
loc_10086FC4:
	MOV EAX, EDX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x0004
loc_10086FD0:
	MOV EAX,DWORD PTR [ESP+arg1+0x1C]
	MOV EDX,DWORD PTR [ESP+var_4+0x1C]
	PUSH EAX
	AND EDX, -0x03
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m86020_sub_10087020])
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_proc_10086FF0()
{
__asm{
	PUSH ESI
	XOR EDX, EDX
	MOV ESI, ECX
	MOV DL,BYTE PTR [ECX-0x01]
	AND ESI, 0xFFFF0000
	MOV EAX,DWORD PTR [ESI]
	LEA EAX,DWORD PTR [EDX*4+EAX+0x00000080]
	MOV EDX,DWORD PTR [EAX]
	MOV DWORD PTR [ECX],EDX
	MOV DWORD PTR [EAX],ECX
	DEC WORD PTR DS:[ESI+0x0C]
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10087020(DWORD arg1)
{
	enum{
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x18
	MOV EAX, EDX
	AND AX, 0x0002
	PUSH ESI
	MOV WORD PTR SS:[ESP+var_14+0x1A],AX
	MOV DWORD PTR [ESP+var_C+0x1C],EDX
	MOV AX,WORD PTR SS:[ESP+arg1+0x1C]
	MOV DWORD PTR [ESP+var_4+0x1C],ECX
	ADD AX, 0x0009
	AND AX, 0xFFF8
	CMP AX, 0x0010
	JA loc_1008704E
	MOV AX, 0x0010
loc_1008704E:
	MOV WORD PTR SS:[ESP+arg1+0x1C],AX
	MOV ECX,DWORD PTR [ESP+var_4+0x1C]
	MOV EAX,DWORD PTR [ESP+var_14+0x1A]
	AND EAX, 0x0000FFFF
	MOV EDX,DWORD PTR [EAX*4+ECX]
	MOV DWORD PTR [ESP+var_14+0x1C],EDX
	TEST EDX, EDX
	JZ FAR loc_100870F9
	MOV DWORD PTR [ESP+var_8+0x1C],EDX
	JMP loc_100870BD
loc_10087075:
	TEST BYTE PTR [ESP+var_C+0x1C],0x10
	JNZ FAR loc_1008715F
	MOV EAX,DWORD PTR [ESP+var_4+0x1C]
	PUSH 0x00
	XOR ECX, ECX
	MOV EDX,DWORD PTR [ESP+var_14+0x1E]
	MOV CX,WORD PTR DS:[EAX+0x28]
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+var_4+0x24]
	CALL_LONG(offset [LEGO1_text.m85870_sub_10086870])
	TEST EAX, EAX
	JZ FAR loc_1008715F
loc_100870A2:
	MOV EAX,DWORD PTR [ESP+var_14+0x1A]
	MOV ECX,DWORD PTR [ESP+var_4+0x1C]
	AND EAX, 0x0000FFFF
	MOV EDX,DWORD PTR [EAX*4+ECX]
	MOV DWORD PTR [ESP+var_14+0x1C],EDX
	MOV EAX,DWORD PTR [EDX+0x08]
	MOV DWORD PTR [ESP+var_8+0x1C],EAX
loc_100870BD:
	XOR ESI, ESI
loc_100870BF:
	MOV CX,WORD PTR SS:[ESP+arg1+0x1C]
	MOV EAX,DWORD PTR [ESP+var_14+0x1C]
	CMP WORD PTR DS:[EAX],CX
	JB loc_100870E8
	MOV ECX, EAX
	MOV EDX,DWORD PTR [ESP+arg1+0x1C]
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	MOV ECX,DWORD PTR [ECX+0x04]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m861B0_sub_100871B0])
	MOV DWORD PTR [ESP+var_10+0x1C],EAX
	CMP EAX, ESI
	JNZ loc_1008713F
loc_100870E8:
	MOV EAX,DWORD PTR [ESP+var_14+0x1C]
	MOV ECX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [ESP+var_14+0x1C],ECX
	CMP DWORD PTR [ESP+var_8+0x1C],ECX
	JNZ loc_100870BF
loc_100870F9:
	TEST BYTE PTR [ESP+var_C+0x1C],0x2
	JZ FAR loc_10087075
	TEST BYTE PTR [ESP+var_C+0x1C],0x40
	JNZ FAR loc_10087075
	CMP DWORD PTR [offset LEGO1_data.mC54C],0x00
	JZ FAR loc_10087075
	MOV EDX,DWORD PTR [ESP+arg1+0x1C]
	MOV ECX,DWORD PTR [ESP+var_4+0x1C]
	CALL_LONG(DWORD PTR [offset LEGO1_data.mC54C])
	CMP AX,WORD PTR SS:[ESP+var_4+0x24]
	JB FAR loc_10087075
	OR DWORD PTR [ESP+var_14+0x24],0x40
	JMP FAR loc_100870A2
loc_1008713F:
	MOV EAX,DWORD PTR [ESP+var_1C+0x24]
	MOV ECX,DWORD PTR [ESP+var_1C+0x22]
	AND ECX, 0x0000FFFF
	MOV EDX,DWORD PTR [ESP+var_C+0x24]
	MOV DWORD PTR [ECX*4+EDX],EAX
	MOV EAX,DWORD PTR [ESP+var_18+0x24]
	POP ESI
	ADD ESP, 0x18
	RETN 0x0004
loc_1008715F:
	TEST BYTE PTR [ESP+var_C+0x1C],0x20
	JNZ loc_100871A0
	MOV AX,WORD PTR SS:[ESP+arg1+0x1C]
	MOV EDX,DWORD PTR [ESP+var_4+0x1C]
	ADD AX, 0x0FFF
	AND AX, 0xF000
	MOVZX ECX,AX
	ADD ECX,DWORD PTR [EDX+0x2C]
	CMP ECX,DWORD PTR [EDX+0x34]
	JA loc_100871A0
	MOV EAX,DWORD PTR [ESP+arg1+0x1C]
	MOV EDX,DWORD PTR [ESP+var_C+0x1C]
	AND EAX, 0x0000FFFF
	MOV ECX,DWORD PTR [ESP+var_4+0x1C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85AF0_sub_10086AF0])
	POP ESI
	ADD ESP, 0x18
	RETN 0x0004
loc_100871A0:
	XOR EAX, EAX
	POP ESI
	ADD ESP, 0x18
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100871B0(DWORD arg1)
{
	enum{
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x10
	PUSH EBX
	PUSH ESI
	MOV SI, DX
	PUSH EDI
	XOR AX, AX
	MOV EDX,DWORD PTR [ECX+0x10]
	PUSH EBP
	MOV EBX, ECX
	MOV EDI, EDX
	MOV EBP,DWORD PTR [ESP+arg1+0x20]
loc_100871C8:
	MOV CX,WORD PTR DS:[EDX]
	CMP CX, SI
	JNB loc_10087226
	CMP AX, CX
	JNB loc_100871D8
	MOV AX, CX
loc_100871D8:
	MOV EDX,DWORD PTR [EDX+0x02]
	CMP EDI, EDX
	JNZ loc_100871C8
	TEST EBP,0x00000002
	JZ loc_10087210
	TEST EBP,0x00000040
	JNZ loc_10087210
	CMP DWORD PTR [offset LEGO1_data + 0xC550],0x00
	JZ loc_10087210
	PUSH 0x00
	MOV EDX, ESI
	MOV ECX, EBX
	CALL_LONG(DWORD PTR [offset LEGO1_data + 0xC550])
	CMP AX, SI
	JB loc_10087210
	MOV EDX,DWORD PTR [EBX+0x10]
	TEST EDX, EDX
	JNZ loc_100871C8
loc_10087210:
	AND AX, 0xFFFC
	MOV ECX,DWORD PTR [EBX+0x04]
	MOV WORD PTR DS:[ECX],AX
	POP EBP
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RETN 0x0004
loc_10087226:
	AND CX, 0xFFFC
	MOV EAX, 0x00000010
	SUB CX, SI
	TEST EBP,0x00004000
	JNZ loc_10087241
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[EBX+0x18]
loc_10087241:
	MOVZX EDI,CX
	MOV DWORD PTR [ESP+var_C+0x20],EDI
	CMP EDI, EAX
	JGE loc_10087282
	LEA ECX,DWORD PTR [EDX+0x02]
	MOV DWORD PTR [ESP+var_10+0x20],EDX
	MOV EDI,DWORD PTR [ESP+var_10+0x20]
	MOV EDX,DWORD PTR [ECX]
	MOV EAX,DWORD PTR [EDI+0x06]
	MOV DWORD PTR [EAX+0x02],EDX
	MOV EAX,DWORD PTR [EDI+0x06]
	MOV ECX,DWORD PTR [ECX]
	MOV DWORD PTR [ECX+0x06],EAX
	MOV SI,WORD PTR DS:[EDI]
	OR SI, 0x01
	MOV WORD PTR DS:[EDI],SI
	AND SI, 0xFFFC
	MOVZX EAX,SI
	OR BYTE PTR [EDI+EAX],0x02
	JMP FAR loc_10087310
loc_10087282:
	TEST EBP,0x00000006
	JZ loc_100872EA
	MOV AX,WORD PTR DS:[EDX]
	MOV DWORD PTR [ESP+var_10+0x20],EDX
	AND AX, 0x0002
	OR AX, SI
	OR AL, 0x01
	MOV WORD PTR DS:[EDX],AX
	MOV EDI,DWORD PTR [EDX+0x02]
	MOV DWORD PTR [ESP+var_8+0x20],EDI
	MOV EDI,DWORD PTR [EDX+0x06]
	MOV EAX,DWORD PTR [ESP+var_8+0x20]
	MOV DWORD PTR [EDI+0x02],EAX
	MOV EDI,DWORD PTR [EDX+0x06]
	MOV DWORD PTR [ESP+var_8+0x20],EDI
	MOV EDI,DWORD PTR [EDX+0x02]
	MOV EAX,DWORD PTR [ESP+var_8+0x20]
	MOV DWORD PTR [EDI+0x06],EAX
	MOV EAX,DWORD PTR [ESP+var_C+0x20]
	MOVZX EDI,SI
	ADD EDX, EDI
	MOV WORD PTR DS:[EDX+EAX-0x02],CX
	OR CL, 0x02
	MOV WORD PTR DS:[EDX],CX
	MOV ECX,DWORD PTR [EBX+0x14]
	MOV DWORD PTR [EDX+0x06],ECX
	MOV EAX,DWORD PTR [ECX+0x02]
	MOV DWORD PTR [EDX+0x02],EAX
	MOV EAX,DWORD PTR [ECX+0x02]
	MOV DWORD PTR [EAX+0x06],EDX
	MOV DWORD PTR [ECX+0x02],EDX
	JMP loc_10087310
loc_100872EA:
	MOV EDI,DWORD PTR [ESP+var_C+0x20]
	ADD EDI, EDX
	MOVZX EAX,SI
	MOV WORD PTR DS:[EDI-0x02],CX
	MOV DWORD PTR [ESP+var_10+0x20],EDI
	OR CL, 0x02
	MOV WORD PTR DS:[EDX],CX
	MOV EDX,DWORD PTR [EDX+0x02]
	OR BYTE PTR [EDI+EAX],0x02
	MOV AX, SI
	OR AL, 0x01
	MOV WORD PTR DS:[EDI],AX
loc_10087310:
	TEST EBP,0x00000001
	MOV DWORD PTR [EBX+0x10],EDX
	JZ loc_10087338
	MOV EDI,DWORD PTR [ESP+var_10+0x20]
	XOR EAX, EAX
	MOVZX ESI,SI
	SUB ESI, 0x02
	ADD EDI, 0x02
	MOV ECX, ESI
	SHR ECX, 0x02
	REP STOSD
	MOV ECX, ESI
	AND ECX, 0x03
	REP STOSB
loc_10087338:
	TEST EBP,0x00000002
	JZ loc_10087362
	MOV EAX,DWORD PTR [EDX+0x06]
	CMP DWORD PTR [EDX+0x02],EAX
	JNZ loc_10087362
	MOV EAX,DWORD PTR [EBX+0x14]
	MOV ECX,DWORD PTR [EAX+0x02]
	MOV AX,WORD PTR DS:[ECX]
	MOV ECX,DWORD PTR [EBX+0x04]
	AND AX, 0xFFFC
	MOV WORD PTR DS:[ECX],AX
	MOV ECX,DWORD PTR [EBX+0x04]
	OR BYTE PTR [ECX+0x03],0x80
loc_10087362:
	INC WORD PTR DS:[EBX+0x0C]
	MOV EAX,DWORD PTR [ESP+var_10+0x20]
	ADD EAX, 0x02
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10087380(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	MOV EDI, ESI
	AND EDI, 0xFFFF0000
	MOV AX,WORD PTR DS:[EDI+0x0E]
	AND AX, 0xFFF8
	CMP AX, 0xCAD0
	JZ loc_100873B1
	MOV EDX, 0x0000000E
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_100873B1:
	MOV EBX,DWORD PTR [EDI]
	MOV AX,WORD PTR DS:[EBX+0x22]
	TEST AL, 0x02
	JZ loc_100873DF
	TEST AL, 0x01
	JZ loc_100873D2
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m88100_sub_10089100])
	TEST EAX, EAX
	JNZ loc_100873DC
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_100873D2:
	LEA EAX,DWORD PTR [EBX+0x60]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
loc_100873DC:
	INC DWORD PTR [EBX+0x78]
loc_100873DF:
	XOR EAX, EAX
	MOV ECX, ESI
	MOV AX,WORD PTR DS:[EDI+0x0E]
	AND EAX, 0x07
	CALL_LONG(DWORD PTR [offset LEGO1_data.mC538_ptr+EAX*4])
	TEST BYTE PTR [EBX+0x22],0x02
	JZ loc_1008741C
	DEC DWORD PTR [EBX+0x78]
	TEST BYTE PTR [EBX+0x22],0x01
	JZ loc_10087412
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m88120_sub_10089120])
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_10087412:
	ADD EBX, 0x60
	PUSH EBX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
loc_1008741C:
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10087520(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x04
	AND EAX, 0xFFFF0000
	PUSH EBX
	MOV CX,WORD PTR DS:[EAX+0x0E]
	PUSH ESI
	AND CX, 0xFFF8
	PUSH EDI
	CMP CX, 0xCAD0
	PUSH EBP
	JZ loc_1008755A
	MOV EDX, 0x0000000E
	MOV ECX,DWORD PTR [ESP+arg1+0x14]
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x000C
loc_1008755A:
	MOV ECX,DWORD PTR [EAX]
	MOV AX,WORD PTR DS:[ECX+0x22]
	TEST AL, 0x02
	JZ loc_10087595
	TEST AL, 0x01
	JZ loc_1008757D
	CALL_LONG(offset [LEGO1_text.m88100_sub_10089100])
	TEST EAX, EAX
	JNZ loc_10087587
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x000C
loc_1008757D:
	ADD ECX, 0x60
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
loc_10087587:
	MOV EAX,DWORD PTR [ESP+arg1+0x14]
	AND EAX, 0xFFFF0000
	MOV ECX,DWORD PTR [EAX]
	INC DWORD PTR [ECX+0x78]
loc_10087595:
	MOV EAX,DWORD PTR [ESP+arg1+0x14]
	MOV ESI,DWORD PTR [ESP+arg3+0x14]
	AND EAX, 0xFFFF0000
	MOV EDI, ESI
	AND EDI, 0x08
	PUSH ESI
	MOV EBX,DWORD PTR [EAX]
	MOV EBP,DWORD PTR [ESP+arg2+0x18]
	LEA EAX,DWORD PTR [ESP+arg1+0x18]
	PUSH EBP
	MOV EDX,DWORD PTR [ESP+arg1+0x1C]
	CMP EDI, 0x01
	SBB ECX, ECX
	AND ECX, EAX
	CALL_LONG(offset [LEGO1_text.m86670_sub_10087670])
	TEST BYTE PTR [EBX+0x22],0x02
	MOV WORD PTR SS:[ESP+r+0x12],AX
	JZ loc_100875EA
	DEC DWORD PTR [EBX+0x78]
	TEST BYTE PTR [EBX+0x22],0x01
	JZ loc_100875E0
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m88120_sub_10089120])
	JMP loc_100875EA
loc_100875E0:
	LEA EAX,DWORD PTR [EBX+0x60]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
loc_100875EA:
	CMP WORD PTR SS:[ESP+r+0x12],0x00
	JNZ loc_10087600
	MOV EAX,DWORD PTR [ESP+arg1+0x14]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x000C
loc_10087600:
	TEST EDI, EDI
	JNZ loc_10087645
	PUSH ESI
	PUSH EBP
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m85DC0_sub_10086DC0])
	MOV EBX, EAX
	TEST EBX, EBX
	JZ loc_10087639
	MOV EAX,DWORD PTR [ESP+r+0x12]
	MOV EDI, EBX
	AND EAX, 0x0000FFFF
	MOV ESI,DWORD PTR [ESP+arg1+0x14]
	MOV ECX, EAX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	MOV ECX,DWORD PTR [ESP+arg1+0x14]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m86380_sub_10087380])
loc_10087639:
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x000C
loc_10087645:
	TEST EBP, EBP
	JZ loc_10087655
	MOV EDX, 0x00000005
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
loc_10087655:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x000C
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10087670(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV ECX, EDX
	PUSH EBP
	MOV EDI, EDX
	AND ECX, 0xFFFF0000
	MOV EBX,DWORD PTR [ESP+arg1+0x14]
	TEST EBX, EBX
	JNZ loc_100876BC
	MOV EDX, 0x00000004
	MOV ECX,DWORD PTR [ECX]
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	TEST ESI, ESI
	JZ loc_100876AE
	XOR AX, AX
	POP EBP
	POP EDI
	MOV DWORD PTR [ESI], 0x00000000
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
loc_100876AE:
	MOV AX, 0x0001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
loc_100876BC:
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[ECX+0x0E]
	AND EAX, 0x07
	CMP EAX, 0x04
	JA loc_100876D1
	JMP_LONG(DWORD PTR [offset LEGO1_text.m868F8_proc_100878F8+EAX*4])
loc_100876D1:
	TEST ESI, ESI
	JZ loc_100876E8
	XOR AX, AX
	POP EBP
	POP EDI
	MOV DWORD PTR [ESI], 0x00000000
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
loc_100876E8:
	MOV AX, 0x0001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_10087910()
{
	enum{
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
	};

__asm{
	MOV AX,WORD PTR DS:[ECX]
	SUB ESP, 0x10
	ADD DX, 0x09
	PUSH EBX
	AND DX, 0xFFF8
	PUSH ESI
	PUSH EDI
	PUSH EBP
	MOV BP, AX
	AND BP, 0x7FFC
	CMP DX, 0x10
	JA loc_10087935
	MOV DX, 0x0010
loc_10087935:
	CMP BP, DX
	JB loc_100879B6
	MOV SI, BP
	MOV EDI, 0x00000010
	SUB SI, DX
	TEST AH,0x80
	JNZ loc_10087957
	MOV EAX, ECX
	XOR EDI, EDI
	AND EAX, 0xFFFF0000
	MOV DI,WORD PTR DS:[EAX+0x18]
loc_10087957:
	MOVZX EAX,SI
	CMP EAX, EDI
	JL FAR loc_10087A9B
	MOVZX EAX,BP
	LEA EDI,DWORD PTR [ECX+EAX]
	MOV AX,WORD PTR DS:[EDI]
	TEST AL, 0x01
	JNZ loc_1008799A
	AND AX, 0xFFFC
	ADD SI, AX
	MOV EAX, ECX
	AND EAX, 0xFFFF0000
	CMP DWORD PTR [EAX+0x10],EDI
	JNZ loc_10087988
	MOV EBX,DWORD PTR [EDI+0x02]
	MOV DWORD PTR [EAX+0x10],EBX
loc_10087988:
	MOV EAX,DWORD PTR [EDI+0x02]
	MOV EBX,DWORD PTR [EDI+0x06]
	MOV DWORD PTR [EBX+0x02],EAX
	MOV EBX,DWORD PTR [EDI+0x06]
	MOV EAX,DWORD PTR [EDI+0x02]
	MOV DWORD PTR [EAX+0x06],EBX
loc_1008799A:
	MOV EDI, ECX
	AND EDI, 0xFFFF0000
	MOV EAX,DWORD PTR [EDI+0x04]
	CMP WORD PTR DS:[EAX],SI
	JNB FAR loc_10087A5D
	MOV WORD PTR DS:[EAX],SI
	JMP FAR loc_10087A5D
loc_100879B6:
	MOVZX ESI,BP
	LEA EBX,DWORD PTR [ECX+ESI]
	MOV AX,WORD PTR DS:[EBX]
	TEST AL, 0x01
	JNZ FAR loc_10087AC9
	XOR EDI, EDI
	MOV DI, AX
	AND EDI, 0x0000FFFC
	ADD EDI, ESI
	MOVZX ESI,DX
	CMP EDI, ESI
	JL FAR loc_10087AC9
	MOV EDI, ECX
	AND EDI, 0xFFFF0000
	CMP DWORD PTR [EDI+0x10],EBX
	JNZ loc_100879F2
	MOV EAX,DWORD PTR [EBX+0x02]
	MOV DWORD PTR [EDI+0x10],EAX
loc_100879F2:
	LEA EAX,DWORD PTR [EBX+0x06]
	LEA ESI,DWORD PTR [EBX+0x02]
	MOV DWORD PTR [ESP+var_C+0x20],EAX
	MOV DWORD PTR [ESP+var_10+0x20],ESI
	MOV EAX,DWORD PTR [ESI]
	MOV DWORD PTR [ESP+var_8+0x20],EAX
	MOV EAX,DWORD PTR [ESP+var_C+0x20]
	MOV ESI,DWORD PTR [EAX]
	MOV EAX,DWORD PTR [ESP+var_8+0x20]
	MOV DWORD PTR [ESI+0x02],EAX
	MOV EAX,DWORD PTR [ESP+var_C+0x20]
	MOV ESI,DWORD PTR [EAX]
	MOV EAX,DWORD PTR [ESP+var_10+0x20]
	MOV EAX,DWORD PTR [EAX]
	MOV DWORD PTR [EAX+0x06],ESI
	MOV AX,WORD PTR DS:[EBX]
	AND AX, 0xFFFC
	MOV SI, BP
	SUB SI, DX
	ADD SI, AX
	TEST BYTE PTR [ECX+0x01],0x80
	JZ loc_10087A42
	MOV DWORD PTR [ESP+var_8+0x20],0x00000010
	JMP loc_10087A4C
loc_10087A42:
	XOR EBP, EBP
	MOV BP,WORD PTR DS:[EDI+0x18]
	MOV DWORD PTR [ESP+var_8+0x20],EBP
loc_10087A4C:
	MOVZX EBP,SI
	MOV DWORD PTR [ESP+var_4+0x20],EBP
	MOV EBP,DWORD PTR [ESP+var_8+0x20]
	CMP DWORD PTR [ESP+var_4+0x20],EBP
	JL loc_10087AA8
loc_10087A5D:
	MOV AX,WORD PTR DS:[ECX]
	MOVZX EBX,DX
	AND AX, 0x8003
	OR AX, DX
	LEA EDX,DWORD PTR [ECX+EBX]
	MOV WORD PTR DS:[ECX],AX
	MOV AX, SI
	OR AL, 0x02
	MOV WORD PTR DS:[EDX],AX
	MOV ECX,DWORD PTR [EDI+0x14]
	MOV DWORD PTR [EDX+0x06],ECX
	MOV EBX,DWORD PTR [ECX+0x02]
	MOV DWORD PTR [EDX+0x02],EBX
	MOV EBX,DWORD PTR [ECX+0x02]
	MOVZX EAX,SI
	MOV DWORD PTR [EBX+0x06],EDX
	MOV DWORD PTR [ECX+0x02],EDX
	ADD EDX, EAX
	MOV WORD PTR DS:[EDX-0x02],SI
	AND WORD PTR DS:[EDX],0xFFFD
loc_10087A9B:
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RET
loc_10087AA8:
	ADD AX,WORD PTR DS:[ECX]
	POP EBP
	MOV WORD PTR DS:[ECX],AX
	POP EDI
	XOR EAX, EAX
	POP ESI
	MOV AX,WORD PTR DS:[EBX]
	AND EAX, 0x0000FFFC
	OR BYTE PTR [EBX+EAX],0x02
	MOV EAX, 0x00000001
	POP EBX
	ADD ESP, 0x10
	RET
loc_10087AC9:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10087AE0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x4]
	MOV ECX, ESI
	AND ECX, 0xFFFF0000
	MOV DX,WORD PTR DS:[ECX+0x0E]
	MOV AX, DX
	AND AX, 0xFFF8
	CMP AX, 0xCAD0
	JZ loc_10087B13
	MOV EDX, 0x0000000E
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RETN 0x0004
loc_10087B13:
	XOR EAX, EAX
	MOV AX, DX
	AND EAX, 0x07
	CMP EAX, 0x04
	JA loc_10087B27
	JMP_LONG(DWORD PTR [offset LEGO1_text.m86B78_proc_10087B78+EAX*4])
loc_10087B27:
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_10087B90()
{
	enum{
		var_1C = -0x1C,
	};

__asm{
	SUB ESP, 0x1C
	CMP ECX, 0x00010000
	JA loc_10087BC9
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC558]
	TEST EAX, EAX
	JZ loc_10087BC9
	LEA ECX,DWORD PTR [ESP+var_1C+0x1C]
	PUSH 0x1C
	PUSH ECX
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C0_VirtualQuery])
	TEST EAX, EAX
	JZ loc_10087BC9
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC558]
	ADD ESP, 0x1C
	MOV DWORD PTR [offset LEGO1_data + 0xC558],0x00000000
	RET
loc_10087BC9:
	XOR EAX, EAX
	ADD ESP, 0x1C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10087BD0()
{
__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	TEST EDX,0x00001000
	MOV EDI, EDX
	JZ loc_10087BEB
	CMP ECX, 0x0000FFFF
	JBE loc_10087BEB
	MOV ECX, 0x0000FFFF
loc_10087BEB:
	LEA ESI,DWORD PTR [ECX+0x00000FFF]
	PUSH 0x01
	AND ESI, 0xFFFFF000
	PUSH 0x00002000
	LEA ECX,DWORD PTR [ESI+0x0000FFFF]
	AND ECX, 0xFFFF0000
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m86B90_sub_10087B90])
	PUSH EAX
	MOV EBP,DWORD PTR [offset LEGO1_idata.m410_VirtualAlloc]
	CALL_LONG(EBP)
	MOV EBX, EAX
	TEST EBX, EBX
	JZ loc_10087C4E
	PUSH 0x04
	PUSH 0x00001000
	PUSH ESI
	PUSH EBX
	CALL_LONG(EBP)
	TEST EAX, EAX
	JZ loc_10087C45
	TEST EDI,0x00000004
	JZ loc_10087C4E
	PUSH ESI
	PUSH EBX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4BC_VirtualLock])
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10087C45:
	MOV ECX, EBX
	XOR EBX, EBX
	CALL_LONG(offset [LEGO1_text.m86C60_sub_10087C60])
loc_10087C4E:
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10087C60()
{
__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI, ECX
	CALL_LONG(offset [LEGO1_text.m86E50_sub_10087E50])
	CMP EAX, 0x00010000
	JA loc_10087C84
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xC558]
	TEST ECX, ECX
	JZ loc_10087C84
	CMP EDI, ECX
	JNB loc_10087C84
	MOV DWORD PTR [offset LEGO1_data + 0xC558],EDI
loc_10087C84:
	PUSH 0x00004000
	MOV ESI,DWORD PTR [offset LEGO1_idata.m4B4_VirtualFree]
	PUSH EAX
	PUSH EDI
	CALL_LONG(ESI)
	TEST EAX, EAX
	JZ loc_10087CAD
	PUSH 0x00008000
	PUSH 0x00
	PUSH EDI
	CALL_LONG(ESI)
	TEST EAX, EAX
	JZ loc_10087CAD
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	RET
loc_10087CAD:
	XOR EAX, EAX
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10087CC0(DWORD arg1)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x08
	MOV EAX,DWORD PTR [ESP+arg1+0x8]
	PUSH EBX
	PUSH ESI
	MOV EBX, EDX
	MOV DWORD PTR [ESP+var_4+0x10],ECX
	PUSH EDI
	PUSH EBP
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m86D70_sub_10087D70])
	TEST EAX, EAX
	JZ loc_10087CE9
	MOV EAX,DWORD PTR [ESP+var_4+0x18]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0004
loc_10087CE9:
	MOV EDX,DWORD PTR [ESP+arg1+0x18]
	MOV ECX, EBX
	AND EDX, 0xFFFFFEFF
	CALL_LONG(offset [LEGO1_text.m86BD0_sub_10087BD0])
	MOV EBP, EAX
	TEST EBP, EBP
	JZ loc_10087D57
	MOV ECX,DWORD PTR [ESP+var_4+0x18]
	CALL_LONG(offset [LEGO1_text.m86E50_sub_10087E50])
	MOV DWORD PTR [ESP+var_8+0x18],EAX
	CMP EAX, EBX
	JB loc_10087D13
	MOV EAX, EBX
loc_10087D13:
	MOV EDI, EBP
	MOV ESI,DWORD PTR [ESP+var_4+0x18]
	MOV ECX, EAX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	MOV ECX,DWORD PTR [ESP+var_4+0x18]
	CALL_LONG(offset [LEGO1_text.m86C60_sub_10087C60])
	TEST BYTE PTR [ESP+arg1+0x19],0x1
	JZ loc_10087D57
	CMP DWORD PTR [ESP+var_8+0x18],EBX
	JNB loc_10087D57
	SUB EBX,DWORD PTR [ESP+var_8+0x18]
	MOV EDI,DWORD PTR [ESP+var_8+0x18]
	ADD EDI, EBP
	XOR EAX, EAX
	MOV ECX, EBX
	SHR ECX, 0x02
	REP STOSD
	MOV ECX, EBX
	AND ECX, 0x03
	REP STOSB
loc_10087D57:
	MOV EAX, EBP
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10087D70(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX, EDX
	PUSH EBP
	MOV ESI, ECX
	MOV EBP, EBX
	CALL_LONG(offset [LEGO1_text.m86E50_sub_10087E50])
	MOV EDI,DWORD PTR [ESP+arg1+0x10]
	TEST EDI,0x00001000
	JZ loc_10087D98
	CMP EBX, 0x0000FFFF
	JBE loc_10087D98
	MOV EBX, 0x0000FFFF
loc_10087D98:
	ADD EBX, 0x00000FFF
	AND EBX, 0xFFFFF000
	CMP EAX, EBX
	JB loc_10087DFA
	JBE loc_10087DC9
	PUSH 0x00004000
	SUB EAX, EBX
	PUSH EAX
	LEA ECX,DWORD PTR [EBX+ESI]
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B4_VirtualFree])
	TEST EAX, EAX
	JNZ loc_10087DC9
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_10087DC9:
	TEST EDI,0x00000100
	JZ loc_10087DEE
	TEST EBP,0x00000FFF
	JZ loc_10087DEE
	SUB EBX, EBP
	LEA EDI,DWORD PTR [EBP+ESI]
	XOR EAX, EAX
	MOV ECX, EBX
	SHR ECX, 0x02
	REP STOSD
	MOV ECX, EBX
	AND ECX, 0x03
	REP STOSB
loc_10087DEE:
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_10087DFA:
	TEST EAX, 0x0000FFFF
	JNZ loc_10087E0A
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_10087E0A:
	SUB EBX, EAX
	ADD ESI, EAX
	PUSH 0x04
	PUSH 0x00001000
	PUSH EBX
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m410_VirtualAlloc])
	TEST EAX, EAX
	JZ loc_10087E3D
	TEST EDI,0x00000004
	JZ loc_10087E31
	PUSH EBX
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4BC_VirtualLock])
loc_10087E31:
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_10087E3D:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_10087E50()
{
	enum{
		var_1C = -0x1C,
		var_10 = -0x10,
		var_C = -0xC,
	};

__asm{
	SUB ESP, 0x1C
	LEA EAX,DWORD PTR [ESP+var_1C+0x1C]
	PUSH 0x1C
	PUSH EAX
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C0_VirtualQuery])
	CMP EAX, 0x1C
	JNZ loc_10087E7C
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	SUB EAX, 0x00001000
	CMP EAX, 0x01
	SBB EAX, EAX
	AND EAX,DWORD PTR [ESP+var_10+0x1C]
	ADD ESP, 0x1C
	RET
loc_10087E7C:
	XOR EAX, EAX
	ADD ESP, 0x1C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10087E90()
{
__asm{
	PUSH ECX
	PUSH 0x08
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m468_GetProcessHeap])
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m49C_HeapAlloc])
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10087EB0()
{
__asm{
	PUSH ECX
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m468_GetProcessHeap])
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m384_HeapFree])
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10087ED0(DWORD arg1)
{
	enum{
		var_4C = -0x4C,
		var_40 = -0x40,
		var_3C = -0x3C,
		var_38 = -0x38,
		var_30 = -0x30,
		var_2C = -0x2C,
		var_1C = -0x1C,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_rdata.m68F0]
	PUSH offset [LEGO1_text.m8B980_proc_1008C980]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x38
	MOV DWORD PTR [EBP+var_30+0x4],0x00000001
	PUSH EBX
	PUSH ESI
	CMP ECX, 0x00010000
	PUSH EDI
	MOV EDI, EDX
	MOV ESI, ECX
	MOV DWORD PTR [EBP+var_1C+0x4],ESP
	JNB loc_10087F10
	XOR EAX, EAX
	JMP_LONG(offset [LEGO1_text.m86FB1_loc_10087FB1])
loc_10087F10:
	CMP EDI, 0x00010000
	JBE loc_10087F68
	PUSH 0x1C
	LEA EAX,DWORD PTR [EBP+var_4C+0x4]
	PUSH EAX
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C0_VirtualQuery])
	CMP DWORD PTR [EBP+var_3C+0x4],0x00001000
	JZ loc_10087F32
	XOR EAX, EAX
	JMP_LONG(offset [LEGO1_text.m86FB1_loc_10087FB1])
loc_10087F32:
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	TEST AL, 0x01
	JZ loc_10087F45
	CMP DWORD PTR [EBP+var_38+0x4],0x02
	JZ loc_10087F45
	CMP DWORD PTR [EBP+var_38+0x4],0x20
	JNZ loc_10087F55
loc_10087F45:
	TEST AL, 0x02
	JZ loc_10087F59
	CMP DWORD PTR [EBP+var_38+0x4],0x04
	JZ loc_10087F59
	CMP DWORD PTR [EBP+var_38+0x4],0x40
	JZ loc_10087F59
loc_10087F55:
	XOR EAX, EAX
	JMP_LONG(offset [LEGO1_text.m86FB1_loc_10087FB1])
loc_10087F59:
	MOV EAX,DWORD PTR [EBP+var_4C+0x4]
	SUB EAX, ESI
	ADD EAX,DWORD PTR [EBP+var_40+0x4]
	CMP EAX, EDI
	SBB EAX, EAX
	INC EAX
	JMP_LONG(offset [LEGO1_text.m86FB1_loc_10087FB1])
loc_10087F68:
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV CL,BYTE PTR [EBP+var_1C+0x3]
	MOV EAX,DWORD PTR [EBP+var_2C+0x4]
loc_10087F75:
	MOV CL,BYTE PTR [ESI]
	MOV BYTE PTR [EBP+var_1C+0x3],CL
	LEA EDX,DWORD PTR [ESI+0x00001000]
	AND EDX, 0xFFFFF000
	MOV EAX, EDX
	MOV DWORD PTR [EBP+var_2C+0x4],EAX
	SUB EDI, EAX
	ADD EDI, ESI
	MOV ESI, EAX
	TEST EDI, EDI
	JG loc_10087F75
	JMP_LONG(offset [LEGO1_text.m86FA7_loc_10087FA7])
}
}

__declspec(naked) DWORD LEGO1_proc_10087F97()
{
__asm{
	MOV EAX, 0x00000001
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_10087F9D()
{
	enum{
		arg1217213 = 0x4A4AF4,
		arg1217218 = 0x4A4B08,
	};

__asm{
	MOV ESP,DWORD PTR [EBP+arg1217218-0x4A4B20]
	MOV DWORD PTR [EBP+arg1217213-0x4A4B20],0x00000000
	JMP_LONG(offset [LEGO1_text.m86FA7_loc_10087FA7])
}
}

__declspec(naked) DWORD LEGO1_loc_10087FA7()
{
	enum{
		arg1217213 = 0x4A4AF4,
		arg1217223 = 0x4A4B1C,
	};

__asm{
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0xFFFFFFFF
	MOV EAX,DWORD PTR [EBP+arg1217213-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m86FB1_loc_10087FB1])
}
}

__declspec(naked) DWORD __stdcall LEGO1_loc_10087FB1(DWORD arg1)
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	POP EDI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_10087FD0()
{
__asm{
	CMP ECX, 0x00010000
	JNB loc_10087FDB
	XOR EAX, EAX
	RET
loc_10087FDB:
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m398_IsBadCodePtr])
	CMP EAX, 0x01
	SBB EAX, EAX
	NEG EAX
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10087FF0(DWORD arg1, DWORD arg2)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	XOR EDI, EDI
	MOV EBP,DWORD PTR [ESP+arg1+0x14]
	TEST EBP,0x00001000
	JZ loc_10088012
	CMP ECX, 0x0000FFFF
	JBE loc_10088012
	MOV ECX, 0x0000FFFF
loc_10088012:
	MOV ESI,DWORD PTR [ESP+arg2+0x14]
	MOV EAX, ESI
	AND EAX, 0x00000FFF
	JZ loc_10088032
	LEA EDX,DWORD PTR [EDX+EAX+0xFFFFF000]
	ADD ESI, 0x00000FFF
	AND ESI, 0xFFFFF000
loc_10088032:
	MOV EAX, ESI
	AND EAX, 0x0000FFFF
	JZ loc_10088046
	MOV EBX, 0x00010000
	SUB EBX, EAX
	CMP ECX, EBX
	JBE loc_10088052
loc_10088046:
	LEA EBX,DWORD PTR [ECX+0x0000FFFF]
	AND EBX, 0xFFFF0000
loc_10088052:
	LEA EAX,DWORD PTR [EBX+0x00010000]
	CMP EAX, EDX
	JBE loc_10088068
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
loc_10088068:
	SUB EDX, EBX
	PUSH 0x04
	AND EDX, 0xFFFF0000
	PUSH 0x00001000
	ADD EDX, EBX
	PUSH EBX
	MOV DWORD PTR [ESP+var_4+0x20],EDX
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m410_VirtualAlloc])
	MOV ESI, EAX
	TEST ESI, ESI
	JZ loc_100880F3
	TEST EBP,0x00000004
	JZ loc_1008809B
	PUSH EBX
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4BC_VirtualLock])
loc_1008809B:
	MOV DWORD PTR [ESI+0x44],ESI
	MOV EAX,DWORD PTR [ESP+var_4+0x14]
	TEST EBP,0x00000001
	MOV DWORD PTR [ESI+0x48],EAX
	MOV DWORD PTR [ESI+0x5C],0x00000000
	MOV DWORD PTR [ESI+0x58],EBX
	JZ loc_100880DB
	XOR EDX, EDX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m87E10_sub_10088E10])
	MOV EDI, EAX
	TEST EDI, EDI
	JZ loc_1008810C
	TEST EBP,0x00000002
	JZ loc_100880DB
	XOR EDX, EDX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88030_sub_10089030])
	TEST EAX, EAX
	JZ loc_100880F3
loc_100880DB:
	MOV EAX, ESI
	POP EBP
	MOV WORD PTR DS:[ESI+0x28],0xFFFF
	MOV WORD PTR DS:[ESI+0x2A],0x3FFF
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
loc_100880F3:
	TEST EDI, EDI
	JZ loc_1008810C
	MOV EAX,DWORD PTR [EDI+0x0C]
	TEST EAX, EAX
	JZ loc_10088105
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m390_CloseHandle])
loc_10088105:
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m87F20_sub_10088F20])
loc_1008810C:
	TEST ESI, ESI
	JZ loc_1008811E
	MOV EDX,DWORD PTR [ESI+0x5C]
	TEST EDX, EDX
	JZ loc_1008811E
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m87DC0_sub_10088DC0])
loc_1008811E:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10088130(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6)
{
	enum{
		var_18 = -0x18,
		var_C = -0xC,
		var_4 = -0x4,
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
		arg6 = 0x18,
		arg7 = 0x1C,
		arg12 = 0x30,
		arg13 = 0x34,
		arg14 = 0x38,
		arg15 = 0x3C,
		arg16 = 0x40,
		arg18 = 0x48,
		arg19 = 0x4C,
		arg20 = 0x50,
		arg23 = 0x5C,
	};

__asm{
	SUB ESP, 0x0C
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	XOR EDI, EDI
	MOV DWORD PTR [ESP+var_4+0x1C],EDI
	CMP DWORD PTR [ESP+arg6+0x1C],EDI
	JNZ loc_1008814F
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x0018
loc_1008814F:
	TEST BYTE PTR [ESP+arg1+0x1D],0x10
	JZ loc_10088163
	CMP ECX, 0x0000FFFF
	JBE loc_10088163
	MOV ECX, 0x0000FFFF
loc_10088163:
	LEA EBX,DWORD PTR [ECX+0x0000FFFF]
	AND EBX, 0xFFFF0000
	CMP EDX, 0x00040000
	JA loc_1008817C
	MOV EDX, 0x00040000
loc_1008817C:
	MOV EAX,DWORD PTR [ESP+arg6+0x1C]
	MOV EBP,DWORD PTR [offset LEGO1_idata.m38C_OpenFileMappingA]
	MOV DWORD PTR [ESP+var_C+0x1C],EDX
	PUSH EAX
	PUSH 0x00
	PUSH 0x000F001F
	CALL_LONG(EBP)
	TEST EAX, EAX
	JZ loc_100881AB
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m390_CloseHandle])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x0018
loc_100881AB:
	MOV EAX,DWORD PTR [ESP+0x34]
	MOV ECX,DWORD PTR [ESP+var_18+0x28]
	MOV EDX,DWORD PTR [ESP+arg2+0x28]
	PUSH EAX
	PUSH ECX
	PUSH 0x00
	PUSH 0x04000004
	PUSH EDX
	PUSH -0x01
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3A0_CreateFileMappingA])
	MOV DWORD PTR [ESP+arg1+0x10],EAX
	TEST EAX, EAX
	JNZ loc_100881DD
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x0018
loc_100881DD:
	MOV EBP,DWORD PTR [ESP+0x24]
	MOV ESI,DWORD PTR [ESP+arg2+0x10]
loc_100881E5:
	MOV EAX,DWORD PTR [ESP+arg7+0x10]
	MOV ECX,DWORD PTR [ESP+arg6+0x10]
	MOV EDX,DWORD PTR [ESP+r+0x10]
	PUSH EAX
	PUSH ECX
	MOV ECX, EBP
	CALL_LONG(offset [LEGO1_text.m87360_sub_10088360])
	MOV EBP, EAX
	TEST EBP, EBP
	JZ FAR loc_1008830B
	CMP DWORD PTR [ESP+arg2+0x10],EBP
	JZ FAR loc_1008830B
	MOV EAX,DWORD PTR [ESP+r+0x10]
	PUSH EBP
	MOV ECX,DWORD PTR [ESP+arg2+0x10]
	PUSH EAX
	PUSH 0x00
	PUSH 0x00
	PUSH 0x000F001F
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m39C_MapViewOfFileEx])
	MOV ESI, EAX
	TEST ESI, ESI
	JZ FAR loc_1008830B
	PUSH 0x04
	PUSH 0x00001000
	PUSH EBX
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m410_VirtualAlloc])
	TEST EAX, EAX
	JZ FAR loc_1008830B
	TEST BYTE PTR [ESP+arg14-0x18],0x4
	JZ loc_10088258
	PUSH EBX
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4BC_VirtualLock])
loc_10088258:
	MOV EAX,DWORD PTR [ESP+arg12-0x20]
	MOV EDX,DWORD PTR [ESP+arg13-0x20]
	MOV ECX, ESI
	MOV DWORD PTR [ESI+0x44],ESI
	MOV DWORD PTR [ESI+0x48],EAX
	MOV DWORD PTR [ESI+0x5C],0x00000000
	MOV DWORD PTR [ESI+0x58],EBX
	CALL_LONG(offset [LEGO1_text.m87E10_sub_10088E10])
	MOV EDI, EAX
	TEST EDI, EDI
	JZ FAR loc_10088324
	MOV EDX,DWORD PTR [ESP+arg20-0x20]
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88030_sub_10089030])
	TEST EAX, EAX
	JZ loc_1008830B
	CALL_LONG(offset [LEGO1_text.m88440_sub_10089440])
	TEST EAX, EAX
	JZ loc_100882EB
	CMP DWORD PTR [ESP+arg18-0x20],0x00
	JZ loc_100882EB
	MOV EAX,DWORD PTR [ESP+arg19-0x20]
	MOV ECX,DWORD PTR [ESP+arg18-0x20]
	PUSH EAX
	MOV EDX, ESI
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+arg23-0x20]
	CALL_LONG(offset [LEGO1_text.m875B0_sub_100885B0])
	TEST EAX, EAX
	JNZ loc_100882EB
	MOV EAX,DWORD PTR [EDI+0x0C]
	TEST EAX, EAX
	JZ loc_100882C7
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m390_CloseHandle])
loc_100882C7:
	MOV ECX, EDI
	XOR EBP, EBP
	LEA EDI,DWORD PTR [ESI+0x40]
	CALL_LONG(offset [LEGO1_text.m87F20_sub_10088F20])
	XOR EAX, EAX
	MOV ECX, 0x00000008
	REP STOSD
	PUSH ESI
	XOR EDI, EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m388_UnmapViewOfFile])
	MOV DWORD PTR [ESP+arg16-0x28],ESI
	XOR ESI, ESI
loc_100882EB:
	TEST ESI, ESI
	JZ FAR loc_100881E5
	MOV EAX, ESI
	POP EBP
	MOV WORD PTR DS:[ESI+0x28],0xFFFF
	MOV WORD PTR DS:[ESI+0x2A],0x3FFF
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x0018
loc_1008830B:
	TEST EDI, EDI
	JZ loc_10088324
	MOV EAX,DWORD PTR [EDI+0x0C]
	TEST EAX, EAX
	JZ loc_1008831D
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m390_CloseHandle])
loc_1008831D:
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m87F20_sub_10088F20])
loc_10088324:
	TEST ESI, ESI
	JZ loc_1008833D
	MOV EDX,DWORD PTR [ESI+0x5C]
	TEST EDX, EDX
	JZ loc_10088336
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m87DC0_sub_10088DC0])
loc_10088336:
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m388_UnmapViewOfFile])
loc_1008833D:
	CMP DWORD PTR [ESP+arg15-0x28],0x00
	JZ loc_1008834F
	MOV EAX,DWORD PTR [ESP+arg15-0x28]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m390_CloseHandle])
loc_1008834F:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x0018
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10088360(DWORD arg1, DWORD arg2)
{
	enum{
		var_3C = -0x3C,
		var_38 = -0x38,
		var_34 = -0x34,
		var_30 = -0x30,
		var_2C = -0x2C,
		var_28 = -0x28,
		var_24 = -0x24,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg1217224 = 0x4A4B20,
	};

__asm{
	SUB ESP, 0x3C
	MOV DWORD PTR [ESP+var_28+0x3C],ECX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	MOV ESI, EDX
	XOR EDI, EDI
	MOV DWORD PTR [ESP+var_30+0x4C],EDI
	CALL_LONG(offset [LEGO1_text.m88440_sub_10089440])
	TEST EAX, EAX
	JNZ loc_10088380
	MOV DWORD PTR [ESP+arg1+0x4C],EDI
loc_10088380:
	INC DWORD PTR [ESP+arg1+0x4C]
	MOV EBX,DWORD PTR [ESP+arg1+0x4C]
	SHL EBX, 0x02
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m86E90_sub_10087E90])
	MOV DWORD PTR [ESP+var_2C+0x4C],EAX
	TEST EAX, EAX
	JNZ loc_100883A6
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x3C
	RETN 0x0008
loc_100883A6:
	MOV EDI,DWORD PTR [ESP+arg1+0x4C]
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B4_GetCurrentProcess])
	MOV ECX,DWORD PTR [ESP+var_2C+0x4C]
	MOV DWORD PTR [ECX],EAX
	MOV EAX,DWORD PTR [ESP+arg2+0x4C]
	LEA EBP,DWORD PTR [EAX+EBX-0x04]
	ADD EBX, ECX
loc_100883C0:
	SUB EBP, 0x04
	SUB EBX, 0x04
	DEC EDI
	JZ loc_100883E5
	MOV EAX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	PUSH EAX
	PUSH 0x00
	PUSH 0x00000410
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m394_OpenProcess])
	MOV DWORD PTR [EBX],EAX
	TEST EAX, EAX
	JNZ loc_100883C0
	JMP FAR loc_100884EB
loc_100883E5:
	CALL_LONG(offset [LEGO1_text.m88440_sub_10089440])
	TEST EAX, EAX
	JZ loc_10088407
	LEA EAX,DWORD PTR [ESP+var_24+0x4C]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3A4_GetSystemInfo])
	MOV ECX,DWORD PTR [ESP+var_1C+0x4C]
	MOV EDI,DWORD PTR [ESP+var_18+0x4C]
	MOV DWORD PTR [ESP+var_34+0x4C],ECX
	JMP loc_10088414
loc_10088407:
	MOV DWORD PTR [ESP+var_34+0x4C],0x80000000
	MOV EDI, 0xBFFFFFFF
loc_10088414:
	CMP DWORD PTR [ESP+var_28+0x4C],0x00
	JNZ loc_1008844A
	MOV EAX, EDI
	SUB EAX,DWORD PTR [ESP+var_34+0x4C]
	CDQ
	SUB EAX, EDX
	SAR EAX, 0x01
	MOV EBX, EAX
	CALL_LONG(offset [LEGO1_text.m8A640_sub_1008B640])
	MOV EBP, EAX
	CALL_LONG(offset [LEGO1_text.m8A640_sub_1008B640])
	IMUL EBP,EAX
	MOV EAX, EBP
	SUB EDX, EDX
	DIV EBX
	MOV EAX,DWORD PTR [ESP+var_34+0x4C]
	ADD EAX, EDX
	ADD EAX, EBX
	MOV DWORD PTR [ESP+var_28+0x4C],EAX
loc_1008844A:
	MOV EAX,DWORD PTR [ESP+var_28+0x4C]
	AND EAX, 0xFFFF0000
	MOV DWORD PTR [ESP+var_24+0x4C],EAX
	MOV DWORD PTR [ESP+var_3C+0x4C],EAX
loc_1008845B:
	MOV EBX, EDI
	MOV EBP,DWORD PTR [ESP+var_2C+0x4C]
	SUB EBX,DWORD PTR [ESP+var_3C+0x4C]
	MOV EAX,DWORD PTR [ESP+arg1+0x4C]
	MOV DWORD PTR [ESP+var_28+0x4C],EAX
loc_1008846D:
	MOV ECX, EBP
	LEA EAX,DWORD PTR [ESP+var_38+0x4C]
	ADD EBP, 0x04
	PUSH EAX
	MOV EDX,DWORD PTR [ESP+var_3C+0x50]
	PUSH EDI
	PUSH ESI
	MOV ECX,DWORD PTR [ECX]
	CALL_LONG(offset [LEGO1_text.m87540_sub_10088540])
	TEST EAX, EAX
	JZ loc_100884AC
	MOV ECX,DWORD PTR [ESP+var_3C+0x4C]
	SUB EBX, EAX
	ADD EBX, ECX
	MOV DWORD PTR [ESP+var_3C+0x4C],EAX
	MOV ECX,DWORD PTR [ESP+var_38+0x4C]
	CMP EBX, ECX
	JL loc_1008849E
	MOV EBX, ECX
loc_1008849E:
	TEST EAX, EAX
	JZ loc_100884B8
	CMP ESI, EBX
	JG loc_100884AC
	DEC DWORD PTR [ESP+var_28+0x4C]
	JNZ loc_1008846D
loc_100884AC:
	TEST EAX, EAX
	JZ loc_100884B8
	CMP ESI, EBX
	JG loc_100884B8
	MOV DWORD PTR [ESP+var_30+0x4C],EAX
loc_100884B8:
	ADD DWORD PTR [ESP+var_3C+0x4C],EBX
	CMP EDI,DWORD PTR [ESP+var_3C+0x4C]
	JA loc_100884DA
	MOV EAX,DWORD PTR [ESP+var_24+0x4C]
	CMP EAX,DWORD PTR [ESP+var_34+0x4C]
	JZ loc_100884DA
	MOV EDI, EAX
	MOV EAX,DWORD PTR [ESP+var_34+0x4C]
	MOV DWORD PTR [ESP+var_24+0x4C],EAX
	MOV DWORD PTR [ESP+var_3C+0x4C],EAX
loc_100884DA:
	CMP DWORD PTR [ESP+var_30+0x4C],0x00
	JNZ loc_100884EB
	CMP EDI,DWORD PTR [ESP+var_3C+0x4C]
	JA FAR loc_1008845B
loc_100884EB:
	CMP DWORD PTR [ESP+var_2C+0x4C],0x00
	JZ loc_10088524
	DEC DWORD PTR [ESP+arg1+0x4C]
	JZ loc_1008851B
	MOV ECX,DWORD PTR [ESP+var_2C+0x4C]
	MOV EAX,DWORD PTR [ESP+arg1+0x4C]
	MOV ESI,DWORD PTR [offset LEGO1_idata.m390_CloseHandle]
	LEA EDI,DWORD PTR [EAX*4+ECX]
loc_10088509:
	MOV EAX,DWORD PTR [EDI]
	TEST EAX, EAX
	JZ loc_1008851B
	PUSH EAX
	SUB EDI, 0x04
	CALL_LONG(ESI)
	DEC DWORD PTR [ESP+var_8+0x58]
	JNZ loc_10088509
loc_1008851B:
	MOV ECX,DWORD PTR [ESP+var_38+0x58]
	CALL_LONG(offset [LEGO1_text.m86EB0_sub_10087EB0])
loc_10088524:
	MOV EAX,DWORD PTR [ESP+var_3C+0x58]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x3C
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10088540(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_1C = -0x1C,
		var_10 = -0x10,
		var_C = -0xC,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	SUB ESP, 0x1C
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	PUSH EBP
	MOV EDI, EDX
	MOV EBP,DWORD PTR [ESP+arg2+0x2C]
	CMP EBP, EDI
	JBE loc_1008858A
	MOV EBX,DWORD PTR [ESP+arg1+0x2C]
loc_10088557:
	LEA EAX,DWORD PTR [ESP+var_1C+0x2C]
	PUSH 0x1C
	PUSH EAX
	PUSH EDI
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3C4_VirtualQueryEx])
	CMP DWORD PTR [ESP+var_C+0x2C],0x00010000
	JNZ loc_10088576
	CMP DWORD PTR [ESP+var_10+0x2C],EBX
	JNB loc_10088596
loc_10088576:
	MOV EAX,DWORD PTR [ESP+var_10+0x2C]
	ADD EAX, 0x0000FFFF
	AND EAX, 0xFFFF0000
	ADD EDI, EAX
	CMP EBP, EDI
	JA loc_10088557
loc_1008858A:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x1C
	RETN 0x000C
loc_10088596:
	MOV ECX,DWORD PTR [ESP+var_10+0x2C]
	MOV EAX,DWORD PTR [ESP+arg3+0x2C]
	POP EBP
	MOV DWORD PTR [EAX],ECX
	MOV EAX, EDI
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x1C
	RETN 0x000C
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100885B0(DWORD arg1, DWORD arg2)
{
__asm{
	MOV EAX, 0x00000001
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100885C0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX, EDX
	MOV EDX,DWORD PTR [ESP+arg1]
	TEST DL,0x11
	JZ loc_100885EC
	TEST ECX, ECX
	JNZ loc_100885E0
	MOV EDX, 0x00000011
	XOR ECX, ECX
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	XOR EAX, EAX
	RETN 0x0004
loc_100885E0:
	PUSH EDX
	PUSH EAX
	XOR EDX, EDX
	CALL_LONG(offset [LEGO1_text.m87600_sub_10088600])
	RETN 0x0004
loc_100885EC:
	MOV ECX, EAX
	CALL_LONG(offset [LEGO1_text.m86BD0_sub_10087BD0])
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10088600(DWORD arg1, DWORD arg2)
{
	enum{
		var_14 = -0x14,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	MOV DWORD PTR [ESP+var_4+0xC],0x00000000
	TEST BYTE PTR [ESP+arg2+0xD],0x10
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
	PUSH EDI
	PUSH EBP
	MOV EDI, ECX
	MOV EBP, EDX
	MOV ECX,DWORD PTR [EDI+0x5C]
	MOV EDX, ECX
	JZ loc_10088630
	CMP ESI, 0x0000FFFF
	JBE loc_10088630
	MOV ESI, 0x0000FFFF
loc_10088630:
	ADD ESI, 0x0000FFFF
	AND ESI, 0xFFFF0000
	LEA EBX,DWORD PTR [ESI+0x0000FFFF]
	SHR EBX, 0x10
loc_10088645:
	TEST EBP, EBP
	JZ loc_1008864E
	CMP DWORD PTR [EDX+0x04],EBP
	JNZ loc_10088657
loc_1008864E:
	CMP WORD PTR DS:[EDX],BX
	JNB loc_10088660
	TEST EBP, EBP
	JNZ loc_10088683
loc_10088657:
	MOV EDX,DWORD PTR [EDX+0x08]
	CMP EDX, ECX
	JNZ loc_10088645
	JMP loc_10088683
loc_10088660:
	CMP WORD PTR DS:[EDX],BX
	MOV EAX,DWORD PTR [EDX+0x04]
	MOV DWORD PTR [ESP+var_4+0x14],EAX
	JBE loc_10088676
	ADD EAX, ESI
	MOV DWORD PTR [EDX+0x04],EAX
	SUB WORD PTR DS:[EDX],BX
	JMP loc_10088683
loc_10088676:
	MOV EAX,DWORD PTR [EDX+0x08]
	MOV ECX, EDI
	MOV DWORD PTR [EDI+0x5C],EAX
	CALL_LONG(offset [LEGO1_text.m87DC0_sub_10088DC0])
loc_10088683:
	CMP DWORD PTR [ESP+var_4+0x14],0x00
	JZ loc_100886E6
	TEST BYTE PTR [EDI+0x22],0x01
	JNZ loc_100886C9
	MOV EBP,DWORD PTR [ESP+var_4+0x14]
	PUSH 0x04
	MOV EAX,DWORD PTR [ESP+var_4+0x18]
	PUSH 0x00001000
	PUSH ESI
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m410_VirtualAlloc])
	MOV DWORD PTR [ESP+var_4+0x14],EAX
	TEST EAX, EAX
	JNZ FAR loc_10088735
	PUSH ESI
	MOV EDX, EBP
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m87980_sub_10088980])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
loc_100886C9:
	TEST BYTE PTR [ESP+arg2+0x15],0x1
	JZ loc_10088735
	MOV EDI,DWORD PTR [ESP+var_4+0x14]
	XOR EAX, EAX
	MOV ECX, ESI
	SHR ECX, 0x02
	REP STOSD
	MOV ECX, ESI
	AND ECX, 0x03
	REP STOSB
	JMP loc_10088735
loc_100886E6:
	MOV ECX,DWORD PTR [EDI+0x58]
	MOV EAX,DWORD PTR [EDI+0x48]
	SUB EAX, ECX
	CMP EAX, ESI
	JB loc_10088735
	TEST EBP, EBP
	JZ loc_100886FD
	LEA EAX,DWORD PTR [EDI+ECX]
	CMP EAX, EBP
	JNZ loc_10088715
loc_100886FD:
	PUSH 0x04
	LEA EAX,DWORD PTR [EDI+ECX]
	PUSH 0x00001000
	MOV EBP,DWORD PTR [offset LEGO1_idata.m410_VirtualAlloc]
	PUSH ESI
	PUSH EAX
	CALL_LONG(EBP)
	MOV DWORD PTR [ESP+var_14+0x24],EAX
loc_10088715:
	CMP DWORD PTR [ESP+var_14+0x24],0x00
	JZ loc_1008874B
	TEST BYTE PTR [ESP+var_8+0x24],0x4
	JZ loc_10088732
	PUSH ESI
	MOV EAX,DWORD PTR [EDI+0x58]
	ADD EAX, EDI
	MOV EBP,DWORD PTR [offset LEGO1_idata.m4BC_VirtualLock]
	PUSH EAX
	CALL_LONG(EBP)
loc_10088732:
	ADD DWORD PTR [EDI+0x58],ESI
loc_10088735:
	CMP DWORD PTR [ESP+var_14+0x24],0x00
	JZ loc_1008874B
	TEST BYTE PTR [ESP+var_4+0x21],0x20
	JZ loc_1008874B
	MOV EAX,DWORD PTR [ESP+var_14+0x24]
	MOV WORD PTR DS:[EAX+0x14],BX
loc_1008874B:
	MOV EAX,DWORD PTR [ESP+var_14+0x24]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10088760(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX, EDX
	PUSH EBP
	MOV ESI, ECX
	MOV EBP,DWORD PTR [ESP+arg2+0x10]
	TEST BYTE PTR [ESI+0x22],0x11
	PUSH EBP
	JZ loc_100887CD
	MOV EDI,DWORD PTR [ESP+arg1+0x14]
	MOV EDX, EBX
	PUSH EDI
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m877E0_sub_100887E0])
	TEST EAX, EAX
	JZ loc_1008878E
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
loc_1008878E:
	PUSH EBP
	MOV EDX, EDI
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m875C0_sub_100885C0])
	MOV EBP, EAX
	TEST EBP, EBP
	JZ loc_100887C4
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m87A70_sub_10088A70])
	CMP EAX, EDI
	JB loc_100887AB
	MOV EAX, EDI
loc_100887AB:
	MOV EDI, EBP
	MOV ESI, EBX
	MOV ECX, EAX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m87950_sub_10088950])
loc_100887C4:
	MOV EAX, EBP
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
loc_100887CD:
	MOV EDX,DWORD PTR [ESP+arg1+0x14]
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m86CC0_sub_10087CC0])
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100887E0(DWORD arg1, DWORD arg2)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x08
	MOV DWORD PTR [ESP+var_8+0x8],ECX
	PUSH EBX
	TEST BYTE PTR [ECX+0x22],0x11
	PUSH ESI
	PUSH EDI
	PUSH EBP
	MOV ESI, EDX
	JZ FAR loc_100888D7
	MOV EBX,DWORD PTR [ESP+arg1+0x18]
	MOV EDI,DWORD PTR [ESP+arg2+0x18]
	MOV EBP, EDI
	MOV ECX, ESI
	AND EBP, 0x00002000
	MOV DWORD PTR [ESP+var_4+0x18],EBX
	JZ loc_10088816
	CALL_LONG(offset [LEGO1_text.m87A70_sub_10088A70])
	JMP loc_1008881B
loc_10088816:
	CALL_LONG(offset [LEGO1_text.m86E50_sub_10087E50])
loc_1008881B:
	TEST EDI,0x00001000
	JZ loc_10088830
	CMP EBX, 0x0000FFFF
	JBE loc_10088830
	MOV EBX, 0x0000FFFF
loc_10088830:
	ADD EBX, 0x0000FFFF
	AND EBX, 0xFFFF0000
	CMP EBX, EAX
	JA loc_10088899
	JNB loc_10088862
	SUB EAX, EBX
	LEA EDX,DWORD PTR [EBX+ESI]
	MOV ECX,DWORD PTR [ESP+var_8+0x18]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m87980_sub_10088980])
	TEST EBP, EBP
	JZ loc_10088862
	LEA EAX,DWORD PTR [EBX+0x0000FFFF]
	SHR EAX, 0x10
	MOV WORD PTR DS:[ESI+0x14],AX
loc_10088862:
	TEST EDI,0x00000100
	JZ loc_1008888A
	CMP EBX,DWORD PTR [ESP+var_4+0x18]
	JBE loc_1008888A
	SUB EBX,DWORD PTR [ESP+var_4+0x18]
	MOV EDI,DWORD PTR [ESP+var_4+0x18]
	ADD EDI, ESI
	XOR EAX, EAX
	MOV ECX, EBX
	SHR ECX, 0x02
	REP STOSD
	MOV ECX, EBX
	AND ECX, 0x03
	REP STOSB
loc_1008888A:
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0008
loc_10088899:
	PUSH EDI
	MOV ECX, EBX
	SUB ECX, EAX
	LEA EDX,DWORD PTR [ESI+EAX]
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+var_8+0x20]
	CALL_LONG(offset [LEGO1_text.m87600_sub_10088600])
	TEST EAX, EAX
	JZ loc_100888CB
	ADD EBX, 0x0000FFFF
	MOV EAX, 0x00000001
	SHR EBX, 0x10
	POP EBP
	MOV WORD PTR DS:[ESI+0x14],BX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0008
loc_100888CB:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0008
loc_100888D7:
	MOV EDI,DWORD PTR [ESP+arg2+0x18]
	MOV EDX,DWORD PTR [ESP+arg1+0x18]
	PUSH EDI
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m86D70_sub_10087D70])
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_10088900()
{
__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI, EDX
	MOV ESI, ECX
	TEST BYTE PTR [ECX+0x22],0x11
	JZ loc_10088937
	CMP EDI, ESI
	JNZ loc_10088921
	XOR EDX, EDX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m87CC0_sub_10088CC0])
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	RET
loc_10088921:
	MOV EDX, EDI
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m87AA0_sub_10088AA0])
	PUSH EAX
	MOV EDX, EDI
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m87980_sub_10088980])
	POP EDI
	POP ESI
	RET
loc_10088937:
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m86C60_sub_10087C60])
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10088950()
{
__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI,DWORD PTR [ECX]
	MOV ESI, ECX
	MOV ECX, ESI
	TEST BYTE PTR [EDI+0x22],0x11
	JZ loc_10088970
	CALL_LONG(offset [LEGO1_text.m87A70_sub_10088A70])
	PUSH EAX
	MOV EDX, ESI
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m87980_sub_10088980])
	POP EDI
	POP ESI
	RET
loc_10088970:
	CALL_LONG(offset [LEGO1_text.m86C60_sub_10087C60])
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10088980(DWORD arg1)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg1217224 = 0x4A4B20,
		arg1217225 = 0x4A4B24,
		arg1217226 = 0x4A4B28,
	};

__asm{
	SUB ESP, 0x0C
	MOV DWORD PTR [ESP+var_C+0xC],EDX
	PUSH EBX
	MOV EDX,DWORD PTR [ESP+arg1+0x10]
	PUSH ESI
	MOV DWORD PTR [ESP+var_8+0x14],ECX
	PUSH EDI
	PUSH EBP
	LEA ESI,DWORD PTR [EDX+0x0000FFFF]
	SHR ESI, 0x10
	MOV EBP,DWORD PTR [ECX+0x5C]
	XOR EDI, EDI
	XOR EBX, EBX
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	ADD EAX, EDX
	TEST BYTE PTR [ECX+0x22],0x01
	MOV DWORD PTR [ESP+var_4+0x1C],EAX
	JNZ loc_100889C4
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	PUSH 0x00004000
	PUSH EDX
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B4_VirtualFree])
loc_100889C4:
	LEA ECX,DWORD PTR [EBP+arg1217225-0x4A4B20]
	MOV EAX,DWORD PTR [ECX]
	CMP DWORD PTR [ESP+var_4+0x1C],EAX
	JNZ loc_100889E8
	MOV EBX, EBP
	TEST EDI, EDI
	JZ loc_100889DC
	ADD WORD PTR DS:[EDI],SI
	MOV EBP, EDI
	JMP loc_10088A0F
loc_100889DC:
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	MOV DWORD PTR [ECX],EAX
	ADD WORD PTR SS:[EBP+arg1217224-0x4A4B20],SI
	JMP loc_10088A0F
loc_100889E8:
	MOV CX,WORD PTR SS:[EBP+arg1217224-0x4A4B20]
	MOVZX EDX,CX
	SHL EDX, 0x10
	ADD EDX, EAX
	CMP EDX,DWORD PTR [ESP+var_C+0x1C]
	JNZ loc_10088A0F
	MOV EDI, EBP
	TEST EBX, EBX
	JZ loc_10088A08
	MOV AX,WORD PTR DS:[EBX]
	ADD AX, CX
	JMP loc_10088A0B
loc_10088A08:
	LEA EAX,DWORD PTR [ESI+ECX]
loc_10088A0B:
	MOV WORD PTR SS:[EBP+arg1217224-0x4A4B20],AX
loc_10088A0F:
	TEST EDI, EDI
	JZ loc_10088A17
	TEST EBX, EBX
	JNZ loc_10088A25
loc_10088A17:
	MOV EBP,DWORD PTR [EBP+arg1217226-0x4A4B20]
	MOV ECX,DWORD PTR [ESP+var_8+0x1C]
	CMP DWORD PTR [ECX+0x5C],EBP
	JNZ loc_100889C4
	JMP loc_10088A36
loc_10088A25:
	MOV EAX,DWORD PTR [EBX+0x08]
	MOV ECX,DWORD PTR [ESP+var_8+0x1C]
	MOV EDX, EBX
	MOV DWORD PTR [ECX+0x5C],EAX
	CALL_LONG(offset [LEGO1_text.m87DC0_sub_10088DC0])
loc_10088A36:
	TEST EDI, EDI
	JNZ loc_10088A5C
	TEST EBX, EBX
	JNZ loc_10088A5C
	MOV EDX,DWORD PTR [ESP+var_C+0x1C]
	PUSH ESI
	MOV ECX,DWORD PTR [ESP+var_8+0x20]
	CALL_LONG(offset [LEGO1_text.m87D50_sub_10088D50])
	TEST EAX, EAX
	JNZ loc_10088A5C
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x0004
loc_10088A5C:
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_10088A70()
{
__asm{
	MOV EAX,DWORD PTR [ECX]
	TEST BYTE PTR [EAX+0x22],0x11
	JZ loc_10088A92
	MOV AX,WORD PTR DS:[ECX+0x0E]
	AND AL, 0x07
	CMP AL, 0x03
	JNZ loc_10088A8C
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[ECX+0x14]
	SHL EAX, 0x10
	RET
loc_10088A8C:
	MOV EAX, 0x00010000
	RET
loc_10088A92:
	MOV EDX, ECX
	MOV ECX, EAX
	JMP_LONG(offset [LEGO1_text.m87AA0_sub_10088AA0])
}
}

__declspec(naked) DWORD LEGO1_sub_10088AA0()
{
__asm{
	TEST BYTE PTR [ECX+0x22],0x11
	JZ loc_10088AAC
	MOV EAX, 0x00010000
	RET
loc_10088AAC:
	MOV ECX, EDX
	JMP_LONG(offset [LEGO1_text.m86E50_sub_10087E50])
}
}

__declspec(naked) DWORD LEGO1_sub_10088AC0(DWORD arg1)
{
	enum{
		var_24 = -0x24,
		var_1C = -0x1C,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset LEGO1_rdata + 0x6900
	PUSH offset [LEGO1_text.m8B980_proc_1008C980]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x18
	MOV DWORD PTR [EBP+var_24+0x4],EDX
	PUSH EBX
	PUSH ESI
	MOV EBX, ECX
	PUSH EDI
	XOR ESI, ESI
	XOR EDI, EDI
	MOV DWORD PTR [EBP+var_1C+0x4],ESP
	CMP DWORD PTR [EBP+arg1+0x4],ESI
	JZ_LONG(offset [LEGO1_text.m87B46_loc_10088B46])
	PUSH EDI
	MOV EDX, 0xFFFFFFFF
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m87D50_sub_10088D50])
	TEST EAX, EAX
	JNZ_LONG(offset [LEGO1_text.m87CAC_loc_10088CAC])
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m87FD0_sub_10088FD0])
	MOV EDI,DWORD PTR [EAX+0x08]
	MOV ESI, EAX
	JMP_LONG(offset [LEGO1_text.m87B15_loc_10088B15])
}
}

__declspec(naked) DWORD LEGO1_sub_10088CC0()
{
__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR ESI, ESI
	MOV EDI, ECX
	CALL_LONG(offset [LEGO1_text.m87FD0_sub_10088FD0])
	MOV EBX, EAX
	TEST EBX, EBX
	JZ loc_10088CED
	MOV EAX,DWORD PTR [EBX+0x0C]
	TEST EAX, EAX
	JZ loc_10088CEA
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3AC_ReleaseMutex])
	MOV EAX,DWORD PTR [EBX+0x0C]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m390_CloseHandle])
loc_10088CEA:
	MOV ESI,DWORD PTR [EBX+0x08]
loc_10088CED:
	PUSH 0x00000102
	MOV EDX, 0x0000028C
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m86ED0_sub_10087ED0])
	TEST EAX, EAX
	JZ loc_10088D11
	CMP WORD PTR DS:[EDI+0x20],0xBEAD
	JNZ loc_10088D11
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m88F70_sub_10089F70])
loc_10088D11:
	MOV AX,WORD PTR DS:[EDI+0x22]
	TEST AL, 0x10
	JZ loc_10088D2F
	TEST AL, 0x01
	JNZ loc_10088D36
	PUSH 0x00004000
	MOV EAX,DWORD PTR [EDI+0x48]
	PUSH EAX
	PUSH EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B4_VirtualFree])
	JMP loc_10088D36
loc_10088D2F:
	PUSH EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m388_UnmapViewOfFile])
loc_10088D36:
	TEST ESI, ESI
	JZ loc_10088D41
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m390_CloseHandle])
loc_10088D41:
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10088D50(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX, EDX
	MOV EDI, ECX
	CALL_LONG(offset [LEGO1_text.m85830_sub_10086830])
	MOV ESI, EAX
	TEST ESI, ESI
	JZ loc_10088DA8
	MOV AX,WORD PTR SS:[ESP+arg1+0xC]
	MOV WORD PTR DS:[ESI],AX
	MOV DWORD PTR [ESI+0x04],EBX
	MOV EAX,DWORD PTR [EDI+0x5C]
	TEST EAX, EAX
	JZ loc_10088D97
	MOV DWORD PTR [ESI+0x0C],EAX
	MOV EAX,DWORD PTR [EDI+0x5C]
	MOV ECX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [ESI+0x08],ECX
	MOV EAX,DWORD PTR [EDI+0x5C]
	MOV ECX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [ECX+0x0C],ESI
	MOV EAX,DWORD PTR [EDI+0x5C]
	POP EDI
	MOV DWORD PTR [EAX+0x08],ESI
	MOV EAX, ESI
	POP ESI
	POP EBX
	RETN 0x0004
loc_10088D97:
	MOV EAX, ESI
	MOV DWORD PTR [ESI+0x0C],ESI
	MOV DWORD PTR [ESI+0x08],ESI
	MOV DWORD PTR [EDI+0x5C],ESI
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_10088DA8:
	MOV EDX, 0x00000002
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	MOV EAX, ESI
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_10088DC0()
{
__asm{
	PUSH ESI
	MOV EAX,DWORD PTR [EDX+0x08]
	MOV ESI,DWORD PTR [EDX+0x0C]
	MOV DWORD PTR [ESI+0x08],EAX
	MOV EAX,DWORD PTR [EDX+0x0C]
	MOV ESI,DWORD PTR [EDX+0x08]
	MOV DWORD PTR [ESI+0x0C],EAX
	CALL_LONG(offset [LEGO1_text.m85860_sub_10086860])
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10088DE0()
{
__asm{
	CALL_LONG(offset [LEGO1_text.m87FD0_sub_10088FD0])
	ADD EAX, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10088DF0()
{
__asm{
	CALL_LONG(offset [LEGO1_text.m87FD0_sub_10088FD0])
	TEST EAX, EAX
	JZ loc_10088E00
	MOV ECX, EAX
	JMP_LONG(offset [LEGO1_text.m87F20_sub_10088F20])
loc_10088E00:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10088E10()
{
	enum{
		var_4 = -0x4,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX, EDX
	MOV EDI, ECX
	MOV ECX, 0x00000018
	CALL_LONG(offset [LEGO1_text.m86E90_sub_10087E90])
	MOV ESI, EAX
	TEST ESI, ESI
	JNZ loc_10088E3F
	MOV EDX, 0x00000002
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10088E3F:
	XOR EAX, EAX
	MOV DWORD PTR [ESI],EDI
	MOV DWORD PTR [ESI+0x08],EBX
	MOV DWORD PTR [ESI+0x0C],EAX
	MOV DWORD PTR [ESI+0x04],EAX
	CMP DWORD PTR [offset LEGO1_data.mC594],EAX
	JZ loc_10088E83
	MOV EAX, DWORD PTR [offset LEGO1_data.mC594]
	MOV DWORD PTR [ESI+0x14],EAX
	MOV EAX, DWORD PTR [offset LEGO1_data.mC594]
	MOV ECX,DWORD PTR [EAX+0x10]
	MOV DWORD PTR [ESI+0x10],ECX
	POP EDI
	MOV EAX, DWORD PTR [offset LEGO1_data.mC594]
	MOV ECX,DWORD PTR [EAX+0x10]
	MOV DWORD PTR [ECX+0x14],ESI
	MOV EAX, DWORD PTR [offset LEGO1_data.mC594]
	MOV DWORD PTR [EAX+0x10],ESI
	MOV EAX, ESI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10088E83:
	MOV DWORD PTR [ESP+var_4+0x10],0x00000000
	PUSH offset LEGO1_data + 0xC560
	PUSH offset LEGO1_data + 0x195A0
	CALL_LONG(offset [LEGO1_text.m88180_sub_10089180])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ loc_10088F12
	CMP DWORD PTR [offset LEGO1_data + 0xC570],0x00
	JZ loc_10088EBC
	PUSH -0x01
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC570]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B0_WaitForSingleObject])
	TEST EAX, EAX
	JNZ loc_10088F12
loc_10088EBC:
	LEA EAX,DWORD PTR [ESP+var_4+0x10]
	MOV ECX, offset LEGO1_data + 0xC570
	PUSH EAX
	MOV EDX,DWORD PTR [offset LEGO1_data.mC590_ptr]
	INC DWORD PTR [offset LEGO1_data + 0xC564]
	CALL_LONG(offset [LEGO1_text.m87FF0_sub_10088FF0])
	DEC DWORD PTR [offset LEGO1_data + 0xC564]
	CMP DWORD PTR [offset LEGO1_data + 0xC570],0x00
	JZ loc_10088EF2
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC570]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3AC_ReleaseMutex])
loc_10088EF2:
	PUSH offset LEGO1_data + 0x195A0
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	MOV EAX, ESI
	POP EDI
	MOV DWORD PTR [ESI+0x14],ESI
	MOV DWORD PTR [ESI+0x10],ESI
	MOV DWORD PTR [offset LEGO1_data.mC594],ESI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10088F12:
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10088F20()
{
__asm{
	PUSH ESI
	PUSH EDI
	CMP DWORD PTR [offset LEGO1_data.mC594],ECX
	MOV ESI, ECX
	JNZ FAR loc_10088FB3
	MOV EAX,DWORD PTR [ESI+0x10]
	CMP EAX, ESI
	JNZ loc_10088FAE
	PUSH offset LEGO1_data + 0xC560
	PUSH offset LEGO1_data + 0x195A0
	CALL_LONG(offset [LEGO1_text.m88180_sub_10089180])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ loc_10088FCC
	CMP DWORD PTR [offset LEGO1_data + 0xC570],0x00
	JZ loc_10088F68
	PUSH -0x01
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC570]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B0_WaitForSingleObject])
	TEST EAX, EAX
	JNZ loc_10088FCC
loc_10088F68:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC570]
	INC DWORD PTR [offset LEGO1_data + 0xC564]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3AC_ReleaseMutex])
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xC570]
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m390_CloseHandle])
	PUSH offset LEGO1_data + 0x195A0
	DEC DWORD PTR [offset LEGO1_data + 0xC564]
	MOV DWORD PTR [offset LEGO1_data + 0xC570],0x00000000
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	MOV DWORD PTR [offset LEGO1_data.mC594],0x00000000
	JMP loc_10088FB3
loc_10088FAE:
	MOV DWORD PTR [offset LEGO1_data.mC594], EAX
loc_10088FB3:
	MOV EAX,DWORD PTR [ESI+0x10]
	MOV ECX,DWORD PTR [ESI+0x14]
	MOV DWORD PTR [ECX+0x10],EAX
	MOV EAX,DWORD PTR [ESI+0x10]
	MOV EDX,DWORD PTR [ESI+0x14]
	MOV ECX, ESI
	MOV DWORD PTR [EAX+0x14],EDX
	CALL_LONG(offset [LEGO1_text.m86EB0_sub_10087EB0])
loc_10088FCC:
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10088FD0()
{
__asm{
	MOV EAX, DWORD PTR [offset LEGO1_data.mC594]
	TEST EAX, EAX
	JZ loc_10088FE8
loc_10088FD9:
	CMP DWORD PTR [EAX],ECX
	JZ loc_10088FEA
	MOV EAX,DWORD PTR [EAX+0x10]
	CMP EAX,DWORD PTR [offset LEGO1_data.mC594]
	JNZ loc_10088FD9
loc_10088FE8:
	XOR EAX, EAX
loc_10088FEA:
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10088FF0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI,DWORD PTR [ESP+arg1+0x8]
	CMP DWORD PTR [EDI],0x00
	JNZ loc_10089010
	PUSH EDX
	PUSH 0x00
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3D0_CreateMutexA])
	MOV DWORD PTR [ESI],EAX
	MOV DWORD PTR [EDI], 0x00000001
loc_10089010:
	PUSH -0x01
	MOV EAX,DWORD PTR [ESI]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B0_WaitForSingleObject])
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_10089030()
{
__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX, ECX
	PUSH EBP
	MOV EBP, EDX
	CALL_LONG(offset [LEGO1_text.m87FD0_sub_10088FD0])
	MOV ESI, EAX
	TEST ESI, ESI
	JZ loc_10089091
	CMP DWORD PTR [ESI+0x0C],0x00
	JNZ loc_10089073
	LEA EDI,DWORD PTR [EBX+0x4C]
loc_1008904C:
	MOV EDX, EDI
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m880A0_sub_100890A0])
	PUSH EDI
	PUSH 0x00
	PUSH EBP
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3D0_CreateMutexA])
	MOV DWORD PTR [ESI+0x0C],EAX
	TEST EAX, EAX
	JNZ loc_10089087
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B8_GetLastError])
	CMP EAX, 0x000000B7
	JZ loc_1008904C
loc_10089073:
	TEST ESI, ESI
	JZ loc_10089091
	CMP DWORD PTR [ESI+0x0C],0x00
	JZ loc_10089091
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10089087:
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10089091:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100890A0()
{
__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI, EDX
	MOV ESI, ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3BC_GetCurrentThreadId])
	XOR EAX, ESI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8A630_sub_1008B630])
	ADD ESP, 0x04
	CALL_LONG(offset [LEGO1_text.m8A640_sub_1008B640])
	MOV ESI, EAX
	CALL_LONG(offset [LEGO1_text.m8A640_sub_1008B640])
	IMUL ESI,EAX
	PUSH ESI
	PUSH offset [LEGO1_data.mC5A0_str]
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8A5A0_sub_1008B5A0])
	ADD ESP, 0x0C
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100890E0()
{
__asm{
	CALL_LONG(offset [LEGO1_text.m87FD0_sub_10088FD0])
	TEST EAX, EAX
	JZ loc_100890F3
	MOV EAX,DWORD PTR [EAX+0x0C]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m390_CloseHandle])
loc_100890F3:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10089100()
{
__asm{
	CALL_LONG(offset [LEGO1_text.m87FD0_sub_10088FD0])
	TEST EAX, EAX
	JZ loc_1008911D
	PUSH -0x01
	MOV EAX,DWORD PTR [EAX+0x0C]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B0_WaitForSingleObject])
	INC EAX
	CMP EAX, 0x01
	SBB EAX, EAX
	INC EAX
	RET
loc_1008911D:
	XOR EAX, EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10089120()
{
__asm{
	CALL_LONG(offset [LEGO1_text.m87FD0_sub_10088FD0])
	TEST EAX, EAX
	JZ loc_10089133
	MOV EAX,DWORD PTR [EAX+0x0C]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3AC_ReleaseMutex])
loc_10089133:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10089140()
{
__asm{
	PUSH offset LEGO1_data + 0x19330
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3C0_InitializeCriticalSection])
	PUSH offset LEGO1_data + 0x19330
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
	MOV EAX, 0x00000001
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10089160()
{
__asm{
	PUSH offset LEGO1_data + 0x19330
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	PUSH offset LEGO1_data + 0x19330
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3E8_DeleteCriticalSection])
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10089180(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI,DWORD PTR [ESP+arg2+0x8]
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	CMP DWORD PTR [EDI],0x00
	JNZ loc_1008919C
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3C0_InitializeCriticalSection])
	MOV DWORD PTR [EDI], 0x00000001
loc_1008919C:
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100891B0(DWORD arg1)
{
	enum{
		var_1C = -0x1C,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset LEGO1_rdata + 0x6910
	PUSH offset [LEGO1_text.m8B980_proc_1008C980]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x10
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV DWORD PTR [EBP+var_1C+0x4],ESP
	XOR EDI, EDI
	MOV DWORD PTR [EBP+var_8+0x4],EDI
	MOV ESI,DWORD PTR [EBP+arg1+0x4]
	MOV AX,WORD PTR DS:[ESI+0x22]
	TEST AL, 0x02
	JZ loc_1008920D
	TEST AL, 0x01
	JZ loc_10089200
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88100_sub_10089100])
	TEST EAX, EAX
	JNZ loc_1008920A
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV EAX, EDI
	JMP_LONG(offset [LEGO1_text.m88277_loc_10089277])
loc_10089200:
	LEA EAX,DWORD PTR [ESI+0x60]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
loc_1008920A:
	INC DWORD PTR [ESI+0x78]
loc_1008920D:
	PUSH 0x00000102
	MOV EDX, 0x0000028C
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m86ED0_sub_10087ED0])
	TEST EAX, EAX
	JZ loc_10089238
	CMP WORD PTR DS:[ESI+0x20],0xBEAD
	JNZ loc_10089238
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV EAX, 0x00000001
	JMP_LONG(offset [LEGO1_text.m88277_loc_10089277])
loc_10089238:
	MOV AX,WORD PTR DS:[ESI+0x22]
	TEST AL, 0x02
	JZ loc_1008925A
	DEC DWORD PTR [ESI+0x78]
	TEST AL, 0x01
	JZ loc_10089250
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88120_sub_10089120])
	JMP loc_1008925A
loc_10089250:
	ADD ESI, 0x60
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
loc_1008925A:
	XOR EAX, EAX
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	JMP_LONG(offset [LEGO1_text.m88277_loc_10089277])
}
}

__declspec(naked) DWORD LEGO1_proc_10089265()
{
__asm{
	MOV EAX, 0x00000001
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_1008926B()
{
	enum{
		arg1217218 = 0x4A4B08,
		arg1217223 = 0x4A4B1C,
	};

__asm{
	MOV ESP,DWORD PTR [EBP+arg1217218-0x4A4B20]
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0xFFFFFFFF
	XOR EAX, EAX
	JMP_LONG(offset [LEGO1_text.m88277_loc_10089277])
}
}

__declspec(naked) DWORD LEGO1_loc_10089277()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	POP EDI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10089290()
{
__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI, 0x00000001
	PUSH offset LEGO1_data + 0xC55C
	PUSH offset LEGO1_data + 0x195E0
	CALL_LONG(offset [LEGO1_text.m88180_sub_10089180])
	ADD ESP, 0x08
	TEST EAX, EAX
	JNZ loc_100892B2
	XOR EAX, EAX
	POP EDI
	POP ESI
	RET
loc_100892B2:
	CMP DWORD PTR [offset LEGO1_data + 0xC568],-0x01
	JNZ loc_100892D0
	PUSH offset LEGO1_data + 0x195C0
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3C0_InitializeCriticalSection])
	MOV DWORD PTR [offset LEGO1_data + 0xC568],0x00000000
loc_100892D0:
	PUSH offset LEGO1_data + 0x195E0
	MOV EDI,DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection]
	CALL_LONG(EDI)
	PUSH offset LEGO1_data + 0x195C0
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xC568]
	MOV EAX, ECX
	INC ECX
	MOV DWORD PTR [offset LEGO1_data + 0xC568],ECX
	TEST EAX, EAX
	JNZ loc_1008930B
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m88350_sub_10089350])
	ADD ESP, 0x04
	TEST EAX, EAX
	JNZ loc_1008930B
	XOR ESI, ESI
loc_1008930B:
	PUSH offset LEGO1_data + 0x195C0
	CALL_LONG(EDI)
	MOV EAX, ESI
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10089320()
{
__asm{
	PUSH offset LEGO1_data + 0x195C0
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
	DEC DWORD PTR [offset LEGO1_data + 0xC568]
	JNZ loc_10089338
	CALL_LONG(offset [LEGO1_text.m88420_sub_10089420])
loc_10089338:
	PUSH offset LEGO1_data + 0x195C0
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10089350(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, 0x00000001
	MOV EBX,DWORD PTR [ESP+arg1+0xC]
	PUSH EBP
	TEST EBX, EBX
	JZ loc_1008936C
	TEST BYTE PTR [EBX+0x22],0x10
	MOV EBP, 0x000003E8
	JZ loc_10089371
loc_1008936C:
	MOV EBP, 0xFFFFFFFF
loc_10089371:
	PUSH offset LEGO1_data + 0xC55C
	PUSH offset LEGO1_data + 0x195E0
	CALL_LONG(offset [LEGO1_text.m88180_sub_10089180])
	ADD ESP, 0x08
	TEST EAX, EAX
	JNZ loc_1008938E
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1008938E:
	CMP DWORD PTR [offset LEGO1_data + 0xC56C],0x00
	JNZ loc_100893B0
	PUSH 0x00
	PUSH 0x01
	PUSH 0x00
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m404_CreateEventA])
	MOV DWORD PTR [offset LEGO1_data + 0xC56C], EAX
	TEST EAX, EAX
	JNZ loc_100893B0
	XOR ESI, ESI
loc_100893B0:
	PUSH offset LEGO1_data + 0x195E0
	MOV EDI,DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection]
	CALL_LONG(EDI)
	TEST ESI, ESI
	JZ loc_10089412
	PUSH EBP
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC56C]
	PUSH EAX
	MOV EBP,DWORD PTR [offset LEGO1_idata.m3B0_WaitForSingleObject]
	CALL_LONG(EBP)
	CMP EAX, 0x00000102
	JNZ loc_10089412
	TEST EBX, EBX
	JZ loc_10089412
	PUSH offset LEGO1_data + 0xC55C
	PUSH offset LEGO1_data + 0x195E0
	CALL_LONG(offset [LEGO1_text.m88180_sub_10089180])
	ADD ESP, 0x08
	TEST EAX, EAX
	JNZ loc_100893F8
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100893F8:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC598]
	PUSH offset LEGO1_data + 0x195E0
	MOV ESI, 0xFFFFFFFF
	MOV DWORD PTR [EBX+0x7C],EAX
	MOV DWORD PTR [offset LEGO1_data + 0xC598],EBX
	CALL_LONG(EDI)
loc_10089412:
	MOV EAX, ESI
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10089420()
{
__asm{
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC56C]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3CC_SetEvent])
	RET
}
}

__declspec(naked) DWORD LEGO1_j_GetCurrentThreadId()
{
__asm{
	JMP_LONG(DWORD PTR [offset LEGO1_idata.m3BC_GetCurrentThreadId])
}
}

__declspec(naked) DWORD LEGO1_sub_10089440()
{
__asm{
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC59C]
	TEST EAX, EAX
	JNZ loc_1008944F
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m408_GetVersion])
loc_1008944F:
	MOV DWORD PTR [offset LEGO1_data + 0xC59C], EAX
	CMP EAX, 0x80000000
	MOV EAX, 0x00000001
	ADC EAX, -0x01
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10089470(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH 0x00
	PUSH 0x00
	XOR EDX, EDX
	PUSH 0x00
	MOV ECX, 0x00000018
	PUSH 0x00
	PUSH 0x00
	PUSH EAX
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m88530_sub_10089530])
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_10089490(DWORD arg1, DWORD arg2)
{
	enum{
		var_C = -0xC,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg2]
	SUB ESP, 0x04
	LEA EAX,DWORD PTR [ESP+var_4+0x4]
	PUSH ESI
	MOV ECX,DWORD PTR [ESP+arg1+0x8]
	PUSH EAX
	MOV DWORD PTR [ESP+var_4+0xC],0x00000000
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m87AC0_sub_10088AC0])
	MOV ESI, EAX
	TEST ESI, ESI
	JZ loc_1008951E
	CMP DWORD PTR [ESP+var_C+0x10],0x00
	JNZ loc_1008951E
	MOV EAX, offset [LEGO1_data.mC7E0_ptr]
	TEST EAX, EAX
	JNZ loc_100894D8
	XOR EDX, EDX
	MOV ECX, ESI
	XOR ESI, ESI
	CALL_LONG(offset [LEGO1_text.m889D0_sub_100899D0])
	MOV EAX, ESI
	POP ESI
	ADD ESP, 0x04
	RET
loc_100894D8:
	PUSH offset LEGO1_data + 0xC55C
	PUSH offset LEGO1_data + 0x195E0
	CALL_LONG(offset [LEGO1_text.m88180_sub_10089180])
	ADD ESP, 0x08
	TEST EAX, EAX
	JNZ loc_100894F5
	XOR EAX, EAX
	POP ESI
	ADD ESP, 0x04
	RET
loc_100894F5:
	TEST BYTE PTR [ESI+0x22],0x01
	LEA EAX,DWORD PTR [ESI+0x40]
	JZ loc_10089505
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m87DE0_sub_10088DE0])
loc_10089505:
	MOV ECX,DWORD PTR [offset LEGO1_data.mC7E4]
	PUSH offset LEGO1_data + 0x195E0
	MOV DWORD PTR [EAX],ECX
	MOV DWORD PTR [offset LEGO1_data.mC7E4],ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
loc_1008951E:
	MOV EAX, ESI
	POP ESI
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10089530(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7)
{
	enum{
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
		arg7 = 0x1C,
	};

__asm{
	SUB ESP, 0x0C
	MOV EAX, offset [LEGO1_data.mC7E0_ptr]
	MOV WORD PTR SS:[ESP+var_8+0xA],CX
	TEST EAX, EAX
	MOV DWORD PTR [ESP+var_8+0xC],EDX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	JNZ loc_10089555
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x001C
loc_10089555:
	CALL_LONG(offset [LEGO1_text.m88290_sub_10089290])
	TEST EAX, EAX
	JNZ loc_1008956A
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x001C
loc_1008956A:
	MOV EDI,DWORD PTR [ESP+arg2+0x1C]
	MOV EBX,DWORD PTR [ESP+arg3+0x1C]
	MOV EBP,DWORD PTR [ESP+arg7+0x1C]
loc_10089576:
	TEST EBP, EBP
	JZ loc_100895B8
	PUSH EBP
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m88490_sub_10089490])
	ADD ESP, 0x08
	MOV ESI, EAX
	TEST ESI, ESI
	JNZ FAR loc_100896B6
	MOV EAX,DWORD PTR [ESP+arg6+0x1C]
	PUSH EBP
	MOV ECX,DWORD PTR [ESP+arg5+0x20]
	PUSH EAX
	MOV EDX,DWORD PTR [ESP+arg4+0x24]
	PUSH ECX
	PUSH EDX
	MOV EAX, EDI
	PUSH EBX
	OR EAX, 0x00001100
	MOV EDX,DWORD PTR [ESP+arg1+0x30]
	PUSH EAX
	MOV ECX, 0x00001000
	CALL_LONG(offset [LEGO1_text.m87130_sub_10088130])
	JMP loc_100895EC
loc_100895B8:
	TEST EBX, EBX
	JZ loc_100895D5
	PUSH EBX
	MOV EAX, EDI
	OR EAX, 0x00001100
	MOV EDX,DWORD PTR [ESP+arg1+0x20]
	PUSH EAX
	MOV ECX, 0x00001000
	CALL_LONG(offset [LEGO1_text.m86FF0_sub_10087FF0])
	JMP loc_100895EC
loc_100895D5:
	MOV EAX, EDI
	MOV EDX, 0x00001000
	AND EAX, -0x05
	XOR ECX, ECX
	OR EAX, 0x00001100
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m875C0_sub_100885C0])
loc_100895EC:
	MOV ESI, EAX
	TEST ESI, ESI
	JNZ loc_1008960E
	MOV EDX, 0x00000002
	XOR ECX, ECX
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	TEST EAX, EAX
	JNZ FAR loc_10089576
	TEST ESI, ESI
	JZ FAR loc_100897C3
loc_1008960E:
	XOR AX, AX
loc_10089611:
	MOVZX ECX,AX
	INC AX
	MOV DWORD PTR [ECX*4+ESI],0x00000000
	CMP AX, 0x0005
	JB loc_10089611
	XOR EDX, EDX
	LEA EBX,DWORD PTR [ESI+0x22]
	MOV EAX, EDI
	MOV DWORD PTR [ESI+0x14],EDX
	AND AX, 0xFFFD
	LEA ECX,DWORD PTR [ESI+0x24]
	MOV DWORD PTR [ESI+0x18],EDX
	MOV DWORD PTR [ESP+var_4+0x1C],ECX
	MOV DWORD PTR [ESI+0x1C],EDX
	MOV WORD PTR DS:[ESI+0x20],0xBEAD
	MOV WORD PTR DS:[EBX],AX
	MOV WORD PTR DS:[ECX],DX
	MOV WORD PTR DS:[ESI+0x26],0x0100
	CMP WORD PTR DS:[ESI+0x28],DX
	JNZ loc_10089662
	MOV WORD PTR DS:[ESI+0x28],0x4000
	MOV WORD PTR DS:[ESI+0x2A],0x1000
loc_10089662:
	MOV DWORD PTR [ESI+0x30],0x00040000
	MOV DWORD PTR [ESI+0x34],0xFFFFFFFE
	XOR EAX, EAX
	TEST EDI,0x00000001
	MOV DWORD PTR [ESI+0x38],EAX
	MOV DWORD PTR [ESI+0x3C],EAX
	MOV DWORD PTR [ESI+0x00000280],EAX
	MOV DWORD PTR [ESI+0x00000278],EAX
	JZ loc_10089697
	TEST EDI,0x00000010
	JNZ loc_10089697
	OR EDI, 0x02
loc_10089697:
	TEST EDI,0x00000002
	JZ loc_100896DD
	MOV DWORD PTR [ESI+0x78],0x00000000
	TEST BYTE PTR [EBX],0x01
	JZ loc_100896C7
	XOR EDX, EDX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88030_sub_10089030])
	JMP loc_100896D6
loc_100896B6:
	CALL_LONG(offset [LEGO1_text.m88320_sub_10089320])
	MOV EAX, ESI
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x001C
loc_100896C7:
	LEA EAX,DWORD PTR [ESI+0x60]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3C0_InitializeCriticalSection])
	MOV EAX, 0x00000001
loc_100896D6:
	TEST EAX, EAX
	JZ loc_100896FA
	MOV WORD PTR DS:[EBX],DI
loc_100896DD:
	AND EDI, 0x11
	JZ loc_1008970A
	PUSH 0x00
	MOV EDX, EBP
	PUSH 0x01
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m87AC0_sub_10088AC0])
	TEST EAX, EAX
	JNZ loc_1008970A
	XOR ESI, ESI
	JMP FAR loc_100897C3
loc_100896FA:
	MOV EDX, ESI
	MOV ECX, ESI
	XOR ESI, ESI
	CALL_LONG(offset [LEGO1_text.m87900_sub_10088900])
	JMP FAR loc_100897C3
loc_1008970A:
	PUSH offset LEGO1_data + 0xC55C
	PUSH offset LEGO1_data + 0x195E0
	CALL_LONG(offset [LEGO1_text.m88180_sub_10089180])
	ADD ESP, 0x08
	TEST EAX, EAX
	JNZ loc_1008972C
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x001C
loc_1008972C:
	TEST EDI, EDI
	JNZ loc_10089737
	MOV DWORD PTR [ESI+0x44],offset [LEGO1_data.mC7E0_ptr]
loc_10089737:
	TEST BYTE PTR [EBX],0x01
	LEA EAX,DWORD PTR [ESI+0x40]
	JZ loc_10089746
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m87DE0_sub_10088DE0])
loc_10089746:
	MOV ECX,DWORD PTR [offset LEGO1_data.mC7E4]
	PUSH offset LEGO1_data + 0x195E0
	MOV DWORD PTR [EAX],ECX
	MOV DWORD PTR [offset LEGO1_data.mC7E4],ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	TEST BYTE PTR [EBX],0x11
	JZ loc_10089782
	MOV EAX, ESI
	AND EAX, 0x0000FFFF
	JNZ loc_10089776
	MOV DWORD PTR [ESI+0x2C],0x00010000
	JMP loc_10089789
loc_10089776:
	MOV ECX, 0x00010000
	SUB ECX, EAX
	MOV DWORD PTR [ESI+0x2C],ECX
	JMP loc_10089789
loc_10089782:
	MOV DWORD PTR [ESI+0x2C],0x00001000
loc_10089789:
	MOV EAX,DWORD PTR [ESP+var_10+0x22]
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m888F0_sub_100898F0])
	TEST EAX, EAX
	JNZ loc_100897A5
	XOR EDX, EDX
	MOV ECX, ESI
	XOR ESI, ESI
	CALL_LONG(offset [LEGO1_text.m889D0_sub_100899D0])
	JMP loc_100897C3
loc_100897A5:
	CMP DWORD PTR [ESP+var_10+0x24],0x00
	JZ loc_100897C3
	PUSH 0x01
	XOR EAX, EAX
	MOV ECX,DWORD PTR [ESP+var_C+0x28]
	MOV AX,WORD PTR DS:[ECX]
	IMUL EAX,DWORD PTR [ESP+var_10+0x28]
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m85440_sub_10086440])
loc_100897C3:
	CALL_LONG(offset [LEGO1_text.m88320_sub_10089320])
	MOV EAX, ESI
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RETN 0x001C
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100897E0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	CMP WORD PTR DS:[ESI+0x20],0xBEAD
	JZ loc_10089803
	MOV EDX, 0x0000000A
	XOR ECX, ECX
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
loc_10089803:
	TEST BYTE PTR [ESI+0x22],0x11
	MOV ECX, 0x0000FFFF
	JNZ loc_10089812
	MOV ECX,DWORD PTR [ESP+arg2+0xC]
loc_10089812:
	CALL_LONG(offset [LEGO1_text.m888A0_sub_100898A0])
	MOV EBX, EAX
	MOV AX,WORD PTR DS:[ESI+0x22]
	TEST AL, 0x02
	JZ loc_10089845
	TEST AL, 0x01
	JZ loc_10089838
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88100_sub_10089100])
	TEST EAX, EAX
	JNZ loc_10089842
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
loc_10089838:
	LEA EAX,DWORD PTR [ESI+0x60]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
loc_10089842:
	INC DWORD PTR [ESI+0x78]
loc_10089845:
	MOV DI, 0x0000
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[ESI+0x24]
	ADD EAX, 0x20
	CMP EAX, EBX
	JA loc_10089865
	MOV DI,WORD PTR DS:[ESI+0x28]
	MOV WORD PTR DS:[ESI+0x28],BX
	SHR EBX, 0x02
	MOV WORD PTR DS:[ESI+0x2A],BX
loc_10089865:
	MOV AX,WORD PTR DS:[ESI+0x22]
	TEST AL, 0x02
	JZ loc_1008988E
	DEC DWORD PTR [ESI+0x78]
	TEST AL, 0x01
	JZ loc_10089884
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88120_sub_10089120])
	MOVZX EAX,DI
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
loc_10089884:
	ADD ESI, 0x60
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
loc_1008988E:
	MOVZX EAX,DI
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_100898A0()
{
__asm{
	CMP ECX, 0x00004000
	JNZ loc_100898AB
	MOV EAX, ECX
	RET
loc_100898AB:
	CMP ECX, 0x0000FFFF
	JB loc_100898B9
	MOV EAX, 0x0000FFFF
	RET
loc_100898B9:
	MOV EAX, 0x00001000
	CMP ECX, 0x00001000
	JA loc_100898C7
	RET
loc_100898C7:
	ADD EAX, EAX
	TEST AX, AX
	JZ loc_100898DF
	CMP EAX, ECX
	JB loc_100898C7
	CMP EAX, 0x0000FFFF
	JB loc_100898DE
	MOV EAX, 0x0000FFFF
loc_100898DE:
	RET
loc_100898DF:
	MOV EAX, 0x0000FFFF
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100898F0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV BX,WORD PTR SS:[ESP+arg2+0x8]
	PUSH EDI
	TEST BX, BX
	JZ loc_1008990D
	MOV AX, BX
	ADD AX, 0x0007
	AND AX, 0xFFF8
	MOVZX EDI,AX
	JMP loc_1008990F
loc_1008990D:
	XOR EDI, EDI
loc_1008990F:
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
	CMP WORD PTR DS:[ESI+0x20],0xBEAD
	JZ loc_1008992F
	MOV EDX, 0x0000000A
	XOR ECX, ECX
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
loc_1008992F:
	MOV AX,WORD PTR DS:[ESI+0x22]
	TEST AL, 0x02
	JZ loc_1008995B
	TEST AL, 0x01
	JZ loc_1008994E
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88100_sub_10089100])
	TEST EAX, EAX
	JNZ loc_10089958
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
loc_1008994E:
	LEA EAX,DWORD PTR [ESI+0x60]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
loc_10089958:
	INC DWORD PTR [ESI+0x78]
loc_1008995B:
	MOVZX EAX,BX
	CMP EAX, EDI
	JA loc_1008998A
	MOV AX,WORD PTR DS:[ESI+0x28]
	SUB AX, 0x0020
	MOVZX ECX,AX
	CMP ECX, EDI
	JB loc_1008998A
	CMP EDI, 0x0000FFFF
	JA loc_1008998A
	CMP DWORD PTR [ESI+0x04],0x00
	JNZ loc_10089996
	MOV WORD PTR DS:[ESI+0x24],DI
	MOV EDI, 0x00000001
	JMP loc_10089998
loc_1008998A:
	MOV EDX, 0x00000003
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
loc_10089996:
	XOR EDI, EDI
loc_10089998:
	MOV AX,WORD PTR DS:[ESI+0x22]
	TEST AL, 0x02
	JZ loc_100899C0
	DEC DWORD PTR [ESI+0x78]
	TEST AL, 0x01
	JZ loc_100899B6
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88120_sub_10089120])
	MOV EAX, EDI
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
loc_100899B6:
	ADD ESI, 0x60
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
loc_100899C0:
	MOV EAX, EDI
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_100899D0()
{
	enum{
		r = 0x0,
		arg1217224 = 0x4A4B20,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	PUSH EBP
	MOV EDI, 0x00000001
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m88350_sub_10089350])
	ADD ESP, 0x04
	CMP EAX, -0x01
	JZ loc_10089A40
	TEST EAX, EAX
	JZ loc_10089A4D
loc_100899F0:
	PUSH offset LEGO1_data + 0xC55C
	MOV DWORD PTR [offset LEGO1_data + 0xC5A8],ESI
	PUSH offset LEGO1_data + 0x195E0
	CALL_LONG(offset [LEGO1_text.m88180_sub_10089180])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ FAR loc_10089B50
	TEST BYTE PTR [ESI+0x22],0x11
	JZ loc_10089A57
	XOR EDX, EDX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m87CC0_sub_10088CC0])
	PUSH offset LEGO1_data + 0x195E0
	CMP EAX, 0x01
	MOV DWORD PTR [offset LEGO1_data + 0xC5A8],0x00000000
	SBB EDI, EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	NEG EDI
	JMP FAR loc_10089B12
loc_10089A40:
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10089A4D:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10089A57:
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88F70_sub_10089F70])
	TEST EDI, EDI
	JZ loc_10089A68
	MOV WORD PTR DS:[ESI+0x20],0x0000
loc_10089A68:
	MOV WORD PTR SS:[ESP+r+0x12],0x0000
loc_10089A6F:
	MOV EAX,DWORD PTR [ESP+r+0x12]
	AND EAX, 0x0000FFFF
	LEA EBP,DWORD PTR [EAX*4+ESI]
	MOV EBX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	TEST EBX, EBX
	JZ loc_10089A9F
loc_10089A82:
	TEST EDI, EDI
	JZ loc_10089A8F
	MOV EAX,DWORD PTR [EBX+0x04]
	MOV WORD PTR DS:[EAX+0x0E],0x0000
loc_10089A8F:
	MOV ECX,DWORD PTR [EBX+0x04]
	CALL_LONG(offset [LEGO1_text.m86C60_sub_10087C60])
	MOV EBX,DWORD PTR [EBX+0x08]
	CMP DWORD PTR [EBP+arg1217224-0x4A4B20],EBX
	JNZ loc_10089A82
loc_10089A9F:
	INC WORD PTR SS:[ESP+r+0x12]
	CMP WORD PTR SS:[ESP+r+0x12],0x05
	JB loc_10089A6F
	MOV ECX,DWORD PTR [ESI+0x00000278]
	TEST ECX, ECX
	JZ loc_10089AC3
loc_10089AB6:
	MOV EBX,DWORD PTR [ECX]
	CALL_LONG(offset [LEGO1_text.m86C60_sub_10087C60])
	MOV ECX, EBX
	TEST EBX, EBX
	JNZ loc_10089AB6
loc_10089AC3:
	MOV ECX,DWORD PTR [ESI+0x1C]
	TEST ECX, ECX
	JZ loc_10089AD7
loc_10089ACA:
	MOV EBX,DWORD PTR [ECX]
	CALL_LONG(offset [LEGO1_text.m86C60_sub_10087C60])
	MOV ECX, EBX
	TEST EBX, EBX
	JNZ loc_10089ACA
loc_10089AD7:
	MOV AX,WORD PTR DS:[ESI+0x22]
	TEST AL, 0x02
	JZ loc_10089AF6
	TEST AL, 0x01
	JZ loc_10089AEC
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m880E0_sub_100890E0])
	JMP loc_10089AF6
loc_10089AEC:
	LEA EAX,DWORD PTR [ESI+0x60]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3E8_DeleteCriticalSection])
loc_10089AF6:
	MOV DWORD PTR [offset LEGO1_data + 0xC5A8],0x00000000
	PUSH offset LEGO1_data + 0x195E0
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m86C60_sub_10087C60])
loc_10089B12:
	CMP DWORD PTR [offset LEGO1_data + 0xC598],0x00
	JZ loc_10089B64
	PUSH offset LEGO1_data + 0xC55C
	PUSH offset LEGO1_data + 0x195E0
	CALL_LONG(offset [LEGO1_text.m88180_sub_10089180])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ loc_10089B5A
	MOV ESI,DWORD PTR [offset LEGO1_data + 0xC598]
	PUSH offset LEGO1_data + 0x195E0
	MOV ECX,DWORD PTR [ESI+0x7C]
	MOV DWORD PTR [offset LEGO1_data + 0xC598],ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	JMP FAR loc_100899F0
loc_10089B50:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10089B5A:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10089B64:
	CALL_LONG(offset [LEGO1_text.m88420_sub_10089420])
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10089B80()
{
	enum{
		var_34 = -0x34,
		var_30 = -0x30,
		var_2C = -0x2C,
		var_28 = -0x28,
		var_24 = -0x24,
		var_20 = -0x20,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset LEGO1_rdata + 0x6960
	PUSH offset [LEGO1_text.m8B980_proc_1008C980]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x20
	MOV DWORD PTR [EBP+var_20+0x4],ECX
	MOV DWORD PTR [EBP+var_30+0x4],ECX
	PUSH EBX
	MOV ECX, offset [LEGO1_data.mC7E0_ptr]
	PUSH ESI
	MOV DWORD PTR [EBP+var_34+0x4],EDX
	PUSH EDI
	TEST ECX, ECX
	JZ_LONG(offset [LEGO1_text.m88DDB_loc_10089DDB])
	PUSH offset LEGO1_data + 0xC55C
	PUSH offset LEGO1_data + 0x195E0
	CALL_LONG(offset [LEGO1_text.m88180_sub_10089180])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ_LONG(offset [LEGO1_text.m88DDB_loc_10089DDB])
	CMP DWORD PTR [offset LEGO1_data.mC7E0_ptr],0x00
	JZ loc_10089C00
	MOV ECX,DWORD PTR [offset LEGO1_data.mC7E0_ptr]
	CALL_LONG(offset [LEGO1_text.m86FD0_sub_10087FD0])
	TEST EAX, EAX
	JZ loc_10089BF3
	MOV ESI,DWORD PTR [offset LEGO1_data.mC7E0_ptr]
	JMP loc_10089C02
loc_10089BF3:
	MOV ESI, offset [LEGO1_text.m88EF0_proc_10089EF0]
	MOV DWORD PTR [offset LEGO1_data.mC7E0_ptr],ESI
	JMP loc_10089C02
loc_10089C00:
	XOR ESI, ESI
loc_10089C02:
	PUSH offset LEGO1_data + 0x195E0
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	TEST ESI, ESI
	JZ_LONG(offset [LEGO1_text.m88DDB_loc_10089DDB])
	MOV DWORD PTR [EBP+var_24+0x4],0x00000000
	CMP DWORD PTR [EBP+var_20+0x4],0x00
	JZ loc_10089C7F
	PUSH 0x00000102
	MOV EDX, 0x0000028C
	MOV ECX,DWORD PTR [EBP+var_20+0x4]
	CALL_LONG(offset [LEGO1_text.m86ED0_sub_10087ED0])
	TEST EAX, EAX
	JZ loc_10089C7F
	MOV EAX,DWORD PTR [EBP+var_20+0x4]
	CMP WORD PTR DS:[EAX+0x20],0xBEAD
	JNZ loc_10089C7F
	MOV CX,WORD PTR DS:[EAX+0x22]
	MOV AX, CX
	AND AX, 0x0002
	JZ loc_10089C7F
	TEST CL,0x01
	JZ loc_10089C66
	MOV ECX,DWORD PTR [EBP+var_20+0x4]
	CALL_LONG(offset [LEGO1_text.m88100_sub_10089100])
	TEST EAX, EAX
	JNZ loc_10089C73
	JMP_LONG(offset [LEGO1_text.m88DDB_loc_10089DDB])
loc_10089C66:
	MOV EAX,DWORD PTR [EBP+var_20+0x4]
	ADD EAX, 0x60
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
loc_10089C73:
	MOV EAX,DWORD PTR [EBP+var_20+0x4]
	INC DWORD PTR [EAX+0x78]
	MOV ECX,DWORD PTR [EAX+0x78]
	MOV DWORD PTR [EBP+var_24+0x4],ECX
loc_10089C7F:
	PUSH offset LEGO1_data + 0xC560
	PUSH offset LEGO1_data + 0x195A0
	CALL_LONG(offset [LEGO1_text.m88180_sub_10089180])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ_LONG(offset [LEGO1_text.m88DDB_loc_10089DDB])
	CMP DWORD PTR [offset LEGO1_data + 0xC570],0x00
	JZ loc_10089CB8
	PUSH -0x01
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC570]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B0_WaitForSingleObject])
	TEST EAX, EAX
	JNZ_LONG(offset [LEGO1_text.m88DDB_loc_10089DDB])
loc_10089CB8:
	INC DWORD PTR [offset LEGO1_data + 0xC564]
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC564]
	MOV DWORD PTR [EBP+var_28+0x4],EAX
	TEST EAX, EAX
	JLE loc_10089CF7
	MOV EBX, EAX
	MOV EDI,DWORD PTR [offset LEGO1_idata.m3AC_ReleaseMutex]
loc_10089CD2:
	DEC DWORD PTR [offset LEGO1_data + 0xC564]
	CMP DWORD PTR [offset LEGO1_data + 0xC570],0x00
	JZ loc_10089CE9
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC570]
	PUSH EAX
	CALL_LONG(EDI)
loc_10089CE9:
	PUSH offset LEGO1_data + 0x195A0
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	DEC EBX
	JNZ loc_10089CD2
loc_10089CF7:
	DEC DWORD PTR [EBP+var_28+0x4]
	CMP DWORD PTR [EBP+var_24+0x4],0x00
	JLE loc_10089D35
	MOV EBX,DWORD PTR [EBP+var_20+0x4]
	MOV EDI,DWORD PTR [EBP+var_24+0x4]
	ADD EBX, 0x22
loc_10089D09:
	MOV AX,WORD PTR DS:[EBX]
	TEST AL, 0x02
	JZ loc_10089D2E
	MOV ECX,DWORD PTR [EBP+var_20+0x4]
	DEC DWORD PTR [ECX+0x78]
	TEST AL, 0x01
	JZ loc_10089D21
	CALL_LONG(offset [LEGO1_text.m88120_sub_10089120])
	JMP loc_10089D2E
loc_10089D21:
	MOV EAX,DWORD PTR [EBP+var_20+0x4]
	ADD EAX, 0x60
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
loc_10089D2E:
	DEC EDI
	JNZ loc_10089D09
	CMP DWORD PTR [EBP+var_24+0x4],0x00
loc_10089D35:
	JZ loc_10089D3A
	DEC DWORD PTR [EBP+var_24+0x4]
loc_10089D3A:
	XOR EDI, EDI
	MOV DWORD PTR [EBP+var_8+0x4],EDI
	PUSH EDI
	LEA EDX,DWORD PTR [EBP+var_34+0x4]
	MOV ECX, offset [LEGO1_data.mC7E0_ptr]
	CALL_LONG(offset [LEGO1_text.m88DF0_sub_10089DF0])
	TEST EAX, EAX
	JZ loc_10089D56
	MOV DWORD PTR [EBP+var_2C+0x4],EDI
	JMP loc_10089D5F
loc_10089D56:
	LEA EAX,DWORD PTR [EBP+var_34+0x4]
	PUSH EAX
	CALL_LONG(ESI)
	MOV DWORD PTR [EBP+var_2C+0x4],EAX
loc_10089D5F:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	PUSH offset [LEGO1_text.m88D70_proc_10089D70]
	JMP_LONG(offset [LEGO1_text.m88D6B_proc_10089D6B])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10089DF0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	TEST EDX, EDX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	JZ loc_10089E05
	MOV EDI,DWORD PTR [ESP+arg1+0xC]
	CMP DWORD PTR [EDX],0x02
	JNZ loc_10089E09
	INC EDI
	JMP loc_10089E09
loc_10089E05:
	MOV EDI,DWORD PTR [ESP+arg1+0xC]
loc_10089E09:
	PUSH offset LEGO1_data + 0xC55C
	PUSH offset LEGO1_data + 0x195E0
	CALL_LONG(offset [LEGO1_text.m88180_sub_10089180])
	ADD ESP, 0x08
	TEST EAX, EAX
	JNZ loc_10089E27
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_10089E27:
	MOV EDX, 0x00000001
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m89010_sub_1008A010])
	TEST EAX, EAX
	JNZ loc_10089E5C
	PUSH offset LEGO1_data + 0x195E0
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	PUSH 0x00
	MOV ECX, offset [LEGO1_data.mC778_str]
	PUSH ESI
	XOR EDX, EDX
	CALL_LONG(offset [LEGO1_text.m89350_sub_1008A350])
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_10089E5C:
	MOV EBX,DWORD PTR [EAX+0x04]
	PUSH offset LEGO1_data + 0x195E0
	LEA ECX,DWORD PTR [EBX+0x01]
	MOV DWORD PTR [EAX+0x04],ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	MOV EAX, EDI
	SUB EAX, EBX
	CMP EAX, -0x01
	JNZ loc_10089E88
	PUSH 0x00
	MOV ECX, offset [LEGO1_data.mC7AC_str]
	PUSH ESI
	XOR EDX, EDX
	CALL_LONG(offset [LEGO1_text.m89350_sub_1008A350])
loc_10089E88:
	MOV EAX, 0x00000001
	CMP EBX, EDI
	JG loc_10089E93
	XOR EAX, EAX
loc_10089E93:
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_10089F50()
{
__asm{
	CMP ECX, 0x02
	JNZ loc_10089F5B
	MOV EAX, offset [LEGO1_rdata.m6920_str]
	RET
loc_10089F5B:
	LEA EAX,DWORD PTR [ECX*4+ECX]
	LEA EAX,DWORD PTR [offset LEGO1_data + 0xC5EC+EAX*4+EAX]
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10089F70()
{
	enum{
		arg1217233 = 0x4A4B44,
		arg1217240 = 0x4A4B60,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR ESI, ESI
	PUSH EBP
	MOV EDI, ECX
	MOV EBX, offset [LEGO1_data.mC7E0_ptr]
	TEST BYTE PTR [EDI+0x22],0x11
	JNZ loc_10089F86
	MOV EBX,DWORD PTR [EDI+0x44]
loc_10089F86:
	MOV EBP,DWORD PTR [EBX+0x04]
	TEST EBP, EBP
	JZ loc_1008A004
loc_10089F8D:
	CMP EBP, EDI
	JZ loc_10089FAE
	MOV ESI, EBP
	LEA EAX,DWORD PTR [EBP+arg1217240-0x4A4B20]
	TEST BYTE PTR [EBP+arg1217233-0x4A4B22],0x01
	JZ loc_10089FA3
	MOV ECX, EBP
	CALL_LONG(offset [LEGO1_text.m87DE0_sub_10088DE0])
loc_10089FA3:
	MOV EBP,DWORD PTR [EAX]
	TEST EBP, EBP
	JNZ loc_10089F8D
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10089FAE:
	TEST ESI, ESI
	JZ loc_10089FE2
	TEST BYTE PTR [ESI+0x22],0x01
	JZ loc_10089FC3
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m87DE0_sub_10088DE0])
	MOV ESI, EAX
	JMP loc_10089FC6
loc_10089FC3:
	ADD ESI, 0x40
loc_10089FC6:
	TEST BYTE PTR [EBP+arg1217233-0x4A4B22],0x01
	JZ loc_10089FD9
	MOV ECX, EBP
	CALL_LONG(offset [LEGO1_text.m87DE0_sub_10088DE0])
	MOV EAX,DWORD PTR [EAX]
	MOV DWORD PTR [ESI],EAX
	JMP loc_10089FF7
loc_10089FD9:
	LEA EAX,DWORD PTR [EBP+arg1217240-0x4A4B20]
	MOV EAX,DWORD PTR [EAX]
	MOV DWORD PTR [ESI],EAX
	JMP loc_10089FF7
loc_10089FE2:
	TEST BYTE PTR [EBP+arg1217233-0x4A4B22],0x01
	LEA EAX,DWORD PTR [EBP+arg1217240-0x4A4B20]
	JZ loc_10089FF2
	MOV ECX, EBP
	CALL_LONG(offset [LEGO1_text.m87DE0_sub_10088DE0])
loc_10089FF2:
	MOV EAX,DWORD PTR [EAX]
	MOV DWORD PTR [EBX+0x04],EAX
loc_10089FF7:
	TEST BYTE PTR [EDI+0x22],0x01
	JZ loc_1008A004
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m87DF0_sub_10088DF0])
loc_1008A004:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008A010()
{
__asm{
	PUSH EBX
	PUSH ESI
	LEA ESI,DWORD PTR [ECX+0x10]
	PUSH EDI
	MOV EDI,DWORD PTR [ECX+0x000000D8]
	PUSH EBP
	MOV EBP, EDX
	MOV EBX, ECX
	CALL_LONG(offset [LEGO1_text.m88430_j_GetCurrentThreadId])
	MOV ECX, EDI
	DEC EDI
	TEST ECX, ECX
	JZ loc_1008A03B
loc_1008A02D:
	CMP DWORD PTR [ESI],EAX
	JZ loc_1008A05E
	ADD ESI, 0x08
	MOV ECX, EDI
	DEC EDI
	TEST ECX, ECX
	JNZ loc_1008A02D
loc_1008A03B:
	TEST EBP, EBP
	JZ loc_1008A065
	CMP DWORD PTR [EBX+0x000000D8],0x19
	JNB loc_1008A065
	POP EBP
	MOV DWORD PTR [ESI],EAX
	MOV EAX, ESI
	POP EDI
	MOV DWORD PTR [ESI+0x04],0x00000000
	POP ESI
	INC DWORD PTR [EBX+0x000000D8]
	POP EBX
	RET
loc_1008A05E:
	MOV EAX, ESI
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1008A065:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008A070()
{
__asm{
	MOV EAX,DWORD PTR [ECX+0x000000D8]
	DEC EAX
	MOV DWORD PTR [ECX+0x000000D8],EAX
	LEA EAX,DWORD PTR [EAX*8+ECX]
	MOV ECX,DWORD PTR [EAX+0x10]
	ADD EAX, 0x10
	MOV EAX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [EDX],ECX
	MOV DWORD PTR [EDX+0x04],EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008A090(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC530]
	PUSH ESI
	PUSH EDI
	XOR EDI, EDI
	CMP EAX, EDI
	JNZ loc_1008A0B2
	CALL_LONG(offset [LEGO1_text.m85270_sub_10086270])
	TEST EAX, EAX
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC530]
	JNZ loc_1008A0B2
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1008A0B2:
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
	TEST ESI, ESI
	JNZ loc_1008A0C1
	MOV ESI, 0x00000004
	JMP loc_1008A0C7
loc_1008A0C1:
	ADD ESI, 0x03
	AND ESI, -0x04
loc_1008A0C7:
	TEST BYTE PTR [offset LEGO1_data + 0xC554],0x8
	JZ loc_1008A0D5
	MOV EDI, 0x00000001
loc_1008A0D5:
	PUSH EDI
	PUSH ESI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85DC0_sub_10086DC0])
	MOV EBX, EAX
	TEST EBX, EBX
	JNZ loc_1008A0F7
	PUSH 0x01
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m852E0_sub_100862E0])
	ADD ESP, 0x08
	TEST EAX, EAX
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC530]
	JNZ loc_1008A0D5
loc_1008A0F7:
	MOV EAX, EBX
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008A100(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI,DWORD PTR [ESP+arg2+0x8]
	IMUL EDI,DWORD PTR [ESP+arg1+0x8]
	CMP DWORD PTR [offset LEGO1_data + 0xC530],0x00
	JNZ loc_1008A127
	CALL_LONG(offset [LEGO1_text.m85270_sub_10086270])
	MOV DWORD PTR [offset LEGO1_data + 0xC530], EAX
	TEST EAX, EAX
	JNZ loc_1008A127
	XOR EAX, EAX
	POP EDI
	POP ESI
	RET
loc_1008A127:
	TEST EDI, EDI
	JNZ loc_1008A132
	MOV EDI, 0x00000004
	JMP loc_1008A138
loc_1008A132:
	ADD EDI, 0x03
	AND EDI, -0x04
loc_1008A138:
	PUSH 0x01
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xC530]
	PUSH EDI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85DC0_sub_10086DC0])
	MOV ESI, EAX
	TEST ESI, ESI
	JNZ loc_1008A15B
	PUSH 0x01
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m852E0_sub_100862E0])
	ADD ESP, 0x08
	TEST EAX, EAX
	JNZ loc_1008A138
loc_1008A15B:
	MOV EAX, ESI
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008A160(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg1]
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg2+0x4]
	TEST EDX, EDX
	JNZ loc_1008A178
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	POP ESI
	RET
loc_1008A178:
	TEST ESI, ESI
	JNZ loc_1008A189
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	XOR EAX, EAX
	POP ESI
	RET
loc_1008A189:
	XOR EAX, EAX
	TEST BYTE PTR [offset LEGO1_data + 0xC554],0x8
	JZ loc_1008A199
	MOV EAX, 0x00000001
loc_1008A199:
	TEST ESI, ESI
	JNZ loc_1008A1AC
	MOV ESI, 0x00000004
	PUSH EAX
	PUSH ESI
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m86520_sub_10087520])
	POP ESI
	RET
loc_1008A1AC:
	ADD ESI, 0x03
	PUSH EAX
	AND ESI, -0x04
	PUSH ESI
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m86520_sub_10087520])
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008A1C0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	TEST EAX, EAX
	JZ loc_1008A1CE
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m86380_sub_10087380])
loc_1008A1CE:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008A300(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m86AE0_sub_10087AE0])
	AND EAX, -0x04
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1008A350(DWORD arg1, DWORD arg2)
{
__asm{
	PUSH EBX
	CMP EDX, 0x01
	SBB EBX, EBX
	PUSH ESI
	PUSH EDI
	ADD EBX, 0x02
	MOV EDI, ECX
	OR EBX, 0x00002110
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m52C_MessageBeep])
	MOV ESI,DWORD PTR [offset LEGO1_idata.m534_MessageBoxA]
loc_1008A371:
	PUSH EBX
	PUSH offset [LEGO1_rdata.m6970_str]
	PUSH EDI
	PUSH 0x00
	CALL_LONG(ESI)
	DEC EAX
	CMP EAX, 0x04
	JA loc_1008A389
	JMP_LONG(DWORD PTR [offset LEGO1_text.m893BC_proc_1008A3BC+EAX*4])
loc_1008A389:
	TEST BH,0x20
	JZ loc_1008A39C
	AND EBX, 0xFFFFDFEF
	OR EBX, 0x00001010
	JMP loc_1008A371
loc_1008A39C:
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1008A3D0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	CMP WORD PTR DS:[ESI+0x20],0xBEAD
	JZ loc_1008A3F4
	MOV EDX, 0x0000000A
	XOR ECX, ECX
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	RETN 0x0004
loc_1008A3F4:
	MOV AX,WORD PTR DS:[ESI+0x22]
	TEST AL, 0x02
	JZ loc_1008A422
	TEST AL, 0x01
	JZ loc_1008A415
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88100_sub_10089100])
	TEST EAX, EAX
	JNZ loc_1008A41F
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	RETN 0x0004
loc_1008A415:
	LEA EAX,DWORD PTR [ESI+0x60]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
loc_1008A41F:
	INC DWORD PTR [ESI+0x78]
loc_1008A422:
	MOV AX,WORD PTR DS:[ESI+0x22]
	MOV EDI,DWORD PTR [ESI+0x2C]
	TEST AL, 0x02
	JZ loc_1008A44C
	DEC DWORD PTR [ESI+0x78]
	TEST AL, 0x01
	JZ loc_1008A442
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88120_sub_10089120])
	MOV EAX, EDI
	POP EDI
	POP ESI
	RETN 0x0004
loc_1008A442:
	ADD ESI, 0x60
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
loc_1008A44C:
	MOV EAX, EDI
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1008A460(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	CMP WORD PTR DS:[ESI+0x20],0xBEAD
	JZ loc_1008A484
	MOV EDX, 0x0000000A
	XOR ECX, ECX
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	MOV EAX, 0xFFFFFFFE
	POP EDI
	POP ESI
	RETN 0x0008
loc_1008A484:
	MOV AX,WORD PTR DS:[ESI+0x22]
	TEST AL, 0x02
	JZ loc_1008A4B2
	TEST AL, 0x01
	JZ loc_1008A4A5
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88100_sub_10089100])
	TEST EAX, EAX
	JNZ loc_1008A4AF
	MOV EAX, 0xFFFFFFFE
	POP EDI
	POP ESI
	RETN 0x0008
loc_1008A4A5:
	LEA EAX,DWORD PTR [ESI+0x60]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
loc_1008A4AF:
	INC DWORD PTR [ESI+0x78]
loc_1008A4B2:
	MOV EDX,DWORD PTR [ESP+arg2+0x8]
	PUSH 0x00
	PUSH 0x01
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m89500_sub_1008A500])
	MOV EDI, EAX
	MOV AX,WORD PTR DS:[ESI+0x22]
	TEST AL, 0x02
	JZ loc_1008A4EA
	DEC DWORD PTR [ESI+0x78]
	TEST AL, 0x01
	JZ loc_1008A4E0
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88120_sub_10089120])
	MOV EAX, EDI
	POP EDI
	POP ESI
	RETN 0x0008
loc_1008A4E0:
	ADD ESI, 0x60
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
loc_1008A4EA:
	MOV EAX, EDI
	POP EDI
	POP ESI
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_1008A500(DWORD arg1, DWORD arg2)
{
	enum{
		var_C = -0xC,
		arg2 = 0x8,
		arg1217225 = 0x4A4B24,
	};

__asm{
	SUB ESP, 0x0C
	MOV DWORD PTR [ESP+var_C+0xC],EDX
	PUSH EBX
	PUSH ESI
	CMP DWORD PTR [EDX],0x00
	PUSH EDI
	PUSH EBP
	MOV EDI, ECX
	JNZ loc_1008A523
	CMP DWORD PTR [ESP+arg2+0x1C],0x00
	JNZ loc_1008A523
	XOR BX, BX
	MOV EBP,DWORD PTR [EDI]
	MOV DWORD PTR [EDX+0x04],EDI
	JMP_LONG(offset [LEGO1_text.m89537_loc_1008A537])
loc_1008A523:
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	MOV EBP,DWORD PTR [EAX+0x1C]
	MOV BX,WORD PTR SS:[EBP+arg1217225-0x4A4B22]
	AND BX, 0x7000
	SHR BX, 0x0C
	JMP_LONG(offset [LEGO1_text.m89537_loc_1008A537])
}
}

__declspec(naked) DWORD LEGO1_sub_1008A640()
{
__asm{
	PUSH ESI
	PUSH EDI
	CMP DWORD PTR [EDX],0x00
	MOV EDI, EDX
	MOV ESI, ECX
	JZ loc_1008A650
	XOR EAX, EAX
	POP EDI
	POP ESI
	RET
loc_1008A650:
	LEA EAX,DWORD PTR [ESI+0x20]
	MOV ECX, ESI
	MOV DWORD PTR [EDI],EAX
	CALL_LONG(offset [LEGO1_text.m87A70_sub_10088A70])
	SUB EAX, 0x20
	MOV DWORD PTR [EDI+0x10],EAX
	MOV EAX,DWORD PTR [ESI+0x10]
	MOV DWORD PTR [EDI+0x14],EAX
	TEST EAX, EAX
	JZ loc_1008A67A
	MOV EAX,DWORD PTR [EAX]
	CMP DWORD PTR [EDI],EAX
	JZ loc_1008A67A
	MOV EAX, 0xFFFFFFFE
	POP EDI
	POP ESI
	RET
loc_1008A67A:
	MOV EAX,DWORD PTR [ESI+0x10]
	TEST EAX, EAX
	JZ loc_1008A691
	MOV EAX,DWORD PTR [EAX+0x04]
	AND EAX, 0x00FF0000
	SHR EAX, 0x10
	MOV DWORD PTR [EDI+0x18],EAX
	JMP loc_1008A698
loc_1008A691:
	MOV DWORD PTR [EDI+0x18],0x00000000
loc_1008A698:
	MOV DWORD PTR [EDI+0x0C],0x00000001
	XOR EAX, EAX
	MOV AL,BYTE PTR [ESI+0x16]
	TEST EAX, EAX
	JZ loc_1008A6B5
	CMP EAX, 0x02
	JZ loc_1008A6C4
	MOV EAX, 0xFFFFFFFE
	POP EDI
	POP ESI
	RET
loc_1008A6B5:
	MOV DWORD PTR [EDI+0x08],0x00000004
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	RET
loc_1008A6C4:
	MOV DWORD PTR [EDI+0x08],0x00000002
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1008A6E0(DWORD arg1)
{
	enum{
		r = 0x0,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV EAX,DWORD PTR [EDX]
	PUSH EDI
	MOV ESI, EDX
	MOV EDI, ECX
	TEST EAX, EAX
	JZ loc_1008A71D
	MOV EBX,DWORD PTR [EDI+0x10]
	CMP EBX, EAX
	JNZ loc_1008A6F9
	MOV EDX,DWORD PTR [EDI+0x14]
	JMP loc_1008A770
loc_1008A6F9:
	XOR ECX, ECX
	MOV CL,BYTE PTR [EAX-0x01]
	LEA EDX,DWORD PTR [ECX*8+EAX+0x08]
	CMP DWORD PTR [EDI+0x14],EDX
	JZ loc_1008A70E
	LEA EAX,DWORD PTR [EDI+0x20]
	CMP EAX, EDX
	JA loc_1008A712
loc_1008A70E:
	CMP EBX, EDX
	JNB loc_1008A770
loc_1008A712:
	MOV EAX, 0xFFFFFFFE
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_1008A71D:
	MOV EAX,DWORD PTR [EDI+0x14]
	SUB EAX, EDI
	DEC AX
	MOVZX EBX,AX
	CMP EBX, 0x0000FFFF
	JA FAR loc_1008A7F3
	PUSH 0x00001002
	MOV EDX, EBX
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m86ED0_sub_10087ED0])
	TEST EAX, EAX
	JZ FAR loc_1008A7F3
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m87A70_sub_10088A70])
	DEC EAX
	CMP EAX, EBX
	JB FAR loc_1008A7F3
	LEA EDX,DWORD PTR [EDI+0x20]
	MOV EAX,DWORD PTR [EDI+0x10]
	CMP EDX, EAX
	JA FAR loc_1008A7F3
	CMP DWORD PTR [EDI+0x14],EAX
	JB FAR loc_1008A7F3
loc_1008A770:
	MOV ECX,DWORD PTR [EDI+0x14]
	CMP ECX, EDX
	JNZ loc_1008A77F
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_1008A77F:
	MOV EAX,DWORD PTR [EDI+0x10]
	CMP EAX, EDX
	JNZ loc_1008A796
	MOV DWORD PTR [ESI+0x0C],0x00000000
	SUB ECX, EAX
	XOR EAX, EAX
	MOV DWORD PTR [ESI+0x10],ECX
	JMP loc_1008A7B8
loc_1008A796:
	XOR EAX, EAX
	MOV AL,BYTE PTR [EDX-0x01]
	CMP EAX, 0x7E
	JB loc_1008A7AB
	MOV EAX, 0xFFFFFFFE
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_1008A7AB:
	SHL EAX, 0x03
	ADD EAX, 0x07
	MOV DWORD PTR [ESI+0x10],EAX
	MOV EAX,DWORD PTR [ESP+r+0x10]
loc_1008A7B8:
	XOR ECX, ECX
	MOV DWORD PTR [ESI],EDX
	MOV DWORD PTR [ESI+0x14],ECX
	MOV DWORD PTR [ESI+0x18],ECX
	MOV DWORD PTR [ESI+0x08],0x00000004
	TEST EAX, EAX
	JZ loc_1008A7E8
	MOV ECX,DWORD PTR [ESI+0x04]
	CALL_LONG(offset [LEGO1_text.m89800_sub_1008A800])
	MOV DWORD PTR [ESI+0x0C],EAX
	CMP EAX, -0x01
	JNZ loc_1008A7E8
	MOV EAX, 0xFFFFFFFE
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_1008A7E8:
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_1008A7F3:
	MOV EAX, 0xFFFFFFFE
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_1008A800()
{
__asm{
	PUSH ESI
	XOR EAX, EAX
	MOV AL,BYTE PTR [EDX-0x01]
	MOV EAX,DWORD PTR [EAX*4+ECX+0x00000080]
	MOV ESI, EAX
loc_1008A80F:
	TEST ESI, ESI
	JZ loc_1008A842
	CMP ESI, EDX
	JZ loc_1008A83E
	MOV ESI,DWORD PTR [ESI]
	TEST ESI, ESI
	JZ loc_1008A842
	TEST EAX, EAX
	JZ loc_1008A80F
	MOV EAX,DWORD PTR [EAX]
	TEST EAX, EAX
	JZ loc_1008A80F
	MOV EAX,DWORD PTR [EAX]
	CMP ESI, EAX
	JNZ loc_1008A80F
	MOV EDX, 0x0000000C
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RET
loc_1008A83E:
	XOR EAX, EAX
	POP ESI
	RET
loc_1008A842:
	MOV EAX, 0x00000001
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008A850()
{
__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, EDX
	MOV EDI, ECX
	MOV ECX,DWORD PTR [ESI]
	TEST ECX, ECX
	JZ loc_1008A897
	MOV AX,WORD PTR DS:[ECX-0x02]
	SUB ECX, 0x02
	TEST AL, 0x01
	JZ loc_1008A875
	XOR EDX, EDX
	MOV DX, AX
	AND EDX, 0x00007FFC
	JMP loc_1008A880
loc_1008A875:
	XOR EDX, EDX
	MOV DX, AX
	AND EDX, 0x0000FFFC
loc_1008A880:
	ADD ECX, EDX
	LEA EAX,DWORD PTR [EDI+0x1E]
	CMP EAX, ECX
	JA loc_1008A88E
	CMP DWORD PTR [EDI+0x14],ECX
	JNB loc_1008A8DB
loc_1008A88E:
	MOV EAX, 0xFFFFFFFE
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1008A897:
	MOV EAX,DWORD PTR [EDI+0x14]
	SUB EAX, EDI
	ADD AX, 0x0009
	MOVZX EBX,AX
	CMP EBX, 0x0000FFFF
	JA FAR loc_1008A9BB
	PUSH 0x00001002
	MOV EDX, EBX
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m86ED0_sub_10087ED0])
	TEST EAX, EAX
	JZ FAR loc_1008A9BB
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m87A70_sub_10088A70])
	DEC EAX
	CMP EAX, EBX
	JB FAR loc_1008A9BB
	LEA ECX,DWORD PTR [EDI+0x1E]
	CMP DWORD PTR [EDI+0x14],ECX
loc_1008A8DB:
	JNZ loc_1008A8E3
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1008A8E3:
	LEA EAX,DWORD PTR [ECX+0x02]
	MOV DWORD PTR [ESI],EAX
	MOV AX,WORD PTR DS:[EDI+0x0E]
	AND AX, 0x0007
	CMP AX, 0x0001
	SBB EAX, EAX
	AND EAX, 0x02
	ADD EAX, 0x02
	MOV DWORD PTR [ESI+0x08],EAX
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[ECX]
	AND EAX, 0x01
	MOV DWORD PTR [ESI+0x0C],EAX
	JZ FAR loc_1008A99A
	MOV AX,WORD PTR DS:[ECX]
	XOR EDX, EDX
	MOV DX, AX
	AND AX, 0x8000
	AND EDX, 0x00007FFC
	CMP AX, 0x0001
	MOV EAX, 0x00000000
	ADC EAX, -0x01
	AND EAX, 0x06
	SUB EDX, EAX
	SUB EDX, 0x02
	MOV DWORD PTR [ESI+0x10],EDX
	MOV AX,WORD PTR DS:[ECX]
	TEST AH,0x80
	JZ loc_1008A955
	XOR EDX, EDX
	MOV DX, AX
	AND EDX, 0x00007FFC
	MOV EAX,DWORD PTR [EDX+ECX-0x06]
	MOV DWORD PTR [ESI+0x14],EAX
	JMP loc_1008A95C
loc_1008A955:
	MOV DWORD PTR [ESI+0x14],0x00000000
loc_1008A95C:
	MOV AX,WORD PTR DS:[ECX]
	TEST AH,0x80
	JZ loc_1008A98A
	XOR EDX, EDX
	MOV DX, AX
	AND EDX, 0x00007FFC
	POP EDI
	MOV EAX,DWORD PTR [EDX+ECX-0x06]
	MOV EAX,DWORD PTR [EAX+0x04]
	AND EAX, 0x00FF0000
	SHR EAX, 0x10
	MOV DWORD PTR [ESI+0x18],EAX
	MOV EAX, 0x00000001
	POP ESI
	POP EBX
	RET
loc_1008A98A:
	MOV EAX, 0x00000001
	POP EDI
	MOV DWORD PTR [ESI+0x18],0x00000000
	POP ESI
	POP EBX
	RET
loc_1008A99A:
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[ECX]
	AND EAX, 0x0000FFFC
	POP EDI
	SUB EAX, 0x02
	MOV DWORD PTR [ESI+0x10],EAX
	XOR EAX, EAX
	MOV DWORD PTR [ESI+0x14],EAX
	MOV DWORD PTR [ESI+0x18],EAX
	MOV EAX, 0x00000001
	POP ESI
	POP EBX
	RET
loc_1008A9BB:
	MOV EAX, 0xFFFFFFFE
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1008A9D0(DWORD arg1)
{
	enum{
		r = 0x0,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EAX,DWORD PTR [EDX+0x04]
	PUSH EBP
	MOV BX,WORD PTR DS:[EAX+0x24]
	MOV EDI, EDX
	MOV EAX,DWORD PTR [EDX]
	TEST EAX, EAX
	JZ loc_1008AA08
	MOVZX ECX,BX
	ADD ECX, EAX
	MOV EAX,DWORD PTR [ESI+0x14]
	CMP ECX, EAX
	JZ loc_1008AA59
	LEA EDX,DWORD PTR [ESI+0x20]
	CMP EDX, ECX
	JA loc_1008A9FC
	CMP ECX, EAX
	JBE loc_1008AA59
loc_1008A9FC:
	MOV EAX, 0xFFFFFFFE
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_1008AA08:
	MOV EAX,DWORD PTR [ESI+0x14]
	SUB EAX, ESI
	DEC AX
	MOVZX EBP,AX
	CMP EBP, 0x0000FFFF
	JA FAR loc_1008AAAF
	PUSH 0x00001002
	MOV EDX, EBP
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m86ED0_sub_10087ED0])
	TEST EAX, EAX
	JZ loc_1008AAAF
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m87A70_sub_10088A70])
	DEC EAX
	CMP EAX, EBP
	JB loc_1008AAAF
	MOV EDX,DWORD PTR [ESI+0x10]
	TEST EDX, EDX
	JZ loc_1008AA56
	LEA EAX,DWORD PTR [ESI+0x20]
	CMP EAX, EDX
	JA loc_1008AAAF
	MOVZX ECX,BX
	MOV EAX,DWORD PTR [ESI+0x14]
	SUB EAX, ECX
	CMP EAX, EDX
	JB loc_1008AAAF
loc_1008AA56:
	LEA ECX,DWORD PTR [ESI+0x20]
loc_1008AA59:
	CMP DWORD PTR [ESI+0x14],ECX
	JNZ loc_1008AA67
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_1008AA67:
	XOR EDX, EDX
	MOV DWORD PTR [EDI],ECX
	MOV DWORD PTR [EDI+0x14],EDX
	MOV DWORD PTR [EDI+0x18],EDX
	MOV DWORD PTR [EDI+0x08],0x00000001
	MOVZX EAX,BX
	MOV DWORD PTR [EDI+0x10],EAX
	CMP DWORD PTR [ESP+r+0x14],EDX
	JZ loc_1008AAA3
	PUSH ECX
	MOV EDX,DWORD PTR [EDI+0x04]
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m89AC0_sub_1008AAC0])
	MOV DWORD PTR [EDI+0x0C],EAX
	CMP EAX, -0x01
	JNZ loc_1008AAA3
	MOV EAX, 0xFFFFFFFE
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_1008AAA3:
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_1008AAAF:
	MOV EAX, 0xFFFFFFFE
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1008AAC0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	MOV EAX,DWORD PTR [ECX+0x14]
	PUSH ESI
	MOV EBX, EAX
	MOV SI,WORD PTR DS:[EDX+0x24]
	PUSH EDI
	SUB DX, DX
	MOV EDI,DWORD PTR [ECX+0x10]
	PUSH EBP
	ADD ECX, 0x20
	MOVZX EBP,SI
	SUB EBX, EBP
	SUB EAX, ECX
	DIV SI
	MOV BP, AX
	TEST EDI, EDI
	JZ loc_1008AB14
loc_1008AAE7:
	CMP ECX, EDI
	JA loc_1008AB29
	CMP EBX, EDI
	JB loc_1008AB29
	MOV AX, BP
	DEC BP
	TEST AX, AX
	JZ loc_1008AB29
	SUB DX, DX
	MOV EAX, EDI
	SUB EAX, ECX
	DIV SI
	TEST DX, DX
	JNZ loc_1008AB29
	CMP DWORD PTR [ESP+arg1+0x10],EDI
	JZ loc_1008AB20
	MOV EDI,DWORD PTR [EDI]
	TEST EDI, EDI
	JNZ loc_1008AAE7
loc_1008AB14:
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_1008AB20:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
loc_1008AB29:
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1008AB40(DWORD arg1)
{
	enum{
		var_20 = -0x20,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x20
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR ESI, ESI
	MOV EDI,DWORD PTR [ESP+arg1+0x2C]
	CMP WORD PTR DS:[EDI+0x20],0xBEAD
	JZ loc_1008AB6B
	MOV EDX, 0x0000000A
	XOR ECX, ECX
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x20
	RETN 0x0004
loc_1008AB6B:
	MOV DWORD PTR [ESP+var_20+0x2C],0x00000000
	MOV AX,WORD PTR DS:[EDI+0x22]
	TEST AL, 0x02
	JZ loc_1008ABA2
	TEST AL, 0x01
	JZ loc_1008AB95
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m88100_sub_10089100])
	TEST EAX, EAX
	JNZ loc_1008AB9F
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x20
	RETN 0x0004
loc_1008AB95:
	LEA EAX,DWORD PTR [EDI+0x60]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
loc_1008AB9F:
	INC DWORD PTR [EDI+0x78]
loc_1008ABA2:
	LEA EDX,DWORD PTR [ESP+var_20+0x2C]
	PUSH 0x00
	PUSH 0x00
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m89500_sub_1008A500])
	CMP EAX, -0x01
	MOV EBX, EAX
	JNZ loc_1008ABBD
	MOV ESI, 0x00000001
loc_1008ABBD:
	CMP EBX, 0x01
	JZ loc_1008ABA2
	CMP EBX, -0x01
	JZ loc_1008ABA2
	TEST EBX, EBX
	JNZ loc_1008ABDF
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m89C20_sub_1008AC20])
	TEST EAX, EAX
	JNZ loc_1008ABDB
	MOV EBX, 0xFFFFFFFE
loc_1008ABDB:
	TEST EBX, EBX
	JZ loc_1008ABE4
loc_1008ABDF:
	MOV ESI, 0x00000001
loc_1008ABE4:
	MOV AX,WORD PTR DS:[EDI+0x22]
	TEST AL, 0x02
	JZ loc_1008AC06
	DEC DWORD PTR [EDI+0x78]
	TEST AL, 0x01
	JZ loc_1008ABFC
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m88120_sub_10089120])
	JMP loc_1008AC06
loc_1008ABFC:
	ADD EDI, 0x60
	PUSH EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
loc_1008AC06:
	POP EDI
	CMP ESI, 0x01
	SBB EAX, EAX
	POP ESI
	NEG EAX
	POP EBX
	ADD ESP, 0x20
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_1008AC20()
{
	enum{
		arg1217224 = 0x4A4B20,
	};

__asm{
	PUSH EBX
	MOV EAX, 0x00000001
	XOR BX, BX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	MOV EDI, ECX
loc_1008AC2E:
	CMP BX, 0x03
	JZ loc_1008AC5B
	MOVZX ECX,BX
	LEA EBP,DWORD PTR [ECX*4+EDI]
	MOV ESI,DWORD PTR [EBP+arg1217224-0x4A4B20]
	TEST ESI, ESI
	JZ loc_1008AC5B
loc_1008AC41:
	MOV EDX, EBX
	MOV ECX,DWORD PTR [ESI+0x04]
	CALL_LONG(offset [LEGO1_text.m89C90_sub_1008AC90])
	TEST EAX, EAX
	JZ loc_1008AC63
	MOV ESI,DWORD PTR [ESI+0x08]
	CMP DWORD PTR [EBP+arg1217224-0x4A4B20],ESI
	JNZ loc_1008AC41
	TEST EAX, EAX
	JZ loc_1008AC7C
loc_1008AC5B:
	INC BX
	CMP BX, 0x05
	JB loc_1008AC2E
loc_1008AC63:
	TEST EAX, EAX
	JZ loc_1008AC7C
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m89CD0_sub_1008ACD0])
	TEST EAX, EAX
	JZ loc_1008AC7C
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1008AC7C:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008AC90()
{
__asm{
	MOVZX EDX,DX
	XOR EAX, EAX
	CMP EDX, 0x04
	JA_LONG(offset [LEGO1_text.m89CB6_loc_1008ACB6])
	JMP_LONG(DWORD PTR [offset LEGO1_text.m89CB8_proc_1008ACB8+EDX*4])
}
}

__declspec(naked) DWORD LEGO1_sub_1008ACD0()
{
__asm{
	PUSH EBX
	PUSH ESI
	LEA EBX,DWORD PTR [ECX+0x00000080]
	PUSH EDI
	MOV ESI, ECX
	XOR EDI, EDI
loc_1008ACDD:
	MOV EDX,DWORD PTR [EBX]
	TEST EDX, EDX
	JZ loc_1008ACF7
	MOV EAX,DWORD PTR [EDX]
	TEST EAX, EAX
	JZ loc_1008ACEB
	MOV EDX, EAX
loc_1008ACEB:
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m89800_sub_1008A800])
	CMP EAX, -0x01
	JZ loc_1008AD09
loc_1008ACF7:
	ADD EBX, 0x04
	INC EDI
	CMP EDI, 0x7E
	JB loc_1008ACDD
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1008AD09:
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

