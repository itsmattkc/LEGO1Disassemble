#include "stdafx.h"
#include "LEGO1.h"

#pragma warning (disable:4730)
#pragma warning (disable:4733)
#pragma warning (disable:4799)
#define DB(b) __asm _emit b

__declspec(naked) DWORD __stdcall LEGO1_sub_10099E60(DWORD arg1, DWORD arg2)
{
	enum{
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m98F4B_proc_10099F4B]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x0C
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH 0x10
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_1C+0x4],EAX
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EDI, EAX
	MOV EAX, 0x00000000
	TEST EDI, EDI
	JZ loc_10099EA7
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m98D60_sub_10099D60])
loc_10099EA7:
	MOV ESI,DWORD PTR [EBP+arg2+0x4]
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV DWORD PTR [ESI],EAX
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV ECX, EAX
	MOV EBX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBX+0x0C])
	MOV ECX,DWORD PTR [ESI]
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	PUSH EDX
	MOV DWORD PTR [ECX+0x04],EAX
	MOV EAX,DWORD PTR [ESI]
	MOV ECX,DWORD PTR [EAX+0x04]
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x04])
	TEST EAX, EAX
	JNZ loc_10099F38
	PUSH 0x04
	LEA EAX,DWORD PTR [EBP+var_14+0x4]
	PUSH EAX
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	MOV EBX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EBX+0x04])
	TEST EAX, EAX
	JNZ loc_10099F38
	XOR EDI, EDI
	CMP DWORD PTR [EBP+var_14+0x4],EDI
	JZ loc_10099F36
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	XOR EBX, EBX
	SHL EAX, 0x02
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV ECX,DWORD PTR [ESI]
	MOV DWORD PTR [ECX+0x0C],EAX
	CMP DWORD PTR [EBP+var_14+0x4],EDI
	JBE loc_10099F36
loc_10099F08:
	LEA EAX,DWORD PTR [EBP+var_1C+0x4]
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	PUSH EAX
	PUSH ECX
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	CALL_LONG(offset [LEGO1_text.m98E60_sub_10099E60])
	TEST EAX, EAX
	JNZ loc_10099F38
	MOV EAX,DWORD PTR [ESI]
	ADD EDI, 0x04
	INC EBX
	INC DWORD PTR [EAX+0x08]
	MOV ECX,DWORD PTR [EBP+var_1C+0x4]
	MOV EAX,DWORD PTR [ESI]
	MOV EDX,DWORD PTR [EAX+0x0C]
	MOV DWORD PTR [EDI+EDX-0x04],ECX
	CMP DWORD PTR [EBP+var_14+0x4],EBX
	JA loc_10099F08
loc_10099F36:
	XOR EAX, EAX
loc_10099F38:
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP EDI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009A020(DWORD arg1, DWORD arg2)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x08
	MOV DWORD PTR [ESP+var_4+0x8],ECX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EDI,DWORD PTR [ESP+arg2+0x14]
	PUSH EBP
	MOV ESI,DWORD PTR [ESP+arg1+0x18]
	MOV ECX,DWORD PTR [EDI+0x04]
	TEST ECX, ECX
	JZ loc_1009A04E
	PUSH ESI
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x08])
	TEST EAX, EAX
	JZ loc_1009A04E
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0008
loc_1009A04E:
	MOV EAX,DWORD PTR [EDI+0x08]
	PUSH 0x04
	MOV ECX, ESI
	MOV DWORD PTR [ESP+var_8+0x1C],EAX
	LEA EAX,DWORD PTR [ESP+var_8+0x1C]
	MOV EBX,DWORD PTR [ESI]
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x08])
	TEST EAX, EAX
	JNZ loc_1009A08D
	XOR EBX, EBX
	XOR EBP, EBP
loc_1009A06B:
	CMP DWORD PTR [EDI+0x08],EBP
	JBE loc_1009A08B
	MOV EAX,DWORD PTR [EDI+0x0C]
	MOV ECX,DWORD PTR [EBX+EAX]
	PUSH ECX
	PUSH ESI
	MOV ECX,DWORD PTR [ESP+var_4+0x20]
	CALL_LONG(offset [LEGO1_text.m99020_sub_1009A020])
	TEST EAX, EAX
	JNZ loc_1009A08D
	ADD EBX, 0x04
	INC EBP
	JMP loc_1009A06B
loc_1009A08B:
	XOR EAX, EAX
loc_1009A08D:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009A0A0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
		arg1217223 = 0x4A4B1C,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	PUSH EBP
	XOR EDI, EDI
	XOR EBP, EBP
	MOV EBX,DWORD PTR [ESP+arg1+0x10]
loc_1009A0AE:
	CMP DWORD PTR [EBX+0x08],EDI
	JBE loc_1009A0C8
	MOV EAX,DWORD PTR [EBX+0x0C]
	ADD EBP, 0x04
	INC EDI
	MOV ECX,DWORD PTR [EBP+EAX+arg1217223-0x4A4B20]
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m990A0_sub_1009A0A0])
	JMP loc_1009A0AE
loc_1009A0C8:
	TEST EBX, EBX
	JZ loc_1009A0D4
	PUSH 0x01
	MOV EAX,DWORD PTR [EBX]
	MOV ECX, EBX
	CALL_LONG(DWORD PTR [EAX])
loc_1009A0D4:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_1009A0F0()
{
__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, 0x00000003
	MOV EBX, ECX
	MOV EDI, ECX
loc_1009A0FC:
	MOV ECX, EBX
	ADD EBX, 0x14
	CALL_LONG(offset [LEGO1_text.m1C170_sub_1001D170])
	DEC ESI
	JNS loc_1009A0FC
	MOV EBX, EDI
	MOV ESI, 0x00000004
loc_1009A110:
	MOV EAX,DWORD PTR [EBX]
	MOV ECX, EBX
	ADD EBX, 0x14
	CALL_LONG(DWORD PTR [EAX+0x2C])
	DEC ESI
	JNZ loc_1009A110
	MOV EAX, EDI
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009A140(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg1217223 = 0x4A4B1C,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	MOV EAX,DWORD PTR [ECX]
	PUSH EBP
	MOV EDI, ECX
	PUSH ESI
	CALL_LONG(DWORD PTR [EAX+0x00000088])
	LEA ECX,DWORD PTR [EDI+0x14]
	MOV EBX,DWORD PTR [ESP+arg1+0x14]
	PUSH EBX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x00000088])
	XOR EDX, EDX
	MOV EAX,DWORD PTR [ESP+arg2+0x14]
	MOV ECX,DWORD PTR [ESP+arg3+0x14]
	JMP loc_1009A173
loc_1009A16F:
	FSTP DWORD PTR [EDX+EBP+arg1217223-0x4A4B20]
loc_1009A173:
	MOV EBP,DWORD PTR [EAX+0x04]
	ADD EDX, 0x04
	CMP EDX, 0x0C
	FLD DWORD PTR [EDX+EBP+arg1217223-0x4A4B20]
	MOV EBP,DWORD PTR [ESI+0x04]
	FSUB DWORD PTR [EDX+EBP+arg1217223-0x4A4B20]
	MOV EBP,DWORD PTR [EBX+0x04]
	FMUL DWORD PTR [offset LEGO1_rdata + 0x7794]
	FLD DWORD PTR [EDX+EBP+arg1217223-0x4A4B20]
	FMUL DWORD PTR [offset LEGO1_rdata + 0x7798]
	MOV EBP,DWORD PTR [ECX+0x04]
	FCOMPP
	FSUB DWORD PTR [EDX+EBP+arg1217223-0x4A4B20]
	MOV EBP,DWORD PTR [EDI+0x2C]
	FSTP DWORD PTR [EDX+EBP+arg1217223-0x4A4B20]
	MOV EBP,DWORD PTR [ESI+0x04]
	FLD DWORD PTR [EDX+EBP+arg1217223-0x4A4B20]
	MOV EBP,DWORD PTR [EAX+0x04]
	FSUB DWORD PTR [EDX+EBP+arg1217223-0x4A4B20]
	MOV EBP,DWORD PTR [ECX+0x04]
	FMUL DWORD PTR [offset LEGO1_rdata + 0x7798]
	FADD DWORD PTR [EDX+EBP+arg1217223-0x4A4B20]
	MOV EBP,DWORD PTR [EBX+0x04]
	FADD DWORD PTR [EDX+EBP+arg1217223-0x4A4B20]
	MOV EBP,DWORD PTR [EDI+0x40]
	JL loc_1009A16F
	FSTP DWORD PTR [EDX+EBP+arg1217223-0x4A4B20]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0010
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009A1E0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_30 = -0x30,
		var_2C = -0x2C,
		var_28 = -0x28,
		var_24 = -0x24,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	SUB ESP, 0x2C
	PUSH ESI
	MOV EDX,DWORD PTR [EAX+0x04]
	MOV ESI, ECX
	MOV EAX, offset [LEGO1_rdata.m518_ptr]
	LEA ECX,DWORD PTR [EDX+0x30]
	MOV DWORD PTR [ESP+var_1C+0x30],EAX
	MOV DWORD PTR [ESP+var_18+0x30],ECX
	MOV DWORD PTR [ESP+var_10+0x30],EDX
	LEA ECX,DWORD PTR [EDX+0x10]
	ADD EDX, 0x20
	MOV DWORD PTR [ESP+var_14+0x30],EAX
	MOV DWORD PTR [ESP+var_4+0x30],ECX
	FLD DWORD PTR [ESP+arg1+0x30]
	FCOM QWORD PTR [offset LEGO1_rdata + 0x77A0]
	MOV DWORD PTR [ESP+var_8+0x30],EAX
	MOV DWORD PTR [ESP+var_20+0x30],EDX
	MOV DWORD PTR [ESP+var_24+0x30],EAX
	FSTP QWORD PTR [ESP+var_2C+0x30]
	FNSTSW AX
	TEST AH,0x41
	JZ loc_1009A252
	MOV EAX,DWORD PTR [ESI+0x04]
	LEA ECX,DWORD PTR [ESP+var_1C+0x30]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_rdata.m538_ptr])
	MOV EAX,DWORD PTR [ESI+0x18]
	LEA ECX,DWORD PTR [ESP+var_28+0x34]
	MOV ESI,DWORD PTR [ESP+var_28+0x34]
	PUSH EAX
	CALL_LONG(DWORD PTR [ESI+0x20])
	JMP FAR loc_1009A369
loc_1009A252:
	FLD QWORD PTR [ESP+var_30+0x34]
	FCOMP QWORD PTR [offset LEGO1_rdata + 0x77A8]
	FNSTSW AX
	TEST AH,0x01
	JNZ loc_1009A2DE
	MOV EAX,DWORD PTR [ESI+0x04]
	LEA ECX,DWORD PTR [ESP+var_20+0x34]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_rdata.m538_ptr])
	LEA EAX,DWORD PTR [ESI+0x14]
	LEA ECX,DWORD PTR [ESP+var_20+0x34]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+var_1C+0x34]
	CALL_LONG(DWORD PTR [EAX+0x48])
	LEA ECX,DWORD PTR [ESI+0x28]
	MOV EAX,DWORD PTR [ESP+var_20+0x34]
	PUSH ECX
	LEA ECX,DWORD PTR [ESP+var_1C+0x34]
	CALL_LONG(DWORD PTR [EAX+0x48])
	LEA ECX,DWORD PTR [ESI+0x3C]
	MOV EAX,DWORD PTR [ESP+var_20+0x34]
	PUSH ECX
	LEA ECX,DWORD PTR [ESP+var_1C+0x34]
	CALL_LONG(DWORD PTR [EAX+0x48])
	XOR ECX, ECX
	JMP loc_1009A2A6
loc_1009A2A2:
	FSTP DWORD PTR [ECX+EDX-0x04]
loc_1009A2A6:
	MOV EAX,DWORD PTR [ESI+0x2C]
	MOV EDX,DWORD PTR [ESI+0x40]
	ADD ECX, 0x04
	CMP ECX, 0x0C
	FLD DWORD PTR [ECX+EAX-0x04]
	FMUL DWORD PTR [offset LEGO1_rdata + 0x7798]
	FLD DWORD PTR [ECX+EDX-0x04]
	FMUL DWORD PTR [offset LEGO1_rdata + 0x7794]
	MOV EAX,DWORD PTR [ESI+0x18]
	MOV EDX,DWORD PTR [ESP+var_24+0x34]
	FADDP ST(1),ST
	FADD DWORD PTR [ECX+EAX-0x04]
	JL loc_1009A2A2
	FSTP DWORD PTR [ECX+EDX-0x04]
	JMP FAR loc_1009A369
loc_1009A2DE:
	FLD DWORD PTR [ESP+r+0x34]
	FMUL DWORD PTR [ESP+r+0x34]
	XOR ECX, ECX
	FST DWORD PTR [ESP+var_10+0x34]
	FMUL DWORD PTR [ESP+r+0x34]
	FSTP DWORD PTR [ESP+var_30+0x34]
	JMP loc_1009A2FA
loc_1009A2F6:
	FSTP DWORD PTR [ECX+EAX-0x04]
loc_1009A2FA:
	MOV EAX,DWORD PTR [ESI+0x18]
	MOV EDX,DWORD PTR [ESI+0x40]
	ADD ECX, 0x04
	CMP ECX, 0x0C
	FLD DWORD PTR [ECX+EAX-0x04]
	FMUL DWORD PTR [ESP+r+0x34]
	FLD DWORD PTR [ECX+EDX-0x04]
	FMUL DWORD PTR [ESP+var_30+0x34]
	MOV EAX,DWORD PTR [ESI+0x2C]
	MOV EDX,DWORD PTR [ESI+0x04]
	FADDP ST(1),ST
	FLD DWORD PTR [ECX+EAX-0x04]
	FMUL DWORD PTR [ESP+var_10+0x34]
	MOV EAX,DWORD PTR [ESP+var_1C+0x34]
	FADDP ST(1),ST
	FADD DWORD PTR [ECX+EDX-0x04]
	FSTP DWORD PTR [ECX+EAX-0x04]
	MOV EDX,DWORD PTR [ESI+0x2C]
	MOV EAX,DWORD PTR [ESI+0x40]
	FLD DWORD PTR [ECX+EDX-0x04]
	FMUL DWORD PTR [ESP+r+0x34]
	MOV EDX,DWORD PTR [ESI+0x18]
	FMUL DWORD PTR [offset LEGO1_rdata + 0x7798]
	FLD DWORD PTR [ECX+EAX-0x04]
	FMUL DWORD PTR [ESP+var_10+0x34]
	MOV EAX,DWORD PTR [ESP+var_24+0x34]
	FMUL DWORD PTR [offset LEGO1_rdata + 0x7794]
	FADDP ST(1),ST
	FADD DWORD PTR [ECX+EDX-0x04]
	JL loc_1009A2F6
	FSTP DWORD PTR [ECX+EAX-0x04]
loc_1009A369:
	CMP DWORD PTR [ESP+arg3+0x34],0x00
	JZ loc_1009A388
	LEA EAX,DWORD PTR [ESP+var_30+0x34]
	LEA ECX,DWORD PTR [ESP+var_28+0x34]
	MOV ESI,DWORD PTR [ESP+var_28+0x34]
	PUSH EAX
	MOV DWORD PTR [ESP+var_2C+0x34],0xBF800000
	CALL_LONG(DWORD PTR [ESI+0x5C])
loc_1009A388:
	LEA ECX,DWORD PTR [ESP+var_28+0x34]
	MOV EAX,DWORD PTR [ESP+var_28+0x34]
	CALL_LONG(DWORD PTR [EAX+0x40])
	FCOM DWORD PTR [offset LEGO1_rdata + 0x77B4]
	FSTP DWORD PTR [ESP+var_30+0x34]
	FNSTSW AX
	TEST AH,0x41
	JNZ FAR loc_1009A458
	FLD DWORD PTR [ESP+var_30+0x34]
	FSQRT
	FCOM DWORD PTR [offset LEGO1_rdata + 0x77B4]
	FSTP DWORD PTR [ESP+var_30+0x34]
	FNSTSW AX
	TEST AH,0x41
	JNZ FAR loc_1009A458
	LEA EAX,DWORD PTR [ESP+var_30+0x34]
	LEA ECX,DWORD PTR [ESP+var_28+0x34]
	MOV ESI,DWORD PTR [ESP+var_28+0x34]
	PUSH EAX
	CALL_LONG(DWORD PTR [ESI+0x14])
	MOV ECX,DWORD PTR [ESP+var_24+0x34]
	MOV EAX,DWORD PTR [ESP+arg2+0x34]
	MOV ESI,DWORD PTR [ESP+var_18+0x34]
	PUSH ECX
	MOV EDX,DWORD PTR [EAX+0x04]
	LEA ECX,DWORD PTR [ESP+var_14+0x34]
	PUSH EDX
	CALL_LONG(DWORD PTR [ESI+0x74])
	LEA ECX,DWORD PTR [ESP+var_18+0x34]
	MOV ESI,DWORD PTR [ESP+var_18+0x34]
	CALL_LONG(DWORD PTR [ESI+0x40])
	FCOM DWORD PTR [offset LEGO1_rdata + 0x77B4]
	FSTP DWORD PTR [ESP+var_30+0x34]
	FNSTSW AX
	TEST AH,0x41
	JNZ loc_1009A44C
	FLD DWORD PTR [ESP+var_30+0x34]
	FSQRT
	FCOM DWORD PTR [offset LEGO1_rdata + 0x77B4]
	FSTP DWORD PTR [ESP+var_30+0x34]
	FNSTSW AX
	TEST AH,0x41
	JNZ loc_1009A44C
	LEA EAX,DWORD PTR [ESP+var_30+0x34]
	LEA ECX,DWORD PTR [ESP+var_18+0x34]
	MOV ESI,DWORD PTR [ESP+var_18+0x34]
	PUSH EAX
	CALL_LONG(DWORD PTR [ESI+0x14])
	MOV ECX,DWORD PTR [ESP+var_14+0x34]
	MOV EAX,DWORD PTR [ESP+var_24+0x34]
	MOV ESI,DWORD PTR [ESP+var_C+0x34]
	PUSH ECX
	LEA ECX,DWORD PTR [ESP+var_8+0x34]
	PUSH EAX
	CALL_LONG(DWORD PTR [ESI+0x74])
	XOR EAX, EAX
	POP ESI
	ADD ESP, 0x2C
	RETN 0x0010
loc_1009A44C:
	MOV EAX, 0xFFFFFFFF
	POP ESI
	ADD ESP, 0x2C
	RETN 0x0010
loc_1009A458:
	MOV EAX, 0xFFFFFFFF
	POP ESI
	ADD ESP, 0x2C
	RETN 0x0010
}
}

__declspec(naked) DWORD LEGO1_sub_1009A470()
{
__asm{
	XOR EAX, EAX
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m77B8_ptr]
	MOV DWORD PTR [ECX+0x04],EAX
	MOV DWORD PTR [ECX+0x08],EAX
	MOV DWORD PTR [ECX+0x0C],EAX
	MOV DWORD PTR [ECX+0x10],EAX
	MOV DWORD PTR [ECX+0x14],EAX
	MOV DWORD PTR [ECX+0x18],EAX
	MOV DWORD PTR [ECX+0x1C],EAX
	MOV DWORD PTR [ECX+0x20],EAX
	MOV EAX, ECX
	RET
}
}

__declspec(naked) DWORD LEGO1_loc_1009A4C0()
{
__asm{
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m77B8_ptr]
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009A4D0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	CMP DWORD PTR [ECX+0x04],EAX
	JNZ loc_1009A4DF
	MOV EAX,DWORD PTR [ECX+0x10]
	RETN 0x0004
loc_1009A4DF:
	CMP DWORD PTR [ECX+0x08],EAX
	JNZ loc_1009A4EA
	MOV EAX,DWORD PTR [ECX+0x18]
	RETN 0x0004
loc_1009A4EA:
	XOR EAX, EAX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009A4F0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	CMP DWORD PTR [ECX+0x04],EAX
	JNZ loc_1009A4FF
	MOV EAX,DWORD PTR [ECX+0x0C]
	RETN 0x0004
loc_1009A4FF:
	CMP DWORD PTR [ECX+0x08],EAX
	JNZ loc_1009A50A
	MOV EAX,DWORD PTR [ECX+0x14]
	RETN 0x0004
loc_1009A50A:
	XOR EAX, EAX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009A510(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	CMP DWORD PTR [ECX+0x04],EAX
	JNZ loc_1009A51F
	MOV EAX,DWORD PTR [ECX+0x20]
	RETN 0x0004
loc_1009A51F:
	MOV EAX,DWORD PTR [ECX+0x1C]
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009A530(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	CMP DWORD PTR [ECX+0x08],EAX
	JNZ loc_1009A53F
	MOV EAX,DWORD PTR [ECX+0x20]
	RETN 0x0004
loc_1009A53F:
	MOV EAX,DWORD PTR [ECX+0x1C]
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_1009A550()
{
__asm{
	XOR EAX, EAX
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m77C0_ptr]
	MOV DWORD PTR [ECX+0x08],EAX
	MOV BYTE PTR [ECX+0x04],AL
	MOV EAX, ECX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009A590()
{
__asm{
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m77C0_ptr]
	TEST EAX, EAX
	JZ loc_1009A5A6
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009A5A6:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009A5B0()
{
__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR ESI, ESI
	CMP BYTE PTR [ECX+0x04],0x00
	JBE loc_1009A624
loc_1009A5BB:
	MOV EBX,DWORD PTR [ECX+0x08]
	XOR EDX, EDX
	MOV DL,BYTE PTR [ECX+0x04]
	LEA EAX,DWORD PTR [ESI*4+EBX]
	SUB EDX, ESI
	MOV EDI,DWORD PTR [EAX]
	CMP EDX, 0x01
	JNZ loc_1009A5D3
	MOV EAX,DWORD PTR [EBX]
	JMP loc_1009A5D6
loc_1009A5D3:
	MOV EAX,DWORD PTR [EAX+0x04]
loc_1009A5D6:
	MOV EBX,DWORD PTR [EAX+0x1C]
	MOV EDX,DWORD PTR [EDI+0x1C]
	CMP EBX, EDX
	JNZ loc_1009A5EE
	MOV DWORD PTR [EDI+0x04],ECX
	MOV DWORD PTR [EAX+0x08],ECX
	MOV DWORD PTR [EDI+0x0C],EAX
	MOV DWORD PTR [EAX+0x18],EDI
	JMP loc_1009A61A
loc_1009A5EE:
	CMP DWORD PTR [EAX+0x20],EDX
	JNZ loc_1009A5FE
	MOV DWORD PTR [EDI+0x04],ECX
	MOV DWORD PTR [EAX+0x04],ECX
	MOV DWORD PTR [EDI+0x0C],EAX
	JMP loc_1009A617
loc_1009A5FE:
	CMP DWORD PTR [EDI+0x20],EBX
	MOV DWORD PTR [EDI+0x08],ECX
	JNZ loc_1009A611
	MOV DWORD PTR [EAX+0x08],ECX
	MOV DWORD PTR [EDI+0x14],EAX
	MOV DWORD PTR [EAX+0x18],EDI
	JMP loc_1009A61A
loc_1009A611:
	MOV DWORD PTR [EAX+0x04],ECX
	MOV DWORD PTR [EDI+0x14],EAX
loc_1009A617:
	MOV DWORD PTR [EAX+0x10],EDI
loc_1009A61A:
	INC ESI
	XOR EAX, EAX
	MOV AL,BYTE PTR [ECX+0x04]
	CMP EAX, ESI
	JG loc_1009A5BB
loc_1009A624:
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009A630()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m996A3_proc_1009A6A3]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.m99470_sub_1009A470])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	LEA ECX,DWORD PTR [ESI+0x28]
	LEA EAX,DWORD PTR [ESI+0x30]
	MOV DWORD PTR [ESI+0x2C],EAX
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m77F4_ptr]
	MOV WORD PTR DS:[ESI+0x24],0x0000
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m288_ptr]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m488_ptr]
	CALL_LONG(DWORD PTR [offset LEGO1_rdata.m4B4_ptr])
	MOV DWORD PTR [ESI+0x3C],0x00000000
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV EAX, ESI
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009A719()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m994C0_loc_1009A4C0])
}
}

__declspec(naked) DWORD LEGO1_sub_1009A730()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m997BF_proc_1009A7BF]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	XOR EBX, EBX
	CALL_LONG(offset [LEGO1_text.m99550_sub_1009A550])
	LEA ECX,DWORD PTR [ESI+0x14]
	LEA EAX,DWORD PTR [ESI+0x1C]
	MOV DWORD PTR [EBP+var_8+0x4],EBX
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m288_ptr]
	MOV DWORD PTR [ESI+0x18],EAX
	LEA EAX,DWORD PTR [ESI+0x38]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m1E8_ptr]
	MOV DWORD PTR [ESI+0x34],EAX
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m77F8_ptr]
	MOV BYTE PTR [ESI+0x0D],BL
	MOV DWORD PTR [ESI+0x10],EBX
	MOV DWORD PTR [ESI+0x30],offset [LEGO1_rdata.m288_ptr]
	MOV DWORD PTR [ESI+0x30],offset [LEGO1_rdata.m488_ptr]
	CALL_LONG(DWORD PTR [offset LEGO1_rdata.m214_ptr])
	MOV DWORD PTR [ESI+0x2C],EBX
	MOV BYTE PTR [ESI+0x0C],BL
	MOV EAX, ESI
	MOV BYTE PTR [ESI+0x48],BL
	MOV DWORD PTR [ESI+0x4C],EBX
	MOV DWORD PTR [ESI+0x50],EBX
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP ESI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP EBX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_loc_1009A800()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m998AA_proc_1009A8AA]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m77F8_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	TEST EAX, EAX
	JZ loc_1009A845
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV DWORD PTR [EAX+0x08],0x00000000
loc_1009A845:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EAX+0x10]
	TEST EAX, EAX
	JZ loc_1009A858
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009A858:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EAX+0x2C]
	TEST EAX, EAX
	JZ loc_1009A86B
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009A86B:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EAX+0x4C]
	TEST EAX, EAX
	JZ loc_1009A87E
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009A87E:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EAX+0x50]
	TEST EAX, EAX
	JZ loc_1009A891
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009A891:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m998B4_sub_1009A8B4])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009A8B4()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m99590_sub_1009A590])
}
}

__declspec(naked) DWORD LEGO1_sub_1009AEA0()
{
	enum{
		var_4C = -0x4C,
		var_48 = -0x48,
		var_44 = -0x44,
		var_40 = -0x40,
		var_3C = -0x3C,
		var_34 = -0x34,
		var_30 = -0x30,
		var_2C = -0x2C,
		var_28 = -0x28,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
		arg1217227 = 0x4A4B2C,
	};

__asm{
	SUB ESP, 0x48
	LEA EAX,DWORD PTR [ESP+var_3C+0x48]
	PUSH EBX
	MOV DWORD PTR [ESP+var_40+0x4C],EAX
	PUSH ESI
	MOV DWORD PTR [ESP+var_44+0x50],offset [LEGO1_rdata.m488_ptr]
	PUSH EDI
	PUSH EBP
	MOV AL,BYTE PTR [ECX+0x04]
	MOV EDI, ECX
	XOR EBP, EBP
	CMP AL, 0x03
	JNB loc_1009AECF
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x48
	RET
loc_1009AECF:
	XOR ECX, ECX
	XOR EBX, EBX
	MOV CL, AL
	SHL ECX, 0x02
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [ESP+var_48+0x5C],EAX
	MOV DWORD PTR [ESP+var_30+0x5C],EBX
	ADD ESP, 0x04
	CMP BYTE PTR [EDI+0x04],BL
	JBE loc_1009AF14
	MOV ESI, EAX
loc_1009AEF0:
	PUSH EDI
	MOV EAX,DWORD PTR [EDI+0x08]
	MOV ECX,DWORD PTR [EBX+EAX]
	ADD EBX, 0x04
	ADD ESI, 0x04
	CALL_LONG(offset [LEGO1_text.m99510_sub_1009A510])
	MOV DWORD PTR [ESI-0x04],EAX
	XOR EAX, EAX
	INC DWORD PTR [ESP+var_30+0x58]
	MOV AL,BYTE PTR [EDI+0x04]
	CMP EAX,DWORD PTR [ESP+var_30+0x58]
	JG loc_1009AEF0
loc_1009AF14:
	MOV EBX, 0x00000002
	CMP BYTE PTR [EDI+0x04],BL
	JBE FAR loc_1009B077
	MOV ESI,DWORD PTR [ESP+var_48+0x58]
	ADD ESI, 0x08
loc_1009AF29:
	LEA EAX,DWORD PTR [ESP+var_28+0x58]
	LEA ECX,DWORD PTR [ESP+var_C+0x58]
	MOV DWORD PTR [ESP+var_2C+0x58],EAX
	MOV DWORD PTR [ESP+var_10+0x58],ECX
	MOV DWORD PTR [ESP+var_30+0x58],offset [LEGO1_rdata.m488_ptr]
	MOV DWORD PTR [ESP+var_14+0x58],offset [LEGO1_rdata.m488_ptr]
	MOV EDX,DWORD PTR [ESI]
	LEA ECX,DWORD PTR [ESP+var_30+0x58]
	PUSH EDX
	CALL_LONG(DWORD PTR [offset LEGO1_rdata.m510_ptr])
	MOV ECX,DWORD PTR [ESI-0x04]
	MOV EAX,DWORD PTR [ESP+var_34+0x5C]
	PUSH ECX
	LEA ECX,DWORD PTR [ESP+var_30+0x5C]
	CALL_LONG(DWORD PTR [EAX+0x54])
	MOV ECX,DWORD PTR [ESI-0x08]
	MOV EAX,DWORD PTR [ESP+var_18+0x5C]
	PUSH ECX
	LEA ECX,DWORD PTR [ESP+var_14+0x5C]
	CALL_LONG(DWORD PTR [EAX+0x00000088])
	MOV ECX,DWORD PTR [ESI-0x04]
	MOV EAX,DWORD PTR [ESP+var_18+0x5C]
	PUSH ECX
	LEA ECX,DWORD PTR [ESP+var_14+0x5C]
	CALL_LONG(DWORD PTR [EAX+0x54])
	MOV ECX,DWORD PTR [ESP+var_30+0x5C]
	MOV EDX,DWORD PTR [ESP+var_14+0x5C]
	MOV EAX,DWORD PTR [ESP+var_48+0x5C]
	PUSH ECX
	LEA ECX,DWORD PTR [ESP+var_44+0x5C]
	PUSH EDX
	CALL_LONG(DWORD PTR [EAX+0x74])
	MOV ECX,DWORD PTR [ESP+var_44+0x5C]
	MOV EAX,DWORD PTR [ESP+var_44+0x5C]
	ADD ECX, 0x04
	ADD EAX, 0x08
	MOV EDX,DWORD PTR [ESP+var_44+0x5C]
	FLD DWORD PTR [EDX]
	FMUL DWORD PTR [EDX]
	FLD DWORD PTR [ECX]
	FMUL DWORD PTR [ECX]
	FADDP ST(1),ST
	FLD DWORD PTR [EAX]
	FMUL DWORD PTR [EAX]
	FADDP ST(1),ST
	FCOM DWORD PTR [offset LEGO1_rdata + 0x77E0]
	FSTP DWORD PTR [ESP+var_20+0x5C]
	FNSTSW AX
	TEST AH,0x01
	JNZ FAR loc_1009B066
	FLD DWORD PTR [ESP+var_20+0x5C]
	FSQRT
	LEA ECX,DWORD PTR [ESP+var_48+0x5C]
	LEA EAX,DWORD PTR [ESP+var_1C+0x5C]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+var_44+0x5C]
	FSTP DWORD PTR [ESP+var_18+0x5C]
	CALL_LONG(DWORD PTR [EAX+0x68])
	MOV EAX,DWORD PTR [ESP+var_44+0x5C]
	TEST EBP, EBP
	JZ loc_1009B02B
	PUSH EAX
	MOV ECX,DWORD PTR [EDI+0x18]
	MOV EAX,DWORD PTR [ESP+var_44+0x5C]
	PUSH ECX
	LEA ECX,DWORD PTR [ESP+var_40+0x5C]
	CALL_LONG(DWORD PTR [EAX+0x18])
	FCOMP QWORD PTR [offset LEGO1_rdata + 0x77E8]
	FNSTSW AX
	TEST AH,0x01
	JZ loc_1009B066
	MOV EAX,DWORD PTR [ESP+var_4C+0x5C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	MOV EAX, 0xFFFFFFFE
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x48
	RET
loc_1009B02B:
	MOV ECX,DWORD PTR [EDI+0x18]
	MOV EDX,DWORD PTR [EAX]
	MOV DWORD PTR [ECX],EDX
	MOV ECX,DWORD PTR [EDI+0x18]
	MOV EAX,DWORD PTR [ESP+var_44+0x5C]
	MOV EDX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [ECX+0x04],EDX
	MOV ECX,DWORD PTR [EDI+0x18]
	MOV EAX,DWORD PTR [ESP+var_44+0x5C]
	MOV EDX,DWORD PTR [EAX+0x08]
	LEA EAX,DWORD PTR [ESP+var_48+0x5C]
	PUSH EAX
	MOV DWORD PTR [ECX+0x08],EDX
	MOV EBP,DWORD PTR [EDI+0x18]
	MOV ECX,DWORD PTR [ESI]
	PUSH ECX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x38])
	FCHS
	FSTP DWORD PTR [EBP+arg1217227-0x4A4B20]
	MOV EBP, 0x00000001
loc_1009B066:
	ADD ESI, 0x04
	INC EBX
	XOR EAX, EAX
	MOV AL,BYTE PTR [EDI+0x04]
	CMP EAX, EBX
	JG FAR loc_1009AF29
loc_1009B077:
	CMP DWORD PTR [ESP+var_4C+0x5C],0x00
	JZ loc_1009B08B
	MOV EAX,DWORD PTR [ESP+var_4C+0x5C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009B08B:
	CMP EBP, 0x01
	POP EBP
	SBB EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x48
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009B0A0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m9A101_proc_1009B101]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.m9C490_sub_1009D490])
	XOR EAX, EAX
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m7800_ptr]
	MOV DWORD PTR [ESI+0x00000884],EAX
	MOV DWORD PTR [ESI+0x00000888],EAX
	MOV DWORD PTR [ESI+0x0000088C],EAX
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR [ESI+0x00000880],EAX
	MOV DWORD PTR FS:[0x00000000],ECX
	MOV EAX, ESI
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009B140()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m9A189_proc_1009B189]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m7800_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	CALL_LONG(offset [LEGO1_text.m9A210_sub_1009B210])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m9A193_sub_1009B193])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009B193()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m9C530_loc_1009D530])
}
}

__declspec(naked) DWORD LEGO1_sub_1009B210()
{
__asm{
	PUSH ESI
	PUSH EDI
	MOV EAX,DWORD PTR [ECX+0x00000888]
	MOV ESI, ECX
	TEST EAX, EAX
	JZ loc_1009B22E
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
	MOV DWORD PTR [ESI+0x00000888],0x00000000
loc_1009B22E:
	MOV EAX,DWORD PTR [ESI+0x00000884]
	TEST EAX, EAX
	JZ loc_1009B248
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
	MOV DWORD PTR [ESI+0x00000884],0x00000000
loc_1009B248:
	MOV EDI,DWORD PTR [ESI+0x00000880]
	TEST EDI, EDI
	JZ loc_1009B26C
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m9A8D0_sub_1009B8D0])
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV DWORD PTR [ESI+0x00000880],0x00000000
	ADD ESP, 0x04
loc_1009B26C:
	CMP DWORD PTR [ESI+0x00000870],0x00
	JZ loc_1009B27F
	MOV DWORD PTR [ESI+0x00000870],0x00000000
loc_1009B27F:
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9C800_sub_1009D800])
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009B2D0()
{
__asm{
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x0C]
	MOV ESI, ECX
	LEA ECX,DWORD PTR [ECX+0x00000884]
	PUSH ECX
	PUSH offset LEGO1_rdata + 0x91B0
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX])
	TEST EAX, EAX
	JZ loc_1009B2FC
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.mF0AC_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP ESI
	RET
loc_1009B2FC:
	MOV EAX, 0x00000001
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009B310()
{
	enum{
		var_8C = -0x8C,
		var_88 = -0x88,
		var_84 = -0x84,
		var_80 = -0x80,
		var_7C = -0x7C,
		var_78 = -0x78,
		var_74 = -0x74,
		var_70 = -0x70,
		var_6C = -0x6C,
		var_68 = -0x68,
		var_64 = -0x64,
		var_60 = -0x60,
		var_5C = -0x5C,
		var_4C = -0x4C,
		var_48 = -0x48,
		var_1C = -0x1C,
		var_18 = -0x18,
		arg1217256 = 0x4A4BA0,
	};

__asm{
	SUB ESP, 0x00000088
	PUSH EBX
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x00000880]
	PUSH EDI
	PUSH EBP
	MOV ESI, ECX
	TEST BYTE PTR [EAX+0x10],0x01
	JZ loc_1009B38D
	CMP DWORD PTR [ESI+0x04],0x00
	JZ loc_1009B34A
	PUSH 0x80004005
	PUSH offset [LEGO1_data.mF174_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000088
	RET
loc_1009B34A:
	TEST BYTE PTR [EAX+0x00000098],0x01
	MOV DWORD PTR [ESI+0x0000088C],0x00000000
	JNZ loc_1009B367
	MOV DWORD PTR [ESI+0x0000088C],0x00000001
loc_1009B367:
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9A5A0_sub_1009B5A0])
	PUSH EAX
	MOV ECX, ESI
	PUSH 0x00004000
	CALL_LONG(offset [LEGO1_text.m9D5E0_sub_1009E5E0])
	TEST EAX, EAX
	JNZ loc_1009B3D0
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000088
	RET
loc_1009B38D:
	TEST BYTE PTR [EAX+0x00000098],0x01
	MOV DWORD PTR [ESI+0x0000088C],0x00000000
	JNZ loc_1009B3AA
	MOV DWORD PTR [ESI+0x0000088C],0x00000001
loc_1009B3AA:
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9A5A0_sub_1009B5A0])
	PUSH EAX
	MOV ECX, ESI
	PUSH 0x00000800
	CALL_LONG(offset [LEGO1_text.m9D5E0_sub_1009E5E0])
	TEST EAX, EAX
	JNZ loc_1009B3D0
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000088
	RET
loc_1009B3D0:
	MOV ECX,DWORD PTR [ESI+0x00000884]
	LEA EAX,DWORD PTR [ESI+0x00000888]
	PUSH EAX
	MOV EDX,DWORD PTR [ESI+0x14]
	PUSH EDX
	MOV EBX,DWORD PTR [ESI+0x00000880]
	PUSH EBX
	MOV EAX,DWORD PTR [ECX]
	PUSH ECX
	CALL_LONG(DWORD PTR [EAX+0x20])
	TEST EAX, EAX
	JZ loc_1009B40C
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.mF158_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000088
	RET
loc_1009B40C:
	MOV EBX,DWORD PTR [ESI+0x00000878]
	LEA ECX,DWORD PTR [ESI+0x00000874]
	CMP DWORD PTR [ESI+0x0000084C],0x00
	LEA EDX,DWORD PTR [ESP+var_80+0x9C]
	MOV EAX,DWORD PTR [ECX]
	MOV ECX,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [EDX],EAX
	MOV DWORD PTR [EDX+0x04],EBX
	MOV DWORD PTR [EDX+0x08],ECX
	MOV EBX,DWORD PTR [ESP+var_7C+0x9C]
	JZ loc_1009B46A
	MOV EAX,DWORD PTR [ESP+var_78+0x9C]
	MOV ECX,DWORD PTR [ESP+var_80+0x9C]
	PUSH EAX
	PUSH EBX
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9C9D0_sub_1009D9D0])
	TEST EAX, EAX
	JNZ loc_1009B46A
	PUSH 0x80004005
	MOV ECX, ESI
	PUSH offset [LEGO1_data.mF124_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000088
	RET
loc_1009B46A:
	MOV EAX,DWORD PTR [ESI+0x10]
	MOV ECX,DWORD PTR [ESI+0x14]
	LEA EDI,DWORD PTR [ESP+var_70+0x9C]
	MOV DWORD PTR [ESP+var_88+0x9C],EAX
	XOR EAX, EAX
	MOV DWORD PTR [ESP+var_8C+0x9C],ECX
	MOV ECX, 0x0000001B
	REP STOSD
	MOV ECX,DWORD PTR [ESP+var_8C+0x9C]
	PUSH 0x00
	LEA EDX,DWORD PTR [ESP+var_6C+0x9C]
	PUSH 0x01
	MOV DWORD PTR [ESP+var_68+0x9C],0x0000006C
	MOV EAX,DWORD PTR [ECX]
	PUSH EDX
	MOV DWORD PTR [ESP+var_78+0x9C],EAX
	PUSH 0x00
	PUSH ECX
	CALL_LONG(DWORD PTR [EAX+0x64])
	TEST EAX, EAX
	JNZ loc_1009B4F7
	MOV EDX,DWORD PTR [ESP+var_4C+0x9C]
	TEST EBX, EBX
	JLE loc_1009B4E1
	MOV DWORD PTR [ESP+var_74+0x9C],EBX
loc_1009B4B6:
	MOV EBP,DWORD PTR [ESP+var_1C+0x9C]
	MOV EDI, EDX
	IMUL EBP,DWORD PTR [ESP+var_80+0x9C]
	SHR EBP, 0x03
	XOR EAX, EAX
	MOV ECX, EBP
	SHR ECX, 0x02
	REP STOSD
	MOV ECX, EBP
	AND ECX, 0x03
	REP STOSB
	ADD EDX,DWORD PTR [ESP+var_60+0x9C]
	DEC DWORD PTR [ESP+var_74+0x9C]
	JNZ loc_1009B4B6
loc_1009B4E1:
	MOV EAX,DWORD PTR [ESP+var_4C+0x9C]
	MOV ECX,DWORD PTR [ESP+var_8C+0x9C]
	MOV EBP,DWORD PTR [ESP+var_84+0x9C]
	PUSH EAX
	PUSH ECX
	CALL_LONG(DWORD PTR [EBP+arg1217256-0x4A4B20])
	JMP loc_1009B502
loc_1009B4F7:
	PUSH offset [LEGO1_data.mF0F8_str]
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m500_OutputDebugStringA])
loc_1009B502:
	CMP DWORD PTR [ESI+0x0000084C],0x00
	JZ loc_1009B586
	LEA EDI,DWORD PTR [ESP+var_6C+0x98]
	XOR EAX, EAX
	MOV ECX, 0x0000001B
	PUSH 0x00
	REP STOSD
	MOV EAX,DWORD PTR [ESP+var_80+0x98]
	PUSH 0x01
	MOV DWORD PTR [ESP+var_64+0x98],0x0000006C
	MOV ESI,DWORD PTR [EAX]
	LEA ECX,DWORD PTR [ESP+var_64+0x98]
	PUSH ECX
	PUSH 0x00
	PUSH EAX
	CALL_LONG(DWORD PTR [ESI+0x64])
	TEST EAX, EAX
	JNZ loc_1009B57B
	MOV EDX,DWORD PTR [ESP+var_48+0x98]
	TEST EBX, EBX
	JLE loc_1009B569
loc_1009B541:
	MOV EBP,DWORD PTR [ESP+var_18+0x98]
	MOV EDI, EDX
	IMUL EBP,DWORD PTR [ESP+var_7C+0x98]
	SHR EBP, 0x03
	XOR EAX, EAX
	MOV ECX, EBP
	SHR ECX, 0x02
	REP STOSD
	MOV ECX, EBP
	AND ECX, 0x03
	REP STOSB
	ADD EDX,DWORD PTR [ESP+var_5C+0x98]
	DEC EBX
	JNZ loc_1009B541
loc_1009B569:
	MOV EAX,DWORD PTR [ESP+var_48+0x98]
	MOV ECX,DWORD PTR [ESP+var_84+0x98]
	PUSH EAX
	PUSH ECX
	CALL_LONG(DWORD PTR [ESI+0x00000080])
	JMP loc_1009B586
loc_1009B57B:
	PUSH offset [LEGO1_data.mF0CC_str]
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m500_OutputDebugStringA])
loc_1009B586:
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000088
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009B5A0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	TEST BYTE PTR [EAX+0x19],0x01
	JZ loc_1009B5B2
	MOV EAX,DWORD PTR [EAX+0x000000B4]
	JMP loc_1009B5B4
loc_1009B5B2:
	XOR EAX, EAX
loc_1009B5B4:
	TEST AH,0x01
	JZ loc_1009B5C1
	MOV EAX, 0x00000020
	RETN 0x0004
loc_1009B5C1:
	TEST AH,0x02
	JZ loc_1009B5CE
	MOV EAX, 0x00000018
	RETN 0x0004
loc_1009B5CE:
	TEST AH,0x04
	JZ loc_1009B5DB
	MOV EAX, 0x00000010
	RETN 0x0004
loc_1009B5DB:
	AND EAX, 0x00000800
	CMP EAX, 0x01
	SBB EAX, EAX
	AND EAX, -0x09
	ADD EAX, 0x08
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009B5F0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_2C = -0x2C,
		var_28 = -0x28,
		var_24 = -0x24,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m9A893_proc_1009B893]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x1C
	MOV DWORD PTR [EBP+var_1C+0x4],ECX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ECX+0x00000880]
	TEST ESI, ESI
	JZ loc_1009B642
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9A8D0_sub_1009B8D0])
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [EBP+var_1C+0x4]
	MOV DWORD PTR [EAX+0x00000880],0x00000000
	MOV DWORD PTR [EAX+0x00000870],0x00000000
loc_1009B642:
	PUSH 0x000000E4
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	ADD ESP, 0x04
	MOV ESI, EAX
	MOV EBX, 0x00000000
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	TEST ESI, ESI
	JZ loc_1009B66D
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9A8B0_sub_1009B8B0])
	MOV EBX, EAX
loc_1009B66D:
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV DWORD PTR [EBP+var_28+0x4],0x00000000
	MOV ECX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV EDX,DWORD PTR [ECX]
	MOV DWORD PTR [EBP+var_24+0x4],EDX
loc_1009B686:
	MOV ECX,DWORD PTR [EBP+var_24+0x4]
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	CMP DWORD PTR [EAX+0x08],ECX
	JZ FAR loc_1009B84A
	LEA EAX,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	CMP EAX,DWORD PTR [EBP+arg2+0x4]
	JNZ FAR loc_1009B83A
	PUSH 0x0000017C
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_2C+0x4],EAX
	ADD ESP, 0x04
	MOV ESI, EAX
	MOV EDI, 0x00000000
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	TEST ESI, ESI
	JZ loc_1009B6CF
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9DFB0_sub_1009EFB0])
	MOV EDI, EAX
loc_1009B6CF:
	MOV EDX,DWORD PTR [EBP+var_14+0x4]
	MOV DWORD PTR [EBX+0x000000E0],EDI
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CMP DWORD PTR [EDX],0x00
	JZ loc_1009B713
	PUSH 0x10
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV EDX,DWORD PTR [EBP+var_14+0x4]
	MOV DWORD PTR [EDI],EAX
	MOV EAX,DWORD PTR [EBX+0x000000E0]
	MOV ECX,DWORD PTR [EDX]
	MOV EDX,DWORD PTR [EAX]
	MOV ESI,DWORD PTR [ECX]
	MOV DWORD PTR [EDX],ESI
	MOV EAX,DWORD PTR [ECX+0x04]
	MOV DWORD PTR [EDX+0x04],EAX
	MOV EDI,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [EDX+0x08],EDI
	MOV ECX,DWORD PTR [ECX+0x0C]
	MOV DWORD PTR [EDX+0x0C],ECX
loc_1009B713:
	MOV EDX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EBX+0x000000E0]
	MOV EAX,DWORD PTR [EDX+0x0000018C]
	MOV DWORD PTR [ECX+0x08],EAX
	MOV ESI,DWORD PTR [EBX+0x000000E0]
	MOV EAX,DWORD PTR [ESI+0x08]
	TEST EAX, EAX
	JLE loc_1009B7A3
	LEA EAX,DWORD PTR [EAX*2+EAX]
	SHL EAX, 0x02
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV EDX,DWORD PTR [EBP+var_14+0x4]
	MOV DWORD PTR [ESI+0x04],EAX
	MOV EAX,DWORD PTR [EDX+0x00000188]
	MOV ECX,DWORD PTR [EAX]
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	CMP EAX, ECX
	JZ loc_1009B7A3
	XOR ECX, ECX
loc_1009B758:
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV ESI,DWORD PTR [EBX+0x000000E0]
	MOV EDX,DWORD PTR [EAX+0x08]
	MOV EAX,DWORD PTR [ESI+0x04]
	MOV EDI,DWORD PTR [EBP+var_18+0x4]
	ADD ECX, 0x0C
	MOV DWORD PTR [ECX+EAX-0x0C],EDX
	MOV EDX,DWORD PTR [EDI+0x0C]
	MOV ESI,DWORD PTR [EBX+0x000000E0]
	MOV EAX,DWORD PTR [ESI+0x04]
	MOV DWORD PTR [ECX+EAX-0x08],EDX
	MOV EDX,DWORD PTR [EDI+0x10]
	MOV ESI,DWORD PTR [EBX+0x000000E0]
	MOV EAX,DWORD PTR [ESI+0x04]
	MOV DWORD PTR [ECX+EAX-0x04],EDX
	MOV EDX,DWORD PTR [EDI]
	MOV EDI, EDX
	MOV DWORD PTR [EBP+var_18+0x4],EDX
	MOV EDX,DWORD PTR [EBP+var_14+0x4]
	CMP DWORD PTR [EDX+0x00000188],EDI
	JNZ loc_1009B758
loc_1009B7A3:
	MOV ESI,DWORD PTR [EBP+var_14+0x4]
	MOV EDI,DWORD PTR [EBX+0x000000E0]
	ADD ESI, 0x0C
	ADD EDI, 0x0C
	MOV ECX, 0x0000005B
	REP MOVSD
	CMP DWORD PTR [EBP+var_28+0x4],0x00
	JNZ loc_1009B7C3
	OR DWORD PTR [EBX+0x10],0x02
loc_1009B7C3:
	MOV EDX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EDX+0x0000017C]
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [EBP+var_20+0x4],EAX
	CMP EAX, ECX
	JZ loc_1009B83A
loc_1009B7D5:
	MOV ESI,DWORD PTR [EBP+var_20+0x4]
	ADD ESI, 0x08
	CMP ESI,DWORD PTR [EBP+arg3+0x4]
	JZ loc_1009B7EE
	MOV EAX,DWORD PTR [EBP+var_20+0x4]
	MOV EDX,DWORD PTR [EAX]
	MOV DWORD PTR [EBP+var_20+0x4],EDX
	CMP EDX, ECX
	JNZ loc_1009B7D5
	JMP loc_1009B83A
loc_1009B7EE:
	MOV ECX,DWORD PTR [ESI]
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [EBX],EAX
	MOV EDX,DWORD PTR [ECX+0x04]
	MOV DWORD PTR [EBX+0x04],EDX
	MOV EDI,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [EBX+0x08],EDI
	MOV EAX,DWORD PTR [ECX+0x0C]
	MOV DWORD PTR [EBX+0x0C],EAX
	CMP DWORD PTR [ESI+0x14],0x00
	JZ loc_1009B815
	OR DWORD PTR [EBX+0x10],0x01
	ADD ESI, 0x0C
	JMP loc_1009B81B
loc_1009B815:
	ADD ESI, 0x000000D8
loc_1009B81B:
	LEA EDI,DWORD PTR [EBX+0x14]
	MOV ECX, 0x00000033
	REP MOVSD
	MOV EAX,DWORD PTR [EBP+var_1C+0x4]
	MOV DWORD PTR [EAX+0x00000880],EBX
	MOV ECX,DWORD PTR [EBX+0x000000E0]
	MOV DWORD PTR [EAX+0x00000870],ECX
loc_1009B83A:
	MOV EAX,DWORD PTR [EBP+var_24+0x4]
	INC DWORD PTR [EBP+var_28+0x4]
	MOV ECX,DWORD PTR [EAX]
	MOV DWORD PTR [EBP+var_24+0x4],ECX
	JMP FAR loc_1009B686
loc_1009B84A:
	MOV EAX,DWORD PTR [EBP+var_1C+0x4]
	CMP DWORD PTR [EAX+0x00000880],0x00
	JNZ loc_1009B87F
	TEST EBX, EBX
	JZ loc_1009B86A
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m9A8D0_sub_1009B8D0])
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009B86A:
	XOR EAX, EAX
loc_1009B86C:
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP EDI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x000C
loc_1009B87F:
	MOV EAX, 0x00000001
	JMP loc_1009B86C
}
}

__declspec(naked) DWORD LEGO1_proc_1009B886()
{
	enum{
		arg1217214 = 0x4A4AF8,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217214-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009B8B0()
{
__asm{
	PUSH EDI
	MOV EDX, ECX
	MOV EDI, EDX
	XOR EAX, EAX
	MOV ECX, 0x00000039
	REP STOSD
	MOV EAX, EDX
	POP EDI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009B8D0()
{
__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI,DWORD PTR [ECX+0x000000E0]
	MOV ESI, ECX
	TEST EDI, EDI
	JZ loc_1009B8F8
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m9DFD0_sub_1009EFD0])
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV DWORD PTR [ESI+0x000000E0],0x00000000
	ADD ESP, 0x04
loc_1009B8F8:
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009BA21()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m9A900_loc_1009B900])
}
}

__declspec(naked) DWORD LEGO1_sub_1009BA71()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m9A970_loc_1009B970])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009BA80(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_18 = -0x18,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m9AB66_proc_1009BB66]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	MOV AL,BYTE PTR [EBP+var_10+0x3]
	PUSH ESI
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	MOV BYTE PTR [ECX+0x00000178],AL
	PUSH EDI
	MOV ESI, ECX
	PUSH 0x000001AC
	XOR EDI, EDI
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	PUSH 0x14
	MOV DWORD PTR [EAX+0x04],EAX
	MOV DWORD PTR [ESI+0x0000017C],EAX
	MOV DWORD PTR [ESI+0x00000180],EDI
	MOV AL,BYTE PTR [EBP+var_10+0x3]
	MOV BYTE PTR [ESI+0x00000184],AL
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EAX],EAX
	MOV BYTE PTR [EBP+var_8+0x4],0x03
	MOV DWORD PTR [EAX+0x04],EAX
	MOV DWORD PTR [ESI+0x00000188],EAX
	MOV DWORD PTR [ESI+0x0000018C],EDI
	XOR EAX, EAX
	MOV ECX, 0x0000005B
	MOV DWORD PTR [ESI],EDI
	MOV DWORD PTR [ESI+0x04],EDI
	MOV DWORD PTR [ESI+0x08],EDI
	LEA EDI,DWORD PTR [ESI+0x0C]
	REP STOSD
	MOV EAX,DWORD PTR [EBP+arg3+0x4]
	MOV ECX,DWORD PTR [EBP+arg2+0x4]
	PUSH EAX
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	PUSH ECX
	PUSH EDX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9AC30_sub_1009BC30])
	MOV EAX, ESI
	POP EDI
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP ESI
	MOV DWORD PTR FS:[0x00000000],ECX
	MOV ESP, EBP
	POP EBP
	RETN 0x000C
}
}

__declspec(naked) DWORD LEGO1_sub_1009BB80()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m9AC0A_proc_1009BC0A]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	TEST EAX, EAX
	JZ loc_1009BBB4
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009BBB4:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EAX+0x04]
	TEST EAX, EAX
	JZ loc_1009BBC7
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009BBC7:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EAX+0x08]
	TEST EAX, EAX
	JZ loc_1009BBDA
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009BBDA:
	MOV BYTE PTR [EBP+var_8+0x4],0x00
	CALL_LONG(offset [LEGO1_text.m9ABFC_sub_1009BBFC])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m9AC14_sub_1009BC14])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009BBFC()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x00000184
	JMP_LONG(offset [LEGO1_text.m9AA30_loc_1009BA30])
}
}

__declspec(naked) DWORD LEGO1_sub_1009BC14()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x00000178
	JMP_LONG(offset [LEGO1_text.m9A9E0_loc_1009B9E0])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009BC30(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x04]
	PUSH EDI
	MOV EBX, ECX
	TEST EAX, EAX
	JZ loc_1009BC4C
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV DWORD PTR [EBX+0x04],0x00000000
	ADD ESP, 0x04
loc_1009BC4C:
	MOV EAX,DWORD PTR [EBX+0x08]
	TEST EAX, EAX
	JZ loc_1009BC63
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV DWORD PTR [EBX+0x08],0x00000000
	ADD ESP, 0x04
loc_1009BC63:
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
	TEST ESI, ESI
	JZ loc_1009BC8F
	PUSH 0x10
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV ECX, EAX
	MOV DWORD PTR [EBX],EAX
	MOV EAX,DWORD PTR [ESI]
	MOV DWORD PTR [ECX],EAX
	MOV EDX,DWORD PTR [ESI+0x04]
	MOV DWORD PTR [ECX+0x04],EDX
	MOV EAX,DWORD PTR [ESI+0x08]
	MOV DWORD PTR [ECX+0x08],EAX
	MOV ESI,DWORD PTR [ESI+0x0C]
	MOV DWORD PTR [ECX+0x0C],ESI
loc_1009BC8F:
	MOV ESI,DWORD PTR [ESP+arg2+0xC]
	TEST ESI, ESI
	JZ loc_1009BCD2
	MOV EDI, ESI
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	PUSH ECX
	MOV EDI, ESI
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV ECX, 0xFFFFFFFF
	MOV DWORD PTR [EBX+0x04],EAX
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI,DWORD PTR [EBX+0x04]
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
loc_1009BCD2:
	MOV ESI,DWORD PTR [ESP+arg3+0xC]
	TEST ESI, ESI
	JZ loc_1009BD15
	MOV EDI, ESI
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	PUSH ECX
	MOV EDI, ESI
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV ECX, 0xFFFFFFFF
	MOV DWORD PTR [EBX+0x08],EAX
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI,DWORD PTR [EBX+0x08]
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
loc_1009BD15:
	POP EDI
	POP ESI
	POP EBX
	RETN 0x000C
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009BD20(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
	};

__asm{
	PUSH ESI
	XOR EAX, EAX
	PUSH EDI
	MOV ESI, ECX
	MOV EDI, ESI
	MOV ECX, 0x00000069
	REP STOSD
	MOV EAX,DWORD PTR [ESP+arg5+0x8]
	MOV ECX,DWORD PTR [ESP+arg4+0x8]
	MOV EDX,DWORD PTR [ESP+arg3+0x8]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg2+0xC]
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
	PUSH EDX
	PUSH EAX
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9ADA0_sub_1009BDA0])
	MOV EAX, ESI
	POP EDI
	POP ESI
	RETN 0x0014
}
}

__declspec(naked) DWORD LEGO1_sub_1009BD60()
{
__asm{
	PUSH ESI
	MOV EAX,DWORD PTR [ECX]
	MOV ESI, ECX
	TEST EAX, EAX
	JZ loc_1009BD72
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009BD72:
	MOV EAX,DWORD PTR [ESI+0x04]
	TEST EAX, EAX
	JZ loc_1009BD82
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009BD82:
	MOV EAX,DWORD PTR [ESI+0x08]
	TEST EAX, EAX
	JZ loc_1009BD92
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009BD92:
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009BDA0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x04]
	PUSH EDI
	MOV EBX, ECX
	TEST EAX, EAX
	JZ loc_1009BDBC
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV DWORD PTR [EBX+0x04],0x00000000
	ADD ESP, 0x04
loc_1009BDBC:
	MOV EAX,DWORD PTR [EBX+0x08]
	TEST EAX, EAX
	JZ loc_1009BDD3
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV DWORD PTR [EBX+0x08],0x00000000
	ADD ESP, 0x04
loc_1009BDD3:
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
	TEST ESI, ESI
	JZ loc_1009BDFF
	PUSH 0x10
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV ECX, EAX
	MOV DWORD PTR [EBX],EAX
	MOV EAX,DWORD PTR [ESI]
	MOV DWORD PTR [ECX],EAX
	MOV EDX,DWORD PTR [ESI+0x04]
	MOV DWORD PTR [ECX+0x04],EDX
	MOV EAX,DWORD PTR [ESI+0x08]
	MOV DWORD PTR [ECX+0x08],EAX
	MOV ESI,DWORD PTR [ESI+0x0C]
	MOV DWORD PTR [ECX+0x0C],ESI
loc_1009BDFF:
	MOV ESI,DWORD PTR [ESP+arg2+0xC]
	TEST ESI, ESI
	JZ loc_1009BE42
	MOV EDI, ESI
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	PUSH ECX
	MOV EDI, ESI
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV ECX, 0xFFFFFFFF
	MOV DWORD PTR [EBX+0x04],EAX
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI,DWORD PTR [EBX+0x04]
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
loc_1009BE42:
	MOV ESI,DWORD PTR [ESP+arg3+0xC]
	TEST ESI, ESI
	JZ loc_1009BE85
	MOV EDI, ESI
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	PUSH ECX
	MOV EDI, ESI
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV ECX, 0xFFFFFFFF
	MOV DWORD PTR [EBX+0x08],EAX
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI,DWORD PTR [EBX+0x08]
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
loc_1009BE85:
	MOV ESI,DWORD PTR [ESP+arg4+0xC]
	TEST ESI, ESI
	JZ loc_1009BE97
	LEA EDI,DWORD PTR [EBX+0x0C]
	MOV ECX, 0x00000033
	REP MOVSD
loc_1009BE97:
	MOV ESI,DWORD PTR [ESP+arg5+0xC]
	TEST ESI, ESI
	JZ loc_1009BEAC
	LEA EDI,DWORD PTR [EBX+0x000000D8]
	MOV ECX, 0x00000033
	REP MOVSD
loc_1009BEAC:
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0014
}
}

__declspec(naked) DWORD LEGO1_sub_1009BEC0()
{
	enum{
		var_18 = -0x18,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m9AF38_proc_1009BF38]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	MOV AL,BYTE PTR [EBP+var_10+0x3]
	PUSH ESI
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	MOV BYTE PTR [ECX+0x04],AL
	MOV ESI, ECX
	PUSH 0x00000198
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	XOR ECX, ECX
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EBP+var_8+0x4],ECX
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	MOV DWORD PTR [EAX+0x04],EAX
	MOV DWORD PTR [ESI+0x08],EAX
	MOV DWORD PTR [ESI+0x0C],ECX
	MOV EAX, 0xFFFFFFFF
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m7814_ptr]
	MOV BYTE PTR [ESI+0x10],CL
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	MOV EAX, ESI
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009C001()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m9AF50_loc_1009BF50])
}
}

__declspec(naked) DWORD LEGO1_sub_1009C057()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x04
	JMP_LONG(offset [LEGO1_text.m9AFC0_loc_1009BFC0])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009C070(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_1AC = -0x1AC,
		var_1A8 = -0x1A8,
		var_1A4 = -0x1A4,
		var_1A0 = -0x1A0,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m9B278_proc_1009C278]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	MOV EAX,DWORD PTR [EBP+arg3+0x4]
	SUB ESP, 0x0000019C
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	PUSH EAX
	MOV ECX,DWORD PTR [EBP+arg2+0x4]
	PUSH ECX
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	PUSH EDX
	LEA ECX,DWORD PTR [EBP+var_1AC+0x4]
	CALL_LONG(offset [LEGO1_text.m9AA80_sub_1009BA80])
	MOV ECX,DWORD PTR [ESI+0x08]
	PUSH 0x00000198
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	LEA EDI,DWORD PTR [ECX+0x04]
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EBX,DWORD PTR [EDI]
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	TEST EBX, EBX
	JZ loc_1009C0D7
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	MOV DWORD PTR [EAX],ECX
	MOV DWORD PTR [EAX+0x04],EBX
	JMP loc_1009C0DC
loc_1009C0D7:
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EAX+0x04],EAX
loc_1009C0DC:
	MOV DWORD PTR [EDI],EAX
	MOV ECX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [ECX],EAX
	LEA ECX,DWORD PTR [EAX+0x08]
	TEST ECX, ECX
	JZ loc_1009C0F6
	LEA EAX,DWORD PTR [EBP+var_1AC+0x4]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m9B290_sub_1009C290])
loc_1009C0F6:
	XOR EBX, EBX
	LEA EDI,DWORD PTR [EBP+var_1A0+0x4]
	XOR EAX, EAX
	INC DWORD PTR [ESI+0x0C]
	MOV ECX, 0x0000005B
	MOV DWORD PTR [EBP+var_1AC+0x4],EBX
	MOV DWORD PTR [EBP+var_1A8+0x4],EBX
	MOV DWORD PTR [EBP+var_1A4+0x4],EBX
	REP STOSD
	MOV DWORD PTR [EBP+var_1C+0x4],EBX
	MOV EAX,DWORD PTR [ESI+0x08]
	PUSH EBX
	MOV DWORD PTR [EBP+var_14+0x4],EBX
	MOV EDI,DWORD PTR [EAX+0x04]
	LEA EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EDI+0x08]
	ADD EDI, 0x08
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.mD2728_j_DirectDrawCreate])
	TEST EAX, EAX
	JZ loc_1009C158
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9B730_sub_1009C730])
	PUSH EAX
	PUSH offset [LEGO1_data.mF208_str]
	CALL_LONG(offset [LEGO1_text.m9B4C0_sub_1009C4C0])
	ADD ESP, 0x08
	JMP FAR loc_1009C236
loc_1009C158:
	PUSH offset [LEGO1_text.m9B4F0_proc_1009C4F0]
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	PUSH ESI
	PUSH 0x00
	PUSH 0x00
	MOV EBX,DWORD PTR [EAX]
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x20])
	LEA EAX,DWORD PTR [EDI+0x0C]
	PUSH 0x00
	PUSH EAX
	MOV DWORD PTR [EAX], 0x0000016C
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	PUSH ECX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x2C])
	TEST EAX, EAX
	JZ loc_1009C19F
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9B730_sub_1009C730])
	PUSH EAX
	PUSH offset [LEGO1_data.mF1F4_str]
	CALL_LONG(offset [LEGO1_text.m9B4C0_sub_1009C4C0])
	ADD ESP, 0x08
	JMP FAR loc_1009C236
loc_1009C19F:
	LEA EAX,DWORD PTR [EBP+var_1C+0x4]
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	PUSH EAX
	PUSH offset LEGO1_rdata + 0x91B0
	PUSH ECX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
	TEST EAX, EAX
	JZ loc_1009C1CC
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9B730_sub_1009C730])
	PUSH EAX
	PUSH offset [LEGO1_data.mF1D8_str]
	CALL_LONG(offset [LEGO1_text.m9B4C0_sub_1009C4C0])
	ADD ESP, 0x08
	JMP loc_1009C236
loc_1009C1CC:
	PUSH ESI
	MOV EAX,DWORD PTR [EBP+var_1C+0x4]
	MOV EBX,DWORD PTR [EAX]
	PUSH offset [LEGO1_text.m9B510_proc_1009C510]
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x0C])
	TEST EAX, EAX
	JZ loc_1009C1F7
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9B730_sub_1009C730])
	PUSH EAX
	PUSH offset [LEGO1_data.mF1B8_str]
	CALL_LONG(offset [LEGO1_text.m9B4C0_sub_1009C4C0])
	ADD ESP, 0x08
	JMP loc_1009C236
loc_1009C1F7:
	CMP DWORD PTR [EDI+0x00000180],0x00
	JNZ loc_1009C236
	MOV EAX,DWORD PTR [ESI+0x08]
	MOV ECX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	LEA EDX,DWORD PTR [ECX+0x04]
	MOV EAX,DWORD PTR [ECX]
	MOV EBX,DWORD PTR [EDX]
	MOV DWORD PTR [EBX],EAX
	MOV EBX,DWORD PTR [EDX]
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [EAX+0x04],EBX
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	ADD ECX, 0x08
	CALL_LONG(offset [LEGO1_text.m9AB80_sub_1009BB80])
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	DEC DWORD PTR [ESI+0x0C]
loc_1009C236:
	CMP DWORD PTR [EBP+var_1C+0x4],0x00
	JZ loc_1009C245
	MOV EAX,DWORD PTR [EBP+var_1C+0x4]
	PUSH EAX
	MOV EBX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBX+0x08])
loc_1009C245:
	CMP DWORD PTR [EBP+var_14+0x4],0x00
	JZ loc_1009C254
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	PUSH EAX
	MOV EBX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBX+0x08])
loc_1009C254:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m9B282_sub_1009C282])
	MOV EAX, 0x00000001
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP EDI
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x000C
}
}

__declspec(naked) DWORD LEGO1_sub_1009C282()
{
	enum{
		arg1217118 = 0x4A4978,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217118-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m9AB80_sub_1009BB80])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009C290(DWORD arg1)
{
	enum{
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m9B3E7_proc_1009C3E7]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x14
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	PUSH EBX
	MOV DWORD PTR [EBP+var_1C+0x4],ECX
	PUSH ESI
	PUSH EDI
	MOV EBX, ECX
	MOV ECX,DWORD PTR [EAX]
	LEA ESI,DWORD PTR [EAX+0x0C]
	LEA EDI,DWORD PTR [EBX+0x0C]
	MOV DWORD PTR [EBX],ECX
	MOV EDX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [EBX+0x04],EDX
	MOV ECX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [EBX+0x08],ECX
	MOV ECX, 0x0000005B
	REP MOVSD
	MOV ESI,DWORD PTR [EBP+arg1+0x4]
	PUSH 0x000001AC
	MOV CL,BYTE PTR [ESI+0x00000178]
	ADD ESI, 0x00000178
	MOV BYTE PTR [EBX+0x00000178],CL
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EAX+0x04],EAX
	MOV DWORD PTR [EBX+0x00000180],0x00000000
	MOV DWORD PTR [EBX+0x0000017C],EAX
	MOV ECX,DWORD PTR [ESI+0x04]
	MOV EDX,DWORD PTR [EAX]
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	MOV DWORD PTR [EBP+var_20+0x4],EDX
	MOV EAX,DWORD PTR [ECX]
	MOV ESI, EAX
	CMP EAX, ECX
	JZ loc_1009C33B
loc_1009C31D:
	LEA EAX,DWORD PTR [ESI+0x08]
	MOV ECX,DWORD PTR [EBP+var_20+0x4]
	PUSH EAX
	LEA EDX,DWORD PTR [EBP+var_14+0x4]
	PUSH ECX
	PUSH EDX
	LEA ECX,DWORD PTR [EBX+0x00000178]
	CALL_LONG(offset [LEGO1_text.m9B400_sub_1009C400])
	MOV ESI,DWORD PTR [ESI]
	CMP DWORD PTR [EBP+var_18+0x4],ESI
	JNZ loc_1009C31D
loc_1009C33B:
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	LEA ESI,DWORD PTR [EBX+0x00000184]
	LEA EDI,DWORD PTR [EAX+0x00000184]
	PUSH 0x14
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	MOV AL,BYTE PTR [EDI]
	MOV BYTE PTR [ESI],AL
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EAX+0x04],EAX
	MOV DWORD PTR [EBX+0x0000018C],0x00000000
	MOV DWORD PTR [EBX+0x00000188],EAX
	MOV ECX,DWORD PTR [EDI+0x04]
	MOV EDX,DWORD PTR [EAX]
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	MOV DWORD PTR [EBP+var_20+0x4],EDX
	MOV EAX,DWORD PTR [ECX]
	MOV EDI, EAX
	CMP EAX, ECX
	JZ loc_1009C3A1
loc_1009C387:
	LEA EAX,DWORD PTR [EDI+0x08]
	MOV ECX,DWORD PTR [EBP+var_20+0x4]
	PUSH EAX
	LEA EDX,DWORD PTR [EBP+var_14+0x4]
	PUSH ECX
	PUSH EDX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9B460_sub_1009C460])
	MOV EDI,DWORD PTR [EDI]
	CMP EDI,DWORD PTR [EBP+var_18+0x4]
	JNZ loc_1009C387
loc_1009C3A1:
	MOV EAX, EBX
	POP EDI
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP ESI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009C400(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX, ECX
	MOV EDI,DWORD PTR [ESP+arg2+0xC]
	PUSH 0x000001AC
	MOV ESI,DWORD PTR [EDI+0x04]
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	TEST ESI, ESI
	JZ loc_1009C424
	MOV DWORD PTR [EAX],EDI
	MOV DWORD PTR [EAX+0x04],ESI
	JMP loc_1009C429
loc_1009C424:
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EAX+0x04],EAX
loc_1009C429:
	MOV DWORD PTR [EDI+0x04],EAX
	LEA EDI,DWORD PTR [EAX+0x08]
	MOV ECX,DWORD PTR [EAX+0x04]
	TEST EDI, EDI
	MOV DWORD PTR [ECX],EAX
	JZ loc_1009C443
	MOV ESI,DWORD PTR [ESP+arg3+0xC]
	MOV ECX, 0x00000069
	REP MOVSD
loc_1009C443:
	MOV ECX,DWORD PTR [ESP+arg1+0xC]
	INC DWORD PTR [EBX+0x08]
	POP EDI
	POP ESI
	POP EBX
	MOV DWORD PTR [ECX],EAX
	MOV EAX, ECX
	RETN 0x000C
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009C460(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI,DWORD PTR [ESP+arg2+0xC]
	PUSH 0x14
	MOV EBX,DWORD PTR [EDI+0x04]
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	TEST EBX, EBX
	JZ loc_1009C481
	MOV DWORD PTR [EAX],EDI
	MOV DWORD PTR [EAX+0x04],EBX
	JMP loc_1009C486
loc_1009C481:
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EAX+0x04],EAX
loc_1009C486:
	MOV DWORD PTR [EDI+0x04],EAX
	LEA EDI,DWORD PTR [EAX+0x08]
	MOV ECX,DWORD PTR [EAX+0x04]
	TEST EDI, EDI
	MOV DWORD PTR [ECX],EAX
	JZ loc_1009C4A9
	MOV EDX,DWORD PTR [ESP+arg3+0xC]
	MOV ECX,DWORD PTR [EDX]
	MOV DWORD PTR [EDI],ECX
	MOV EBX,DWORD PTR [EDX+0x04]
	MOV DWORD PTR [EDI+0x04],EBX
	MOV EDX,DWORD PTR [EDX+0x08]
	MOV DWORD PTR [EDI+0x08],EDX
loc_1009C4A9:
	MOV ECX,DWORD PTR [ESP+arg1+0xC]
	INC DWORD PTR [ESI+0x08]
	POP EDI
	POP ESI
	POP EBX
	MOV DWORD PTR [ECX],EAX
	MOV EAX, ECX
	RETN 0x000C
}
}

__declspec(naked) DWORD LEGO1_sub_1009C4C0(DWORD arg1, DWORD arg2)
{
	enum{
		var_200 = -0x200,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	LEA EAX,DWORD PTR [ESP+arg2]
	MOV ECX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x00000200
	LEA EDX,DWORD PTR [ESP+var_200+0x200]
	PUSH EAX
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.mD1130_sub_100D2130])
	LEA ECX,DWORD PTR [ESP+var_200+0x20C]
	ADD ESP, 0x0C
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m500_OutputDebugStringA])
	ADD ESP, 0x00000200
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009C540(DWORD arg1)
{
	enum{
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x10
	PUSH EBX
	MOV EAX,DWORD PTR [EDX+0x0C]
	PUSH ESI
	MOV EBX,DWORD PTR [EDX+0x08]
	PUSH EDI
	MOV EDX,DWORD PTR [EDX+0x54]
	MOV DWORD PTR [ESP+var_C+0x1C],EAX
	MOV DWORD PTR [ESP+var_8+0x1C],EBX
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [ESP+var_4+0x1C],EDX
	PUSH 0x14
	MOV ESI,DWORD PTR [EAX+0x04]
	MOV EAX,DWORD PTR [ESI+0x00000190]
	ADD ESI, 0x0000018C
	LEA EBX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [ESP+var_10+0x20],EAX
	MOV EDI,DWORD PTR [EBX]
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	TEST EDI, EDI
	JZ loc_1009C593
	MOV ECX,DWORD PTR [ESP+var_10+0x1C]
	MOV DWORD PTR [EAX],ECX
	MOV DWORD PTR [EAX+0x04],EDI
	JMP loc_1009C598
loc_1009C593:
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EAX+0x04],EAX
loc_1009C598:
	MOV DWORD PTR [EBX],EAX
	MOV ECX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [ECX],EAX
	ADD EAX, 0x08
	JZ loc_1009C5B9
	MOV EBX,DWORD PTR [ESP+var_8+0x1C]
	LEA EDX,DWORD PTR [ESP+var_C+0x1C]
	MOV ECX,DWORD PTR [EDX]
	MOV EDX,DWORD PTR [EDX+0x08]
	MOV DWORD PTR [EAX],ECX
	MOV DWORD PTR [EAX+0x04],EBX
	MOV DWORD PTR [EAX+0x08],EDX
loc_1009C5B9:
	MOV EAX, 0x00000001
	POP EDI
	INC DWORD PTR [ESI+0x08]
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009C5D0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		var_1B8 = -0x1B8,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m9B6A4_proc_1009C6A4]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	MOV EAX,DWORD PTR [EBP+arg5+0x4]
	SUB ESP, 0x000001A8
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	PUSH EAX
	MOV ECX,DWORD PTR [EBP+arg4+0x4]
	PUSH ECX
	MOV EDX,DWORD PTR [EBP+arg3+0x4]
	PUSH EDX
	MOV EAX,DWORD PTR [EBP+arg2+0x4]
	PUSH EAX
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	PUSH ECX
	LEA ECX,DWORD PTR [EBP+var_1B8+0x4]
	CALL_LONG(offset [LEGO1_text.m9AD20_sub_1009BD20])
	MOV EAX,DWORD PTR [ESI+0x08]
	PUSH 0x000001AC
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EBX,DWORD PTR [EAX+0x04]
	MOV EAX,DWORD PTR [EBX+0x00000184]
	ADD EBX, 0x00000180
	LEA ESI,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	MOV EDI,DWORD PTR [ESI]
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	TEST EDI, EDI
	JZ loc_1009C64E
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	MOV DWORD PTR [EAX],ECX
	MOV DWORD PTR [EAX+0x04],EDI
	JMP loc_1009C653
loc_1009C64E:
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EAX+0x04],EAX
loc_1009C653:
	LEA EDI,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [ESI],EAX
	MOV ECX,DWORD PTR [EAX+0x04]
	TEST EDI, EDI
	MOV DWORD PTR [ECX],EAX
	JZ loc_1009C66E
	LEA ESI,DWORD PTR [EBP+var_1B8+0x4]
	MOV ECX, 0x00000069
	REP MOVSD
loc_1009C66E:
	LEA EDI,DWORD PTR [EBP+var_1B8+0x4]
	XOR EAX, EAX
	MOV ECX, 0x00000069
	INC DWORD PTR [EBX+0x08]
	REP STOSD
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m9B6AE_sub_1009C6AE])
	MOV EAX, 0x00000001
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP EDI
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0014
}
}

__declspec(naked) DWORD LEGO1_sub_1009C6AE()
{
	enum{
		arg1217115 = 0x4A496C,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217115-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m9AD60_sub_1009BD60])
}
}

__declspec(naked) DWORD LEGO1_sub_1009C6C0()
{
__asm{
	PUSH ESI
	MOV ESI, ECX
	CMP BYTE PTR [ECX+0x10],0x00
	JZ loc_1009C6D0
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RET
loc_1009C6D0:
	PUSH ESI
	PUSH offset [LEGO1_text.m9B710_proc_1009C710]
	CALL_LONG(offset [LEGO1_text.mD272E_j_DirectDrawEnumerateA])
	TEST EAX, EAX
	JZ loc_1009C6FC
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9B730_sub_1009C730])
	PUSH EAX
	PUSH offset [LEGO1_data.mF228_str]
	CALL_LONG(offset [LEGO1_text.m9B4C0_sub_1009C4C0])
	ADD ESP, 0x08
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RET
loc_1009C6FC:
	MOV BYTE PTR [ESI+0x10],0x01
	XOR EAX, EAX
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009C730(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	CMP EAX, 0x80004005
	JG_LONG(offset [LEGO1_text.m9B754_loc_1009C754])
	JZ_LONG(offset [LEGO1_text.m9BAFF_loc_1009CAFF])
	CMP EAX, 0x80004001
	JZ_LONG(offset [LEGO1_text.m9BAF7_loc_1009CAF7])
	JMP_LONG(offset [LEGO1_text.m9B74C_loc_1009C74C])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009CE60(DWORD arg1)
{
	enum{
		var_24 = -0x24,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x24
	PUSH ESI
	MOV ESI, ECX
	CMP BYTE PTR [ECX+0x10],0x00
	JNZ loc_1009CE78
	MOV EAX, 0xFFFFFFFF
	POP ESI
	ADD ESP, 0x24
	RETN 0x0004
loc_1009CE78:
	LEA EAX,DWORD PTR [ESP+var_14+0x28]
	LEA ECX,DWORD PTR [ESP+var_18+0x28]
	LEA EDX,DWORD PTR [ESP+var_1C+0x28]
	PUSH EAX
	LEA EAX,DWORD PTR [ESP+var_20+0x2C]
	PUSH ECX
	LEA ECX,DWORD PTR [ESP+var_24+0x30]
	PUSH EDX
	MOV EDX,DWORD PTR [ESP+arg1+0x34]
	PUSH EAX
	MOV DWORD PTR [ESP+var_24+0x38],0xFFFFFFFF
	PUSH ECX
	PUSH offset [LEGO1_data.m10C50_str]
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m8B200_sub_1008C200])
	ADD ESP, 0x1C
	CMP EAX, 0x05
	JZ loc_1009CEBC
	MOV EAX, 0xFFFFFFFF
	POP ESI
	ADD ESP, 0x24
	RETN 0x0004
loc_1009CEBC:
	CMP DWORD PTR [ESP+var_24+0x28],0x00
	JGE loc_1009CECF
	MOV EAX, 0xFFFFFFFF
	POP ESI
	ADD ESP, 0x24
	RETN 0x0004
loc_1009CECF:
	LEA ECX,DWORD PTR [ESP+var_20+0x28]
	LEA EDX,DWORD PTR [ESP+var_10+0x28]
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [EDX],EAX
	MOV EAX,DWORD PTR [ECX+0x04]
	PUSH EDX
	MOV DWORD PTR [EDX+0x04],EAX
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV ECX,DWORD PTR [ECX+0x0C]
	MOV DWORD PTR [EDX+0x08],EAX
	MOV EAX,DWORD PTR [ESP+var_24+0x2C]
	PUSH EAX
	MOV DWORD PTR [EDX+0x0C],ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9BF20_sub_1009CF20])
	TEST EAX, EAX
	JGE loc_1009CF0C
	LEA EAX,DWORD PTR [ESP+var_10+0x28]
	MOV ECX, ESI
	PUSH EAX
	PUSH -0x01
	CALL_LONG(offset [LEGO1_text.m9BF20_sub_1009CF20])
loc_1009CF0C:
	POP ESI
	ADD ESP, 0x24
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009CF20(DWORD arg1, DWORD arg2)
{
	enum{
		var_28 = -0x28,
		var_24 = -0x24,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x28
	CMP BYTE PTR [ECX+0x10],0x00
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	JNZ loc_1009CF3C
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x28
	RETN 0x0008
loc_1009CF3C:
	MOV EBX,DWORD PTR [ESP+arg2+0x38]
	LEA EDI,DWORD PTR [ESP+var_10+0x38]
	XOR ESI, ESI
	XOR EAX, EAX
	MOV EDX,DWORD PTR [EBX]
	MOV EBP,DWORD PTR [EBX+0x04]
	MOV DWORD PTR [EDI],EDX
	MOV EDX,DWORD PTR [EBX+0x08]
	MOV EBX,DWORD PTR [EBX+0x0C]
	MOV DWORD PTR [EDI+0x04],EBP
	MOV DWORD PTR [EDI+0x08],EDX
	MOV EDX,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [EDI+0x0C],EBX
	MOV EDI,DWORD PTR [EDX]
	MOV DWORD PTR [ESP+var_28+0x38],EDI
	CMP EDI, EDX
	JZ FAR loc_1009D005
loc_1009CF6F:
	CMP DWORD PTR [ESP+arg1+0x38],0x00
	JL loc_1009CF80
	CMP ESI,DWORD PTR [ESP+arg1+0x38]
	JG FAR loc_1009D014
loc_1009CF80:
	MOV EDI,DWORD PTR [ESP+var_28+0x38]
	MOV EDX,DWORD PTR [EDI+0x00000184]
	ADD EDI, 0x08
loc_1009CF8D:
	MOV EBX,DWORD PTR [EDX]
	MOV DWORD PTR [ESP+var_24+0x38],EBX
	MOV EDX,DWORD PTR [ESP+var_24+0x38]
	CMP DWORD PTR [EDI+0x0000017C],EDX
	JZ loc_1009CFF1
	MOV EDX,DWORD PTR [EDX+0x08]
	LEA EBX,DWORD PTR [ESP+var_20+0x38]
	MOV EBP,DWORD PTR [EDX]
	MOV DWORD PTR [EBX],EBP
	MOV EBP,DWORD PTR [EDX+0x04]
	MOV DWORD PTR [EBX+0x04],EBP
	MOV EBP,DWORD PTR [EDX+0x08]
	MOV DWORD PTR [EBX+0x08],EBP
	MOV EDX,DWORD PTR [EDX+0x0C]
	MOV DWORD PTR [EBX+0x0C],EDX
	MOV EBX,DWORD PTR [ESP+var_20+0x38]
	CMP DWORD PTR [ESP+var_10+0x38],EBX
	JNZ loc_1009CFEA
	MOV EDX,DWORD PTR [ESP+var_1C+0x38]
	CMP DWORD PTR [ESP+var_C+0x38],EDX
	JNZ loc_1009CFEA
	MOV EDX,DWORD PTR [ESP+var_18+0x38]
	CMP DWORD PTR [ESP+var_8+0x38],EDX
	JNZ loc_1009CFEA
	MOV EDX,DWORD PTR [ESP+var_14+0x38]
	CMP DWORD PTR [ESP+var_4+0x38],EDX
	JNZ loc_1009CFEA
	CMP ESI,DWORD PTR [ESP+arg1+0x38]
	JZ loc_1009D00A
loc_1009CFEA:
	INC EAX
	MOV EDX,DWORD PTR [ESP+var_24+0x38]
	JMP loc_1009CF8D
loc_1009CFF1:
	MOV EDX,DWORD PTR [ESP+var_28+0x38]
	INC ESI
	MOV EBX,DWORD PTR [EDX]
	MOV DWORD PTR [ESP+var_28+0x38],EBX
	CMP DWORD PTR [ECX+0x08],EBX
	JNZ FAR loc_1009CF6F
loc_1009D005:
	MOV EAX, 0xFFFFFFFF
loc_1009D00A:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x28
	RETN 0x0008
loc_1009D014:
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x28
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009D030(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x10]
	PUSH EDI
	TEST ESI, ESI
	JL loc_1009D0B8
	CMP BYTE PTR [ECX+0x10],0x00
	JZ loc_1009D0B8
	XOR EDX, EDX
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV EDI,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_8+0x14],EDI
	CMP EDI, EAX
	JZ loc_1009D092
	MOV EDI,DWORD PTR [ESP+arg2+0x14]
loc_1009D057:
	MOV EAX,DWORD PTR [ESP+var_8+0x14]
	ADD EAX, 0x08
	MOV DWORD PTR [EDI],EAX
	MOV EBX,DWORD PTR [EAX+0x0000017C]
	MOV EAX,DWORD PTR [EBX]
	MOV DWORD PTR [ESP+var_4+0x14],EAX
	CMP EAX, EBX
	JZ loc_1009D083
loc_1009D070:
	CMP EDX, ESI
	JZ loc_1009D0A0
	INC EDX
	MOV EAX,DWORD PTR [ESP+var_4+0x14]
	MOV EAX,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_4+0x14],EAX
	CMP EAX, EBX
	JNZ loc_1009D070
loc_1009D083:
	MOV EAX,DWORD PTR [ESP+var_8+0x14]
	MOV EBX,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_8+0x14],EBX
	CMP DWORD PTR [ECX+0x08],EBX
	JNZ loc_1009D057
loc_1009D092:
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x000C
loc_1009D0A0:
	MOV ECX,DWORD PTR [ESP+var_4+0x14]
	MOV EAX,DWORD PTR [ESP+arg3+0x14]
	ADD ECX, 0x08
	POP EDI
	POP ESI
	MOV DWORD PTR [EAX],ECX
	XOR EAX, EAX
	POP EBX
	ADD ESP, 0x08
	RETN 0x000C
loc_1009D0B8:
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x000C
}
}

__declspec(naked) DWORD LEGO1_sub_1009D0D0()
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
	};

__asm{
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	PUSH EBP
	CMP BYTE PTR [ESI+0x10],0x00
	JNZ loc_1009D0EC
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RET
loc_1009D0EC:
	CMP DWORD PTR [ESI+0x0C],0x00
	JNZ loc_1009D0FF
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RET
loc_1009D0FF:
	XOR EDI, EDI
	CALL_LONG(offset [LEGO1_text.m9C1A0_sub_1009D1A0])
	MOV ECX,DWORD PTR [ESI+0x08]
	XOR EBX, EBX
	MOV EBP, 0xFFFFFFFF
	MOV EDX,DWORD PTR [ECX]
	MOV DWORD PTR [ESP+var_4+0x18],EDX
loc_1009D116:
	MOV ECX,DWORD PTR [ESI+0x08]
	CMP ECX,DWORD PTR [ESP+var_4+0x18]
	JZ loc_1009D181
	MOV ECX,DWORD PTR [ESP+var_4+0x18]
	MOV ECX,DWORD PTR [ECX+0x00000184]
	MOV EDX,DWORD PTR [ECX]
	MOV DWORD PTR [ESP+var_8+0x18],EDX
	CMP EDX, ECX
	JZ loc_1009D174
loc_1009D133:
	MOV EDX,DWORD PTR [ESP+var_8+0x18]
	CMP DWORD PTR [EDX+0x1C],0x00
	JNZ loc_1009D18B
	TEST EAX, EAX
	JZ loc_1009D14E
	CMP DWORD PTR [EDX+0x000000E8],0x02
	JNZ loc_1009D14E
	TEST EDI, EDI
	JZ loc_1009D163
loc_1009D14E:
	MOV EDX,DWORD PTR [ESP+var_8+0x18]
	CMP DWORD PTR [EDX+0x000000E8],0x01
	JNZ loc_1009D165
	TEST EDI, EDI
	JNZ loc_1009D165
	TEST EBP, EBP
	JGE loc_1009D165
loc_1009D163:
	MOV EBP, EBX
loc_1009D165:
	INC EBX
	MOV EDX,DWORD PTR [ESP+var_8+0x18]
	MOV EDX,DWORD PTR [EDX]
	MOV DWORD PTR [ESP+var_8+0x18],EDX
	CMP EDX, ECX
	JNZ loc_1009D133
loc_1009D174:
	MOV ECX,DWORD PTR [ESP+var_4+0x18]
	INC EDI
	MOV EDX,DWORD PTR [ECX]
	MOV DWORD PTR [ESP+var_4+0x18],EDX
	JMP loc_1009D116
loc_1009D181:
	MOV EAX, EBP
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RET
loc_1009D18B:
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009D1A0()
{
	enum{
		var_8 = -0x8,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	SUB ESP, 0x04
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m9C1E0_sub_1009D1E0])
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	TEST EAX, EAX
	JZ loc_1009D1CE
	PUSH EBX
	MOV EAX, 0x00000000
	CPUID
	MOV EAX, 0x00000001
	CPUID
	XOR EAX, EAX
	BT EDX,0x17
	ADC EAX, EAX
	POP EBX
	MOV DWORD PTR [EBP+var_8+0x4],EAX
loc_1009D1CE:
	MOV EAX,DWORD PTR [EBP+var_8+0x4]
	POP EBX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009D210()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
	};

__asm{
	SUB ESP, 0x14
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	CMP BYTE PTR [ECX+0x10],0x00
	JNZ loc_1009D22A
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x14
	RET
loc_1009D22A:
	MOV EAX,DWORD PTR [ESI+0x08]
	MOV ECX,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_14+0x20],ECX
	CMP ECX, EAX
	JZ FAR loc_1009D35C
	XOR EBX, EBX
loc_1009D23D:
	MOV EDI,DWORD PTR [ESP+var_14+0x20]
	MOV ECX, ESI
	ADD EDI, 0x08
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m9C370_sub_1009D370])
	TEST AL, AL
	JNZ loc_1009D290
	MOV EAX,DWORD PTR [ESP+var_14+0x20]
	MOV DWORD PTR [ESP+var_C+0x20],EAX
	MOV ECX,DWORD PTR [EAX]
	LEA EDX,DWORD PTR [EAX+0x04]
	MOV EDI, ECX
	MOV DWORD PTR [ESP+var_14+0x20],ECX
	PUSH EBX
	MOV ECX,DWORD PTR [EDX]
	MOV DWORD PTR [ECX],EDI
	MOV ECX,DWORD PTR [EDX]
	MOV EDI,DWORD PTR [EAX]
	MOV DWORD PTR [EDI+0x04],ECX
	MOV ECX,DWORD PTR [ESP+var_C+0x24]
	ADD ECX, 0x08
	CALL_LONG(offset [LEGO1_text.m9C450_sub_1009D450])
	MOV ECX,DWORD PTR [ESP+var_C+0x20]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	DEC DWORD PTR [ESI+0x0C]
	JMP FAR loc_1009D34F
loc_1009D290:
	MOV EAX,DWORD PTR [EDI+0x0000017C]
	MOV ECX,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_10+0x20],ECX
	CMP ECX, EAX
	JZ loc_1009D304
loc_1009D2A0:
	MOV EAX,DWORD PTR [ESP+var_10+0x20]
	MOV ECX, ESI
	ADD EAX, 0x08
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m9C3D0_sub_1009D3D0])
	TEST AL, AL
	MOV EAX,DWORD PTR [ESP+var_10+0x20]
	JNZ loc_1009D2F2
	MOV ECX,DWORD PTR [EAX]
	LEA EDX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [ESP+var_8+0x20],EAX
	PUSH EBX
	MOV EAX,DWORD PTR [EDX]
	MOV DWORD PTR [ESP+var_10+0x24],ECX
	MOV DWORD PTR [EAX],ECX
	MOV ECX,DWORD PTR [ESP+var_8+0x24]
	MOV EAX,DWORD PTR [ECX]
	ADD ECX, 0x08
	MOV EDX,DWORD PTR [EDX]
	DB(0x90) 
	MOV DWORD PTR [EAX+0x04],EDX
	CALL_LONG(offset [LEGO1_text.m9C470_sub_1009D470])
	MOV ECX,DWORD PTR [ESP+var_8+0x20]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	DEC DWORD PTR [EDI+0x00000180]
	JMP loc_1009D2F8
loc_1009D2F2:
	MOV ECX,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_10+0x20],ECX
loc_1009D2F8:
	MOV EAX,DWORD PTR [ESP+var_10+0x20]
	CMP DWORD PTR [EDI+0x0000017C],EAX
	JNZ loc_1009D2A0
loc_1009D304:
	MOV EAX,DWORD PTR [ESP+var_14+0x20]
	CMP DWORD PTR [EDI+0x00000180],EBX
	JNZ loc_1009D349
	MOV ECX,DWORD PTR [EAX]
	LEA EDX,DWORD PTR [EAX+0x04]
	MOV EDI, ECX
	MOV DWORD PTR [ESP+var_4+0x20],EAX
	MOV DWORD PTR [ESP+var_14+0x20],ECX
	PUSH EBX
	MOV ECX,DWORD PTR [EDX]
	MOV DWORD PTR [ECX],EDI
	MOV ECX,DWORD PTR [EDX]
	MOV EDI,DWORD PTR [EAX]
	MOV DWORD PTR [EDI+0x04],ECX
	MOV ECX,DWORD PTR [ESP+var_4+0x24]
	ADD ECX, 0x08
	CALL_LONG(offset [LEGO1_text.m9C450_sub_1009D450])
	MOV ECX,DWORD PTR [ESP+var_4+0x20]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	DEC DWORD PTR [ESI+0x0C]
	JMP loc_1009D34F
loc_1009D349:
	MOV ECX,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_14+0x20],ECX
loc_1009D34F:
	MOV EAX,DWORD PTR [ESP+var_14+0x20]
	CMP DWORD PTR [ESI+0x08],EAX
	JNZ FAR loc_1009D23D
loc_1009D35C:
	CMP DWORD PTR [ESI+0x0C],0x01
	SBB EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x14
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009D370(DWORD arg1)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x04
	PUSH ESI
	MOV EDX,DWORD PTR [EAX+0x00000188]
	MOV ECX,DWORD PTR [EDX]
	MOV DWORD PTR [ESP+var_4+0x8],ECX
	CMP ECX, EDX
	JZ loc_1009D3BB
	MOV ECX, 0x00000280
	MOV ESI, 0x000001E0
loc_1009D392:
	MOV EAX,DWORD PTR [ESP+var_4+0x8]
	CMP DWORD PTR [EAX+0x08],ECX
	JNZ loc_1009D3AD
	CMP DWORD PTR [EAX+0x0C],ESI
	JNZ loc_1009D3AD
	MOV EAX,DWORD PTR [EAX+0x10]
	CMP EAX, 0x08
	JZ loc_1009D3C4
	CMP EAX, 0x10
	JZ loc_1009D3C4
loc_1009D3AD:
	MOV EAX,DWORD PTR [ESP+var_4+0x8]
	MOV EAX,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_4+0x8],EAX
	CMP EAX, EDX
	JNZ loc_1009D392
loc_1009D3BB:
	XOR AL, AL
	POP ESI
	ADD ESP, 0x04
	RETN 0x0004
loc_1009D3C4:
	MOV AL, 0x01
	POP ESI
	ADD ESP, 0x04
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009D3D0(DWORD arg1)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x04
	CMP DWORD PTR [ECX+0x0C],0x00
	JA loc_1009D3E1
	XOR AL, AL
	ADD ESP, 0x04
	RETN 0x0004
loc_1009D3E1:
	MOV EDX,DWORD PTR [ESP+arg1+0x4]
	CMP DWORD PTR [EDX+0x14],0x00
	JZ loc_1009D40D
	TEST BYTE PTR [EDX+0x000000AD],0x04
	JZ loc_1009D405
	TEST BYTE PTR [EDX+0x00000090],0x01
	JZ loc_1009D405
	MOV AL, 0x01
	ADD ESP, 0x04
	RETN 0x0004
loc_1009D405:
	XOR AL, AL
	ADD ESP, 0x04
	RETN 0x0004
loc_1009D40D:
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV EAX,DWORD PTR [EAX]
	MOV ECX,DWORD PTR [EAX+0x00000184]
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [ESP+var_4+0x4],EAX
	CMP EAX, ECX
	JZ loc_1009D43B
loc_1009D422:
	MOV EAX,DWORD PTR [ESP+var_4+0x4]
	SUB EAX, EDX
	CMP EAX, -0x08
	JZ loc_1009D443
	MOV EAX,DWORD PTR [ESP+var_4+0x4]
	MOV EAX,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_4+0x4],EAX
	CMP EAX, ECX
	JNZ loc_1009D422
loc_1009D43B:
	XOR AL, AL
	ADD ESP, 0x04
	RETN 0x0004
loc_1009D443:
	MOV AL, 0x01
	ADD ESP, 0x04
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009D450(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.m9AB80_sub_1009BB80])
	TEST BYTE PTR [ESP+arg1+0x4],0x01
	JZ loc_1009D468
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009D468:
	MOV EAX, ESI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009D470(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.m9AD60_sub_1009BD60])
	TEST BYTE PTR [ESP+arg1+0x4],0x01
	JZ loc_1009D488
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009D488:
	MOV EAX, ESI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_1009D490()
{
__asm{
	XOR EAX, EAX
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m7818_ptr]
	MOV DWORD PTR [ECX+0x10],EAX
	MOV DWORD PTR [ECX+0x14],EAX
	MOV DWORD PTR [ECX+0x18],EAX
	MOV DWORD PTR [ECX+0x24],EAX
	MOV DWORD PTR [ECX+0x28],EAX
	MOV DWORD PTR [ECX+0x0C],EAX
	MOV DWORD PTR [ECX+0x1C],EAX
	MOV DWORD PTR [ECX+0x20],EAX
	MOV DWORD PTR [ECX+0x0000083C],EAX
	MOV DWORD PTR [ECX+0x00000844],EAX
	MOV DWORD PTR [ECX+0x00000848],EAX
	MOV DWORD PTR [ECX+0x00000854],EAX
	MOV DWORD PTR [ECX+0x0000084C],EAX
	MOV DWORD PTR [ECX+0x04],EAX
	MOV DWORD PTR [ECX+0x0000086C],EAX
	MOV DWORD PTR [ECX+0x0000085C],EAX
	MOV DWORD PTR [ECX+0x00000860],EAX
	MOV DWORD PTR [ECX+0x00000864],EAX
	MOV DWORD PTR [ECX+0x00000868],EAX
	MOV DWORD PTR [ECX+0x00000870],EAX
	MOV DWORD PTR [ECX+0x00000858],0x00000001
	MOV DWORD PTR [ECX+0x00000840],EAX
	MOV EAX, ECX
	RET
}
}

__declspec(naked) DWORD LEGO1_loc_1009D530()
{
__asm{
	PUSH ESI
	PUSH EDI
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m7818_ptr]
	MOV EDI, ECX
	CALL_LONG(offset [LEGO1_text.m9C800_sub_1009D800])
	MOV ESI,DWORD PTR [EDI+0x00000870]
	TEST ESI, ESI
	JZ loc_1009D563
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9DFD0_sub_1009EFD0])
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV DWORD PTR [EDI+0x00000870],0x00000000
	ADD ESP, 0x04
loc_1009D563:
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1__GetPrimaryBitDepth_MxDirectDraw__SAHXZ()
{
	enum{
		var_7C = -0x7C,
		var_78 = -0x78,
		var_70 = -0x70,
		var_2C = -0x2C,
		var_24 = -0x24,
	};

__asm{
	SUB ESP, 0x70
	LEA EAX,DWORD PTR [ESP+var_70+0x70]
	PUSH ESI
	PUSH EDI
	MOV ESI, 0x00000008
	PUSH 0x00
	PUSH EAX
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.mD2728_j_DirectDrawCreate])
	TEST EAX, EAX
	JNZ loc_1009D5CD
	LEA EDI,DWORD PTR [ESP+var_78+0x84]
	XOR EAX, EAX
	MOV ECX, 0x0000001B
	REP STOSD
	LEA EAX,DWORD PTR [ESP+var_78+0x84]
	MOV ECX,DWORD PTR [ESP+var_7C+0x84]
	MOV DWORD PTR [ESP+var_78+0x84],0x0000006C
	PUSH EAX
	PUSH ECX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x30])
	MOV ESI,DWORD PTR [ESP+var_24+0x84]
	MOV EAX,DWORD PTR [ESP+var_2C+0x84]
	AND EAX, 0x20
	MOV ECX,DWORD PTR [ESP+var_7C+0x84]
	SHR EAX, 0x05
	PUSH ECX
	MOV DWORD PTR [offset LEGO1_data + 0x10C68], EAX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x08])
loc_1009D5CD:
	MOV EAX, ESI
	POP EDI
	POP ESI
	ADD ESP, 0x70
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009D5E0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8, DWORD arg9)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
		arg7 = 0x1C,
		arg8 = 0x20,
		arg9 = 0x24,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH ESI
	MOV DWORD PTR [ECX+0x0000083C],EAX
	PUSH EDI
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.m9C6C0_sub_1009D6C0])
	MOV ECX, ESI
	MOV EAX,DWORD PTR [ESI+0x00000870]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m9C690_sub_1009D690])
	TEST EAX, EAX
	JNZ loc_1009D60C
	XOR EAX, EAX
	POP EDI
	POP ESI
	RETN 0x0024
loc_1009D60C:
	MOV EAX,DWORD PTR [ESP+arg3+0x8]
	MOV ECX,DWORD PTR [ESP+arg4+0x8]
	MOV EDX,DWORD PTR [ESI+0x00000870]
	MOV DWORD PTR [ESI+0x08],EAX
	MOV EDI, 0x00000001
	MOV DWORD PTR [ESI+0x00000854],ECX
	CMP DWORD PTR [EDX],0x01
	SBB EAX, EAX
	NEG EAX
	MOV DWORD PTR [ESI+0x00000858],EAX
	TEST EAX, EAX
	JZ loc_1009D63D
	MOV EDI,DWORD PTR [ESP+arg2+0x8]
loc_1009D63D:
	MOV EAX,DWORD PTR [ESP+arg9+0x8]
	PUSH EDI
	MOV ECX,DWORD PTR [ESP+arg8+0xC]
	PUSH EAX
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9C700_sub_1009D700])
	TEST EAX, EAX
	JNZ loc_1009D65A
	XOR EAX, EAX
	POP EDI
	POP ESI
	RETN 0x0024
loc_1009D65A:
	PUSH EDI
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9C960_sub_1009D960])
	TEST EAX, EAX
	JNZ loc_1009D66D
	XOR EAX, EAX
	POP EDI
	POP ESI
	RETN 0x0024
loc_1009D66D:
	MOV EAX,DWORD PTR [ESP+arg7+0x8]
	MOV ECX,DWORD PTR [ESP+arg6+0x8]
	MOV EDX,DWORD PTR [ESP+arg5+0x8]
	PUSH EAX
	PUSH ECX
	PUSH EDX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9CA80_sub_1009DA80])
	POP EDI
	CMP EAX, 0x01
	SBB EAX, EAX
	POP ESI
	INC EAX
	RETN 0x0024
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009D690(DWORD arg1)
{
	enum{
		r = 0x0,
	};

__asm{
	PUSH ESI
	LEA ESI,DWORD PTR [ECX+0x0C]
	MOV EAX,DWORD PTR [ESI]
	TEST EAX, EAX
	JZ loc_1009D6A6
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
	MOV DWORD PTR [ESI], 0x00000000
loc_1009D6A6:
	MOV EAX,DWORD PTR [ESP+r+0x8]
	PUSH 0x00
	PUSH ESI
	MOV ECX,DWORD PTR [EAX]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.mD2728_j_DirectDrawCreate])
	POP ESI
	CMP EAX, 0x01
	SBB EAX, EAX
	NEG EAX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_1009D6C0()
{
__asm{
	CMP DWORD PTR [offset LEGO1_data + 0x10C68],0x00
	PUSH ESI
	PUSH EDI
	MOV EDI, ECX
	JZ loc_1009D6F5
	PUSH 0x00
	ADD EDI, 0x0000042C
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m520_GetDC])
	MOV ESI, EAX
	PUSH EDI
	PUSH 0x00000100
	PUSH 0x00
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m370_GetSystemPaletteEntries])
	PUSH ESI
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m51C_ReleaseDC])
loc_1009D6F5:
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009D700(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_4 = -0x4,
		r = 0x0,
	};

__asm{
	CMP DWORD PTR [offset LEGO1_data + 0x10C68],0x00
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EDI, ECX
	JZ loc_1009D733
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m520_GetDC])
	MOV ESI, EAX
	LEA EAX,DWORD PTR [EDI+0x2C]
	PUSH EAX
	PUSH 0x00000100
	PUSH 0x00
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m370_GetSystemPaletteEntries])
	PUSH ESI
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m51C_ReleaseDC])
loc_1009D733:
	LEA ECX,DWORD PTR [EDI+0x2F]
	MOV EAX, 0x0000000A
loc_1009D73B:
	MOV BYTE PTR [ECX],0x80
	ADD ECX, 0x04
	DEC EAX
	JNZ loc_1009D73B
	LEA ECX,DWORD PTR [EDI+0x57]
	MOV EAX, 0x00000084
loc_1009D74C:
	MOV BYTE PTR [ECX],0x44
	ADD ECX, 0x04
	DEC EAX
	JNZ loc_1009D74C
	LEA EAX,DWORD PTR [EDI+0x00000267]
	MOV ECX, 0x00000068
loc_1009D760:
	MOV BYTE PTR [EAX],0x84
	ADD EAX, 0x04
	DEC ECX
	JNZ loc_1009D760
	LEA ECX,DWORD PTR [EDI+0x00000407]
	MOV EAX, 0x0000000A
loc_1009D774:
	MOV BYTE PTR [ECX],0x80
	ADD ECX, 0x04
	DEC EAX
	JNZ loc_1009D774
	MOV EDX,DWORD PTR [ESP+r+0x14]
	TEST EDX, EDX
	JZ loc_1009D7BB
	MOV ESI, 0x0000000A
	CMP EDX, ESI
	JLE loc_1009D7BB
	MOV ECX,DWORD PTR [ESP+var_4+0x14]
	LEA EAX,DWORD PTR [EDI+0x54]
	ADD ECX, 0x28
loc_1009D798:
	CMP ESI, 0x000000F6
	JGE loc_1009D7BB
	MOV BL,BYTE PTR [ECX]
	ADD ECX, 0x04
	MOV BYTE PTR [EAX],BL
	ADD EAX, 0x04
	MOV BL,BYTE PTR [ECX-0x03]
	INC ESI
	MOV BYTE PTR [EAX-0x03],BL
	CMP ESI, EDX
	MOV BL,BYTE PTR [ECX-0x02]
	MOV BYTE PTR [EAX-0x02],BL
	JL loc_1009D798
loc_1009D7BB:
	MOV EAX,DWORD PTR [EDI+0x28]
	TEST EAX, EAX
	JZ loc_1009D7EE
	LEA ECX,DWORD PTR [EDI+0x2C]
	PUSH ECX
	PUSH 0x00000100
	PUSH 0x00
	PUSH 0x00
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x18])
	TEST EAX, EAX
	JZ loc_1009D7EE
	PUSH EAX
	MOV ECX, EDI
	PUSH offset [LEGO1_data.m10C74_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RETN 0x000C
loc_1009D7EE:
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	POP EBX
	RETN 0x000C
}
}

__declspec(naked) DWORD LEGO1_sub_1009D800()
{
__asm{
	PUSH ESI
	PUSH EDI
	MOV EAX,DWORD PTR [ECX]
	MOV ESI, ECX
	CALL_LONG(DWORD PTR [EAX+0x0C])
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9C920_sub_1009D920])
	MOV EAX,DWORD PTR [ESI+0x0C]
	TEST EAX, EAX
	JZ loc_1009D824
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
	MOV DWORD PTR [ESI+0x0C],0x00000000
loc_1009D824:
	MOV DWORD PTR [ESI+0x00000858],0x00000001
	MOV EDI,DWORD PTR [ESI+0x00000870]
	TEST EDI, EDI
	JZ loc_1009D852
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m9DFD0_sub_1009EFD0])
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV DWORD PTR [ESI+0x00000870],0x00000000
	ADD ESP, 0x04
loc_1009D852:
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009D860()
{
__asm{
	PUSH ESI
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.m9D7A0_sub_1009E7A0])
	CMP DWORD PTR [ESI+0x0000084C],0x00
	JZ loc_1009D892
	MOV EAX,DWORD PTR [ESI+0x0C]
	TEST EAX, EAX
	JZ loc_1009D892
	MOV DWORD PTR [ESI+0x00000844],0x00000001
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x4C])
	MOV DWORD PTR [ESI+0x00000844],0x00000000
loc_1009D892:
	MOV EAX,DWORD PTR [ESI+0x28]
	TEST EAX, EAX
	JZ loc_1009D8A6
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
	MOV DWORD PTR [ESI+0x28],0x00000000
loc_1009D8A6:
	MOV EAX,DWORD PTR [ESI+0x24]
	TEST EAX, EAX
	JZ loc_1009D8BA
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
	MOV DWORD PTR [ESI+0x24],0x00000000
loc_1009D8BA:
	MOV EAX,DWORD PTR [ESI+0x1C]
	TEST EAX, EAX
	JZ loc_1009D8CE
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
	MOV DWORD PTR [ESI+0x1C],0x00000000
loc_1009D8CE:
	MOV EAX,DWORD PTR [ESI+0x20]
	TEST EAX, EAX
	JZ loc_1009D8E2
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
	MOV DWORD PTR [ESI+0x20],0x00000000
loc_1009D8E2:
	MOV EAX,DWORD PTR [ESI+0x18]
	TEST EAX, EAX
	JZ loc_1009D8F6
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
	MOV DWORD PTR [ESI+0x18],0x00000000
loc_1009D8F6:
	MOV EAX,DWORD PTR [ESI+0x14]
	TEST EAX, EAX
	JZ loc_1009D90A
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
	MOV DWORD PTR [ESI+0x14],0x00000000
loc_1009D90A:
	MOV EAX,DWORD PTR [ESI+0x10]
	TEST EAX, EAX
	JZ loc_1009D91E
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
	MOV DWORD PTR [ESI+0x10],0x00000000
loc_1009D91E:
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009D920()
{
__asm{
	PUSH ESI
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.m9D7A0_sub_1009E7A0])
	MOV EAX,DWORD PTR [ESI+0x0C]
	TEST EAX, EAX
	JZ loc_1009D956
	MOV DWORD PTR [ESI+0x00000844],0x00000001
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x4C])
	MOV EAX,DWORD PTR [ESI+0x0C]
	PUSH 0x08
	PUSH 0x00
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x50])
	MOV DWORD PTR [ESI+0x00000844],0x00000000
loc_1009D956:
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009D960(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI, ECX
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	TEST ESI, ESI
	JZ loc_1009D994
	MOV EAX,DWORD PTR [EDI+0x0C]
	PUSH 0x11
	MOV DWORD PTR [EDI+0x00000844],0x00000001
	MOV ECX,DWORD PTR [EDI+0x0000083C]
	PUSH ECX
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x50])
	MOV DWORD PTR [EDI+0x00000844],0x00000000
	JMP loc_1009D9A6
loc_1009D994:
	MOV EAX,DWORD PTR [EDI+0x0C]
	PUSH 0x08
	MOV ECX,DWORD PTR [EDI+0x0000083C]
	PUSH ECX
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x50])
loc_1009D9A6:
	TEST EAX, EAX
	JZ loc_1009D9BE
	PUSH EAX
	MOV ECX, EDI
	PUSH offset [LEGO1_data.m10C88_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EDI
	POP ESI
	RETN 0x0004
loc_1009D9BE:
	MOV EAX, 0x00000001
	MOV DWORD PTR [EDI+0x0000084C],ESI
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009D9D0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBX
	MOV EAX,DWORD PTR [ECX+0x00000870]
	PUSH ESI
	PUSH EDI
	XOR EDI, EDI
	MOV EBX,DWORD PTR [EAX+0x08]
	CMP EBX, EDI
	JLE loc_1009DA07
	MOV EAX,DWORD PTR [EAX+0x04]
	MOV ECX,DWORD PTR [ESP+arg1+0xC]
	MOV EDX,DWORD PTR [ESP+arg2+0xC]
	MOV ESI,DWORD PTR [ESP+arg3+0xC]
loc_1009D9F1:
	CMP DWORD PTR [EAX],ECX
	JNZ loc_1009D9FF
	CMP DWORD PTR [EAX+0x04],EDX
	JNZ loc_1009D9FF
	CMP DWORD PTR [EAX+0x08],ESI
	JZ loc_1009DA0F
loc_1009D9FF:
	ADD EAX, 0x0C
	INC EDI
	CMP EDI, EBX
	JL loc_1009D9F1
loc_1009DA07:
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RETN 0x000C
loc_1009DA0F:
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	POP EBX
	RETN 0x000C
}
}

__declspec(naked) DWORD LEGO1_sub_1009DA20(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	CMP DWORD PTR [ESP+arg2],0x00
	PUSH ESI
	PUSH EDI
	JNZ loc_1009DA5B
	MOV EDI,DWORD PTR [ESP+arg1+0x8]
	PUSH -0x10
	PUSH EDI
	MOV ESI,DWORD PTR [offset LEGO1_idata.m510_GetWindowLongA]
	CALL_LONG(ESI)
	MOV DWORD PTR [offset LEGO1_data + 0x19594], EAX
	TEST EAX, 0x00040000
	JZ loc_1009DA6E
	PUSH -0x10
	PUSH EDI
	CALL_LONG(ESI)
	XOR EAX, 0x00040000
	PUSH EAX
	PUSH -0x10
	PUSH EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m53C_SetWindowLongA])
	POP EDI
	POP ESI
	RET
loc_1009DA5B:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x19594]
	MOV EDI,DWORD PTR [ESP+arg1+0x8]
	PUSH EAX
	PUSH -0x10
	PUSH EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m53C_SetWindowLongA])
loc_1009DA6E:
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009DA80(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_88 = -0x88,
		var_80 = -0x80,
		var_7C = -0x7C,
		var_74 = -0x74,
		var_70 = -0x70,
		var_6C = -0x6C,
		var_8 = -0x8,
		var_4 = -0x4,
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg1217245 = 0x4A4B74,
	};

__asm{
	SUB ESP, 0x7C
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	PUSH EBP
	CMP DWORD PTR [ESI+0x0000084C],0x00
	JZ FAR loc_1009DB74
	PUSH 0x00
	MOV EAX,DWORD PTR [ESI+0x0000083C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m9CA20_sub_1009DA20])
	ADD ESP, 0x08
	CMP DWORD PTR [ESI+0x00000858],0x00
	JNZ loc_1009DAFF
	LEA EAX,DWORD PTR [ESP+var_7C+0x8C]
	PUSH 0x00
	MOV DWORD PTR [ESP+var_7C+0x90],0x00000000
	PUSH EAX
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.mD2728_j_DirectDrawCreate])
	TEST EAX, EAX
	JNZ loc_1009DAFF
	PUSH 0x13
	MOV EAX,DWORD PTR [ESI+0x0000083C]
	MOV ECX,DWORD PTR [ESP+var_88+0x9C]
	PUSH EAX
	PUSH ECX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x50])
	TEST EAX, EAX
	JNZ loc_1009DAFF
	MOV EDI,DWORD PTR [ESP+var_4+0x98]
	PUSH 0x08
	MOV EBX,DWORD PTR [ESP+var_4+0x98]
	PUSH EDI
	MOV EAX,DWORD PTR [ESP+var_80+0x98]
	PUSH EBX
	PUSH EAX
	MOV EBP,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBP+arg1217245-0x4A4B20])
	JMP loc_1009DB0D
loc_1009DAFF:
	MOV EBX,DWORD PTR [ESP+var_8+0x98]
	MOV EDI,DWORD PTR [ESP+var_4+0x98]
loc_1009DB0D:
	MOV EBP,DWORD PTR [ESP+r+0x98]
	MOV ECX, ESI
	PUSH EBP
	PUSH EDI
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m9C9D0_sub_1009D9D0])
	TEST EAX, EAX
	JNZ loc_1009DB33
	MOV EAX,DWORD PTR [ESI+0x00000870]
	MOV EAX,DWORD PTR [EAX+0x04]
	MOV EBX,DWORD PTR [EAX]
	MOV EDI,DWORD PTR [EAX+0x04]
	MOV EBP,DWORD PTR [EAX+0x08]
loc_1009DB33:
	MOV EAX,DWORD PTR [ESI+0x0C]
	PUSH EBP
	MOV DWORD PTR [ESI+0x00000844],0x00000001
	PUSH EDI
	PUSH EBX
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x54])
	MOV DWORD PTR [ESI+0x00000844],0x00000000
	TEST EAX, EAX
	JZ FAR loc_1009DC7A
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10D2C_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x7C
	RETN 0x000C
loc_1009DB74:
	CMP DWORD PTR [ESI+0x00000858],0x00
	JNZ loc_1009DB9A
	PUSH 0x80004005
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10CD0_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x7C
	RETN 0x000C
loc_1009DB9A:
	PUSH -0x10
	MOV EAX,DWORD PTR [ESI+0x0000083C]
	MOV DWORD PTR [ESI+0x00000844],0x00000001
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m510_GetWindowLongA])
	AND EAX, 0x7FFFFFFF
	MOV ECX,DWORD PTR [ESI+0x0000083C]
	OR EAX, 0x00C40000
	PUSH EAX
	PUSH -0x10
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m53C_SetWindowLongA])
	MOV EDI,DWORD PTR [ESP+arg2+0x8C]
	MOV EBX,DWORD PTR [ESP+arg1+0x8C]
	LEA EAX,DWORD PTR [EDI-0x01]
	LEA ECX,DWORD PTR [EBX-0x01]
	PUSH EAX
	MOV EBP,DWORD PTR [offset LEGO1_idata.m518_SetRect]
	LEA EAX,DWORD PTR [ESP+var_7C+0x90]
	PUSH ECX
	PUSH 0x00
	PUSH 0x00
	PUSH EAX
	CALL_LONG(EBP)
	MOV EBP,DWORD PTR [ESI+0x0000083C]
	PUSH -0x14
	PUSH EBP
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m510_GetWindowLongA])
	PUSH EAX
	PUSH EBP
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m530_GetMenu])
	CMP EAX, 0x01
	SBB EAX, EAX
	INC EAX
	PUSH EAX
	PUSH -0x10
	PUSH EBP
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m510_GetWindowLongA])
	LEA ECX,DWORD PTR [ESP+var_74+0x8C]
	PUSH EAX
	PUSH ECX
	MOV EBP,DWORD PTR [offset LEGO1_idata.m528_AdjustWindowRectEx]
	CALL_LONG(EBP)
	MOV EAX,DWORD PTR [ESP+var_70+0x8C]
	PUSH 0x16
	SUB EAX,DWORD PTR [ESP+var_74+0x8C]
	INC EAX
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+var_6C+0x8C]
	MOV ECX,DWORD PTR [ESI+0x0000083C]
	SUB EAX,DWORD PTR [ESP+var_74+0x8C]
	MOV EBP,DWORD PTR [offset LEGO1_idata.m524_SetWindowPos]
	INC EAX
	PUSH EAX
	PUSH 0x00
	PUSH 0x00
	PUSH 0x00
	PUSH ECX
	CALL_LONG(EBP)
	PUSH 0x13
	PUSH 0x00
	PUSH 0x00
	MOV ECX,DWORD PTR [ESI+0x0000083C]
	PUSH 0x00
	PUSH 0x00
	PUSH -0x02
	PUSH ECX
	CALL_LONG(EBP)
	MOV DWORD PTR [ESI+0x00000844],0x00000000
	MOV EBP,DWORD PTR [ESP+arg3+0x8C]
loc_1009DC7A:
	MOV ECX, ESI
	MOV DWORD PTR [ESI+0x00000874],EBX
	MOV DWORD PTR [ESI+0x00000878],EDI
	MOV DWORD PTR [ESI+0x0000087C],EBP
	CALL_LONG(offset [LEGO1_text.m9CDF0_sub_1009DDF0])
	TEST EAX, EAX
	JNZ loc_1009DCA3
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x7C
	RETN 0x000C
loc_1009DCA3:
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9D020_sub_1009E020])
	MOV EAX,DWORD PTR [ESI+0x14]
	LEA ECX,DWORD PTR [ESP+var_6C+0x8C]
	PUSH EAX
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9CDA0_sub_1009DDA0])
	TEST EAX, EAX
	JNZ loc_1009DCCA
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x7C
	RETN 0x000C
loc_1009DCCA:
	TEST BYTE PTR [ESP+0x6C],0x20
	LEA EAX,DWORD PTR [ESI+0x00000848]
	JZ loc_1009DCDF
	MOV DWORD PTR [EAX], 0x00000001
	JMP loc_1009DCE5
loc_1009DCDF:
	MOV DWORD PTR [EAX], 0x00000000
loc_1009DCE5:
	CMP DWORD PTR [EAX],0x00
	JZ loc_1009DD51
	MOV EAX,DWORD PTR [ESI+0x0C]
	LEA EDI,DWORD PTR [ESI+0x28]
	PUSH 0x00
	LEA ECX,DWORD PTR [ESI+0x2C]
	PUSH EDI
	PUSH ECX
	PUSH 0x4C
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x14])
	TEST EAX, EAX
	JZ loc_1009DD1C
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10CB8_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x7C
	RETN 0x000C
loc_1009DD1C:
	MOV EAX,DWORD PTR [ESI+0x14]
	MOV ECX,DWORD PTR [EDI]
	MOV EBX,DWORD PTR [EAX]
	PUSH ECX
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x7C])
	MOV ECX,DWORD PTR [ESI+0x10]
	MOV EAX,DWORD PTR [EDI]
	MOV EBX,DWORD PTR [ECX]
	PUSH EAX
	PUSH ECX
	CALL_LONG(DWORD PTR [EBX+0x7C])
	TEST EAX, EAX
	JZ loc_1009DD51
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10CA4_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x7C
	RETN 0x000C
loc_1009DD51:
	CMP DWORD PTR [ESI+0x0000084C],0x00
	JNZ loc_1009DD71
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9D250_sub_1009E250])
	TEST EAX, EAX
	JNZ loc_1009DD71
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x7C
	RETN 0x000C
loc_1009DD71:
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x7C
	RETN 0x000C
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009DD80(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV ECX,DWORD PTR [ECX+0x0C]
	MOV EAX,DWORD PTR [ESP+arg3]
	MOV EDX,DWORD PTR [ESP+arg2]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg1+0x4]
	PUSH EDX
	PUSH EAX
	PUSH ECX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x18])
	RETN 0x000C
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009DDA0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg1]
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI, EDX
	XOR EAX, EAX
	MOV ECX, 0x0000001B
	PUSH EDX
	REP STOSD
	MOV EAX,DWORD PTR [ESP+arg2+0xC]
	MOV DWORD PTR [EDX], 0x0000006C
	PUSH EAX
	MOV EDI,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EDI+0x58])
	MOV EDI, EAX
	TEST EDI, EDI
	JZ loc_1009DDD7
	PUSH EDI
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10D44_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
loc_1009DDD7:
	CMP EDI, 0x01
	POP EDI
	SBB EAX, EAX
	POP ESI
	NEG EAX
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_1009DDF0()
{
	enum{
		var_78 = -0x78,
		var_70 = -0x70,
		var_6C = -0x6C,
		var_68 = -0x68,
		var_64 = -0x64,
		var_60 = -0x60,
		var_58 = -0x58,
		var_4 = -0x4,
	};

__asm{
	SUB ESP, 0x70
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	LEA EDI,DWORD PTR [ESP+var_6C+0x7C]
	CMP DWORD PTR [ESI+0x08],0x00
	JZ FAR loc_1009DEBE
	XOR EAX, EAX
	MOV ECX, 0x0000001B
	REP STOSD
	MOV DWORD PTR [ESP+var_6C+0x7C],0x0000006C
	MOV DWORD PTR [ESP+var_68+0x7C],0x00000021
	MOV DWORD PTR [ESP+var_4+0x7C],0x00002218
	CMP DWORD PTR [ESI+0x00000854],EAX
	JZ loc_1009DE37
	MOV DWORD PTR [ESP+var_4+0x7C],0x00002A18
loc_1009DE37:
	LEA EDI,DWORD PTR [ESI+0x10]
	PUSH 0x00
	LEA EAX,DWORD PTR [ESP+var_6C+0x80]
	PUSH EDI
	PUSH EAX
	MOV ECX, ESI
	MOV DWORD PTR [ESP+var_58+0x88],0x00000001
	CALL_LONG(offset [LEGO1_text.m9CD80_sub_1009DD80])
	TEST EAX, EAX
	JZ loc_1009DE6B
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10E38_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x70
	RET
loc_1009DE6B:
	MOV EAX,DWORD PTR [EDI]
	LEA ECX,DWORD PTR [ESP+var_70+0x7C]
	MOV DWORD PTR [ESP+var_70+0x7C],0x00000004
	LEA EDI,DWORD PTR [ESI+0x14]
	PUSH EDI
	PUSH ECX
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x30])
	TEST EAX, EAX
	JZ loc_1009DE9E
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10E08_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x70
	RET
loc_1009DE9E:
	MOV EAX,DWORD PTR [EDI]
	LEA ECX,DWORD PTR [ESP+var_78+0x88]
	PUSH EAX
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9CDA0_sub_1009DDA0])
	TEST EAX, EAX
	JNZ FAR loc_1009E005
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x70
	RET
loc_1009DEBE:
	XOR EAX, EAX
	MOV ECX, 0x0000001B
	REP STOSD
	MOV DWORD PTR [ESP+var_6C+0x7C],0x0000006C
	LEA EDI,DWORD PTR [ESI+0x10]
	PUSH EAX
	LEA EAX,DWORD PTR [ESP+var_6C+0x80]
	PUSH EDI
	PUSH EAX
	MOV ECX, ESI
	MOV DWORD PTR [ESP+var_68+0x88],0x00000001
	MOV DWORD PTR [ESP+var_4+0x88],0x00000200
	CALL_LONG(offset [LEGO1_text.m9CD80_sub_1009DD80])
	TEST EAX, EAX
	JZ loc_1009DF0D
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10DD8_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x70
	RET
loc_1009DF0D:
	MOV EAX,DWORD PTR [ESI+0x00000878]
	MOV ECX,DWORD PTR [ESI+0x00000874]
	MOV DWORD PTR [ESP+var_64+0x7C],EAX
	MOV DWORD PTR [ESP+var_60+0x7C],ECX
	MOV DWORD PTR [ESP+var_68+0x7C],0x00000007
	MOV DWORD PTR [ESP+var_4+0x7C],0x00002040
	CMP DWORD PTR [ESI+0x00000854],0x00
	JZ loc_1009DF42
	MOV DWORD PTR [ESP+var_4+0x7C],0x00002840
loc_1009DF42:
	LEA EBX,DWORD PTR [ESI+0x14]
	PUSH 0x00
	LEA EAX,DWORD PTR [ESP+var_6C+0x80]
	PUSH EBX
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9CD80_sub_1009DD80])
	TEST EAX, EAX
	JZ loc_1009DF6E
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10DAC_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x70
	RET
loc_1009DF6E:
	MOV EAX,DWORD PTR [EBX]
	LEA ECX,DWORD PTR [ESP+var_6C+0x7C]
	PUSH EAX
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9CDA0_sub_1009DDA0])
	TEST EAX, EAX
	JNZ loc_1009DF8A
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x70
	RET
loc_1009DF8A:
	MOV EAX,DWORD PTR [ESI+0x0C]
	LEA EBX,DWORD PTR [ESI+0x24]
	PUSH 0x00
	PUSH EBX
	PUSH 0x00
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x10])
	TEST EAX, EAX
	JZ loc_1009DFB5
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10D94_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x70
	RET
loc_1009DFB5:
	MOV EAX,DWORD PTR [EBX]
	MOV ECX,DWORD PTR [ESI+0x0000083C]
	PUSH ECX
	PUSH 0x00
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x20])
	TEST EAX, EAX
	JZ loc_1009DFE0
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10D7C_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x70
	RET
loc_1009DFE0:
	MOV EAX,DWORD PTR [EDI]
	MOV ECX,DWORD PTR [EBX]
	MOV EBX,DWORD PTR [EAX]
	PUSH ECX
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x70])
	TEST EAX, EAX
	JZ loc_1009E005
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10D68_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x70
	RET
loc_1009E005:
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x70
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009E020()
{
	enum{
		var_88 = -0x88,
		var_84 = -0x84,
		var_7C = -0x7C,
		var_78 = -0x78,
		var_74 = -0x74,
		var_70 = -0x70,
		var_6C = -0x6C,
		var_5C = -0x5C,
	};

__asm{
	SUB ESP, 0x74
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV DWORD PTR [ESP+var_74+0x80],0x00000000
	CMP DWORD PTR [ESI+0x08],0x01
	SBB EAX, EAX
	PUSH EBP
	ADD EAX, 0x02
	MOV DWORD PTR [ESP+var_70+0x84],EAX
	TEST EAX, EAX
	JLE FAR loc_1009E0FD
loc_1009E046:
	LEA EDI,DWORD PTR [ESP+var_6C+0x84]
	XOR EAX, EAX
	MOV ECX, 0x0000001B
	PUSH 0x00
	REP STOSD
	LEA ECX,DWORD PTR [ESP+var_6C+0x88]
	PUSH 0x01
	MOV EAX,DWORD PTR [ESI+0x14]
	PUSH ECX
	MOV DWORD PTR [ESP+var_6C+0x90],0x0000006C
	PUSH 0x00
	MOV EBX,DWORD PTR [EAX]
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x64])
	CMP EAX, 0x887601C2
	JNZ loc_1009E093
	MOV EAX,DWORD PTR [ESI+0x14]
	PUSH EAX
	MOV EBX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBX+0x6C])
	MOV EAX,DWORD PTR [ESI+0x14]
	PUSH 0x00
	LEA ECX,DWORD PTR [ESP+var_7C+0x98]
	PUSH 0x01
	PUSH ECX
	MOV EBX,DWORD PTR [EAX]
	PUSH 0x00
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x64])
loc_1009E093:
	TEST EAX, EAX
	JNZ loc_1009E0FD
	MOV EDX,DWORD PTR [ESP+var_5C+0x98]
	MOV EBX,DWORD PTR [ESP+var_78+0x98]
	MOV EAX, EBX
	DEC EBX
	TEST EAX, EAX
	JZ loc_1009E0C7
loc_1009E0A6:
	MOV EBP,DWORD PTR [ESP+var_74+0x98]
	MOV EDI, EDX
	XOR EAX, EAX
	MOV ECX, EBP
	SHR ECX, 0x02
	REP STOSD
	MOV ECX, EBP
	AND ECX, 0x03
	REP STOSB
	ADD EDX,DWORD PTR [ESP+var_70+0x98]
	MOV EAX, EBX
	DEC EBX
	TEST EAX, EAX
	JNZ loc_1009E0A6
loc_1009E0C7:
	MOV EAX,DWORD PTR [ESI+0x14]
	MOV ECX,DWORD PTR [ESP+var_5C+0x98]
	MOV EBX,DWORD PTR [EAX]
	PUSH ECX
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x00000080])
	CMP DWORD PTR [ESI+0x08],0x00
	JZ loc_1009E0EB
	MOV EAX,DWORD PTR [ESI+0x10]
	PUSH 0x01
	MOV EBX,DWORD PTR [EAX]
	PUSH 0x00
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x2C])
loc_1009E0EB:
	INC DWORD PTR [ESP+var_88+0x98]
	MOV EAX,DWORD PTR [ESP+var_88+0x98]
	CMP EAX,DWORD PTR [ESP+var_84+0x98]
	JL FAR loc_1009E046
loc_1009E0FD:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x74
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009E110(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg1217241 = 0x4A4B64,
	};

__asm{
	SUB ESP, 0x14
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX, ECX
	MOV ESI,DWORD PTR [ESP+arg2+0x20]
	PUSH EBP
	TEST ESI, ESI
	JNZ loc_1009E12D
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x14
	RETN 0x000C
loc_1009E12D:
	LEA EAX,DWORD PTR [ESP+var_14+0x24]
	MOV EBP,DWORD PTR [ESI]
	PUSH EAX
	PUSH ESI
	CALL_LONG(DWORD PTR [EBP+arg1217241-0x4A4B20])
	TEST EAX, EAX
	JZ loc_1009E155
	PUSH EAX
	MOV ECX, EBX
	PUSH offset [LEGO1_data.m10E70_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x14
	RETN 0x000C
loc_1009E155:
	MOV EBP,DWORD PTR [ESP+0x28]
	MOV ECX, 0xFFFFFFFF
	MOV EDI, EBP
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	MOV EAX,DWORD PTR [EBX+0x00000840]
	LEA EDI,DWORD PTR [ECX-0x01]
	MOV ECX,DWORD PTR [ESP+var_1C+0x2C]
	PUSH EAX
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m368_SelectObject])
	MOV ECX,DWORD PTR [ESP+var_1C+0x2C]
	PUSH 0x0000FFFF
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m36C_SetTextColor])
	MOV ECX,DWORD PTR [ESP+var_1C+0x2C]
	PUSH 0x00
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m350_SetBkColor])
	MOV ECX,DWORD PTR [ESP+var_1C+0x2C]
	PUSH 0x02
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m378_SetBkMode])
	MOV EBX,DWORD PTR [ESP+arg1+0x2C]
	MOV ECX,DWORD PTR [ESP+var_1C+0x2C]
	PUSH EBX
	PUSH EDI
	PUSH EBP
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m35C_GetTextExtentPoint32A])
	MOV ECX,DWORD PTR [EBX+0x04]
	MOV EDX,DWORD PTR [EBX]
	LEA EAX,DWORD PTR [ESP+var_18+0x2C]
	PUSH ECX
	PUSH EDX
	PUSH 0x00
	PUSH 0x00
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m518_SetRect])
	LEA ECX,DWORD PTR [ESP+var_4+0x18]
	PUSH 0x00
	MOV EAX,DWORD PTR [ESP+var_4+0x18]
	PUSH EDI
	PUSH EBP
	PUSH ECX
	PUSH 0x02
	PUSH 0x00
	PUSH 0x00
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m354_ExtTextOutA])
	MOV ECX,DWORD PTR [ESP+var_8+0x18]
	MOV EAX,DWORD PTR [ESI]
	PUSH ECX
	PUSH ESI
	CALL_LONG(DWORD PTR [EAX+0x68])
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x14
	RETN 0x000C
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009E210(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	LEA EAX,DWORD PTR [ECX+0x0000082C]
	MOV EDX,DWORD PTR [ECX+0x1C]
	PUSH EAX
	PUSH EDX
	MOV EAX,DWORD PTR [ESP+arg1+0x8]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m9D110_sub_1009E110])
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009E230(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	LEA EAX,DWORD PTR [ECX+0x00000834]
	MOV EDX,DWORD PTR [ECX+0x20]
	PUSH EAX
	PUSH EDX
	MOV EAX,DWORD PTR [ESP+arg1+0x8]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m9D110_sub_1009E110])
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_1009E250()
{
	enum{
		var_BC = -0xBC,
		var_B4 = -0xB4,
		var_B0 = -0xB0,
		var_9C = -0x9C,
		var_98 = -0x98,
		var_94 = -0x94,
		var_90 = -0x90,
		var_88 = -0x88,
		var_34 = -0x34,
		var_30 = -0x30,
		var_2C = -0x2C,
		arg1217253 = 0x4A4B94,
	};

__asm{
	SUB ESP, 0x000000BC
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX, ECX
	PUSH EBP
	MOV ESI, offset [LEGO1_data.m10F10_str]
	LEA EDI,DWORD PTR [ESP+var_B4+0xCC]
	MOV ECX, 0x00000005
	REP MOVSD
	MOVSW
	MOVSB
	MOV ESI, offset [LEGO1_data.m10EE0_str]
	LEA EDI,DWORD PTR [ESP+var_30+0xCC]
	MOV ECX, 0x0000000B
	REP MOVSD
	MOVSW
	MOVSB
	MOV EAX,DWORD PTR [EBX+0x00000840]
	TEST EAX, EAX
	JZ loc_1009E296
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m358_DeleteObject])
loc_1009E296:
	PUSH offset [LEGO1_data.m7A90_str]
	PUSH 0x02
	PUSH 0x00
	PUSH 0x00
	PUSH 0x00
	PUSH 0x00
	PUSH 0x00
	PUSH 0x00
	PUSH 0x00
	MOV ECX, 0x00000018
	PUSH 0x00000190
	MOV EAX, DWORD PTR [offset LEGO1_idata.m364_CreateFontA]
	CMP DWORD PTR [EBX+0x00000874],0x00000258
	PUSH 0x00
	PUSH 0x00
	PUSH 0x00
	JG loc_1009E2D1
	MOV ECX, 0x0000000C
loc_1009E2D1:
	PUSH ECX
	CALL_LONG(EAX)
	PUSH 0x00
	MOV DWORD PTR [EBX+0x00000840],EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m520_GetDC])
	MOV ESI, EAX
	MOV EBP,DWORD PTR [offset LEGO1_idata.m368_SelectObject]
	MOV EAX,DWORD PTR [EBX+0x00000840]
	PUSH EAX
	PUSH ESI
	CALL_LONG(EBP)
	LEA ECX,DWORD PTR [EBX+0x0000082C]
	LEA EDI,DWORD PTR [ESP+var_30+0xCC]
	PUSH ECX
	SUB EAX, EAX
	MOV ECX, 0xFFFFFFFF
	REPNE SCAS
	LEA EAX,DWORD PTR [ESP+var_2C+0xCC]
	MOV EBP,DWORD PTR [offset LEGO1_idata.m360_GetTextExtentPointA]
	NOT ECX
	DEC ECX
	PUSH ECX
	PUSH EAX
	PUSH ESI
	CALL_LONG(EBP)
	LEA ECX,DWORD PTR [EBX+0x00000834]
	LEA EDI,DWORD PTR [ESP+var_B4+0xCC]
	PUSH ECX
	SUB EAX, EAX
	MOV ECX, 0xFFFFFFFF
	REPNE SCAS
	NOT ECX
	DEC ECX
	LEA EAX,DWORD PTR [ESP+var_B0+0xCC]
	PUSH ECX
	PUSH EAX
	PUSH ESI
	CALL_LONG(EBP)
	PUSH ESI
	MOV EBP,DWORD PTR [offset LEGO1_idata.m51C_ReleaseDC]
	PUSH 0x00
	CALL_LONG(EBP)
	LEA EDI,DWORD PTR [ESP+var_9C+0xCC]
	XOR EAX, EAX
	MOV ECX, 0x0000001B
	REP STOSD
	MOV DWORD PTR [ESP+var_9C+0xCC],0x0000006C
	MOV DWORD PTR [ESP+var_98+0xCC],0x00000007
	MOV DWORD PTR [ESP+var_34+0xCC],0x00000040
	CMP DWORD PTR [EBX+0x00000854],EAX
	JZ loc_1009E386
	MOV DWORD PTR [ESP+var_34+0xCC],0x00000840
loc_1009E386:
	MOV EAX,DWORD PTR [EBX+0x00000830]
	MOV ECX,DWORD PTR [EBX+0x0000082C]
	LEA ESI,DWORD PTR [EBX+0x1C]
	PUSH 0x00
	MOV DWORD PTR [ESP+var_90+0xCC],EAX
	PUSH ESI
	LEA EAX,DWORD PTR [ESP+var_94+0xCC]
	MOV DWORD PTR [ESP+var_88+0xCC],ECX
	PUSH EAX
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m9CD80_sub_1009DD80])
	TEST EAX, EAX
	JZ loc_1009E3CA
	PUSH EAX
	MOV ECX, EBX
	PUSH offset [LEGO1_data.m10EB8_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x000000BC
	RET
loc_1009E3CA:
	LEA EAX,DWORD PTR [ESP+0x10]
	LEA ECX,DWORD PTR [ESP+var_BC+0xCC]
	PUSH ECX
	PUSH 0x08
	MOV DWORD PTR [EAX], 0x00000000
	MOV DWORD PTR [EAX+0x04],0x00000000
	MOV EAX,DWORD PTR [ESI]
	PUSH EAX
	MOV EBP,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBP+arg1217253-0x4A4B20])
	LEA ECX,DWORD PTR [ESP+var_30+0xCC]
	PUSH ECX
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m9D210_sub_1009E210])
	TEST EAX, EAX
	JNZ loc_1009E40A
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x000000BC
	RET
loc_1009E40A:
	LEA EDI,DWORD PTR [ESP+0x30]
	XOR EAX, EAX
	MOV ECX, 0x0000001B
	REP STOSD
	MOV DWORD PTR [ESP+var_9C+0xCC],0x0000006C
	MOV DWORD PTR [ESP+var_98+0xCC],0x00000007
	MOV DWORD PTR [ESP+var_34+0xCC],0x00000040
	CMP DWORD PTR [EBX+0x00000854],EAX
	JZ loc_1009E445
	MOV DWORD PTR [ESP+var_34+0xCC],0x00000840
loc_1009E445:
	MOV EAX,DWORD PTR [EBX+0x00000838]
	MOV ECX,DWORD PTR [EBX+0x00000834]
	LEA ESI,DWORD PTR [EBX+0x20]
	PUSH 0x00
	MOV DWORD PTR [ESP+var_90+0xCC],EAX
	PUSH ESI
	LEA EAX,DWORD PTR [ESP+var_94+0xCC]
	MOV DWORD PTR [ESP+var_88+0xCC],ECX
	PUSH EAX
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m9CD80_sub_1009DD80])
	TEST EAX, EAX
	JZ loc_1009E489
	PUSH EAX
	MOV ECX, EBX
	PUSH offset [LEGO1_data.m10E90_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x000000BC
	RET
loc_1009E489:
	LEA EAX,DWORD PTR [ESP+0x10]
	LEA ECX,DWORD PTR [ESP+var_BC+0xCC]
	PUSH ECX
	PUSH 0x08
	MOV DWORD PTR [EAX], 0x00000000
	MOV DWORD PTR [EAX+0x04],0x00000000
	MOV EAX,DWORD PTR [ESI]
	PUSH EAX
	MOV EBP,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBP+arg1217253-0x4A4B20])
	LEA ECX,DWORD PTR [ESP+var_B4+0xCC]
	PUSH ECX
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m9D230_sub_1009E230])
	POP EBP
	CMP EAX, 0x01
	SBB EAX, EAX
	POP EDI
	INC EAX
	POP ESI
	POP EBX
	ADD ESP, 0x000000BC
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009E4D0()
{
__asm{
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x10]
	MOV ESI, ECX
	TEST EAX, EAX
	JZ loc_1009E505
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x60])
	CMP EAX, 0x887601C2
	JNZ loc_1009E505
	MOV EAX,DWORD PTR [ESI+0x10]
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x6C])
	TEST EAX, EAX
	JZ loc_1009E505
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10FAC_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP ESI
	RET
loc_1009E505:
	MOV EAX,DWORD PTR [ESI+0x14]
	TEST EAX, EAX
	JZ loc_1009E537
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x60])
	CMP EAX, 0x887601C2
	JNZ loc_1009E537
	MOV EAX,DWORD PTR [ESI+0x14]
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x6C])
	TEST EAX, EAX
	JZ loc_1009E537
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10F8C_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP ESI
	RET
loc_1009E537:
	MOV EAX,DWORD PTR [ESI+0x18]
	TEST EAX, EAX
	JZ loc_1009E569
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x60])
	CMP EAX, 0x887601C2
	JNZ loc_1009E569
	MOV EAX,DWORD PTR [ESI+0x18]
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x6C])
	TEST EAX, EAX
	JZ loc_1009E569
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10F70_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP ESI
	RET
loc_1009E569:
	MOV EAX,DWORD PTR [ESI+0x1C]
	TEST EAX, EAX
	JZ loc_1009E59B
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x60])
	CMP EAX, 0x887601C2
	JNZ loc_1009E59B
	MOV EAX,DWORD PTR [ESI+0x1C]
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x6C])
	TEST EAX, EAX
	JZ loc_1009E59B
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10F4C_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP ESI
	RET
loc_1009E59B:
	MOV EAX,DWORD PTR [ESI+0x20]
	TEST EAX, EAX
	JZ loc_1009E5CD
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x60])
	CMP EAX, 0x887601C2
	JNZ loc_1009E5CD
	MOV EAX,DWORD PTR [ESI+0x20]
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x6C])
	TEST EAX, EAX
	JZ loc_1009E5CD
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10F28_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP ESI
	RET
loc_1009E5CD:
	MOV EAX, 0x00000001
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009E5E0(DWORD arg1, DWORD arg2)
{
	enum{
		var_70 = -0x70,
		var_6C = -0x6C,
		var_68 = -0x68,
		var_64 = -0x64,
		var_60 = -0x60,
		var_54 = -0x54,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x70
	XOR EAX, EAX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	LEA EDI,DWORD PTR [ESP+var_6C+0x78]
	MOV ECX, 0x0000001B
	REP STOSD
	MOV DWORD PTR [ESP+var_6C+0x78],0x0000006C
	MOV EAX,DWORD PTR [ESI+0x00000878]
	MOV ECX,DWORD PTR [ESI+0x00000874]
	MOV EDX,DWORD PTR [ESP+arg2+0x78]
	MOV DWORD PTR [ESP+var_64+0x78],EAX
	MOV EAX,DWORD PTR [ESP+arg1+0x78]
	PUSH 0x00
	OR EAX, 0x00020000
	MOV DWORD PTR [ESP+var_60+0x7C],ECX
	LEA ECX,DWORD PTR [ESP+var_70+0x7C]
	MOV DWORD PTR [ESP+var_54+0x7C],EDX
	LEA EDX,DWORD PTR [ESP+var_6C+0x7C]
	PUSH ECX
	PUSH EDX
	MOV ECX, ESI
	MOV DWORD PTR [ESP+var_68+0x84],0x00000047
	MOV DWORD PTR [ESP+var_4+0x84],EAX
	CALL_LONG(offset [LEGO1_text.m9CD80_sub_1009DD80])
	TEST EAX, EAX
	JZ loc_1009E661
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10FF4_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EDI
	POP ESI
	ADD ESP, 0x70
	RETN 0x0008
loc_1009E661:
	MOV EAX,DWORD PTR [ESI+0x14]
	MOV ECX,DWORD PTR [ESP+var_70+0x78]
	PUSH ECX
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x0C])
	TEST EAX, EAX
	JZ loc_1009E68A
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10FCC_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP EDI
	POP ESI
	ADD ESP, 0x70
	RETN 0x0008
loc_1009E68A:
	MOV EAX,DWORD PTR [ESP+0x08]
	POP EDI
	MOV DWORD PTR [ESI+0x18],EAX
	MOV EAX, 0x00000001
	POP ESI
	ADD ESP, 0x70
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1__Pause_MxDirectDraw__QAEHH_Z(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	CMP DWORD PTR [ESP+arg1],0x00
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x0000086C]
	MOV ESI, ECX
	JZ loc_1009E71C
	INC EAX
	MOV DWORD PTR [ESI+0x0000086C],EAX
	CMP EAX, 0x01
	JLE loc_1009E6C5
	MOV EAX, 0x00000001
	POP ESI
	RETN 0x0004
loc_1009E6C5:
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9D7A0_sub_1009E7A0])
	TEST EAX, EAX
	JNZ loc_1009E6D6
	XOR EAX, EAX
	POP ESI
	RETN 0x0004
loc_1009E6D6:
	CMP DWORD PTR [ESI+0x0000084C],0x00
	JZ loc_1009E713
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9D7F0__FlipToGDISurface_MxDirectDraw__QAEHXZ])
	TEST EAX, EAX
	JNZ loc_1009E6F0
	XOR EAX, EAX
	POP ESI
	RETN 0x0004
loc_1009E6F0:
	MOV EAX,DWORD PTR [ESI+0x0000083C]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m540_DrawMenuBar])
	PUSH 0x00000400
	MOV ECX,DWORD PTR [ESI+0x0000083C]
	PUSH 0x00
	PUSH 0x00
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m544_RedrawWindow])
loc_1009E713:
	MOV EAX, 0x00000001
	POP ESI
	RETN 0x0004
loc_1009E71C:
	DEC EAX
	MOV DWORD PTR [ESI+0x0000086C],EAX
	TEST EAX, EAX
	JLE loc_1009E730
	MOV EAX, 0x00000001
	POP ESI
	RETN 0x0004
loc_1009E730:
	JGE loc_1009E73C
	MOV DWORD PTR [ESI+0x0000086C],0x00000000
loc_1009E73C:
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9D750_sub_1009E750])
	TEST EAX, EAX
	JNZ loc_1009E713
	XOR EAX, EAX
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_1009E750()
{
__asm{
	PUSH ESI
	MOV ESI, ECX
	CMP DWORD PTR [ECX+0x0000084C],0x00
	JZ loc_1009E794
	CMP DWORD PTR [ESI+0x00000848],0x00
	JZ loc_1009E794
	MOV EAX,DWORD PTR [ESI+0x28]
	TEST EAX, EAX
	JZ loc_1009E794
	LEA ECX,DWORD PTR [ESI+0x2C]
	PUSH ECX
	PUSH 0x00000100
	PUSH 0x00
	PUSH 0x00
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x18])
	TEST EAX, EAX
	JZ loc_1009E794
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10C74_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP ESI
	RET
loc_1009E794:
	MOV EAX, 0x00000001
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009E7A0()
{
__asm{
	PUSH ESI
	MOV ESI, ECX
	CMP DWORD PTR [ECX+0x00000848],0x00
	JZ loc_1009E7DE
	MOV EAX,DWORD PTR [ESI+0x28]
	TEST EAX, EAX
	JZ loc_1009E7DE
	LEA ECX,DWORD PTR [ESI+0x0000042C]
	PUSH ECX
	PUSH 0x00000100
	PUSH 0x00
	PUSH 0x00
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x18])
	TEST EAX, EAX
	JZ loc_1009E7DE
	PUSH EAX
	MOV ECX, ESI
	PUSH offset [LEGO1_data.m10C74_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
	XOR EAX, EAX
	POP ESI
	RET
loc_1009E7DE:
	MOV EAX, 0x00000001
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1__FlipToGDISurface_MxDirectDraw__QAEHXZ()
{
__asm{
	PUSH ESI
	PUSH EDI
	MOV EAX,DWORD PTR [ECX+0x0C]
	MOV EDI, ECX
	TEST EAX, EAX
	JZ loc_1009E81E
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x28])
	MOV ESI, EAX
	TEST ESI, ESI
	JZ loc_1009E814
	PUSH ESI
	MOV ECX, EDI
	PUSH offset [LEGO1_data.m11024_str]
	CALL_LONG(offset [LEGO1_text.m9D830_sub_1009E830])
loc_1009E814:
	POP EDI
	CMP ESI, 0x01
	SBB EAX, EAX
	POP ESI
	NEG EAX
	RET
loc_1009E81E:
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009E830(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	CMP DWORD PTR [offset LEGO1_data + 0x10C70],0x00
	PUSH ESI
	MOV ESI, ECX
	JNZ loc_1009E875
	MOV DWORD PTR [offset LEGO1_data + 0x10C70],0x00000001
	MOV EAX,DWORD PTR [ESI]
	CALL_LONG(DWORD PTR [EAX+0x08])
	MOV ECX,DWORD PTR [ESI+0x0000085C]
	TEST ECX, ECX
	JZ loc_1009E86B
	MOV EAX,DWORD PTR [ESI+0x00000864]
	MOV EDX,DWORD PTR [ESP+arg2+0x4]
	MOV ESI,DWORD PTR [ESP+arg1+0x4]
	PUSH EAX
	PUSH EDX
	PUSH ESI
	CALL_LONG(ECX)
	ADD ESP, 0x0C
loc_1009E86B:
	MOV DWORD PTR [offset LEGO1_data + 0x10C70],0x00000000
loc_1009E875:
	POP ESI
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_1009EFB0()
{
__asm{
	PUSH EDI
	MOV EDX, ECX
	MOV EDI, EDX
	XOR EAX, EAX
	MOV ECX, 0x0000005F
	REP STOSD
	MOV EAX, EDX
	POP EDI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009EFD0()
{
__asm{
	PUSH ESI
	MOV EAX,DWORD PTR [ECX]
	MOV ESI, ECX
	TEST EAX, EAX
	JZ loc_1009EFE2
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009EFE2:
	MOV EAX,DWORD PTR [ESI+0x04]
	TEST EAX, EAX
	JZ loc_1009EFF2
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009EFF2:
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009F000()
{
__asm{
	PUSH ESI
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.m9E900_sub_1009F900])
	MOV DWORD PTR [ESI+0x08],0x00000000
	MOV EAX, ESI
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009F020(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m9E910_sub_1009F910])
	TEST EAX, EAX
	JNZ loc_1009F04E
	PUSH 0x04
	ADD ESI, 0x08
	PUSH ESI
	MOV EAX,DWORD PTR [EDI]
	MOV ECX, EDI
	CALL_LONG(DWORD PTR [EAX+0x04])
	CMP EAX, 0x01
	MOV ECX, EAX
	MOV EAX, 0x00000000
	ADC EAX, -0x01
	AND EAX, ECX
loc_1009F04E:
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009F060(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m9E950_sub_1009F950])
	TEST EAX, EAX
	JNZ loc_1009F08E
	PUSH 0x04
	ADD ESI, 0x08
	PUSH ESI
	MOV EAX,DWORD PTR [EDI]
	MOV ECX, EDI
	CALL_LONG(DWORD PTR [EAX+0x08])
	CMP EAX, 0x01
	MOV ECX, EAX
	MOV EAX, 0x00000000
	ADC EAX, -0x01
	AND EAX, ECX
loc_1009F08E:
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_1009F0A0()
{
__asm{
	XOR EAX, EAX
	MOV WORD PTR DS:[ECX],AX
	MOV DWORD PTR [ECX+0x04],EAX
	MOV WORD PTR DS:[ECX+0x08],AX
	MOV DWORD PTR [ECX+0x0C],EAX
	MOV WORD PTR DS:[ECX+0x10],AX
	MOV DWORD PTR [ECX+0x14],EAX
	MOV DWORD PTR [ECX+0x18],EAX
	MOV DWORD PTR [ECX+0x1C],EAX
	MOV DWORD PTR [ECX+0x20],EAX
	MOV EAX, ECX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009F0D0()
{
__asm{
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x04]
	MOV ESI, ECX
	TEST EAX, EAX
	JZ loc_1009F0EA
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV DWORD PTR [ESI+0x04],0x00000000
	ADD ESP, 0x04
loc_1009F0EA:
	MOV EAX,DWORD PTR [ESI+0x0C]
	TEST EAX, EAX
	JZ loc_1009F101
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV DWORD PTR [ESI+0x0C],0x00000000
	ADD ESP, 0x04
loc_1009F101:
	MOV EAX,DWORD PTR [ESI+0x14]
	TEST EAX, EAX
	JZ loc_1009F118
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV DWORD PTR [ESI+0x14],0x00000000
	ADD ESP, 0x04
loc_1009F118:
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009F120(DWORD arg1)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
	PUSH EDI
	PUSH EBP
	MOV EDI, ECX
	MOV EAX,DWORD PTR [ESI]
	PUSH 0x02
	PUSH EDI
	MOV ECX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [ESP+var_4+0x1C],ECX
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [ESP+var_4+0x1C])
	TEST EAX, EAX
	JNZ FAR loc_1009F1F2
	MOV AX,WORD PTR DS:[EDI]
	XOR EBX, EBX
	TEST AX, AX
	JZ loc_1009F175
	JBE loc_1009F175
	XOR EBP, EBP
loc_1009F155:
	PUSH ESI
	MOV ECX,DWORD PTR [EDI+0x04]
	ADD ECX, EBP
	CALL_LONG(offset [LEGO1_text.m9EA40_sub_1009FA40])
	TEST EAX, EAX
	JNZ FAR loc_1009F1F2
	ADD EBP, 0x14
	INC EBX
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[EDI]
	CMP EAX, EBX
	JG loc_1009F155
loc_1009F175:
	PUSH 0x02
	LEA EAX,DWORD PTR [EDI+0x08]
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [ESP+var_4+0x1C])
	TEST EAX, EAX
	JNZ loc_1009F1F2
	MOV AX,WORD PTR DS:[EDI+0x08]
	XOR EBX, EBX
	TEST AX, AX
	JZ loc_1009F1B1
	JBE loc_1009F1B1
	XOR EBP, EBP
loc_1009F194:
	PUSH ESI
	MOV ECX,DWORD PTR [EDI+0x0C]
	ADD ECX, EBP
	CALL_LONG(offset [LEGO1_text.m9EA40_sub_1009FA40])
	TEST EAX, EAX
	JNZ loc_1009F1F2
	ADD EBP, 0x14
	INC EBX
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[EDI+0x08]
	CMP EAX, EBX
	JG loc_1009F194
loc_1009F1B1:
	PUSH 0x02
	LEA EAX,DWORD PTR [EDI+0x10]
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [ESP+var_4+0x1C])
	TEST EAX, EAX
	JNZ loc_1009F1F2
	MOV AX,WORD PTR DS:[EDI+0x10]
	XOR EBX, EBX
	TEST AX, AX
	JZ loc_1009F1F0
	MOV EBP, 0x00000000
	JBE loc_1009F1F0
loc_1009F1D3:
	PUSH ESI
	MOV ECX,DWORD PTR [EDI+0x14]
	ADD ECX, EBX
	CALL_LONG(offset [LEGO1_text.m9E060_sub_1009F060])
	TEST EAX, EAX
	JNZ loc_1009F1F2
	ADD EBX, 0x0C
	INC EBP
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[EDI+0x10]
	CMP EAX, EBP
	JG loc_1009F1D3
loc_1009F1F0:
	XOR EAX, EAX
loc_1009F1F2:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_1009F200(DWORD arg1)
{
	enum{
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m9E474_proc_1009F474]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	SUB ESP, 0x0C
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV ECX,DWORD PTR [EAX]
	PUSH 0x02
	PUSH ESI
	MOV EDX,DWORD PTR [ECX+0x04]
	MOV ECX, EAX
	MOV DWORD PTR [EBP+var_1C+0x4],EDX
	CALL_LONG(EDX)
	TEST EAX, EAX
	JNZ_LONG(offset [LEGO1_text.m9E407_loc_1009F407])
	MOV AX,WORD PTR DS:[ESI]
	TEST AX, AX
	JZ loc_1009F2BB
	MOVZX EDI,AX
	LEA EAX,DWORD PTR [EDI*4+0x00000000]
	LEA ECX,DWORD PTR [EAX*4+EAX]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	TEST EAX, EAX
	JZ loc_1009F27D
	MOV EBX, EAX
	DEC EDI
	JS loc_1009F278
loc_1009F26B:
	MOV ECX, EBX
	ADD EBX, 0x14
	CALL_LONG(offset [LEGO1_text.m9E990_sub_1009F990])
	DEC EDI
	JNS loc_1009F26B
loc_1009F278:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	JMP loc_1009F27F
loc_1009F27D:
	XOR EAX, EAX
loc_1009F27F:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	XOR EBX, EBX
	MOV DWORD PTR [ESI+0x04],EAX
	CMP WORD PTR DS:[ESI],BX
	MOV DWORD PTR [EBP+var_18+0x4],EBX
	JBE loc_1009F2BB
loc_1009F293:
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV ECX,DWORD PTR [ESI+0x04]
	PUSH EAX
	ADD ECX, EBX
	CALL_LONG(offset [LEGO1_text.m9E9B0_sub_1009F9B0])
	MOV EDI, EAX
	TEST EDI, EDI
	JNZ_LONG(offset [LEGO1_text.m9E41A_loc_1009F41A])
	ADD EBX, 0x14
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[ESI]
	INC DWORD PTR [EBP+var_18+0x4]
	CMP EAX,DWORD PTR [EBP+var_18+0x4]
	JG loc_1009F293
loc_1009F2BB:
	PUSH 0x02
	LEA EAX,DWORD PTR [ESI+0x08]
	PUSH EAX
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	CALL_LONG(DWORD PTR [EBP+var_1C+0x4])
	TEST EAX, EAX
	JNZ_LONG(offset [LEGO1_text.m9E407_loc_1009F407])
	MOV AX,WORD PTR DS:[ESI+0x08]
	TEST AX, AX
	JZ_LONG(offset [LEGO1_text.m9E364_loc_1009F364])
	MOVZX EDI,AX
	LEA EAX,DWORD PTR [EDI*4+0x00000000]
	LEA ECX,DWORD PTR [EAX*4+EAX]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	TEST EAX, EAX
	JZ_LONG(offset [LEGO1_text.m9E324_loc_1009F324])
	MOV EBX, EAX
	DEC EDI
	JS loc_1009F312
loc_1009F305:
	MOV ECX, EBX
	ADD EBX, 0x14
	CALL_LONG(offset [LEGO1_text.m9E990_sub_1009F990])
	DEC EDI
	JNS loc_1009F305
loc_1009F312:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	JMP_LONG(offset [LEGO1_text.m9E326_loc_1009F326])
}
}

__declspec(naked) DWORD LEGO1_proc_1009F317()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_loc_1009F324()
{
__asm{
	XOR EAX, EAX
	JMP_LONG(offset [LEGO1_text.m9E326_loc_1009F326])
}
}

__declspec(naked) DWORD LEGO1_loc_1009F326()
{
	enum{
		arg1217219 = 0x4A4B0C,
		arg1217223 = 0x4A4B1C,
		arg1217226 = 0x4A4B28,
	};

__asm{
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0xFFFFFFFF
	XOR EBX, EBX
	MOV DWORD PTR [ESI+0x0C],EAX
	CMP WORD PTR DS:[ESI+0x08],BX
	MOV DWORD PTR [EBP+arg1217219-0x4A4B20],EBX
	JBE_LONG(offset [LEGO1_text.m9E364_loc_1009F364])
loc_1009F33B:
	MOV EAX,DWORD PTR [EBP+arg1217226-0x4A4B20]
	MOV ECX,DWORD PTR [ESI+0x0C]
	PUSH EAX
	ADD ECX, EBX
	CALL_LONG(offset [LEGO1_text.m9E9B0_sub_1009F9B0])
	MOV EDI, EAX
	TEST EDI, EDI
	JNZ_LONG(offset [LEGO1_text.m9E41A_loc_1009F41A])
	ADD EBX, 0x14
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[ESI+0x08]
	INC DWORD PTR [EBP+arg1217219-0x4A4B20]
	CMP EAX,DWORD PTR [EBP+arg1217219-0x4A4B20]
	JG loc_1009F33B
	JMP_LONG(offset [LEGO1_text.m9E364_loc_1009F364])
}
}

__declspec(naked) DWORD LEGO1_loc_1009F364()
{
	enum{
		arg1217218 = 0x4A4B08,
		arg1217220 = 0x4A4B10,
		arg1217223 = 0x4A4B1C,
		arg1217226 = 0x4A4B28,
	};

__asm{
	PUSH 0x02
	LEA EAX,DWORD PTR [ESI+0x10]
	PUSH EAX
	MOV ECX,DWORD PTR [EBP+arg1217226-0x4A4B20]
	CALL_LONG(DWORD PTR [EBP+arg1217218-0x4A4B20])
	TEST EAX, EAX
	JNZ_LONG(offset [LEGO1_text.m9E407_loc_1009F407])
	MOV AX,WORD PTR DS:[ESI+0x10]
	TEST AX, AX
	JZ_LONG(offset [LEGO1_text.m9E405_loc_1009F405])
	MOVZX EDI,AX
	LEA EAX,DWORD PTR [EDI*2+EDI]
	SHL EAX, 0x02
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+arg1217220-0x4A4B20],EAX
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0x00000002
	TEST EAX, EAX
	JZ_LONG(offset [LEGO1_text.m9E3C9_loc_1009F3C9])
	MOV EBX, EAX
	DEC EDI
	JS loc_1009F3B7
loc_1009F3AA:
	MOV ECX, EBX
	ADD EBX, 0x0C
	CALL_LONG(offset [LEGO1_text.m9E000_sub_1009F000])
	DEC EDI
	JNS loc_1009F3AA
loc_1009F3B7:
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m9E3CB_loc_1009F3CB])
}
}

__declspec(naked) DWORD LEGO1_proc_1009F3BC()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009F490(DWORD arg1, DWORD arg2)
{
	enum{
		var_11C = -0x11C,
		var_118 = -0x118,
		var_114 = -0x114,
		var_110 = -0x110,
		var_10C = -0x10C,
		var_108 = -0x108,
		var_104 = -0x104,
		var_100 = -0x100,
		var_FC = -0xFC,
		var_F8 = -0xF8,
		var_F4 = -0xF4,
		var_F0 = -0xF0,
		var_EC = -0xEC,
		var_E8 = -0xE8,
		var_E0 = -0xE0,
		var_DC = -0xDC,
		var_D8 = -0xD8,
		var_D4 = -0xD4,
		var_D0 = -0xD0,
		var_CC = -0xCC,
		var_C8 = -0xC8,
		var_90 = -0x90,
		var_8C = -0x8C,
		var_88 = -0x88,
		var_78 = -0x78,
		var_68 = -0x68,
		var_58 = -0x58,
		var_48 = -0x48,
		var_44 = -0x44,
		var_40 = -0x40,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	SUB ESP, 0x0000011C
	LEA EAX,DWORD PTR [ESP+var_88+0x11C]
	PUSH EBX
	MOV DWORD PTR [ESP+var_8C+0x120],EAX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EAX, offset [LEGO1_rdata.m300_ptr]
	LEA ECX,DWORD PTR [ESP+var_40+0x128]
	MOV DWORD PTR [ESP+var_90+0x128],EAX
	MOV DWORD PTR [ESP+var_44+0x128],ECX
	MOV ECX, offset [LEGO1_rdata.m518_ptr]
	LEA EDX,DWORD PTR [ESP+var_78+0x128]
	MOV DWORD PTR [ESP+var_48+0x128],EAX
	MOV DWORD PTR [ESP+var_D4+0x128],EDX
	LEA EAX,DWORD PTR [ESP+var_88+0x128]
	MOV DWORD PTR [ESP+var_D8+0x128],ECX
	LEA EBX,DWORD PTR [ESP+var_58+0x128]
	MOV DWORD PTR [ESP+var_104+0x128],EAX
	LEA EAX,DWORD PTR [ESP+var_68+0x128]
	MOV DWORD PTR [ESP+var_108+0x128],ECX
	MOV DWORD PTR [ESP+var_118+0x128],EAX
	MOV DWORD PTR [ESP+var_11C+0x128],ECX
	MOV DWORD PTR [ESP+var_DC+0x128],EBX
	MOV DWORD PTR [ESP+var_E0+0x128],ECX
	MOV DWORD PTR [ESP+var_F4+0x128],offset [LEGO1_rdata.m488_ptr]
	LEA ECX,DWORD PTR [ESP+var_EC+0x128]
	MOV DWORD PTR [ESP+var_F0+0x128],ECX
	LEA ECX,DWORD PTR [ESP+var_90+0x128]
	CALL_LONG(DWORD PTR [offset LEGO1_rdata.m320_ptr])
	MOV EAX,DWORD PTR [ESP+var_8C+0x128]
	MOV ECX, 0x3F800000
	MOV DWORD PTR [EAX],ECX
	MOV EAX,DWORD PTR [ESP+var_8C+0x128]
	XOR EDI, EDI
	MOV DWORD PTR [EAX+0x14],ECX
	MOV EAX,DWORD PTR [ESP+var_8C+0x128]
	MOV DWORD PTR [EAX+0x28],ECX
	MOV EAX,DWORD PTR [ESP+var_8C+0x128]
	MOV DWORD PTR [EAX+0x3C],ECX
	MOV CX,WORD PTR DS:[ESI+0x08]
	TEST CX, CX
	JZ loc_1009F5AE
	MOV EAX,DWORD PTR [ESI+0x18]
	LEA EDX,DWORD PTR [ESP+var_90+0x128]
	MOV EBX,DWORD PTR [ESP+arg1+0x128]
	MOV DWORD PTR [ESP+var_10C+0x128],EAX
	LEA EAX,DWORD PTR [ESP+var_10C+0x128]
	PUSH EAX
	PUSH EDX
	PUSH EBX
	MOV EAX,DWORD PTR [ESI+0x0C]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m9F600_sub_100A0600])
	MOV EAX,DWORD PTR [ESP+var_F8+0x128]
	LEA ECX,DWORD PTR [ESP+var_CC+0x128]
	MOV EBX,DWORD PTR [ESP+var_E0+0x128]
	ADD ESP, 0x14
	MOV DWORD PTR [ESI+0x18],EAX
	PUSH ECX
	LEA ECX,DWORD PTR [ESP+var_F0+0x128]
	CALL_LONG(DWORD PTR [EBX+0x00000088])
	MOV EAX,DWORD PTR [ESP+var_DC+0x128]
	MOV DWORD PTR [EAX],EDI
	MOV DWORD PTR [EAX+0x04],EDI
	MOV DWORD PTR [EAX+0x08],EDI
loc_1009F5AE:
	MOV CX,WORD PTR DS:[ESI]
	TEST CX, CX
	JZ loc_1009F5E6
	MOV EAX,DWORD PTR [ESI+0x1C]
	LEA EDX,DWORD PTR [ESP+var_90+0x128]
	MOV EBX,DWORD PTR [ESP+arg1+0x128]
	MOV DWORD PTR [ESP+var_10C+0x128],EAX
	LEA EAX,DWORD PTR [ESP+var_10C+0x128]
	PUSH EAX
	PUSH EDX
	PUSH EBX
	MOV EAX,DWORD PTR [ESI+0x04]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m9F600_sub_100A0600])
	MOV EAX,DWORD PTR [ESP+var_F8+0x128]
	ADD ESP, 0x14
	MOV DWORD PTR [ESI+0x1C],EAX
loc_1009F5E6:
	MOV EAX,DWORD PTR [ESP+var_F0+0x128]
	LEA ECX,DWORD PTR [ESP+var_11C+0x128]
	MOV EBX,DWORD PTR [ESP+var_11C+0x128]
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x20])
	LEA ECX,DWORD PTR [ESP+var_E0+0x128]
	MOV EBX,DWORD PTR [ESP+var_11C+0x128]
	PUSH ECX
	LEA ECX,DWORD PTR [ESP+var_118+0x128]
	CALL_LONG(DWORD PTR [EBX+0x54])
	LEA ECX,DWORD PTR [ESP+var_11C+0x128]
	MOV EBX,DWORD PTR [ESP+var_11C+0x128]
	CALL_LONG(DWORD PTR [EBX+0x40])
	FCOM DWORD PTR [offset LEGO1_rdata + 0x784C]
	FSTP DWORD PTR [ESP+var_D0+0x128]
	FNSTSW AX
	TEST AH,0x41
	JNZ FAR loc_1009F8E3
	FLD DWORD PTR [ESP+var_D0+0x128]
	FSQRT
	FCOM DWORD PTR [offset LEGO1_rdata + 0x784C]
	FSTP DWORD PTR [ESP+var_D0+0x128]
	FNSTSW AX
	TEST AH,0x41
	JNZ FAR loc_1009F8E3
	LEA EAX,DWORD PTR [ESP+var_D0+0x128]
	LEA ECX,DWORD PTR [ESP+var_11C+0x128]
	MOV EBX,DWORD PTR [ESP+var_11C+0x128]
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x14])
	MOV ECX,DWORD PTR [ESP+var_118+0x128]
	MOV EAX,DWORD PTR [ESP+var_D4+0x128]
	MOV EBX,DWORD PTR [ESP+var_108+0x128]
	PUSH ECX
	LEA ECX,DWORD PTR [ESP+var_104+0x128]
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x74])
	LEA ECX,DWORD PTR [ESP+var_108+0x128]
	MOV EBX,DWORD PTR [ESP+var_108+0x128]
	CALL_LONG(DWORD PTR [EBX+0x40])
	FCOM DWORD PTR [offset LEGO1_rdata + 0x784C]
	FSTP DWORD PTR [ESP+var_D0+0x128]
	FNSTSW AX
	TEST AH,0x41
	JNZ FAR loc_1009F8E3
	FLD DWORD PTR [ESP+var_D0+0x128]
	FSQRT
	FCOM DWORD PTR [offset LEGO1_rdata + 0x784C]
	FSTP DWORD PTR [ESP+var_D0+0x128]
	FNSTSW AX
	TEST AH,0x41
	JNZ FAR loc_1009F8E3
	LEA EAX,DWORD PTR [ESP+var_D0+0x128]
	LEA ECX,DWORD PTR [ESP+var_108+0x128]
	MOV EBX,DWORD PTR [ESP+var_108+0x128]
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x14])
	MOV ECX,DWORD PTR [ESP+var_104+0x128]
	MOV EAX,DWORD PTR [ESP+var_118+0x128]
	MOV EBX,DWORD PTR [ESP+var_D8+0x128]
	PUSH ECX
	LEA ECX,DWORD PTR [ESP+var_D4+0x128]
	PUSH EAX
	CALL_LONG(DWORD PTR [EBX+0x74])
	MOV EBX,DWORD PTR [ESP+arg2+0x128]
	LEA ECX,DWORD PTR [ESP+var_D0+0x128]
	MOV EDI,DWORD PTR [ESP+var_F4+0x128]
	PUSH ECX
	MOV EAX,DWORD PTR [EBX+0x04]
	LEA ECX,DWORD PTR [ESP+var_F0+0x128]
	ADD EAX, 0x30
	MOV DWORD PTR [ESP+var_C8+0x128],EAX
	MOV DWORD PTR [ESP+var_CC+0x128],offset [LEGO1_rdata.m518_ptr]
	CALL_LONG(DWORD PTR [EDI+0x00000088])
	MOV EAX,DWORD PTR [ESP+var_8C+0x128]
	LEA ECX,DWORD PTR [ESP+var_F4+0x128]
	ADD EAX, 0x30
	MOV EDI,DWORD PTR [ESP+var_F4+0x128]
	PUSH EAX
	CALL_LONG(DWORD PTR [EDI+0x4C])
	MOV ECX,DWORD PTR [EBX+0x04]
	MOV EAX,DWORD PTR [ESP+var_8C+0x128]
	MOV EDX,DWORD PTR [ESP+var_8C+0x128]
	XOR EDI, EDI
	ADD ECX, 0x30
	ADD EAX, 0x30
	MOV DWORD PTR [EDX+0x38],EDI
	MOV DWORD PTR [EAX+0x04],EDI
	MOV DWORD PTR [EAX],EDI
	MOV DWORD PTR [ECX+0x08],EDI
	MOV DWORD PTR [ECX+0x04],EDI
	MOV DWORD PTR [ECX],EDI
	MOV CX,WORD PTR DS:[ESI+0x10]
	TEST CX, CX
	JZ FAR loc_1009F894
	MOV EAX,DWORD PTR [ESI+0x20]
	LEA EDX,DWORD PTR [ESP+var_FC+0x128]
	MOV EDI,DWORD PTR [ESI+0x14]
	MOV DWORD PTR [ESP+var_F8+0x128],EAX
	LEA EAX,DWORD PTR [ESP+var_F8+0x128]
	PUSH EAX
	PUSH EDX
	MOVZX EAX,CX
	MOV ECX,DWORD PTR [ESP+arg3+0x128]
	PUSH 0x0C
	PUSH EDI
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m9FA00_sub_100A0A00])
	MOV ECX,DWORD PTR [ESP+var_E0+0x128]
	ADD ESP, 0x18
	MOV DWORD PTR [ESI+0x20],ECX
	CMP EAX, 0x01
	JZ loc_1009F77F
	CMP EAX, 0x02
	JZ loc_1009F7F6
	JMP FAR loc_1009F894
loc_1009F77F:
	MOV ECX,DWORD PTR [ESP+var_FC+0x128]
	MOV EAX,DWORD PTR [ESI+0x14]
	LEA EDX,DWORD PTR [ECX*2+ECX]
	FLD DWORD PTR [EDX*4+EAX+0x08]
	LEA EDI,DWORD PTR [ESP+var_D0+0x128]
	MOV ESI,DWORD PTR [EBX+0x04]
	FST DWORD PTR [ESP+var_100+0x128]
	FSIN
	MOV ECX, 0x00000010
	FSTP DWORD PTR [ESP+var_110+0x128]
	FLD DWORD PTR [ESP+var_100+0x128]
	FCOS
	FSTP DWORD PTR [ESP+var_114+0x128]
	REP MOVSD
	XOR ESI, ESI
	JMP loc_1009F7B7
loc_1009F7B3:
	FSTP DWORD PTR [ESI+EDX-0x0C]
loc_1009F7B7:
	LEA ECX,DWORD PTR [ESI+ESP+var_D0+0x128]
	LEA EAX,DWORD PTR [ESI+ESP+var_CC+0x128]
	MOV EDX,DWORD PTR [EBX+0x04]
	ADD ESI, 0x10
	FLD DWORD PTR [ECX]
	FMUL DWORD PTR [ESP+var_114+0x128]
	FLD DWORD PTR [EAX]
	FMUL DWORD PTR [ESP+var_110+0x128]
	CMP ESI, 0x40
	FCOMPP
	FSTP DWORD PTR [ESI+EDX-0x10]
	FLD DWORD PTR [EAX]
	FMUL DWORD PTR [ESP+var_114+0x128]
	FLD DWORD PTR [ECX]
	FMUL DWORD PTR [ESP+var_110+0x128]
	MOV EDX,DWORD PTR [EBX+0x04]
	FADDP ST(1),ST
	JL loc_1009F7B3
	FSTP DWORD PTR [ESI+EDX-0x0C]
	JMP FAR loc_1009F894
loc_1009F7F6:
	MOV ECX,DWORD PTR [ESP+var_FC+0x128]
	LEA ECX,DWORD PTR [ECX*2+ECX]
	SHL ECX, 0x02
	ADD ECX,DWORD PTR [ESI+0x14]
	MOV EAX,DWORD PTR [ECX+0x14]
	LEA EDX,DWORD PTR [ECX+0x0C]
	PUSH EAX
	MOV EDI,DWORD PTR [ECX+0x08]
	MOV EAX,DWORD PTR [ESP+arg2+0x128]
	PUSH EDX
	PUSH EDI
	PUSH ECX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m9FB00_sub_100A0B00])
	FSTP ST(0)
	MOV ECX,DWORD PTR [ESP+var_E8+0x128]
	ADD ESP, 0x14
	MOV EAX,DWORD PTR [ESI+0x14]
	LEA EDX,DWORD PTR [ECX*2+ECX]
	FLD DWORD PTR [EDX*4+EAX+0x08]
	LEA EDI,DWORD PTR [ESP+var_D0+0x128]
	MOV ESI,DWORD PTR [EBX+0x04]
	FST DWORD PTR [ESP+var_100+0x128]
	FSIN
	MOV ECX, 0x00000010
	FSTP DWORD PTR [ESP+var_110+0x128]
	FLD DWORD PTR [ESP+var_100+0x128]
	FCOS
	FSTP DWORD PTR [ESP+var_114+0x128]
	REP MOVSD
	XOR ESI, ESI
	JMP loc_1009F85A
loc_1009F856:
	FSTP DWORD PTR [ESI+EDX-0x0C]
loc_1009F85A:
	LEA ECX,DWORD PTR [ESI+ESP+var_D0+0x128]
	LEA EAX,DWORD PTR [ESI+ESP+var_CC+0x128]
	MOV EDX,DWORD PTR [EBX+0x04]
	ADD ESI, 0x10
	FLD DWORD PTR [ECX]
	FMUL DWORD PTR [ESP+var_114+0x128]
	FLD DWORD PTR [EAX]
	FMUL DWORD PTR [ESP+var_110+0x128]
	CMP ESI, 0x40
	FCOMPP
	FSTP DWORD PTR [ESI+EDX-0x10]
	FLD DWORD PTR [EAX]
	FMUL DWORD PTR [ESP+var_114+0x128]
	FLD DWORD PTR [ECX]
	FMUL DWORD PTR [ESP+var_110+0x128]
	MOV EDX,DWORD PTR [EBX+0x04]
	FADDP ST(1),ST
	JL loc_1009F856
	FSTP DWORD PTR [ESI+EDX-0x0C]
loc_1009F894:
	MOV EAX,DWORD PTR [ESP+var_48+0x128]
	LEA ECX,DWORD PTR [ESP+var_48+0x128]
	PUSH EBX
	CALL_LONG(DWORD PTR [EAX+0x28])
	MOV EAX,DWORD PTR [ESP+var_8C+0x128]
	MOV ECX,DWORD PTR [ESP+var_44+0x128]
	PUSH EAX
	MOV ESI,DWORD PTR [EBX]
	PUSH ECX
	MOV ECX, EBX
	CALL_LONG(DWORD PTR [ESI+0x3C])
	MOV EDX,DWORD PTR [ESP+var_F0+0x128]
	MOV ECX,DWORD PTR [EBX+0x04]
	MOV EAX,DWORD PTR [EDX]
	MOV DWORD PTR [ECX+0x30],EAX
	MOV ECX,DWORD PTR [EBX+0x04]
	MOV EDX,DWORD PTR [ESP+var_F0+0x128]
	MOV EAX,DWORD PTR [EDX+0x04]
	MOV DWORD PTR [ECX+0x34],EAX
	MOV ECX,DWORD PTR [EBX+0x04]
	MOV EDX,DWORD PTR [ESP+var_F0+0x128]
	MOV EAX,DWORD PTR [EDX+0x08]
	MOV DWORD PTR [ECX+0x38],EAX
loc_1009F8E3:
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0000011C
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_1009F900()
{
__asm{
	MOV EAX, ECX
	MOV BYTE PTR [ECX],0x00
	MOV DWORD PTR [ECX+0x04],0x00000000
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009F910(DWORD arg1)
{
	enum{
		var_C = -0xC,
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x04
	LEA EAX,DWORD PTR [ESP+var_4+0x4]
	PUSH ESI
	MOV ESI, ECX
	PUSH 0x04
	MOV ECX,DWORD PTR [ESP+arg1+0xC]
	PUSH EAX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x04])
	TEST EAX, EAX
	JNZ loc_1009F949
	MOV EAX,DWORD PTR [ESP+var_C+0x10]
	SHR EAX, 0x18
	MOV BYTE PTR [ESI],AL
	MOV EAX,DWORD PTR [ESP+var_C+0x10]
	AND EAX, 0x00FFFFFF
	MOV DWORD PTR [ESP+var_C+0x10],EAX
	XOR EAX, EAX
	FILD DWORD PTR [ESP+var_C+0x10]
	FSTP DWORD PTR [ESI+0x04]
loc_1009F949:
	POP ESI
	ADD ESP, 0x04
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009F950(DWORD arg1)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	FLD DWORD PTR [ECX+0x04]
	SUB ESP, 0x04
	PUSH EBX
	XOR EBX, EBX
	MOV BL,BYTE PTR [ECX]
	CALL_LONG(offset [LEGO1_text.m8A608_sub_1008B608])
	SHL EBX, 0x18
	PUSH 0x04
	OR EBX, EAX
	MOV ECX,DWORD PTR [ESP+arg1+0xC]
	MOV DWORD PTR [ESP+var_4+0xC],EBX
	LEA EBX,DWORD PTR [ESP+var_4+0xC]
	PUSH EBX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x08])
	CMP EAX, 0x01
	MOV ECX, EAX
	MOV EAX, 0x00000000
	POP EBX
	ADC EAX, -0x01
	ADD ESP, 0x04
	AND EAX, ECX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_1009F990()
{
__asm{
	PUSH ESI
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.m9E900_sub_1009F900])
	XOR EAX, EAX
	MOV DWORD PTR [ESI+0x08],EAX
	MOV DWORD PTR [ESI+0x0C],EAX
	MOV DWORD PTR [ESI+0x10],EAX
	MOV EAX, ESI
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009F9B0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
		arg1217224 = 0x4A4B20,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	PUSH EBP
	MOV EDI, ECX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m9E910_sub_1009F910])
	TEST EAX, EAX
	JNZ loc_1009FA2E
	MOV EAX,DWORD PTR [ESI]
	PUSH 0x04
	LEA ECX,DWORD PTR [EDI+0x08]
	MOV EBX,DWORD PTR [EAX+0x04]
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_1009FA2E
	PUSH 0x04
	LEA EAX,DWORD PTR [EDI+0x0C]
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_1009FA2E
	LEA EBP,DWORD PTR [EDI+0x10]
	PUSH 0x04
	PUSH EBP
	MOV ECX, ESI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_1009FA2E
	CMP DWORD PTR [EDI+0x08],0x3727C5AC
	JG loc_1009FA29
	CMP DWORD PTR [EDI+0x08],0xB727C5AC
	JA loc_1009FA29
	CMP DWORD PTR [EDI+0x0C],0x3727C5AC
	JG loc_1009FA29
	CMP DWORD PTR [EDI+0x0C],0xB727C5AC
	JA loc_1009FA29
	CMP DWORD PTR [EBP+arg1217224-0x4A4B20],0x3727C5AC
	JG loc_1009FA29
	CMP DWORD PTR [EBP+arg1217224-0x4A4B20],0xB727C5AC
	JBE loc_1009FA2C
loc_1009FA29:
	OR BYTE PTR [EDI],0x01
loc_1009FA2C:
	XOR EAX, EAX
loc_1009FA2E:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009FA40(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	MOV EDI, ECX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m9E950_sub_1009F950])
	TEST EAX, EAX
	JNZ loc_1009FA8D
	MOV EAX,DWORD PTR [ESI]
	PUSH 0x04
	LEA ECX,DWORD PTR [EDI+0x08]
	MOV EBX,DWORD PTR [EAX+0x08]
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_1009FA8D
	PUSH 0x04
	LEA EAX,DWORD PTR [EDI+0x0C]
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_1009FA8D
	PUSH 0x04
	ADD EDI, 0x10
	PUSH EDI
	MOV ECX, ESI
	CALL_LONG(EBX)
	CMP EAX, 0x01
	MOV ECX, EAX
	MOV EAX, 0x00000000
	ADC EAX, -0x01
	AND EAX, ECX
loc_1009FA8D:
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_1009FAA0()
{
__asm{
	PUSH ESI
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.m9E900_sub_1009F900])
	MOV DWORD PTR [ESI+0x08],0x3F800000
	XOR EAX, EAX
	MOV DWORD PTR [ESI+0x0C],EAX
	MOV DWORD PTR [ESI+0x10],EAX
	MOV DWORD PTR [ESI+0x14],EAX
	MOV EAX, ESI
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009FAC0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX, ECX
	MOV EDI,DWORD PTR [ESP+arg1+0xC]
	PUSH EBP
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m9E910_sub_1009F910])
	TEST EAX, EAX
	JNZ loc_1009FB1E
	MOV EAX,DWORD PTR [EDI]
	LEA ESI,DWORD PTR [EBX+0x08]
	PUSH 0x04
	MOV ECX, EDI
	MOV EBP,DWORD PTR [EAX+0x04]
	PUSH ESI
	CALL_LONG(EBP)
	TEST EAX, EAX
	JNZ loc_1009FB1E
	PUSH 0x04
	LEA EAX,DWORD PTR [EBX+0x0C]
	PUSH EAX
	MOV ECX, EDI
	CALL_LONG(EBP)
	TEST EAX, EAX
	JNZ loc_1009FB1E
	PUSH 0x04
	LEA EAX,DWORD PTR [EBX+0x10]
	PUSH EAX
	MOV ECX, EDI
	CALL_LONG(EBP)
	TEST EAX, EAX
	JNZ loc_1009FB1E
	PUSH 0x04
	LEA EAX,DWORD PTR [EBX+0x14]
	PUSH EAX
	MOV ECX, EDI
	CALL_LONG(EBP)
	TEST EAX, EAX
	JNZ loc_1009FB1E
	CMP DWORD PTR [ESI], 0x3F800000
	JZ loc_1009FB1C
	OR BYTE PTR [EBX],0x01
loc_1009FB1C:
	XOR EAX, EAX
loc_1009FB1E:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009FB30(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	MOV EDI, ECX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m9E950_sub_1009F950])
	TEST EAX, EAX
	JNZ loc_1009FB8B
	MOV EAX,DWORD PTR [ESI]
	PUSH 0x04
	LEA ECX,DWORD PTR [EDI+0x08]
	MOV EBX,DWORD PTR [EAX+0x08]
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_1009FB8B
	PUSH 0x04
	LEA EAX,DWORD PTR [EDI+0x0C]
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_1009FB8B
	PUSH 0x04
	LEA EAX,DWORD PTR [EDI+0x10]
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_1009FB8B
	PUSH 0x04
	ADD EDI, 0x14
	PUSH EDI
	MOV ECX, ESI
	CALL_LONG(EBX)
	MOV ECX, 0x00000000
	CMP EAX, 0x01
	ADC ECX, -0x01
	AND ECX, EAX
	MOV EAX, ECX
loc_1009FB8B:
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_1009FBA0()
{
__asm{
	PUSH ESI
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.m9E900_sub_1009F900])
	MOV EAX, 0x3F800000
	MOV DWORD PTR [ESI+0x08],EAX
	MOV DWORD PTR [ESI+0x0C],EAX
	MOV DWORD PTR [ESI+0x10],EAX
	MOV EAX, ESI
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009FBC0(DWORD arg1)
{
	enum{
		var_C = -0xC,
		arg1 = 0x4,
		arg1217224 = 0x4A4B20,
	};

__asm{
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x10]
	PUSH EDI
	PUSH EBP
	MOV EDI, ECX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m9E910_sub_1009F910])
	TEST EAX, EAX
	JNZ FAR loc_1009FC86
	MOV EAX,DWORD PTR [ESI]
	PUSH 0x04
	LEA ECX,DWORD PTR [EDI+0x08]
	MOV EBX,DWORD PTR [EAX+0x04]
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ FAR loc_1009FC86
	PUSH 0x04
	LEA EAX,DWORD PTR [EDI+0x0C]
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ FAR loc_1009FC86
	LEA EBP,DWORD PTR [EDI+0x10]
	PUSH 0x04
	PUSH EBP
	MOV ECX, ESI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_1009FC86
	FLD DWORD PTR [EDI+0x08]
	FCOM QWORD PTR [offset LEGO1_rdata + 0x7898]
	FSTP QWORD PTR [ESP+var_C+0x1C]
	FNSTSW AX
	TEST AH,0x41
	JZ loc_1009FC81
	FLD QWORD PTR [ESP+var_C+0x1C]
	FCOMP QWORD PTR [offset LEGO1_rdata + 0x78A0]
	FNSTSW AX
	TEST AH,0x01
	JNZ loc_1009FC81
	FLD DWORD PTR [EDI+0x0C]
	FCOM QWORD PTR [offset LEGO1_rdata + 0x7898]
	FSTP QWORD PTR [ESP+var_C+0x1C]
	FNSTSW AX
	TEST AH,0x41
	JZ loc_1009FC81
	FLD QWORD PTR [ESP+var_C+0x1C]
	FCOMP QWORD PTR [offset LEGO1_rdata + 0x78A0]
	FNSTSW AX
	TEST AH,0x01
	JNZ loc_1009FC81
	FLD DWORD PTR [EBP+arg1217224-0x4A4B20]
	FCOM QWORD PTR [offset LEGO1_rdata + 0x7898]
	FSTP QWORD PTR [ESP+var_C+0x1C]
	FNSTSW AX
	TEST AH,0x41
	JZ loc_1009FC81
	FLD QWORD PTR [ESP+var_C+0x1C]
	FCOMP QWORD PTR [offset LEGO1_rdata + 0x78A0]
	FNSTSW AX
	TEST AH,0x01
	JZ loc_1009FC84
loc_1009FC81:
	OR BYTE PTR [EDI],0x01
loc_1009FC84:
	XOR EAX, EAX
loc_1009FC86:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1009FC90(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI,DWORD PTR [ESP+arg1+0xC]
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m9E950_sub_1009F950])
	TEST EAX, EAX
	JNZ loc_1009FCDD
	MOV EAX,DWORD PTR [EDI]
	PUSH 0x04
	LEA ECX,DWORD PTR [ESI+0x08]
	MOV EBX,DWORD PTR [EAX+0x08]
	PUSH ECX
	MOV ECX, EDI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_1009FCDD
	PUSH 0x04
	LEA EAX,DWORD PTR [ESI+0x0C]
	PUSH EAX
	MOV ECX, EDI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_1009FCDD
	PUSH 0x04
	ADD ESI, 0x10
	PUSH ESI
	MOV ECX, EDI
	CALL_LONG(EBX)
	CMP EAX, 0x01
	MOV ECX, EAX
	MOV EAX, 0x00000000
	ADC EAX, -0x01
	AND EAX, ECX
loc_1009FCDD:
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_1009FCF0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m9ED6D_proc_1009FD6D]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	XOR EAX, EAX
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV WORD PTR DS:[ECX+0x08],AX
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m7778_ptr]
	MOV WORD PTR DS:[ECX+0x0A],AX
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m78C8_ptr]
	MOV WORD PTR DS:[ECX+0x0C],AX
	MOV DWORD PTR [ECX+0x04],EAX
	MOV WORD PTR DS:[ECX+0x0E],AX
	MOV DWORD PTR [ECX+0x10],EAX
	MOV WORD PTR DS:[ECX+0x20],AX
	MOV DWORD PTR [ECX+0x14],EAX
	MOV WORD PTR DS:[ECX+0x22],AX
	MOV DWORD PTR [ECX+0x18],EAX
	MOV DWORD PTR [ECX+0x1C],EAX
	MOV DWORD PTR [ECX+0x24],EAX
	MOV DWORD PTR [ECX+0x28],EAX
	MOV DWORD PTR [ECX+0x2C],EAX
	MOV DWORD PTR [ECX+0x30],EAX
	MOV ESI, ECX
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV EAX, ESI
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009FDA0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m9EE40_proc_1009FE40]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m78C8_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EAX,DWORD PTR [ECX+0x04]
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	TEST EAX, EAX
	JZ loc_1009FDDB
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009FDDB:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EAX+0x10]
	TEST EAX, EAX
	JZ loc_1009FDEE
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009FDEE:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EAX+0x14]
	TEST EAX, EAX
	JZ loc_1009FE01
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009FE01:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EAX+0x18]
	TEST EAX, EAX
	JZ loc_1009FE14
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009FE14:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EAX+0x1C]
	TEST EAX, EAX
	JZ loc_1009FE27
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_1009FE27:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m9EE4A_sub_1009FE4A])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1009FE4A()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m990E0_loc_1009A0E0])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100A0360(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x04]
	PUSH EDI
	MOV EBX, ECX
	TEST EAX, EAX
	JZ loc_100A0375
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100A0375:
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
	MOV ECX, 0xFFFFFFFF
	MOV EDI, ESI
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	PUSH ECX
	MOV EDI, ESI
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV ECX, 0xFFFFFFFF
	MOV DWORD PTR [EBX+0x04],EAX
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI,DWORD PTR [EBX+0x04]
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100A03C0(DWORD arg1, DWORD arg2)
{
	enum{
		var_A8 = -0xA8,
		var_9C = -0x9C,
		var_98 = -0x98,
		var_94 = -0x94,
		var_90 = -0x90,
		var_8C = -0x8C,
		var_88 = -0x88,
		var_54 = -0x54,
		var_50 = -0x50,
		var_48 = -0x48,
		var_44 = -0x44,
		var_40 = -0x40,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x0000009C
	PUSH ESI
	PUSH EDI
	MOV EDI,DWORD PTR [ECX+0x18]
	MOV ESI, ECX
	TEST EDI, EDI
	JZ FAR loc_100A057E
	MOV EAX,DWORD PTR [ESI+0x2C]
	LEA ECX,DWORD PTR [ESP+var_48+0xA4]
	MOV DWORD PTR [ESP+var_9C+0xA4],EAX
	LEA EAX,DWORD PTR [ESP+var_9C+0xA4]
	PUSH EAX
	PUSH ECX
	PUSH 0x14
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[ESI+0x0C]
	PUSH EDI
	MOV ECX,DWORD PTR [ESP+arg1+0xB4]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m9FA00_sub_100A0A00])
	ADD ESP, 0x18
	TEST EAX, EAX
	JZ FAR loc_100A04CF
	CMP EAX, 0x01
	JZ loc_100A0417
	CMP EAX, 0x02
	JZ loc_100A043C
	JMP FAR loc_100A04B0
loc_100A0417:
	MOV EAX,DWORD PTR [ESP+var_48+0xA4]
	SHL EAX, 0x02
	LEA EDX,DWORD PTR [EAX*4+EAX]
	MOV EAX,DWORD PTR [EDI+EDX+0x08]
	LEA ECX,DWORD PTR [EDI+EDX]
	MOV DWORD PTR [ESP+var_94+0xA4],EAX
	MOV EDX,DWORD PTR [ECX+0x0C]
	MOV DWORD PTR [ESP+var_98+0xA4],EDX
	MOV ECX,DWORD PTR [ECX+0x10]
	MOV DWORD PTR [ESP+var_90+0xA4],ECX
	JMP loc_100A04B0
loc_100A043C:
	MOV EAX,DWORD PTR [ESP+var_48+0xA4]
	SHL EAX, 0x02
	LEA EDX,DWORD PTR [EAX*4+EAX]
	FLD DWORD PTR [EDI+EDX+0x1C]
	FSUB DWORD PTR [EDI+EDX+0x08]
	FLD DWORD PTR [EDI+EDX+0x18]
	FSUB DWORD PTR [EDI+EDX+0x04]
	LEA ECX,DWORD PTR [EDI+EDX]
	FDIVP ST(1),ST
	FLD DWORD PTR [ESP+arg1+0xA4]
	FSUB DWORD PTR [ECX+0x04]
	FMULP ST(1),ST
	FADD DWORD PTR [ECX+0x08]
	FSTP DWORD PTR [ESP+var_94+0xA4]
	FLD DWORD PTR [ECX+0x20]
	FSUB DWORD PTR [ECX+0x0C]
	FLD DWORD PTR [ECX+0x18]
	FSUB DWORD PTR [ECX+0x04]
	FDIVP ST(1),ST
	FLD DWORD PTR [ESP+arg1+0xA4]
	FSUB DWORD PTR [ECX+0x04]
	LEA EDX,DWORD PTR [ECX+0x14]
	FMULP ST(1),ST
	FADD DWORD PTR [ECX+0x0C]
	FSTP DWORD PTR [ESP+var_98+0xA4]
	MOV EAX,DWORD PTR [ECX+0x24]
	MOV EDI,DWORD PTR [ECX+0x10]
	PUSH EAX
	PUSH EDX
	MOV EAX,DWORD PTR [ESP+arg1+0xAC]
	PUSH EDI
	PUSH ECX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m9FB00_sub_100A0B00])
	FSTP DWORD PTR [ESP+var_90+0xB8]
	ADD ESP, 0x14
loc_100A04B0:
	LEA EAX,DWORD PTR [ESP+var_90+0xA4]
	LEA ECX,DWORD PTR [ESP+var_98+0xA4]
	LEA EDX,DWORD PTR [ESP+var_94+0xA4]
	PUSH EAX
	MOV EDI,DWORD PTR [ESP+arg2+0xA8]
	PUSH ECX
	PUSH EDX
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m9FFF0_sub_100A0FF0])
	JMP loc_100A04D6
loc_100A04CF:
	MOV EDI,DWORD PTR [ESP+arg2+0xA4]
loc_100A04D6:
	CMP DWORD PTR [ESI+0x14],0x00
	MOV EAX,DWORD PTR [ESP+var_9C+0xA4]
	MOV DWORD PTR [ESI+0x2C],EAX
	JZ FAR loc_100A05BF
	LEA EAX,DWORD PTR [ESP+var_88+0xA4]
	LEA ECX,DWORD PTR [ESP+var_40+0xA4]
	MOV DWORD PTR [ESP+var_8C+0xA4],EAX
	MOV EAX, offset [LEGO1_rdata.m300_ptr]
	MOV DWORD PTR [ESP+var_90+0xA4],EAX
	MOV DWORD PTR [ESP+var_44+0xA4],ECX
	LEA ECX,DWORD PTR [ESP+var_90+0xA4]
	MOV DWORD PTR [ESP+var_48+0xA4],EAX
	CALL_LONG(DWORD PTR [offset LEGO1_rdata.m320_ptr])
	MOV EDX,DWORD PTR [ESP+var_98+0xB0]
	MOV ECX, 0x3F800000
	MOV DWORD PTR [EDX],ECX
	MOV EDX,DWORD PTR [ESP+var_98+0xB0]
	MOV DWORD PTR [EDX+0x14],ECX
	MOV EDX,DWORD PTR [ESP+var_98+0xB0]
	MOV DWORD PTR [EDX+0x28],ECX
	MOV EDX,DWORD PTR [ESP+var_98+0xB0]
	MOV DWORD PTR [EDX+0x3C],ECX
	LEA ECX,DWORD PTR [ESP+var_9C+0xB0]
	MOV EAX,DWORD PTR [ESI+0x28]
	MOV EDX,DWORD PTR [ESP+var_8+0xB0]
	MOV DWORD PTR [ESP+var_A8+0xB0],EAX
	LEA EAX,DWORD PTR [ESP+var_A8+0xB0]
	PUSH EAX
	PUSH ECX
	MOV CX,WORD PTR DS:[ESI+0x0A]
	PUSH EDX
	MOV EAX,DWORD PTR [ESI+0x14]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m9F6F0_sub_100A06F0])
	MOV ECX,DWORD PTR [ESP+var_94+0xB0]
	ADD ESP, 0x14
	MOV DWORD PTR [ESI+0x28],ECX
	PUSH EDI
	LEA ECX,DWORD PTR [ESP+var_50+0xB0]
	MOV EAX,DWORD PTR [ESP+var_50+0xB0]
	CALL_LONG(DWORD PTR [EAX+0x28])
	LEA ECX,DWORD PTR [ESP+var_9C+0xB0]
	LEA EDX,DWORD PTR [ESP+var_54+0xB0]
	PUSH ECX
	MOV EAX,DWORD PTR [EDI]
	PUSH EDX
	MOV ECX, EDI
	CALL_LONG(DWORD PTR [EAX+0x38])
	JMP loc_100A05BF
loc_100A057E:
	MOV ECX,DWORD PTR [ESI+0x14]
	TEST ECX, ECX
	JZ loc_100A05B8
	MOV EAX,DWORD PTR [ESI+0x28]
	MOV EDI,DWORD PTR [ESP+var_4+0xB0]
	MOV EDX,DWORD PTR [ESP+var_8+0xB0]
	MOV DWORD PTR [ESP+var_A8+0xB0],EAX
	LEA EAX,DWORD PTR [ESP+var_A8+0xB0]
	PUSH EAX
	PUSH EDI
	MOV AX,WORD PTR DS:[ESI+0x0A]
	PUSH EDX
	PUSH ECX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m9F6F0_sub_100A06F0])
	MOV ECX,DWORD PTR [ESP+var_94+0xB0]
	ADD ESP, 0x14
	MOV DWORD PTR [ESI+0x28],ECX
	JMP loc_100A05BF
loc_100A05B8:
	MOV EDI,DWORD PTR [ESP+var_4+0xB0]
loc_100A05BF:
	MOV ECX,DWORD PTR [ESI+0x10]
	TEST ECX, ECX
	JZ loc_100A05F0
	MOV EAX,DWORD PTR [ESI+0x24]
	MOV EDX,DWORD PTR [ESP+var_8+0xB0]
	MOV DWORD PTR [ESP+var_A8+0xB0],EAX
	LEA EAX,DWORD PTR [ESP+var_A8+0xB0]
	PUSH EAX
	PUSH EDI
	PUSH EDX
	PUSH ECX
	MOV CX,WORD PTR DS:[ESI+0x08]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m9F600_sub_100A0600])
	MOV ECX,DWORD PTR [ESP+var_94+0xB0]
	ADD ESP, 0x14
	MOV DWORD PTR [ESI+0x24],ECX
loc_100A05F0:
	XOR EAX, EAX
	POP EDI
	POP ESI
	ADD ESP, 0x0000009C
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_100A0600(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg5]
	SUB ESP, 0x10
	LEA ECX,DWORD PTR [ESP+var_10+0x10]
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg2+0x14]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg1+0x18]
	PUSH ECX
	PUSH 0x14
	AND EAX, 0x0000FFFF
	MOV ECX,DWORD PTR [ESP+arg3+0x20]
	PUSH ESI
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m9FA00_sub_100A0A00])
	ADD ESP, 0x18
	TEST EAX, EAX
	JZ FAR loc_100A06E1
	CMP EAX, 0x01
	JZ loc_100A0643
	CMP EAX, 0x02
	JZ loc_100A0670
	JMP FAR loc_100A06C9
loc_100A0643:
	MOV EAX,DWORD PTR [ESP+var_10+0x14]
	SHL EAX, 0x02
	LEA EDX,DWORD PTR [EAX*4+EAX]
	LEA ECX,DWORD PTR [ESI+EDX]
	TEST BYTE PTR [ECX],0x01
	JZ FAR loc_100A06E1
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV EDX,DWORD PTR [ECX+0x0C]
	MOV ECX,DWORD PTR [ECX+0x10]
	MOV DWORD PTR [ESP+var_4+0x14],EAX
	MOV DWORD PTR [ESP+var_8+0x14],EDX
	MOV DWORD PTR [ESP+var_C+0x14],ECX
	JMP loc_100A06C9
loc_100A0670:
	MOV EAX,DWORD PTR [ESP+var_10+0x14]
	SHL EAX, 0x02
	LEA EAX,DWORD PTR [EAX*4+EAX]
	ADD EAX, ESI
	TEST BYTE PTR [EAX],0x01
	JNZ loc_100A0687
	TEST BYTE PTR [EAX+0x14],0x01
	JZ loc_100A06E1
loc_100A0687:
	FLD DWORD PTR [EAX+0x18]
	FSUB DWORD PTR [EAX+0x04]
	FLD DWORD PTR [ESP+arg3+0x14]
	FSUB DWORD PTR [EAX+0x04]
	FLD DWORD PTR [EAX+0x1C]
	FSUB DWORD PTR [EAX+0x08]
	FDIV ST,ST(2)
	FMUL ST,ST(1)
	FADD DWORD PTR [EAX+0x08]
	FSTP DWORD PTR [ESP+var_4+0x14]
	FLD DWORD PTR [EAX+0x20]
	FSUB DWORD PTR [EAX+0x0C]
	FDIV ST,ST(2)
	FMUL ST,ST(1)
	FADD DWORD PTR [EAX+0x0C]
	FSTP DWORD PTR [ESP+var_8+0x14]
	FLD DWORD PTR [EAX+0x24]
	FSUB DWORD PTR [EAX+0x10]
	FDIV ST,ST(2)
	FMULP ST(1),ST
	FADD DWORD PTR [EAX+0x10]
	FSTP DWORD PTR [ESP+var_C+0x14]
	FSTP ST(0)
loc_100A06C9:
	LEA EAX,DWORD PTR [ESP+var_C+0x14]
	LEA ECX,DWORD PTR [ESP+var_8+0x14]
	LEA EDX,DWORD PTR [ESP+var_4+0x14]
	PUSH EAX
	PUSH ECX
	PUSH EDX
	MOV ECX,DWORD PTR [ESP+arg4+0x20]
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x30])
loc_100A06E1:
	POP ESI
	ADD ESP, 0x10
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100A06F0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		var_88 = -0x88,
		var_84 = -0x84,
		var_80 = -0x80,
		var_7C = -0x7C,
		var_78 = -0x78,
		var_74 = -0x74,
		var_68 = -0x68,
		var_64 = -0x64,
		var_60 = -0x60,
		var_5C = -0x5C,
		var_58 = -0x58,
		var_54 = -0x54,
		var_50 = -0x50,
		var_4C = -0x4C,
		var_48 = -0x48,
		var_44 = -0x44,
		var_3C = -0x3C,
		var_30 = -0x30,
		var_2C = -0x2C,
		var_28 = -0x28,
		var_24 = -0x24,
		var_20 = -0x20,
		var_14 = -0x14,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg5]
	SUB ESP, 0x00000080
	LEA ECX,DWORD PTR [ESP+var_80+0x80]
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg2+0x84]
	PUSH EDI
	PUSH EAX
	PUSH ECX
	MOV EAX,DWORD PTR [ESP+arg1+0x90]
	PUSH 0x18
	PUSH ESI
	AND EAX, 0x0000FFFF
	MOV ECX,DWORD PTR [ESP+arg3+0x98]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m9FA00_sub_100A0A00])
	ADD ESP, 0x18
	CMP EAX, 0x01
	JZ loc_100A073C
	CMP EAX, 0x02
	JZ loc_100A0795
	POP EDI
	POP ESI
	ADD ESP, 0x00000080
	RET
loc_100A073C:
	MOV EAX,DWORD PTR [ESP+var_80+0x88]
	LEA EDX,DWORD PTR [EAX*2+EAX]
	LEA ECX,DWORD PTR [EDX*8+ESI]
	TEST BYTE PTR [ECX],0x01
	JZ FAR loc_100A097A
	LEA EAX,DWORD PTR [ESP+var_54+0x88]
	MOV EDX,DWORD PTR [ECX+0x0C]
	MOV DWORD PTR [ESP+var_58+0x88],EAX
	MOV ESI,DWORD PTR [ECX+0x10]
	MOV DWORD PTR [ESP+var_5C+0x88],offset [LEGO1_rdata.m1E8_ptr]
	MOV DWORD PTR [ESP+var_54+0x88],EDX
	MOV EAX,DWORD PTR [ECX+0x14]
	MOV ECX,DWORD PTR [ECX+0x08]
	LEA EDX,DWORD PTR [ESP+var_5C+0x88]
	MOV DWORD PTR [ESP+var_50+0x88],ESI
	PUSH EDX
	MOV DWORD PTR [ESP+var_4C+0x8C],EAX
	MOV DWORD PTR [ESP+var_48+0x8C],ECX
	MOV ECX,DWORD PTR [ESP+arg4+0x8C]
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x44])
	POP EDI
	POP ESI
	ADD ESP, 0x00000080
	RET
loc_100A0795:
	LEA EAX,DWORD PTR [ESP+var_20+0x88]
	LEA ECX,DWORD PTR [ESP+var_54+0x88]
	LEA EDX,DWORD PTR [ESP+var_3C+0x88]
	MOV DWORD PTR [ESP+var_24+0x88],EAX
	MOV DWORD PTR [ESP+var_28+0x88],offset [LEGO1_rdata.m1E8_ptr]
	MOV DWORD PTR [ESP+var_58+0x88],ECX
	PUSH EDX
	MOV DWORD PTR [ESP+var_5C+0x8C],offset [LEGO1_rdata.m1E8_ptr]
	LEA ECX,DWORD PTR [ESP+var_44+0x8C]
	CALL_LONG(offset [LEGO1_text.mB0F0_sub_1000C0F0])
	MOV DWORD PTR [ESP+var_44+0x88],offset [LEGO1_rdata.m1E8_ptr]
	MOV DWORD PTR [ESP+var_2C+0x88],0x00000000
	MOV ECX,DWORD PTR [ESP+var_80+0x88]
	LEA EDX,DWORD PTR [ECX*2+ECX]
	LEA EAX,DWORD PTR [EDX*8+ESI]
	TEST BYTE PTR [EAX],0x01
	JNZ loc_100A07EC
	TEST BYTE PTR [EAX+0x18],0x01
	JZ FAR loc_100A097A
loc_100A07EC:
	MOV ECX,DWORD PTR [ESP+var_24+0x88]
	MOV EAX,DWORD PTR [EAX+0x0C]
	MOV DWORD PTR [ECX],EAX
	MOV ECX,DWORD PTR [ESP+var_24+0x88]
	MOV EDX,DWORD PTR [ESP+var_80+0x88]
	LEA EDI,DWORD PTR [EDX*2+EDX]
	MOV EAX,DWORD PTR [EDI*8+ESI+0x10]
	MOV DWORD PTR [ECX+0x04],EAX
	MOV ECX,DWORD PTR [ESP+var_24+0x88]
	MOV EDX,DWORD PTR [ESP+var_80+0x88]
	LEA EDI,DWORD PTR [EDX*2+EDX]
	MOV EAX,DWORD PTR [EDI*8+ESI+0x14]
	MOV DWORD PTR [ECX+0x08],EAX
	MOV ECX,DWORD PTR [ESP+var_24+0x88]
	MOV EDX,DWORD PTR [ESP+var_80+0x88]
	LEA EDI,DWORD PTR [EDX*2+EDX]
	MOV EAX,DWORD PTR [EDI*8+ESI+0x08]
	MOV DWORD PTR [ECX+0x0C],EAX
	MOV EDX,DWORD PTR [ESP+var_80+0x88]
	LEA EDI,DWORD PTR [EDX*2+EDX]
	MOV DL,BYTE PTR [EDI*8+ESI+0x18]
	LEA EAX,DWORD PTR [EDI*8+ESI]
	TEST DL,0x04
	JZ loc_100A0858
	LEA EAX,DWORD PTR [ESP+var_28+0x88]
	MOV ECX,DWORD PTR [ESP+arg4+0x88]
	PUSH EAX
	MOV ESI,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [ESI+0x44])
	POP EDI
	POP ESI
	ADD ESP, 0x00000080
	RET
loc_100A0858:
	MOV DWORD PTR [ESP+var_7C+0x88],offset [LEGO1_rdata.m1E8_ptr]
	TEST DL,0x02
	LEA ECX,DWORD PTR [ESP+var_74+0x88]
	MOV DWORD PTR [ESP+var_78+0x88],ECX
	JZ loc_100A08B4
	FLD DWORD PTR [EAX+0x24]
	FCHS
	FSTP DWORD PTR [ESP+var_74+0x88]
	MOV EAX,DWORD PTR [ESP+var_80+0x88]
	MOV EDX,DWORD PTR [ESP+var_78+0x88]
	LEA ECX,DWORD PTR [EAX*2+EAX]
	FLD DWORD PTR [ECX*8+ESI+0x28]
	FCHS
	FSTP DWORD PTR [EDX+0x04]
	MOV EAX,DWORD PTR [ESP+var_80+0x88]
	MOV EDX,DWORD PTR [ESP+var_78+0x88]
	LEA ECX,DWORD PTR [EAX*2+EAX]
	FLD DWORD PTR [ECX*8+ESI+0x2C]
	FCHS
	FSTP DWORD PTR [EDX+0x08]
	MOV EAX,DWORD PTR [ESP+var_80+0x88]
	MOV EDX,DWORD PTR [ESP+var_78+0x88]
	LEA ECX,DWORD PTR [EAX*2+EAX]
	FLD DWORD PTR [ECX*8+ESI+0x20]
	FCHS
	FSTP DWORD PTR [EDX+0x0C]
	JMP loc_100A08F1
loc_100A08B4:
	MOV EAX,DWORD PTR [EAX+0x24]
	MOV DWORD PTR [ESP+var_74+0x88],EAX
	MOV ECX,DWORD PTR [ESP+var_80+0x88]
	MOV EDI,DWORD PTR [ESP+var_78+0x88]
	LEA EDX,DWORD PTR [ECX*2+ECX]
	MOV EAX,DWORD PTR [EDX*8+ESI+0x28]
	MOV DWORD PTR [EDI+0x04],EAX
	MOV EDI,DWORD PTR [ESP+var_78+0x88]
	MOV ECX,DWORD PTR [ESP+var_80+0x88]
	LEA EDX,DWORD PTR [ECX*2+ECX]
	MOV EAX,DWORD PTR [EDX*8+ESI+0x2C]
	MOV DWORD PTR [EDI+0x08],EAX
	MOV EDI,DWORD PTR [ESP+var_78+0x88]
	MOV ECX,DWORD PTR [ESP+var_80+0x88]
	LEA EDX,DWORD PTR [ECX*2+ECX]
	MOV EAX,DWORD PTR [EDX*8+ESI+0x20]
	MOV DWORD PTR [EDI+0x0C],EAX
loc_100A08F1:
	LEA EAX,DWORD PTR [ESP+var_28+0x88]
	LEA ECX,DWORD PTR [ESP+var_5C+0x88]
	MOV EDI,DWORD PTR [ESP+var_5C+0x88]
	PUSH EAX
	CALL_LONG(DWORD PTR [EDI+0x00000098])
	OR DWORD PTR [ESP+var_30+0x8C],0x01
	LEA ECX,DWORD PTR [ESP+var_80+0x8C]
	MOV EAX,DWORD PTR [ESP+var_48+0x8C]
	PUSH ECX
	LEA ECX,DWORD PTR [ESP+var_44+0x8C]
	CALL_LONG(DWORD PTR [EAX+0x00000098])
	FLD DWORD PTR [ESP+arg2+0x8C]
	OR DWORD PTR [ESP+var_30+0x8C],0x02
	MOV ECX,DWORD PTR [ESP+var_84+0x8C]
	LEA EDX,DWORD PTR [ECX*2+ECX]
	LEA ECX,DWORD PTR [ESP+var_14+0x8C]
	MOV DWORD PTR [ESP+var_68+0x8C],offset [LEGO1_rdata.m5A0_ptr]
	FSUB DWORD PTR [EDX*8+ESI+0x04]
	FLD DWORD PTR [EDX*8+ESI+0x1C]
	FSUB DWORD PTR [EDX*8+ESI+0x04]
	MOV DWORD PTR [ESP+var_64+0x8C],ECX
	LEA EAX,DWORD PTR [EDX*8+ESI]
	LEA EDX,DWORD PTR [ESP+var_68+0x8C]
	LEA ECX,DWORD PTR [ESP+var_60+0x8C]
	FDIVP ST(1),ST
	SUB ESP, 0x04
	PUSH EDX
	FSTP DWORD PTR [ESP+var_88+0x8C]
	CALL_LONG(offset [LEGO1_text.m30A0_sub_100040A0])
	TEST EAX, EAX
	JNZ loc_100A097A
	LEA EAX,DWORD PTR [ESP+var_68+0x8C]
	MOV ECX,DWORD PTR [ESP+arg3+0x8C]
	PUSH EAX
	MOV ESI,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [ESI+0x44])
loc_100A097A:
	POP EDI
	POP ESI
	ADD ESP, 0x00000080
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100A0990(DWORD arg1)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x08
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x30]
	MOV ESI, ECX
	MOV DWORD PTR [ESP+var_4+0xC],EAX
	LEA EAX,DWORD PTR [ESP+var_4+0xC]
	LEA ECX,DWORD PTR [ESP+var_8+0xC]
	PUSH EAX
	MOV EDX,DWORD PTR [ESI+0x1C]
	PUSH ECX
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[ESI+0x0E]
	PUSH 0x0C
	MOV ECX,DWORD PTR [ESP+arg1+0x18]
	PUSH EDX
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m9FA00_sub_100A0A00])
	MOV ECX,DWORD PTR [ESP+var_4+0x24]
	ADD ESP, 0x18
	MOV DWORD PTR [ESI+0x30],ECX
	TEST EAX, EAX
	JZ loc_100A09E1
	CMP EAX, 0x01
	JB loc_100A09D6
	CMP EAX, 0x02
	JBE loc_100A09EA
loc_100A09D6:
	MOV AL,BYTE PTR [ESP+var_8+0xC]
	POP ESI
	ADD ESP, 0x08
	RETN 0x0004
loc_100A09E1:
	MOV AL, 0x01
	POP ESI
	ADD ESP, 0x08
	RETN 0x0004
loc_100A09EA:
	MOV ECX,DWORD PTR [ESP+var_8+0xC]
	MOV EAX,DWORD PTR [ESI+0x1C]
	POP ESI
	LEA EDX,DWORD PTR [ECX*2+ECX]
	MOV AL,BYTE PTR [EDX*4+EAX+0x08]
	ADD ESP, 0x08
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100A0A00(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
		arg1217224 = 0x4A4B20,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	MOV EDI,DWORD PTR [ESP+arg2+0x10]
	TEST EDI, EDI
	JNZ loc_100A0A13
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100A0A13:
	MOV EDX,DWORD PTR [ESP+arg3+0x10]
	FLD DWORD PTR [EDX+0x04]
	FCOMP DWORD PTR [ESP+arg1+0x10]
	FNSTSW AX
	TEST AH,0x41
	JNZ loc_100A0A2C
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100A0A2C:
	DEC EDI
	MOV ESI,DWORD PTR [ESP+arg4+0x10]
	MOV EAX, ESI
	IMUL EAX,EDI
	FLD DWORD PTR [EDX+EAX+0x04]
	FCOMP DWORD PTR [ESP+arg1+0x10]
	FNSTSW AX
	TEST AH,0x01
	JZ loc_100A0A56
	MOV EBP,DWORD PTR [ESP+arg5+0x10]
	MOV EAX, 0x00000001
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],EDI
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100A0A56:
	MOV ECX,DWORD PTR [ESP+arg6+0x10]
	MOV EAX, ESI
	MOV EBP,DWORD PTR [ESP+arg5+0x10]
	MOV EBX,DWORD PTR [ECX]
	IMUL EAX,EBX
	FLD DWORD PTR [EDX+EAX+0x04]
	FCOMP DWORD PTR [ESP+arg1+0x10]
	FNSTSW AX
	TEST AH,0x41
	JZ loc_100A0A9F
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],EBX
	CMP EDI, EBX
	JBE loc_100A0ACA
	INC EBX
	IMUL EBX,ESI
	LEA EBX,DWORD PTR [EDX+EBX+0x04]
loc_100A0A83:
	FLD DWORD PTR [EBX]
	FCOMP DWORD PTR [ESP+arg1+0x10]
	FNSTSW AX
	TEST AH,0x41
	JZ loc_100A0ACA
	ADD EBX, ESI
	MOV EAX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	INC EAX
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],EAX
	CMP EAX, EDI
	JB loc_100A0A83
	JMP loc_100A0ACA
loc_100A0A9F:
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],0x00000000
	TEST EDI, EDI
	JZ loc_100A0ACA
	FLD DWORD PTR [ESP+arg1+0x10]
	LEA EBX,DWORD PTR [ESI+EDX+0x04]
loc_100A0AB2:
	FCOM DWORD PTR [EBX]
	FNSTSW AX
	TEST AH,0x01
	JNZ loc_100A0AC8
	ADD EBX, ESI
	MOV EAX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	INC EAX
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],EAX
	CMP EAX, EDI
	JB loc_100A0AB2
loc_100A0AC8:
	FSTP ST(0)
loc_100A0ACA:
	MOV EAX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	MOV DWORD PTR [ECX],EAX
	MOV ECX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	IMUL ESI,ECX
	FLD DWORD PTR [EDX+ESI+0x04]
	FCOMP DWORD PTR [ESP+arg1+0x10]
	FNSTSW AX
	TEST AH,0x40
	JZ loc_100A0AEE
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100A0AEE:
	POP EBP
	CMP ECX, EDI
	SBB EAX, EAX
	POP EDI
	AND EAX, 0x02
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100A0B00(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
	};

__asm{
	FLD DWORD PTR [ESP+arg1]
	MOV EAX,DWORD PTR [ESP+arg2]
	MOV ECX,DWORD PTR [ESP+arg4]
	FSUB DWORD PTR [EAX+0x04]
	FLD DWORD PTR [ECX+0x04]
	FSUB DWORD PTR [EAX+0x04]
	FDIVP ST(1),ST
	FLD DWORD PTR [ESP+arg5]
	FSUB DWORD PTR [ESP+arg3]
	FMULP ST(1),ST
	FADD DWORD PTR [ESP+arg3]
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100A0B30()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m9FB85_proc_100A0B85]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.m98DD0_sub_10099DD0])
	XOR EAX, EAX
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m78D8_ptr]
	MOV DWORD PTR [ESI+0x08],EAX
	MOV DWORD PTR [ESI+0x0C],EAX
	MOV DWORD PTR [ESI+0x10],EAX
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR [ESI+0x14],EAX
	MOV DWORD PTR FS:[0x00000000],ECX
	MOV EAX, ESI
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_loc_100A0BC0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m9FC5A_proc_100A0C5A]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m78D8_ptr]
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	PUSH ESI
	PUSH EDI
	XOR EDI, EDI
	MOV DWORD PTR [EBP+var_8+0x4],EDI
	CMP DWORD PTR [ECX+0x0C],EDI
	JZ loc_100A0C25
	CMP DWORD PTR [ECX+0x10],EDI
	JBE loc_100A0C16
	XOR ESI, ESI
loc_100A0BF7:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	ADD ESI, 0x08
	INC EDI
	MOV ECX,DWORD PTR [EAX+0x0C]
	MOV EDX,DWORD PTR [ESI+ECX-0x08]
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	CMP DWORD PTR [EAX+0x10],EDI
	JA loc_100A0BF7
loc_100A0C16:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EAX+0x0C]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100A0C25:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ESI,DWORD PTR [EAX+0x14]
	TEST ESI, ESI
	JZ loc_100A0C3F
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m9E0D0_sub_1009F0D0])
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100A0C3F:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m9FC64_sub_100A0C64])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	POP EDI
	MOV DWORD PTR FS:[0x00000000], EAX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100A0C64()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m98E00_sub_10099E00])
}
}

__declspec(naked) DWORD LEGO1_sub_100A0C70(DWORD arg1, DWORD arg2)
{
	enum{
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m9FDAC_proc_100A0DAC]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x10
	MOV DWORD PTR [EBP+var_14+0x4],0xFFFFFFFF
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	PUSH 0x04
	MOV EAX,DWORD PTR [ECX]
	LEA ECX,DWORD PTR [EBP+var_20+0x4]
	PUSH ECX
	MOV EDX,DWORD PTR [EAX+0x04]
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	MOV DWORD PTR [EBP+var_18+0x4],EDX
	CALL_LONG(EDX)
	TEST EAX, EAX
	JNZ_LONG(offset [LEGO1_text.m9FDD1_loc_100A0DD1])
	MOV EAX,DWORD PTR [EBP+var_20+0x4]
	XOR EDI, EDI
	SHL EAX, 0x03
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [ESI+0x0C],EAX
	MOV DWORD PTR [ESI+0x10],0x00000000
	CMP DWORD PTR [EBP+var_20+0x4],EDI
	JBE loc_100A0D4F
	XOR EBX, EBX
loc_100A0CD7:
	PUSH 0x04
	LEA EAX,DWORD PTR [EBP+var_1C+0x4]
	PUSH EAX
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	CALL_LONG(DWORD PTR [EBP+var_18+0x4])
	TEST EAX, EAX
	JNZ_LONG(offset [LEGO1_text.m9FDD1_loc_100A0DD1])
	CMP DWORD PTR [EBP+var_1C+0x4],0x00
	JZ loc_100A0D43
	MOV EAX,DWORD PTR [EBP+var_1C+0x4]
	INC EAX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV ECX,DWORD PTR [ESI+0x0C]
	MOV DWORD PTR [EBX+ECX],EAX
	MOV ECX,DWORD PTR [ESI+0x0C]
	MOV EDX,DWORD PTR [EBP+var_1C+0x4]
	MOV EAX,DWORD PTR [EBX+ECX]
	PUSH EDX
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	PUSH EAX
	CALL_LONG(DWORD PTR [EBP+var_18+0x4])
	TEST EAX, EAX
	JNZ_LONG(offset [LEGO1_text.m9FDD1_loc_100A0DD1])
	MOV EAX,DWORD PTR [ESI+0x0C]
	MOV EDX,DWORD PTR [EBP+var_1C+0x4]
	PUSH 0x04
	MOV ECX,DWORD PTR [EBX+EAX]
	MOV BYTE PTR [EDX+ECX],0x00
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	MOV EAX,DWORD PTR [ESI+0x0C]
	ADD EAX, EBX
	ADD EAX, 0x04
	PUSH EAX
	CALL_LONG(DWORD PTR [EBP+var_18+0x4])
	TEST EAX, EAX
	JNZ_LONG(offset [LEGO1_text.m9FDD1_loc_100A0DD1])
loc_100A0D43:
	ADD EBX, 0x08
	INC EDI
	INC DWORD PTR [ESI+0x10]
	CMP EDI,DWORD PTR [EBP+var_20+0x4]
	JB loc_100A0CD7
loc_100A0D4F:
	PUSH 0x04
	LEA EAX,DWORD PTR [ESI+0x08]
	PUSH EAX
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	CALL_LONG(DWORD PTR [EBP+var_18+0x4])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	TEST EAX, EAX
	JNZ_LONG(offset [LEGO1_text.m9FDD1_loc_100A0DD1])
	CMP DWORD PTR [EBP+arg2+0x4],0x00
	JZ_LONG(offset [LEGO1_text.m9FDC3_loc_100A0DC3])
	PUSH 0x24
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EDI, EAX
	MOV EAX, 0x00000000
	TEST EDI, EDI
	JZ loc_100A0D8E
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m9E0A0_sub_1009F0A0])
loc_100A0D8E:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	MOV DWORD PTR [ESI+0x14],EAX
	PUSH ECX
	MOV ECX, EAX
	CALL_LONG(offset [LEGO1_text.m9E200_sub_1009F200])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	TEST EAX, EAX
	JZ_LONG(offset [LEGO1_text.m9FDC3_loc_100A0DC3])
	JMP_LONG(offset [LEGO1_text.m9FDD1_loc_100A0DD1])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100A0F20(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg1]
	CMP DWORD PTR [ECX+0x10],EDX
	JBE loc_100A0F32
	MOV EAX,DWORD PTR [ECX+0x0C]
	MOV EAX,DWORD PTR [EDX*8+EAX]
	RETN 0x0004
loc_100A0F32:
	XOR EAX, EAX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100A0F40(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg1]
	CMP DWORD PTR [ECX+0x10],EDX
	JBE loc_100A0F53
	MOV EAX,DWORD PTR [ECX+0x0C]
	MOV EAX,DWORD PTR [EDX*8+EAX+0x04]
	RETN 0x0004
loc_100A0F53:
	XOR EAX, EAX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100A0F60()
{
__asm{
	PUSH ESI
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.m9E900_sub_1009F900])
	MOV BYTE PTR [ESI+0x08],0x00
	MOV EAX, ESI
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100A0F70(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m9E910_sub_1009F910])
	TEST EAX, EAX
	JNZ loc_100A0F9E
	PUSH 0x01
	ADD ESI, 0x08
	PUSH ESI
	MOV EAX,DWORD PTR [EDI]
	MOV ECX, EDI
	CALL_LONG(DWORD PTR [EAX+0x04])
	CMP EAX, 0x01
	MOV ECX, EAX
	MOV EAX, 0x00000000
	ADC EAX, -0x01
	AND EAX, ECX
loc_100A0F9E:
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100A0FB0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m9E950_sub_1009F950])
	TEST EAX, EAX
	JNZ loc_100A0FDE
	PUSH 0x01
	ADD ESI, 0x08
	PUSH ESI
	MOV EAX,DWORD PTR [EDI]
	MOV ECX, EDI
	CALL_LONG(DWORD PTR [EAX+0x08])
	CMP EAX, 0x01
	MOV ECX, EAX
	MOV EAX, 0x00000000
	ADC EAX, -0x01
	AND EAX, ECX
loc_100A0FDE:
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100A0FF0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg1]
	PUSH EBX
	PUSH ESI
	XOR EBX, EBX
	MOV ESI,DWORD PTR [ESP+arg2+0x8]
	PUSH EDI
	MOV EDI,DWORD PTR [ESP+arg3+0xC]
	JMP loc_100A1005
loc_100A1003:
	FSTP DWORD PTR [EAX]
loc_100A1005:
	FLD DWORD PTR [EDX]
	MOV EAX,DWORD PTR [ECX+0x04]
	ADD EAX, EBX
	ADD EBX, 0x10
	FMUL DWORD PTR [EAX]
	FSTP DWORD PTR [EAX]
	FLD DWORD PTR [ESI]
	MOV EAX,DWORD PTR [ECX+0x04]
	CMP EBX, 0x40
	LEA EAX,DWORD PTR [EBX+EAX-0x0C]
	FMUL DWORD PTR [EAX]
	FSTP DWORD PTR [EAX]
	FLD DWORD PTR [EDI]
	MOV EAX,DWORD PTR [ECX+0x04]
	LEA EAX,DWORD PTR [EBX+EAX-0x08]
	FMUL DWORD PTR [EAX]
	JL loc_100A1003
	FSTP DWORD PTR [EAX]
	POP EDI
	POP ESI
	POP EBX
	RETN 0x000C
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100A10B0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	PUSH ESI
	XOR EDI, EDI
	PUSH EDI
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x10])
	MOV DWORD PTR [ESI+0x04],EDI
	MOV DWORD PTR [ESI+0x08],EDI
	MOV EAX, ESI
	MOV DWORD PTR [ESI+0x0C],EDI
	MOV DWORD PTR [ESI+0x10],EDI
	MOV DWORD PTR [ESI+0x14],EDI
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100A10E0()
{
	enum{
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
	};

__asm{
	SUB ESP, 0x08
	PUSH ESI
	PUSH EDI
	MOV EAX,DWORD PTR [ECX]
	MOV ESI, ECX
	XOR EDI, EDI
	LEA ECX,DWORD PTR [ESP+var_8+0x10]
	MOV DWORD PTR [ESP+var_4+0x10],EDI
	PUSH ECX
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x4C])
	MOV ECX,DWORD PTR [ESP+var_10+0x18]
	PUSH ECX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x0C])
	TEST EAX, EAX
	JLE loc_100A1141
loc_100A1108:
	LEA EAX,DWORD PTR [ESP+var_C+0x18]
	MOV ECX,DWORD PTR [ESP+var_10+0x18]
	PUSH EAX
	PUSH EDI
	PUSH ECX
	MOV EAX,DWORD PTR [ECX]
	INC EDI
	CALL_LONG(DWORD PTR [EAX+0x10])
	MOV EAX,DWORD PTR [ESI]
	MOV ECX,DWORD PTR [ESP+var_C+0x18]
	PUSH ECX
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x00000098])
	MOV ECX,DWORD PTR [ESP+var_C+0x18]
	PUSH ECX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x08])
	MOV ECX,DWORD PTR [ESP+var_10+0x18]
	PUSH ECX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x0C])
	CMP EAX, EDI
	JG loc_100A1108
loc_100A1141:
	MOV EAX,DWORD PTR [ESP+var_10+0x18]
	PUSH EAX
	MOV EDI,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EDI+0x08])
	MOV EAX,DWORD PTR [ESI]
	PUSH EAX
	MOV EDI,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EDI+0x08])
	POP EDI
	POP ESI
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100A1160(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mA021E_proc_100A121E]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH 0x18
	MOV ESI, 0x00000000
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	TEST EAX, EAX
	JZ loc_100A11A9
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mA00B0_sub_100A10B0])
	MOV ESI, EAX
loc_100A11A9:
	MOV EAX,DWORD PTR [EBP+arg3+0x4]
	MOV EDI,DWORD PTR [EBP+arg2+0x4]
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	PUSH ESI
	MOV DWORD PTR [ESI+0x04],EAX
	MOV ECX,DWORD PTR [EDI]
	PUSH EDI
	MOV EBX, 0x00000001
	MOV EAX,DWORD PTR [ECX+0x18]
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	CALL_LONG(EAX)
	TEST EAX, EAX
	JGE loc_100A11D0
	XOR EBX, EBX
loc_100A11D0:
	CMP EBX, 0x01
	JNZ loc_100A11F1
	PUSH ESI
	MOV EAX,DWORD PTR [EDI]
	PUSH offset [LEGO1_text.mA0240_proc_100A1240]
	MOV EBX, 0x00000001
	PUSH EDI
	CALL_LONG(DWORD PTR [EAX+0x10])
	TEST EAX, EAX
	JGE loc_100A11EC
	XOR EBX, EBX
loc_100A11EC:
	CMP EBX, 0x01
	JZ loc_100A120B
loc_100A11F1:
	TEST ESI, ESI
	JZ loc_100A1205
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mA00E0_sub_100A10E0])
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100A1205:
	PUSH 0x00
	PUSH EDI
	CALL_LONG(DWORD PTR [EBP+var_18+0x4])
loc_100A120B:
	MOV EAX, EBX
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP EDI
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100A1290()
{
__asm{
	XOR EAX, EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100A12A0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg1217228 = 0x4A4B30,
		arg1217230 = 0x4A4B38,
		arg1217231 = 0x4A4B3C,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	MOV EDI,DWORD PTR [ESP+arg2+0xC]
	PUSH EBP
	MOV EBP,DWORD PTR [ESI]
	PUSH ESI
	MOV EBX, 0x00000001
	CALL_LONG(DWORD PTR [EBP+arg1217231-0x4A4B20])
	PUSH EDI
	PUSH ESI
	CALL_LONG(DWORD PTR [EBP+arg1217230-0x4A4B20])
	TEST EAX, EAX
	JGE loc_100A12C2
	XOR EBX, EBX
loc_100A12C2:
	CMP EBX, 0x01
	JNZ loc_100A12EC
	TEST EDI, EDI
	JZ loc_100A12EC
	PUSH 0x00
	MOV EBX, 0x00000001
	PUSH offset [LEGO1_text.mA0300_proc_100A1300]
	PUSH ESI
	CALL_LONG(DWORD PTR [EBP+arg1217228-0x4A4B20])
	TEST EAX, EAX
	JGE loc_100A12E1
	XOR EBX, EBX
loc_100A12E1:
	CMP EBX, 0x01
	JZ loc_100A12EC
	PUSH 0x00
	PUSH ESI
	CALL_LONG(DWORD PTR [EBP+arg1217230-0x4A4B20])
loc_100A12EC:
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100A1330(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
		arg7 = 0x1C,
	};

__asm{
	PUSH ESI
	MOV EAX, 0x00000001
	MOV DWORD PTR [ECX+0x08],EAX
	MOV DWORD PTR [ECX+0x0C],EAX
	MOV ESI, ECX
	XOR ECX, ECX
	MOV DWORD PTR [ESI],ECX
	MOV DWORD PTR [ESI+0x04],ECX
	MOV DWORD PTR [ESI+0x10],ECX
	MOV DWORD PTR [ESI+0x14],ECX
	MOV EAX, 0x000000FF
	MOV DWORD PTR [ESI+0x18],ECX
	MOV DWORD PTR [ESI+0x1C],ECX
	MOV DWORD PTR [ESI+0x20],ECX
	MOV DWORD PTR [ESI+0x24],EAX
	MOV DWORD PTR [ESI+0x28],EAX
	MOV DWORD PTR [ESI+0x2C],EAX
	MOV DWORD PTR [ESI+0x30],EAX
	MOV EAX,DWORD PTR [ESP+arg4+0x4]
	MOV DWORD PTR [ESI+0x34],ECX
	MOV DWORD PTR [ESI+0x38],ECX
	MOV DWORD PTR [ESI+0x3C],ECX
	CMP EAX, ECX
	JZ loc_100A1392
	MOV ECX,DWORD PTR [ESP+arg5+0x4]
	MOV EDX,DWORD PTR [ESP+arg2+0x4]
	PUSH ECX
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	MOV ECX,DWORD PTR [ESP+arg1+0xC]
	PUSH EAX
	PUSH EDX
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mA03E0_sub_100A13E0])
loc_100A1392:
	MOV EAX,DWORD PTR [ESP+arg7+0x4]
	TEST EAX, EAX
	JZ loc_100A13A7
	PUSH EAX
	MOV ECX, ESI
	MOV EAX,DWORD PTR [ESP+arg6+0x8]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mA0550_sub_100A1550])
loc_100A13A7:
	MOV EAX, ESI
	POP ESI
	RETN 0x001C
}
}

__declspec(naked) DWORD LEGO1_sub_100A13B0()
{
__asm{
	PUSH ESI
	MOV ESI, ECX
	CMP DWORD PTR [ECX+0x3C],0x00
	JNZ loc_100A13C5
	MOV EAX,DWORD PTR [ESI+0x1C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100A13C5:
	MOV EAX,DWORD PTR [ESI+0x38]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100A13E0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg1217224 = 0x4A4B20,
		arg1217225 = 0x4A4B24,
		arg1217228 = 0x4A4B30,
		arg1217230 = 0x4A4B38,
		arg1217231 = 0x4A4B3C,
		arg1217239 = 0x4A4B5C,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	PUSH EBP
	MOV EDI, ESI
	MOV EBP, ECX
	XOR ECX, ECX
	CMP ESI, 0x02
	JLE loc_100A1416
loc_100A13F3:
	TEST ECX, ECX
	JNZ loc_100A1416
	MOV EAX, EDI
	CDQ
	XOR EAX, EDX
	SUB EAX, EDX
	AND EAX, 0x01
	XOR EAX, EDX
	SUB EAX, EDX
	MOV ECX, EAX
	MOV EAX, EDI
	CDQ
	SUB EAX, EDX
	SAR EAX, 0x01
	CMP EAX, 0x02
	MOV EDI, EAX
	JG loc_100A13F3
loc_100A1416:
	CMP EDI, 0x02
	JNZ FAR loc_100A14FC
	TEST ECX, ECX
	JNZ FAR loc_100A14FC
	MOV EBX,DWORD PTR [ESP+arg2+0x10]
	XOR ECX, ECX
	MOV EDI, EBX
	CMP EBX, 0x02
	JLE loc_100A1457
loc_100A1434:
	TEST ECX, ECX
	JNZ loc_100A1457
	MOV EAX, EDI
	CDQ
	XOR EAX, EDX
	SUB EAX, EDX
	AND EAX, 0x01
	XOR EAX, EDX
	SUB EAX, EDX
	MOV ECX, EAX
	MOV EAX, EDI
	CDQ
	SUB EAX, EDX
	SAR EAX, 0x01
	CMP EAX, 0x02
	MOV EDI, EAX
	JG loc_100A1434
loc_100A1457:
	CMP EDI, 0x02
	JNZ FAR loc_100A14FC
	TEST ECX, ECX
	JNZ FAR loc_100A14FC
	MOV EAX, ESI
	CDQ
	XOR EAX, EDX
	SUB EAX, EDX
	AND EAX, 0x03
	XOR EAX, EDX
	SUB EAX, EDX
	JNZ FAR loc_100A14FC
	MOV EAX,DWORD PTR [ESP+arg3+0x10]
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],ESI
	MOV DWORD PTR [EBP+arg1217225-0x4A4B20],EBX
	MOV DWORD PTR [EBP+arg1217228-0x4A4B20],EAX
	CMP DWORD PTR [EBP+arg1217239-0x4A4B20],0x00
	MOV DWORD PTR [EBP+arg1217230-0x4A4B20],ESI
	JNZ loc_100A14A5
	MOV EAX,DWORD PTR [EBP+arg1217231-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV DWORD PTR [EBP+arg1217231-0x4A4B20],0x00000000
	ADD ESP, 0x04
loc_100A14A5:
	CMP DWORD PTR [ESP+arg5+0x10],0x00
	JZ loc_100A14C6
	MOV ESI,DWORD PTR [ESP+arg4+0x10]
	MOV EAX, 0x00000001
	MOV DWORD PTR [EBP+arg1217239-0x4A4B20],0x00000001
	MOV DWORD PTR [EBP+arg1217231-0x4A4B20],ESI
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0014
loc_100A14C6:
	IMUL EBX,ESI
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV ESI,DWORD PTR [ESP+arg4+0x14]
	ADD ESP, 0x04
	MOV EDI, EAX
	MOV ECX, EBX
	SHR ECX, 0x02
	MOV DWORD PTR [EBP+arg1217231-0x4A4B20],EAX
	REP MOVSD
	MOV ECX, EBX
	AND ECX, 0x03
	REP MOVSB
	MOV DWORD PTR [EBP+arg1217239-0x4A4B20],0x00000000
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0014
loc_100A14FC:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0014
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100A1510(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x18]
	MOV EDX,DWORD PTR [ESP+arg2+0x4]
	PUSH EDI
	MOV EDI,DWORD PTR [ESP+arg1+0x8]
	MOV ESI,DWORD PTR [ESP+arg3+0x8]
	IMUL EDX,EAX
	IMUL EDI,EAX
	ADD EDI,DWORD PTR [ECX+0x1C]
	MOV ECX, EDX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EDX
	AND ECX, 0x03
	REP MOVSB
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	RETN 0x000C
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100A1550(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg1217223 = 0x4A4B1C,
		arg1217224 = 0x4A4B20,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	CMP DWORD PTR [ECX+0x34],ESI
	PUSH EBP
	MOV EDI, ECX
	JZ loc_100A1597
	MOV EAX,DWORD PTR [EDI+0x38]
	TEST EAX, EAX
	JZ loc_100A157D
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV DWORD PTR [EDI+0x38],0x00000000
	MOV DWORD PTR [EDI+0x34],0x00000000
	ADD ESP, 0x04
loc_100A157D:
	TEST ESI, ESI
	JLE loc_100A15D3
	LEA EAX,DWORD PTR [ESI*4+0x00000000]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EDI+0x38],EAX
	MOV DWORD PTR [EDI+0x34],ESI
loc_100A1597:
	TEST ESI, ESI
	JLE loc_100A15D3
	MOV EDX,DWORD PTR [ESP+arg2+0x10]
	XOR EAX, EAX
	MOV EBX, 0x00000001
loc_100A15A6:
	MOV CL,BYTE PTR [EDX]
	MOV EBP,DWORD PTR [EDI+0x38]
	ADD EDX, 0x03
	ADD EAX, 0x04
	DEC ESI
	MOV BYTE PTR [EAX+EBP+arg1217223-0x4A4B20],CL
	MOV CL,BYTE PTR [EDX-0x02]
	MOV EBP,DWORD PTR [EDI+0x38]
	MOV BYTE PTR [EAX+EBP+arg1217224-0x4A4B23],CL
	MOV CL,BYTE PTR [EDX-0x01]
	MOV EBP,DWORD PTR [EDI+0x38]
	MOV BYTE PTR [EAX+EBP+arg1217224-0x4A4B22],CL
	MOV EBP,DWORD PTR [EDI+0x38]
	MOV BYTE PTR [EAX+EBP+arg1217224-0x4A4B21],BL
	JNZ loc_100A15A6
loc_100A15D3:
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_100A15E0()
{
	enum{
		var_14 = -0x14,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mA06AF_proc_100A16AF]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	PUSH EDI
	PUSH 0x08
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	ADD ESP, 0x04
	MOV EDI, EAX
	XOR EAX, EAX
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	TEST EDI, EDI
	JZ_LONG(offset [LEGO1_text.mA0649_loc_100A1649])
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	MOV ESI, EDI
	MOV DWORD PTR [EDI], offset [LEGO1_rdata.m7980_ptr]
	MOV BYTE PTR [EBP+var_8+0x4],0x02
	MOV DWORD PTR [EDI], offset [LEGO1_rdata.m7948_ptr]
	MOV BYTE PTR [EBP+var_8+0x4],AL
	MOV DWORD PTR [EDI+0x04],EAX
	MOV DWORD PTR [EDI], offset [LEGO1_rdata.m7910_ptr]
	JMP_LONG(offset [LEGO1_text.mA064B_loc_100A164B])
}
}

