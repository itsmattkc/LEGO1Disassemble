#include "stdafx.h"
#include "LEGO1.h"

#pragma warning (disable:4730)
#pragma warning (disable:4733)
#pragma warning (disable:4799)
#define DB(b) __asm _emit b

__declspec(naked) DWORD __stdcall LEGO1_sub_100CD2A0(DWORD arg1)
{
	enum{
		r = 0x0,
	};

__asm{
	PUSH ESI
	MOV ESI, ECX
	MOV ECX,DWORD PTR [ECX+0x000000B0]
	TEST ECX, ECX
	JZ loc_100CD2B3
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
loc_100CD2B3:
	MOV EAX,DWORD PTR [ESP+r+0x8]
	MOV DWORD PTR [ESI+0x000000B0],EAX
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100CD2D0()
{
__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI,DWORD PTR [ECX+0x38]
	CMP EDI, -0x01
	JZ loc_100CD2F1
	MOV ESI,DWORD PTR [ECX+0x3C]
	MOV EAX, EDI
	CDQ
	IDIV ESI
	DEC ESI
	SUB EDI, EAX
	MOV DWORD PTR [ECX+0x3C],ESI
	MOV DWORD PTR [ECX+0x38],EDI
	ADD DWORD PTR [ECX+0x000000A8],EAX
loc_100CD2F1:
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100CD300()
{
__asm{
	MOV EAX, 0x80000000
	PUSH -0x01
	PUSH -0x02
loc_100CD309:
	DEC BYTE PTR [offset LEGO1_data + 0x12710]
	JNZ loc_100CD31D
	MOV EBX,DWORD PTR [ESI]
	ADD ESI, 0x04
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x20
loc_100CD31D:
	SHR EBX, 1
	JNB loc_100CD336
	POP ECX
	CMP ECX, -0x02
	JZ loc_100CD32E
	PUSH ECX
	PUSH EDI
	ADD EDI, 0x04
	JMP loc_100CD309
loc_100CD32E:
	PUSH -0x02
	PUSH EDI
	ADD EDI, 0x04
	JMP loc_100CD309
loc_100CD336:
	POP ECX
	CMP ECX, -0x01
	JZ loc_100CD39A
	PUSH ECX
	CMP BYTE PTR [offset LEGO1_data + 0x12710],0x09
	JB loc_100CD354
	MOV AL, BL
	SHR EBX, 0x08
	SUB BYTE PTR [offset LEGO1_data + 0x12710],0x08
	JMP loc_100CD380
loc_100CD354:
	MOV CL,BYTE PTR [offset LEGO1_data + 0x12710]
	MOV AL, BL
	MOV EBX,DWORD PTR [ESI]
	ADD ESI, 0x04
	SUB CL, 0x09
	NEG CL
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x21
	SUB BYTE PTR [offset LEGO1_data + 0x12710],CL
	MOV CH, BL
	SHR EBX, CL
	SUB CL, 0x08
	NEG CL
	SHL CH, CL
	OR AL, CH
loc_100CD380:
	POP ECX
	MOV DWORD PTR [EDI],EAX
	ADD EDI, 0x04
	CMP ECX, -0x02
	JZ FAR loc_100CD309
	MOV EDX, EDI
	SUB EDX, ECX
	MOV DWORD PTR [ECX],EDX
	JMP FAR loc_100CD309
loc_100CD39A:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100CD39B()
{
__asm{
	CMP BYTE PTR [offset LEGO1_data + 0x12710],0x09
	JB loc_100CD3B2
	MOV AL, BL
	SHR EBX, 0x08
	SUB BYTE PTR [offset LEGO1_data + 0x12710],0x08
	JMP loc_100CD3DE
loc_100CD3B2:
	MOV CL,BYTE PTR [offset LEGO1_data + 0x12710]
	MOV AL, BL
	MOV EBX,DWORD PTR [ESI]
	ADD ESI, 0x04
	SUB CL, 0x09
	NEG CL
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x21
	SUB BYTE PTR [offset LEGO1_data + 0x12710],CL
	MOV CH, BL
	SHR EBX, CL
	SUB CL, 0x08
	NEG CL
	SHL CH, CL
	OR AL, CH
loc_100CD3DE:
	MOV AH, AL
	CMP BYTE PTR [offset LEGO1_data + 0x12710],0x09
	JB loc_100CD3F7
	MOV AL, BL
	SHR EBX, 0x08
	SUB BYTE PTR [offset LEGO1_data + 0x12710],0x08
	JMP loc_100CD423
loc_100CD3F7:
	MOV CL,BYTE PTR [offset LEGO1_data + 0x12710]
	MOV AL, BL
	MOV EBX,DWORD PTR [ESI]
	ADD ESI, 0x04
	SUB CL, 0x09
	NEG CL
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x21
	SUB BYTE PTR [offset LEGO1_data + 0x12710],CL
	MOV CH, BL
	SHR EBX, CL
	SUB CL, 0x08
	NEG CL
	SHL CH, CL
	OR AL, CH
loc_100CD423:
	XCHG AL, AH
	MOV WORD PTR DS:[offset LEGO1_data + 0x12830], AX
	CMP BYTE PTR [offset LEGO1_data + 0x12710],0x09
	JB loc_100CD442
	MOV AL, BL
	SHR EBX, 0x08
	SUB BYTE PTR [offset LEGO1_data + 0x12710],0x08
	JMP loc_100CD46E
loc_100CD442:
	MOV CL,BYTE PTR [offset LEGO1_data + 0x12710]
	MOV AL, BL
	MOV EBX,DWORD PTR [ESI]
	ADD ESI, 0x04
	SUB CL, 0x09
	NEG CL
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x21
	SUB BYTE PTR [offset LEGO1_data + 0x12710],CL
	MOV CH, BL
	SHR EBX, CL
	SUB CL, 0x08
	NEG CL
	SHL CH, CL
	OR AL, CH
loc_100CD46E:
	MOV AH, AL
	CMP BYTE PTR [offset LEGO1_data + 0x12710],0x09
	JB loc_100CD487
	MOV AL, BL
	SHR EBX, 0x08
	SUB BYTE PTR [offset LEGO1_data + 0x12710],0x08
	JMP loc_100CD4B3
loc_100CD487:
	MOV CL,BYTE PTR [offset LEGO1_data + 0x12710]
	MOV AL, BL
	MOV EBX,DWORD PTR [ESI]
	ADD ESI, 0x04
	SUB CL, 0x09
	NEG CL
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x21
	SUB BYTE PTR [offset LEGO1_data + 0x12710],CL
	MOV CH, BL
	SHR EBX, CL
	SUB CL, 0x08
	NEG CL
	SHL CH, CL
	OR AL, CH
loc_100CD4B3:
	XCHG AL, AH
	MOV WORD PTR DS:[offset LEGO1_data + 0x12832], AX
	CMP BYTE PTR [offset LEGO1_data + 0x12710],0x09
	JB loc_100CD4D2
	MOV AL, BL
	SHR EBX, 0x08
	SUB BYTE PTR [offset LEGO1_data + 0x12710],0x08
	JMP loc_100CD4FE
loc_100CD4D2:
	MOV CL,BYTE PTR [offset LEGO1_data + 0x12710]
	MOV AL, BL
	MOV EBX,DWORD PTR [ESI]
	ADD ESI, 0x04
	SUB CL, 0x09
	NEG CL
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x21
	SUB BYTE PTR [offset LEGO1_data + 0x12710],CL
	MOV CH, BL
	SHR EBX, CL
	SUB CL, 0x08
	NEG CL
	SHL CH, CL
	OR AL, CH
loc_100CD4FE:
	MOV AH, AL
	CMP BYTE PTR [offset LEGO1_data + 0x12710],0x09
	JB loc_100CD517
	MOV AL, BL
	SHR EBX, 0x08
	SUB BYTE PTR [offset LEGO1_data + 0x12710],0x08
	JMP loc_100CD543
loc_100CD517:
	MOV CL,BYTE PTR [offset LEGO1_data + 0x12710]
	MOV AL, BL
	MOV EBX,DWORD PTR [ESI]
	ADD ESI, 0x04
	SUB CL, 0x09
	NEG CL
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x21
	SUB BYTE PTR [offset LEGO1_data + 0x12710],CL
	MOV CH, BL
	SHR EBX, CL
	SUB CL, 0x08
	NEG CL
	SHL CH, CL
	OR AL, CH
loc_100CD543:
	XCHG AL, AH
	MOV WORD PTR DS:[offset LEGO1_data + 0x12834], AX
	MOV DWORD PTR [EDX], 0x00000000
	MOV DWORD PTR [EDX+0x04],0x00000000
	MOV DWORD PTR [EDX+0x08],0x00000000
	MOV DWORD PTR [EDX+0x0C],0x00000000
	PUSH -0x01
	PUSH -0x02
loc_100CD56A:
	DEC BYTE PTR [offset LEGO1_data + 0x12710]
	JNZ loc_100CD57E
	MOV EBX,DWORD PTR [ESI]
	ADD ESI, 0x04
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x20
loc_100CD57E:
	SHR EBX, 1
	JNB loc_100CD597
	POP ECX
	CMP ECX, -0x02
	JZ loc_100CD58F
	PUSH ECX
	PUSH EDI
	ADD EDI, 0x04
	JMP loc_100CD56A
loc_100CD58F:
	PUSH -0x02
	PUSH EDI
	ADD EDI, 0x04
	JMP loc_100CD56A
loc_100CD597:
	POP ECX
	CMP ECX, -0x01
	JZ FAR loc_100CD672
	PUSH EDX
	PUSH ECX
	MOV EDX,DWORD PTR [offset LEGO1_data + 0x126D8]
	MOV ECX,DWORD PTR [EDX]
	TEST ECX,0x80000000
	JNZ loc_100CD5DC
loc_100CD5B3:
	DEC BYTE PTR [offset LEGO1_data + 0x12710]
	JNZ loc_100CD5C7
	MOV EBX,DWORD PTR [ESI]
	ADD ESI, 0x04
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x20
loc_100CD5C7:
	SHR EBX, 1
	JB loc_100CD5D0
	MOV ECX, 0x00000004
loc_100CD5D0:
	ADD EDX, ECX
	MOV ECX,DWORD PTR [EDX]
	TEST ECX,0x80000000
	JZ loc_100CD5B3
loc_100CD5DC:
	MOV AX, CX
	SHL EAX, 0x18
	MOV EDX,DWORD PTR [offset LEGO1_data + 0x126DC]
	MOV ECX,DWORD PTR [EDX]
	TEST ECX,0x80000000
	JNZ loc_100CD61B
loc_100CD5F2:
	DEC BYTE PTR [offset LEGO1_data + 0x12710]
	JNZ loc_100CD606
	MOV EBX,DWORD PTR [ESI]
	ADD ESI, 0x04
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x20
loc_100CD606:
	SHR EBX, 1
	JB loc_100CD60F
	MOV ECX, 0x00000004
loc_100CD60F:
	ADD EDX, ECX
	MOV ECX,DWORD PTR [EDX]
	TEST ECX,0x80000000
	JZ loc_100CD5F2
loc_100CD61B:
	MOV AX, CX
	POP ECX
	POP EDX
	ROL EAX, 0x08
	CMP AX,WORD PTR DS:[offset LEGO1_data + 0x12830]
	JNZ loc_100CD633
	XOR EAX, EAX
	MOV DWORD PTR [EDX+0x04],EDI
	JMP loc_100CD651
loc_100CD633:
	CMP AX,WORD PTR DS:[offset LEGO1_data + 0x12832]
	JNZ loc_100CD643
	XOR EAX, EAX
	MOV DWORD PTR [EDX+0x08],EDI
	JMP loc_100CD651
loc_100CD643:
	CMP AX,WORD PTR DS:[offset LEGO1_data + 0x12834]
	JNZ loc_100CD651
	XOR EAX, EAX
	MOV DWORD PTR [EDX+0x0C],EDI
loc_100CD651:
	SHL EAX, 0x10
	MOV AL, 0x01
	MOV DWORD PTR [EDI],EAX
	ADD EDI, 0x04
	CMP ECX, -0x02
	JZ FAR loc_100CD56A
	MOV EAX, EDI
	SUB EAX, ECX
	SHL EAX, 0x0D
	MOV DWORD PTR [ECX],EAX
	JMP FAR loc_100CD56A
loc_100CD672:
	CMP DWORD PTR [EDX+0x04],0x00
	JNZ loc_100CD67B
	MOV DWORD PTR [EDX+0x04],EDI
loc_100CD67B:
	CMP DWORD PTR [EDX+0x08],0x00
	JNZ loc_100CD687
	ADD EDI, 0x04
	MOV DWORD PTR [EDX+0x08],EDI
loc_100CD687:
	CMP DWORD PTR [EDX+0x0C],0x00
	JNZ loc_100CD693
	ADD EDI, 0x04
	MOV DWORD PTR [EDX+0x0C],EDI
loc_100CD693:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100CD694()
{
	enum{
		arg1217223 = 0x4A4B1C,
	};

__asm{
	MOV DWORD PTR [offset LEGO1_data + 0x126C0],EDX
	PUSH EBP
	MOV EBP,DWORD PTR [offset LEGO1_data + 0x12704]
loc_100CD6A1:
	PUSH EBP
	MOV AX, BP
	DEC AX
	MOV CL,BYTE PTR [offset LEGO1_data + 0x12700]
	MOV EDX,DWORD PTR [offset LEGO1_data + 0x126C0]
	MOV EBP,DWORD PTR [EDX]
	TEST EBP,0x0000FFFF
	JNZ loc_100CD6E3
loc_100CD6BD:
	SHR EBP, 0x0D
	AND EBP, 0x000FFFF8
	TEST CL,0xFF
	JZ loc_100CD6E3
	DEC CL
	SHR AX, 1
	JB loc_100CD6D7
	MOV EBP, 0x00000004
loc_100CD6D7:
	ADD EDX, EBP
	MOV EBP,DWORD PTR [EDX]
	TEST EBP,0x0000FFFF
	JZ loc_100CD6BD
loc_100CD6E3:
	POP EBP
	SUB EDX,DWORD PTR [offset LEGO1_data + 0x126F0]
	SHL EDX, 0x08
	SUB CL,BYTE PTR [offset LEGO1_data + 0x12700]
	NEG CL
	MOV DL, CL
	MOV DWORD PTR [EBP*4+EDI+arg1217223-0x4A4B20],EDX
	DEC EBP
	JNZ loc_100CD6A1
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100CD700()
{
__asm{
	DEC BYTE PTR [offset LEGO1_data + 0x12710]
	JNZ loc_100CD714
	MOV EBX,DWORD PTR [ESI]
	ADD ESI, 0x04
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x20
loc_100CD714:
	SHR EBX, 1
	JB loc_100CD729
	MOV DWORD PTR [EDX], 0x00000000
	MOV DWORD PTR [EDX+0x04],EAX
	MOV DWORD PTR [EDX+0x08],EAX
	MOV DWORD PTR [EDX+0x0C],EAX
	JMP loc_100CD781
loc_100CD729:
	PUSH EDI
	PUSH EAX
	PUSH EDX
	PUSH EAX
	DEC BYTE PTR [offset LEGO1_data + 0x12710]
	JNZ loc_100CD741
	MOV EBX,DWORD PTR [ESI]
	ADD ESI, 0x04
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x20
loc_100CD741:
	SHR EBX, 1
	JNB loc_100CD750
	MOV EDI,DWORD PTR [offset LEGO1_data + 0x126D8]
	CALL_LONG(offset [LEGO1_text.mCC300_sub_100CD300])
loc_100CD750:
	DEC BYTE PTR [offset LEGO1_data + 0x12710]
	JNZ loc_100CD764
	MOV EBX,DWORD PTR [ESI]
	ADD ESI, 0x04
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x20
loc_100CD764:
	SHR EBX, 1
	JNB loc_100CD773
	MOV EDI,DWORD PTR [offset LEGO1_data + 0x126DC]
	CALL_LONG(offset [LEGO1_text.mCC300_sub_100CD300])
loc_100CD773:
	POP EDI
	POP EDX
	CALL_LONG(offset [LEGO1_text.mCC39B_sub_100CD39B])
	POP EDX
	POP EDI
	CALL_LONG(offset [LEGO1_text.mCC694_sub_100CD694])
loc_100CD781:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100CD782()
{
__asm{
	MOV EAX, 0x00007468
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100CD788()
{
__asm{
	ADD ESI, 0x00007468
	SHR EAX, 0x02
loc_100CD791:
	TEST BYTE PTR [ESI],0x01
	JNZ loc_100CD79E
	ADD ESI, 0x04
	DEC EAX
	JNZ loc_100CD791
	JMP loc_100CD7B7
loc_100CD79E:
	MOVZX EDX,WORD PTR [ESI+0x02]
	MOV CH, 0x01
	MOV CL, DL
	SHR EDX, 0x03
	AND CL, 0x07
	SHL CH, CL
	OR BYTE PTR [EDX+EDI],CH
	ADD ESI, 0x04
	DEC EAX
	JNZ loc_100CD791
loc_100CD7B7:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100CD7B8()
{
__asm{
	ADD ESI, 0x00007468
	SHR EAX, 0x02
	PUSH EBP
	MOV BP,WORD PTR DS:[offset LEGO1_data + 0x12720]
loc_100CD7C9:
	TEST BYTE PTR [ESI],0x01
	JNZ loc_100CD7D9
	MOV WORD PTR DS:[ESI],BP
	ADD ESI, 0x04
	DEC EAX
	JNZ loc_100CD7C9
	JMP loc_100CD7E6
loc_100CD7D9:
	MOV DX,WORD PTR DS:[ESI+0x02]
	MOV WORD PTR DS:[ESI],DX
	ADD ESI, 0x04
	DEC EAX
	JNZ loc_100CD7C9
loc_100CD7E6:
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100CD7E8(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	PUSH ES
	PUSH EBX
	PUSH ECX
	PUSH EDX
	PUSH EDI
	PUSH ESI
	MOV AX, DS
	MOV ES, AX
	CLD
	MOV ESI,DWORD PTR [EBP+arg1+0x4]
	MOV DWORD PTR [offset LEGO1_data + 0x126D8],ESI
	ADD ESI, 0x00000800
	MOV DWORD PTR [offset LEGO1_data + 0x126DC],ESI
	ADD ESI, 0x00000800
	XOR EBX, EBX
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x01
	MOV DWORD PTR [offset LEGO1_data + 0x12700],0x0000000B
	MOV DWORD PTR [offset LEGO1_data + 0x12704],0x00000800
	MOV EDX, offset LEGO1_data + 0x12670
	MOV EDI,DWORD PTR [EBP+arg2+0x4]
	LEA EAX,DWORD PTR [EDI+0x00007468]
	MOV DWORD PTR [offset LEGO1_data + 0x126F0],EDI
	ADD EDI, 0x10
	CALL_LONG(offset [LEGO1_text.mCC700_sub_100CD700])
	MOV DWORD PTR [offset LEGO1_data + 0x12700],0x0000000A
	MOV DWORD PTR [offset LEGO1_data + 0x12704],0x00000400
	MOV EDX, offset LEGO1_data + 0x12680
	MOV EDI,DWORD PTR [EBP+arg2+0x4]
	LEA EAX,DWORD PTR [EDI+0x00007468]
	ADD EDI, 0x00002010
	ADD EAX,DWORD PTR [EBP+arg3+0x4]
	CALL_LONG(offset [LEGO1_text.mCC700_sub_100CD700])
	MOV DWORD PTR [offset LEGO1_data + 0x12700],0x0000000C
	MOV DWORD PTR [offset LEGO1_data + 0x12704],0x00001000
	MOV EDX, offset LEGO1_data + 0x12690
	MOV EDI,DWORD PTR [EBP+arg2+0x4]
	LEA EAX,DWORD PTR [EDI+0x00007468]
	ADD EDI, 0x00003010
	ADD EAX,DWORD PTR [EBP+arg3+0x4]
	ADD EAX,DWORD PTR [EBP+arg4+0x4]
	CALL_LONG(offset [LEGO1_text.mCC700_sub_100CD700])
	MOV DWORD PTR [offset LEGO1_data + 0x12700],0x00000008
	MOV DWORD PTR [offset LEGO1_data + 0x12704],0x00000100
	MOV EDX, offset LEGO1_data + 0x126A0
	MOV EDI,DWORD PTR [EBP+arg2+0x4]
	LEA EAX,DWORD PTR [EDI+0x00007468]
	ADD EDI, 0x00007010
	ADD EAX,DWORD PTR [EBP+arg3+0x4]
	ADD EAX,DWORD PTR [EBP+arg4+0x4]
	ADD EAX,DWORD PTR [EBP+arg5+0x4]
	CALL_LONG(offset [LEGO1_text.mCC700_sub_100CD700])
	MOV EDI,DWORD PTR [EBP+arg2+0x4]
	MOV EAX,DWORD PTR [EBP+arg3+0x4]
	MOV DWORD PTR [EDI],EAX
	MOV EAX,DWORD PTR [EBP+arg4+0x4]
	MOV DWORD PTR [EDI+0x04],EAX
	MOV EAX,DWORD PTR [EBP+arg5+0x4]
	MOV DWORD PTR [EDI+0x08],EAX
	MOV EAX,DWORD PTR [EBP+arg6+0x4]
	MOV DWORD PTR [EDI+0x0C],EAX
	ADD EDI, 0x00007414
	MOV ESI, offset LEGO1_data + 0x12670
	MOV ECX, 0x00000010
	REP MOVSD
	MOV EDI,DWORD PTR [EBP+arg1+0x4]
	XOR EAX, EAX
	MOV ECX, 0x00000800
	REP STOSD
	MOV EDI,DWORD PTR [EBP+arg1+0x4]
	MOV ESI,DWORD PTR [EBP+arg2+0x4]
	MOV EAX,DWORD PTR [ESI]
	CALL_LONG(offset [LEGO1_text.mCC788_sub_100CD788])
	MOV ESI,DWORD PTR [EBP+arg2+0x4]
	MOV EAX,DWORD PTR [ESI+0x04]
	ADD ESI,DWORD PTR [ESI]
	CALL_LONG(offset [LEGO1_text.mCC788_sub_100CD788])
	MOV ESI,DWORD PTR [EBP+arg2+0x4]
	MOV ECX,DWORD PTR [ESI+0x04]
	MOV EAX,DWORD PTR [ESI+0x08]
	ADD ESI,DWORD PTR [ESI]
	ADD ESI, ECX
	CALL_LONG(offset [LEGO1_text.mCC788_sub_100CD788])
	MOV ESI,DWORD PTR [EBP+arg2+0x4]
	MOV EDX,DWORD PTR [ESI+0x04]
	MOV ECX,DWORD PTR [ESI+0x08]
	MOV EAX,DWORD PTR [ESI+0x0C]
	ADD ESI,DWORD PTR [ESI]
	ADD ESI, EDX
	ADD ESI, ECX
	CALL_LONG(offset [LEGO1_text.mCC788_sub_100CD788])
	MOV ECX, 0x00000800
	MOV EAX, 0xFFFFFFFF
	REPE SCAS
	SUB EDI, 0x04
	MOV EAX,DWORD PTR [EDI]
	SUB EDI,DWORD PTR [EBP+arg1+0x4]
	XOR EAX, -0x01
	SHL EDI, 0x03
	BSF EDX,EAX
	ADD EDI, EDX
	MOV WORD PTR DS:[offset LEGO1_data + 0x12720],DI
	MOV ESI,DWORD PTR [EBP+arg2+0x4]
	ADD ESI, 0x00007410
	MOV WORD PTR DS:[ESI],DI
	MOV ESI,DWORD PTR [EBP+arg2+0x4]
	MOV EAX,DWORD PTR [ESI]
	CALL_LONG(offset [LEGO1_text.mCC7B8_sub_100CD7B8])
	MOV ESI,DWORD PTR [EBP+arg2+0x4]
	MOV EAX,DWORD PTR [ESI+0x04]
	ADD ESI,DWORD PTR [ESI]
	CALL_LONG(offset [LEGO1_text.mCC7B8_sub_100CD7B8])
	MOV ESI,DWORD PTR [EBP+arg2+0x4]
	MOV ECX,DWORD PTR [ESI+0x04]
	MOV EAX,DWORD PTR [ESI+0x08]
	ADD ESI,DWORD PTR [ESI]
	ADD ESI, ECX
	CALL_LONG(offset [LEGO1_text.mCC7B8_sub_100CD7B8])
	MOV ESI,DWORD PTR [EBP+arg2+0x4]
	MOV EDX,DWORD PTR [ESI+0x04]
	MOV ECX,DWORD PTR [ESI+0x08]
	MOV EAX,DWORD PTR [ESI+0x0C]
	ADD ESI,DWORD PTR [ESI]
	ADD ESI, EDX
	ADD ESI, ECX
	CALL_LONG(offset [LEGO1_text.mCC7B8_sub_100CD7B8])
	POP ESI
	POP EDI
	POP EDX
	POP ECX
	POP EBX
	POP ES
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100CDA83(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	PUSH ES
	PUSH EBX
	PUSH EDI
	PUSH ESI
	PUSH EDX
	MOV AX, DS
	MOV ES, AX
	CLD
	MOV ESI,DWORD PTR [EBP+arg2+0x4]
	MOV DWORD PTR [offset LEGO1_data + 0x126F0],ESI
	ADD ESI, 0x00007410
	MOV EAX,DWORD PTR [ESI]
	ADD ESI, 0x04
	MOV WORD PTR DS:[offset LEGO1_data + 0x12720], AX
	MOV EDI, offset LEGO1_data + 0x12670
	MOV ECX, 0x00000004
loc_100CDAB5:
	LODSD
	STOSD
	MOV EDX, EAX
	LODSD
	STOSD
	MOV DWORD PTR [EAX],EDX
	LODSD
	STOSD
	MOV DWORD PTR [EAX],EDX
	LODSD
	STOSD
	MOV DWORD PTR [EAX],EDX
	DEC ECX
	JNZ loc_100CDAB5
	MOV EAX,DWORD PTR [EBP+arg2+0x4]
	ADD EAX, 0x10
	MOV DWORD PTR [offset LEGO1_data + 0x12660], EAX
	ADD EAX, 0x00002000
	MOV DWORD PTR [offset LEGO1_data + 0x12664], EAX
	ADD EAX, 0x00001000
	MOV DWORD PTR [offset LEGO1_data + 0x12668], EAX
	ADD EAX, 0x00004000
	MOV DWORD PTR [offset LEGO1_data + 0x1266C], EAX
	MOV ESI,DWORD PTR [EBP+arg1+0x4]
	MOV EBX,DWORD PTR [ESI]
	ADD ESI, 0x04
	MOV BYTE PTR [offset LEGO1_data + 0x12710],0x21
	MOV EDI,DWORD PTR [EBP+arg3+0x4]
	MOV EAX,DWORD PTR [EDI+0x08]
	MOV DWORD PTR [offset LEGO1_data + 0x126B4], EAX
	MOV DWORD PTR [offset LEGO1_data + 0x126B8], EAX
	MOV EAX,DWORD PTR [EDI+0x0C]
	MOV DWORD PTR [offset LEGO1_data + 0x126BC], EAX
	MOV EAX,DWORD PTR [EDI+0x10]
	MOV DWORD PTR [offset LEGO1_data + 0x126D4], EAX
	MOV EAX,DWORD PTR [EDI+0x14]
	MOV DWORD PTR [offset LEGO1_data + 0x126CC], EAX
	MOV EBP,DWORD PTR [EDI+0x18]
	MOV EAX,DWORD PTR [EDI+0x1C]
	MOV DWORD PTR [offset LEGO1_data + 0x126D0], EAX
	MOV EAX,DWORD PTR [EDI+0x04]
	MOV DWORD PTR [EDI+0x20],0x00000000
	MOV DWORD PTR [EDI+0x2C],0x00000000
	MOV DWORD PTR [EDI+0x30],0x00000000
	ADD EDI, 0x38
	MOV DWORD PTR [offset LEGO1_data + 0x12848],EDI
	XOR EDI, EDI
	MOV DWORD PTR [offset LEGO1_data + 0x12844],EDI
	MOV DWORD PTR [offset LEGO1_data + 0x12840],EDI
	MOV EDI, EAX
	JMP_LONG(offset [LEGO1_text.mCCB80_loc_100CDB80])
	XCHG EBX, EBX
	XCHG ECX, ECX
	XCHG EBX, EBX
	XCHG ECX, ECX
	XCHG EBX, EBX
	JMP_LONG(offset [LEGO1_text.mCCB70_proc_100CDB70])
}
}

__declspec(naked) DWORD LEGO1_sub_100D052C(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	PUSH EDX
	PUSH ECX
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV ECX,DWORD PTR [EBP+arg2+0x4]
	MUL ECX
	SHR EAX, 0x08
	ADD EAX, 0x20
	POP ECX
	POP EDX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D0543(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	PUSH ESI
	PUSH EDI
	PUSH EBX
	PUSH ECX
	PUSH EDX
	CLD
	MOV ESI,DWORD PTR [EBP+arg1+0x4]
	MOV EDX,DWORD PTR [EBP+arg2+0x4]
	ADD ESI, 0x20
	CMP BYTE PTR [ESI],0x00
	JNZ FAR loc_100D0648
	MOV EDI,DWORD PTR [ESI+0x14]
	CMP BYTE PTR [ESI+0x01],0x00
	JNZ FAR loc_100D0600
	CMP BYTE PTR [ESI+0x02],0x00
	JNZ loc_100D0578
	LEA EDI,DWORD PTR [ESI+0x18]
	MOV BYTE PTR [ESI+0x02],0x01
loc_100D0578:
	MOV EBX,DWORD PTR [ESI+0x0C]
	MOV ECX,DWORD PTR [ESI+0x10]
	CMP ECX,DWORD PTR [ESI+0x08]
	JNB FAR loc_100D0645
	CMP BYTE PTR [EDI],0x00
	JNZ loc_100D05AE
loc_100D058C:
	CMP BYTE PTR [EDI],0x00
	JNZ loc_100D05AB
	INC EDI
	ADD EBX, 0x40
loc_100D0595:
	CMP EBX,DWORD PTR [ESI+0x04]
	JB loc_100D058C
	ADD ECX, 0x04
	CMP ECX,DWORD PTR [ESI+0x08]
	JNB FAR loc_100D0645
	SUB EBX,DWORD PTR [ESI+0x04]
	JMP loc_100D0595
loc_100D05AB:
	MOV DWORD PTR [ESI+0x10],ECX
loc_100D05AE:
	MOV DWORD PTR [EDX],EBX
	MOV DWORD PTR [EDX+0x04],ECX
	MOV DWORD PTR [EDX+0x0C],0x00000004
	MOV DWORD PTR [EDX+0x08],0x00000000
loc_100D05C1:
	LEA EAX,DWORD PTR [EBX+0x40]
	CMP EAX,DWORD PTR [ESI+0x04]
	JNB loc_100D05DA
	INC EDI
	MOV EBX, EAX
	ADD DWORD PTR [EDX+0x08],0x40
	CMP BYTE PTR [EDI],0x00
	JNZ loc_100D05C1
	MOV DWORD PTR [ESI+0x0C],EBX
	JMP loc_100D05F6
loc_100D05DA:
	SUB EAX,DWORD PTR [ESI+0x04]
	MOV DWORD PTR [ESI+0x0C],EAX
	CMP EAX, 0x00
	JZ loc_100D05E9
	MOV BYTE PTR [ESI+0x01],0x01
loc_100D05E9:
	SUB EAX, 0x40
	NEG EAX
	ADD DWORD PTR [EDX+0x08],EAX
	ADD DWORD PTR [ESI+0x10],0x04
	INC EDI
loc_100D05F6:
	MOV EAX, 0x00000001
	MOV DWORD PTR [ESI+0x14],EDI
	JMP loc_100D064D
loc_100D0600:
	MOV EAX,DWORD PTR [ESI+0x10]
	CMP EAX,DWORD PTR [ESI+0x08]
	JNB loc_100D0645
	MOV DWORD PTR [EDX+0x04],EAX
	MOV DWORD PTR [EDX], 0x00000000
	MOV EBX,DWORD PTR [ESI+0x0C]
	CMP EBX,DWORD PTR [ESI+0x04]
	JNB loc_100D0628
	MOV BYTE PTR [ESI+0x01],0x00
	MOV DWORD PTR [EDX+0x08],EBX
	CMP WORD PTR DS:[EDI],0x00
	JZ loc_100D0637
	JMP loc_100D05C1
loc_100D0628:
	MOV ECX,DWORD PTR [ESI+0x04]
	MOV DWORD PTR [EDX+0x08],ECX
	SUB EBX, ECX
	MOV DWORD PTR [ESI+0x0C],EBX
	ADD DWORD PTR [ESI+0x10],0x04
loc_100D0637:
	MOV DWORD PTR [EDX+0x0C],0x00000004
	MOV EAX, 0x00000001
	JMP loc_100D064D
loc_100D0645:
	MOV BYTE PTR [ESI],0x01
loc_100D0648:
	MOV EAX, 0x00000000
loc_100D064D:
	POP EDX
	POP ECX
	POP EBX
	POP EDI
	POP ESI
	POP EBP
	RET
	PUSH EBP
	MOV EBP, ESP
	PUSH EDI
	PUSH ESI
	PUSH EBX
	PUSH EDX
	PUSH ES
	CLD
	MOV EDI,DWORD PTR [EBP+arg3]
	XOR EBX, EBX
	MOV ESI,DWORD PTR [EBP+arg2]
	LEA EAX,DWORD PTR [ESI+0x00007410]
	MOV CX,WORD PTR DS:[EAX]
	ADD EAX, 0x04
	MOV WORD PTR DS:[offset LEGO1_data + 0x12720],CX
	MOV CL,BYTE PTR [EDI]
	MOV CH, CL
	MOV WORD PTR DS:[EAX+0x12],CX
	MOV WORD PTR DS:[EAX+0x22],CX
	MOV ECX,DWORD PTR [ESI+0x04]
	ADD ESI,DWORD PTR [ESI]
	ADD ESI, 0x00007468
	SHR ECX, 0x02
	JECXZ loc_100D06AF
loc_100D0694:
	LODSD
	CMP AX,WORD PTR DS:[offset LEGO1_data + 0x12720]
	JZ loc_100D06AC
	MOV BL, AL
	MOV AL,BYTE PTR [EBX+EDI]
	MOV BL, AH
	MOV AH,BYTE PTR [EBX+EDI]
	MOV WORD PTR DS:[ESI-0x02],AX
loc_100D06AC:
	DEC ECX
	JNZ loc_100D0694
loc_100D06AF:
	MOV ESI,DWORD PTR [EBP+arg2]
	MOV EAX,DWORD PTR [ESI]
	ADD EAX,DWORD PTR [ESI+0x04]
	MOV ECX,DWORD PTR [ESI+0x08]
	ADD ESI, EAX
	ADD ESI, 0x00007468
	SHR ECX, 0x02
	JECXZ loc_100D06E2
loc_100D06C7:
	LODSD
	CMP AX,WORD PTR DS:[offset LEGO1_data + 0x12720]
	JZ loc_100D06DF
	MOV BL, AL
	MOV AL,BYTE PTR [EBX+EDI]
	MOV BL, AH
	MOV AH,BYTE PTR [EBX+EDI]
	MOV WORD PTR DS:[ESI-0x02],AX
loc_100D06DF:
	DEC ECX
	JNZ loc_100D06C7
loc_100D06E2:
	MOV ESI,DWORD PTR [EBP+arg2]
	MOV EAX,DWORD PTR [ESI]
	ADD EAX,DWORD PTR [ESI+0x04]
	ADD EAX,DWORD PTR [ESI+0x08]
	MOV ECX,DWORD PTR [ESI+0x0C]
	ADD ESI, EAX
	ADD ESI, 0x00007468
	SHR ECX, 0x02
	JECXZ loc_100D071C
loc_100D06FD:
	LODSD
	MOV EDX, EAX
	CMP AX,WORD PTR DS:[offset LEGO1_data + 0x12720]
	JZ loc_100D0719
	AND EDX, 0x03
	CMP EDX, 0x03
	JNZ loc_100D0719
	MOV BL, AH
	MOV AH,BYTE PTR [EBX+EDI]
	MOV BYTE PTR [ESI-0x01],AH
loc_100D0719:
	DEC ECX
	JNZ loc_100D06FD
loc_100D071C:
	POP ES
	POP EDX
	POP EBX
	POP ESI
	POP EDI
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D0730()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mCF7A4_proc_100D07A4]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	XOR EAX, EAX
	MOV ECX, 0xFFFFFFFF
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	MOV DWORD PTR [ESI+0x08],EAX
	MOV DWORD PTR [ESI+0x0C],EAX
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m9100_ptr]
	MOV DWORD PTR [ESI+0x10],EAX
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m90D0_ptr]
	MOV DWORD PTR [ESI+0x14],EAX
	MOV DWORD PTR [ESI+0x18],EAX
	MOV DWORD PTR [ESI+0x1C],EAX
	MOV DWORD PTR [ESI+0x20],EAX
	MOV DWORD PTR [EBP+var_8+0x4],ECX
	MOV EAX, ESI
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D08C9()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D0921()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD1E0___1MxCore__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D0A50()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mCFAC1_proc_100D0AC1]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m90D0_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	PUSH ESI
	XOR ESI, ESI
	MOV DWORD PTR [EBP+var_8+0x4],ESI
	MOV EAX,DWORD PTR [ECX+0x18]
	MOV DWORD PTR [ECX+0x10],ESI
	PUSH EAX
	MOV DWORD PTR [ECX+0x14],ESI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [ECX+0x20]
	MOV DWORD PTR [ECX+0x18],ESI
	PUSH EAX
	MOV DWORD PTR [ECX+0x1C],ESI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV DWORD PTR [ECX+0x20],ESI
	CALL_LONG(offset [LEGO1_text.mCFACB_sub_100D0ACB])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	POP ESI
	MOV DWORD PTR FS:[0x00000000], EAX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D0ACB()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mCF8E0_loc_100D08E0])
}
}

__declspec(naked) DWORD LEGO1_sub_100D0C5A()
{
	enum{
		arg1217203 = 0x4A4ACC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217203-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D0C62()
{
	enum{
		arg1217207 = 0x4A4ADC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217207-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D0C6A()
{
	enum{
		arg1217215 = 0x4A4AFC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217215-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D0D55()
{
	enum{
		arg1217203 = 0x4A4ACC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217203-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D0D5D()
{
	enum{
		arg1217207 = 0x4A4ADC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217207-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D0D65()
{
	enum{
		arg1217215 = 0x4A4AFC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217215-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D0D77()
{
	enum{
		arg1217211 = 0x4A4AEC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217211-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D0D80(DWORD arg1, DWORD arg2)
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x0C
	MOV DWORD PTR [ESP+var_C+0xC],EAX
	PUSH EBX
	ADD EAX,DWORD PTR [ESP+arg2+0x10]
	PUSH ESI
	MOV EBX,DWORD PTR [ESP+var_4+0x14]
	PUSH EDI
	MOV DWORD PTR [ESP+var_8+0x18],EAX
	PUSH EBP
	CMP DWORD PTR [ESP+arg1+0x1C],EAX
	JNB FAR loc_100D0F00
loc_100D0DA5:
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	CMP DWORD PTR [EAX], 0x624F784D
	JNZ FAR loc_100D0EEE
	MOV EBX, EAX
	PUSH -0x01
	ADD DWORD PTR [ESP+var_C+0x20],0x08
	LEA EAX,DWORD PTR [ESP+var_C+0x20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mBEB30_sub_100BFB30])
	MOV EDX,DWORD PTR [EAX+0x1C]
	ADD ESP, 0x08
	MOV ECX, EAX
	MOV DWORD PTR [ESP+var_4+0x1C],EDX
	TEST ECX, ECX
	JZ loc_100D0DDE
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
loc_100D0DDE:
	MOV EAX,DWORD PTR [EBX+0x04]
	MOV ECX, EAX
	AND ECX, 0x01
	ADD ECX, EBX
	ADD ECX, EAX
	ADD ECX, 0x08
	MOV DWORD PTR [ESP+var_14+0x24],ECX
	CMP ECX,DWORD PTR [ESP+var_10+0x24]
	JNB FAR loc_100D0EF2
loc_100D0DFB:
	MOV EAX,DWORD PTR [ESP+var_14+0x24]
	CMP DWORD PTR [EAX], 0x6843784D
	JNZ FAR loc_100D0EDA
	MOV ESI, EAX
	LEA EDI,DWORD PTR [EAX+0x04]
	MOV EAX,DWORD PTR [EDI]
	MOV ECX, EAX
	AND ECX, 0x01
	ADD ECX, EAX
	ADD ECX, 0x08
	ADD DWORD PTR [ESP+var_14+0x24],ECX
	CMP DWORD PTR [EBX], 0x6843784D
	JNZ loc_100D0E8E
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.mC2180_sub_100C3180])
	ADD ESP, 0x04
	TEST BYTE PTR [EAX],0x10
	JZ loc_100D0E8E
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.mC2190_sub_100C3190])
	ADD ESP, 0x04
	MOV EBP,DWORD PTR [EAX]
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.mC2190_sub_100C3190])
	ADD ESP, 0x04
	CMP EBP,DWORD PTR [EAX]
	JNZ loc_100D0E80
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.mC2180_sub_100C3180])
	ADD ESP, 0x04
	TEST BYTE PTR [EAX],0x10
	JZ loc_100D0E80
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.mC21A0_sub_100C31A0])
	ADD ESP, 0x04
	MOV EBP,DWORD PTR [EAX]
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.mC21A0_sub_100C31A0])
	ADD ESP, 0x04
	CMP EBP,DWORD PTR [EAX]
	JNZ loc_100D0E80
	PUSH ESI
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.mC60D0_sub_100C70D0])
	ADD ESP, 0x08
	JMP loc_100D0EDE
loc_100D0E80:
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.mC2180_sub_100C3180])
	AND WORD PTR DS:[EAX],0xFFEF
	ADD ESP, 0x04
loc_100D0E8E:
	MOV EAX,DWORD PTR [EBX+0x04]
	MOV ECX, EAX
	AND ECX, 0x01
	ADD ECX, EAX
	MOV EAX,DWORD PTR [EDI]
	ADD ECX, 0x08
	MOV EDX, EAX
	ADD EBX, ECX
	AND EDX, 0x01
	ADD EDX, EAX
	MOV EDI, EBX
	ADD EDX, 0x08
	PUSH EBX
	MOV ECX, EDX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EDX
	AND ECX, 0x03
	REP MOVSB
	CALL_LONG(offset [LEGO1_text.mC2190_sub_100C3190])
	MOV EDX,DWORD PTR [ESP+var_8+0x24]
	ADD ESP, 0x04
	CMP DWORD PTR [EAX],EDX
	JNZ loc_100D0EDE
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.mC2180_sub_100C3180])
	ADD ESP, 0x04
	TEST BYTE PTR [EAX],0x02
	JZ loc_100D0EDE
	JMP loc_100D0EF2
loc_100D0EDA:
	INC DWORD PTR [ESP+var_14+0x24]
loc_100D0EDE:
	MOV EAX,DWORD PTR [ESP+var_10+0x24]
	CMP DWORD PTR [ESP+var_14+0x24],EAX
	JB FAR loc_100D0DFB
	JMP loc_100D0EF2
loc_100D0EEE:
	INC DWORD PTR [ESP+var_14+0x24]
loc_100D0EF2:
	MOV EAX,DWORD PTR [ESP+var_10+0x24]
	CMP DWORD PTR [ESP+var_14+0x24],EAX
	JB FAR loc_100D0DA5
loc_100D0F00:
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.mC2180_sub_100C3180])
	AND WORD PTR DS:[EAX],0xFFEF
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [EBX+0x04]
	MOV ECX, EAX
	AND ECX, 0x01
	SUB ECX,DWORD PTR [ESP+var_4+0x24]
	POP EBP
	ADD ECX, EBX
	POP EDI
	POP ESI
	POP EBX
	LEA EAX,DWORD PTR [EAX+ECX+0x08]
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100D0F50(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH 0x00
	PUSH 0x00001000
	MOV DWORD PTR [ECX+0x18],EAX
	CALL_LONG(offset [LEGO1_text.mBE610_sub_100BF610])
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100D0F70()
{
	enum{
		var_18 = -0x18,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mD0088_proc_100D1088]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	MOV ESI, ECX
	XOR EBX, EBX
	CALL_LONG(offset [LEGO1_text.mAD1A0___0MxCore__QAE_XZ])
	LEA ECX,DWORD PTR [ESI+0x10]
	MOV DWORD PTR [EBP+var_8+0x4],EBX
	MOV DWORD PTR [ESI+0x08],EBX
	MOV DWORD PTR [ESI+0x0C],EBX
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m9100_ptr]
	CALL_LONG(offset [LEGO1_text.mBE510_sub_100BF510])
	MOV BYTE PTR [EBP+var_8+0x4],0x02
	LEA ECX,DWORD PTR [ESI+0x2C]
	MOV DWORD PTR [ESI+0x28],EBX
	MOV DWORD PTR [ESI+0x10],offset [LEGO1_rdata.m9130_ptr]
	MOV BYTE PTR [EBP+var_8+0x4],0x03
	CALL_LONG(offset [LEGO1_text.mC77D0_sub_100C87D0])
	MOV BYTE PTR [EBP+var_8+0x4],0x04
	LEA ECX,DWORD PTR [ESI+0x38]
	CALL_LONG(offset [LEGO1_text.mB5D20___0MxCriticalSection__QAE_XZ])
	MOV AL,BYTE PTR [EBP+var_10+0x3]
	PUSH 0x0C
	MOV BYTE PTR [EBP+var_8+0x4],0x05
	MOV BYTE PTR [ESI+0x54],AL
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EAX],EAX
	MOV BYTE PTR [EBP+var_8+0x4],0x09
	MOV DWORD PTR [EAX+0x04],EAX
	MOV DWORD PTR [ESI+0x58],EAX
	MOV DWORD PTR [ESI+0x5C],EBX
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m9138_ptr]
	MOV DWORD PTR [ESI+0x0C],EBX
	MOV EAX, ESI
	MOV BYTE PTR [ESI+0x34],BL
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	MOV BYTE PTR [ESI+0x35],BL
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D10F9()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mBE5A0_loc_100BF5A0])
}
}

__declspec(naked) DWORD LEGO1_sub_100D1151()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mBE5A0_loc_100BF5A0])
}
}

__declspec(naked) DWORD LEGO1_sub_100D1240()
{
	enum{
		var_24 = -0x24,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mD03B2_proc_100D13B2]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m9138_ptr]
	PUSH EAX
	LEA EAX,DWORD PTR [ECX+0x38]
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x14
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV DWORD PTR [EBP+var_24+0x4],EAX
	MOV DWORD PTR [EBP+var_8+0x4],0x00000004
	MOV BYTE PTR [ECX+0x35],0x00
loc_100D1275:
	MOV EAX,DWORD PTR [EBP+var_24+0x4]
	LEA ECX,DWORD PTR [EBP+var_20+0x4]
	MOV DWORD PTR [EBP+var_18+0x4],0x00000000
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mB7ED0_sub_100B8ED0])
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV BYTE PTR [EBP+var_8+0x4],0x05
	CMP DWORD PTR [EAX+0x5C],0x00
	JZ loc_100D12C5
	MOV ECX,DWORD PTR [EAX+0x58]
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [EBP+var_1C+0x4],EAX
	MOV EDX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [EBP+var_18+0x4],EDX
	LEA EDX,DWORD PTR [EAX+0x04]
	MOV EAX,DWORD PTR [EAX]
	MOV ECX,DWORD PTR [EDX]
	MOV DWORD PTR [ECX],EAX
	MOV ECX,DWORD PTR [EDX]
	MOV EAX,DWORD PTR [EBP+var_1C+0x4]
	PUSH EAX
	MOV EDX,DWORD PTR [EAX]
	MOV DWORD PTR [EDX+0x04],ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	DEC DWORD PTR [ECX+0x5C]
loc_100D12C5:
	MOV BYTE PTR [EBP+var_8+0x4],0x04
	CALL_LONG(offset [LEGO1_text.mD037E_sub_100D137E])
	CMP DWORD PTR [EBP+var_18+0x4],0x00
	JZ loc_100D1305
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV ECX,DWORD PTR [EAX+0x000000A0]
	CMP DWORD PTR [ECX+0x28],0x00020000
	JNB loc_100D12EC
	DEC DWORD PTR [offset LEGO1_data.m12878]
loc_100D12EC:
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV EDX,DWORD PTR [EBP+var_14+0x4]
	PUSH EAX
	MOV ECX,DWORD PTR [EDX+0x08]
	CALL_LONG(offset [LEGO1_text.mC7670_sub_100C8670])
	CMP DWORD PTR [EBP+var_18+0x4],0x00
	JNZ FAR loc_100D1275
loc_100D1305:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	CMP BYTE PTR [EAX+0x34],0x00
	JZ loc_100D1327
	PUSH 0x01
	LEA ECX,DWORD PTR [EAX+0x2C]
	MOV BYTE PTR [EAX+0x34],0x00
	CALL_LONG(offset [LEGO1_text.mC7850_sub_100C8850])
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	ADD ECX, 0x10
	CALL_LONG(offset [LEGO1_text.mBE670_sub_100BF670])
loc_100D1327:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EAX+0x0C]
	TEST ECX, ECX
	JZ loc_100D1337
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
loc_100D1337:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV BYTE PTR [EBP+var_8+0x4],0x03
	MOV DWORD PTR [EAX+0x0C],0x00000000
	CALL_LONG(offset [LEGO1_text.mD0386_sub_100D1386])
	MOV BYTE PTR [EBP+var_8+0x4],0x02
	CALL_LONG(offset [LEGO1_text.mD0391_sub_100D1391])
	MOV BYTE PTR [EBP+var_8+0x4],0x01
	CALL_LONG(offset [LEGO1_text.mD039C_sub_100D139C])
	MOV BYTE PTR [EBP+var_8+0x4],0x00
	CALL_LONG(offset [LEGO1_text.mD03A7_sub_100D13A7])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mD03BC_sub_100D13BC])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D137E()
{
	enum{
		arg1217217 = 0x4A4B04,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217217-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD LEGO1_sub_100D1386()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x54
	JMP_LONG(offset [LEGO1_text.mC0010_loc_100C1010])
}
}

__declspec(naked) DWORD LEGO1_sub_100D1391()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x38
	JMP_LONG(offset [LEGO1_text.mB5D60___1MxCriticalSection__QAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D139C()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x2C
	JMP_LONG(offset [LEGO1_text.mC77E0_loc_100C87E0])
}
}

__declspec(naked) DWORD LEGO1_sub_100D13A7()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x10
	JMP_LONG(offset [LEGO1_text.mD0110_loc_100D1110])
}
}

__declspec(naked) DWORD LEGO1_sub_100D13BC()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mCF8E0_loc_100D08E0])
}
}

__declspec(naked) DWORD LEGO1_sub_100D153F()
{
	enum{
		arg1217203 = 0x4A4ACC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217203-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D1547()
{
	enum{
		arg1217207 = 0x4A4ADC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217207-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D154F()
{
	enum{
		arg1217215 = 0x4A4AFC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217215-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D15B4()
{
	enum{
		arg1217203 = 0x4A4ACC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217203-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D15BC()
{
	enum{
		arg1217207 = 0x4A4ADC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217207-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D15C4()
{
	enum{
		arg1217215 = 0x4A4AFC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217215-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D15D6()
{
	enum{
		arg1217211 = 0x4A4AEC,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217211-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mAD420___1MxString__UAE_XZ])
}
}

__declspec(naked) DWORD LEGO1_sub_100D16BD()
{
	enum{
		arg1217217 = 0x4A4B04,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217217-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD LEGO1_sub_100D1743()
{
	enum{
		arg1217218 = 0x4A4B08,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217218-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD LEGO1_sub_100D1750()
{
__asm{
	PUSH ESI
	PUSH EDI
	CMP BYTE PTR [ECX+0x34],0x00
	MOV EDI, ECX
	JZ loc_100D1779
	LEA ESI,DWORD PTR [EDI+0x2C]
loc_100D175D:
	PUSH -0x01
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mC7830_sub_100C8830])
	CMP BYTE PTR [EDI+0x35],0x00
	JZ loc_100D1773
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.mD08F0_sub_100D18F0])
loc_100D1773:
	CMP BYTE PTR [EDI+0x34],0x00
	JNZ loc_100D175D
loc_100D1779:
	XOR EAX, EAX
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D1780()
{
	enum{
		var_14 = -0x14,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mD08D1_proc_100D18D1]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x0C
	CMP BYTE PTR [ECX+0x34],0x00
	PUSH EBX
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	PUSH ESI
	PUSH EDI
	JNZ_LONG(offset [LEGO1_text.mD07BF_loc_100D17BF])
	JMP_LONG(offset [LEGO1_text.mD07A7_loc_100D17A7])
}
}

__declspec(naked) DWORD LEGO1_loc_100D17A7()
{
__asm{
	MOV EAX, 0xFFFFFFFF
	JMP_LONG(offset [LEGO1_text.mD07AC_loc_100D17AC])
}
}

__declspec(naked) DWORD LEGO1_sub_100D18DB()
{
	enum{
		arg1217218 = 0x4A4B08,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217218-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD LEGO1_sub_100D18F0()
{
	enum{
		var_24 = -0x24,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mD0AD4_proc_100D1AD4]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	MOV EAX,DWORD PTR [ECX+0x08]
	SUB ESP, 0x14
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	ADD ECX, 0x38
	MOV DWORD PTR [EBP+var_20+0x4],EAX
	PUSH ESI
	MOV DWORD PTR [EBP+var_1C+0x4],ECX
	XOR ESI, ESI
	PUSH ECX
	LEA ECX,DWORD PTR [EBP+var_24+0x4]
	MOV DWORD PTR [EBP+var_18+0x4],ESI
	CALL_LONG(offset [LEGO1_text.mB7ED0_sub_100B8ED0])
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV DWORD PTR [EBP+var_8+0x4],ESI
	CMP DWORD PTR [EAX+0x5C],ESI
	JZ loc_100D1987
	MOV ECX,DWORD PTR [EAX+0x58]
	MOV EDX,DWORD PTR [ECX]
	MOV EAX,DWORD PTR [EDX+0x08]
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	CMP EAX, ESI
	JZ loc_100D1987
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mD0AF0_sub_100D1AF0])
	ADD ESP, 0x04
	TEST AL, AL
	JNZ loc_100D1987
	PUSH 0x000001F4
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	ADD ECX, 0x10
	CALL_LONG(offset [LEGO1_text.mBE660_sub_100BF660])
	PUSH 0x01
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	ADD ECX, 0x2C
	CALL_LONG(offset [LEGO1_text.mC7850_sub_100C8850])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mD0ADE_sub_100D1ADE])
loc_100D1979:
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	POP ESI
	MOV DWORD PTR FS:[0x00000000], EAX
	MOV ESP, EBP
	POP EBP
	RET
loc_100D1987:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mD0ADE_sub_100D1ADE])
	MOV EAX,DWORD PTR [EBP+var_1C+0x4]
	LEA ECX,DWORD PTR [EBP+var_24+0x4]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mB7ED0_sub_100B8ED0])
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	CMP DWORD PTR [EAX+0x5C],0x00
	JNZ loc_100D19C0
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.mD0ACC_sub_100D1ACC])
	JMP FAR loc_100D1AA8
loc_100D19C0:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EAX+0x58]
	MOV EAX,DWORD PTR [ECX]
	MOV EDX,DWORD PTR [EAX+0x08]
	MOV ESI,DWORD PTR [EAX]
	MOV DWORD PTR [EBP+var_18+0x4],EDX
	LEA EDX,DWORD PTR [EAX+0x04]
	PUSH EAX
	MOV ECX,DWORD PTR [EDX]
	MOV DWORD PTR [ECX],ESI
	MOV ECX,DWORD PTR [EDX]
	MOV ESI,DWORD PTR [EAX]
	MOV DWORD PTR [ESI+0x04],ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	DEC DWORD PTR [EAX+0x5C]
	CALL_LONG(offset [LEGO1_text.mD0ACC_sub_100D1ACC])
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV ECX,DWORD PTR [EAX+0x000000A0]
	ADD EAX, 0x000000A0
	CMP DWORD PTR [ECX+0x28],0x00020000
	JNB loc_100D1A16
	DEC DWORD PTR [offset LEGO1_data.m12878]
loc_100D1A16:
	MOV ESI,DWORD PTR [EAX]
	MOV EDX,DWORD PTR [EBP+var_18+0x4]
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EAX+0x0C]
	MOV EAX,DWORD PTR [EDX+0x00000098]
	CMP DWORD PTR [ECX+0x10],EAX
	JZ loc_100D1A38
	PUSH 0x00
	PUSH EAX
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x24])
	TEST EAX, EAX
	JNZ loc_100D1AA8
loc_100D1A38:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	PUSH ESI
	MOV ECX,DWORD PTR [EAX+0x0C]
	MOV EDX,DWORD PTR [ECX+0x10]
	MOV DWORD PTR [ESI+0x14],EDX
	MOV ECX,DWORD PTR [EAX+0x0C]
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX+0x1C])
	TEST EAX, EAX
	JNZ loc_100D1AA8
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EAX+0x0C]
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV EDX,DWORD PTR [ECX+0x10]
	MOV DWORD PTR [ESI+0x1C],EDX
	CMP DWORD PTR [EAX+0x0000009C],0x00
	JLE loc_100D1A74
	PUSH EAX
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	CALL_LONG(offset [LEGO1_text.mD0B20_sub_100D1B20])
	JMP loc_100D1AA1
loc_100D1A74:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EAX,DWORD PTR [EAX+0x08]
	TEST EAX, EAX
	JZ loc_100D1A95
	CMP BYTE PTR [EAX+0x000000C4],0x00
	JZ loc_100D1A95
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV ECX,DWORD PTR [EBP+var_20+0x4]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mC6F40_sub_100C7F40])
	JMP loc_100D1AA1
loc_100D1A95:
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV ECX,DWORD PTR [EBP+var_20+0x4]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mC7670_sub_100C8670])
loc_100D1AA1:
	MOV DWORD PTR [EBP+var_18+0x4],0x00000000
loc_100D1AA8:
	CMP DWORD PTR [EBP+var_18+0x4],0x00
	JZ loc_100D1ABA
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV ECX,DWORD PTR [EBP+var_20+0x4]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mC7670_sub_100C8670])
loc_100D1ABA:
	PUSH 0x00
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	ADD ECX, 0x10
	CALL_LONG(offset [LEGO1_text.mBE660_sub_100BF660])
	JMP FAR loc_100D1979
}
}

__declspec(naked) DWORD LEGO1_sub_100D1ACC()
{
	enum{
		arg1217216 = 0x4A4B00,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217216-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD LEGO1_sub_100D1ADE()
{
	enum{
		arg1217216 = 0x4A4B00,
	};

__asm{
	LEA ECX,DWORD PTR [EBP+arg1217216-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.mB7EF0_loc_100B8EF0])
}
}

__declspec(naked) DWORD LEGO1_sub_100D1AF0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	MOV ECX,DWORD PTR [EAX+0x000000A0]
	CMP DWORD PTR [ECX+0x28],0x00020000
	JNZ loc_100D1B0F
	CMP DWORD PTR [offset LEGO1_data.m12878],0x01
	SBB AL, AL
	NEG AL
	RET
loc_100D1B0F:
	MOV AL, 0x01
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100D1B20(DWORD arg1)
{
	enum{
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.mD0E6F_proc_100D1E6F]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x10
	MOV DWORD PTR [EBP+var_1C+0x4],ECX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH 0x34
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV ESI, EAX
	TEST ESI, ESI
	JZ loc_100D1B67
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mC5470_sub_100C6470])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	JMP loc_100D1B6E
loc_100D1B67:
	MOV DWORD PTR [EBP+var_14+0x4],0x00000000
loc_100D1B6E:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CMP DWORD PTR [EBP+var_14+0x4],0x00
	JNZ loc_100D1B93
loc_100D1B7B:
	MOV EAX, 0xFFFFFFFF
loc_100D1B80:
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP EDI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
loc_100D1B93:
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	MOV ECX, 0x00000000
	MOV EAX,DWORD PTR [EDX+0x000000A4]
	TEST EAX, EAX
	JZ loc_100D1BA8
	MOV ECX,DWORD PTR [EAX+0x28]
loc_100D1BA8:
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	PUSH 0x01
	MOV EAX,DWORD PTR [EDX+0x000000A0]
	MOV EAX,DWORD PTR [EAX+0x28]
	SUB EAX,DWORD PTR [EDX+0x00000094]
	ADD EAX,DWORD PTR [EDX+0x00000098]
	ADD EAX, ECX
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	PUSH EAX
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	CALL_LONG(offset [LEGO1_text.mC5640_sub_100C6640])
	TEST EAX, EAX
	JZ loc_100D1BE7
	CMP DWORD PTR [EBP+var_14+0x4],0x00
	JZ loc_100D1B7B
	PUSH 0x01
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX, EAX
	MOV EBX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBX])
	JMP loc_100D1B7B
loc_100D1BE7:
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	MOV EAX,DWORD PTR [EDX+0x000000A4]
	TEST EAX, EAX
	JNZ loc_100D1C29
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV ECX,DWORD PTR [EDX+0x000000A0]
	ADD EAX, 0x08
	MOV ESI,DWORD PTR [ECX+0x08]
	SUB ESI,DWORD PTR [EDX+0x00000098]
	MOV DWORD PTR [EBP+var_20+0x4],EAX
	MOV EBX,DWORD PTR [EAX]
	ADD ESI,DWORD PTR [EDX+0x00000094]
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV EDI, EBX
	MOV ECX, EAX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	JMP loc_100D1C78
loc_100D1C29:
	PUSH EAX
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	CALL_LONG(offset [LEGO1_text.mC6090_sub_100C7090])
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	ADD EAX, 0x08
	MOV ECX,DWORD PTR [EDX+0x000000A4]
	MOV DWORD PTR [EBP+var_20+0x4],EAX
	MOV EBX,DWORD PTR [ECX+0x28]
	ADD EBX,DWORD PTR [EAX]
	MOV EAX,DWORD PTR [EDX+0x000000A0]
	MOV EDI, EBX
	MOV EDX,DWORD PTR [EAX+0x28]
	MOV ESI,DWORD PTR [EAX+0x08]
	MOV ECX, EDX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EDX
	AND ECX, 0x03
	REP MOVSB
	MOV ESI,DWORD PTR [EBP+arg1+0x4]
	MOV ECX,DWORD PTR [ESI+0x000000A4]
	TEST ECX, ECX
	JZ loc_100D1C78
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
loc_100D1C78:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	TEST EBX, EBX
	MOV DWORD PTR [EDX+0x000000A4],EAX
	JZ loc_100D1CB5
loc_100D1C88:
	CMP DWORD PTR [EBX], 0x624F784D
	JZ loc_100D1CA6
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.mC21A0_sub_100C31A0])
	ADD ESP, 0x04
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	MOV ECX,DWORD PTR [EDX+0x0000009C]
	CMP DWORD PTR [EAX],ECX
	JG loc_100D1CF4
loc_100D1CA6:
	PUSH EBX
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	CALL_LONG(offset [LEGO1_text.mC5FA0_sub_100C6FA0])
	MOV EBX, EAX
	TEST EBX, EBX
	JNZ loc_100D1C88
loc_100D1CB5:
	MOV EAX,DWORD PTR [EBP+var_1C+0x4]
	MOV ECX,DWORD PTR [EAX]
	MOV ESI,DWORD PTR [ECX+0x18]
	MOV ECX, EAX
	CALL_LONG(ESI)
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	MOV ECX,DWORD PTR [EBP+var_1C+0x4]
	ADD EAX,DWORD PTR [EDX+0x00000098]
	MOV DWORD PTR [EDX+0x00000094],EAX
	CALL_LONG(ESI)
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	MOV ECX,DWORD PTR [EBP+var_1C+0x4]
	PUSH EDX
	ADD EAX,DWORD PTR [EDX+0x00000098]
	MOV DWORD PTR [EDX+0x00000098],EAX
	CALL_LONG(offset [LEGO1_text.mD0780_sub_100D1780])
	XOR EAX, EAX
	JMP FAR loc_100D1B80
loc_100D1CF4:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV DWORD PTR [EBX], 0x20646170
	LEA EDI,DWORD PTR [EBX+0x08]
	MOV ECX,DWORD PTR [EAX+0x28]
	SUB ECX, EBX
	MOV EAX,DWORD PTR [EBP+var_20+0x4]
	MOV ESI,DWORD PTR [EAX]
	XOR EAX, EAX
	LEA EDX,DWORD PTR [ESI+ECX-0x08]
	MOV ECX, EDX
	MOV DWORD PTR [EBX+0x04],EDX
	SHR ECX, 0x02
	REP STOSD
	MOV ECX, EDX
	AND ECX, 0x03
	REP STOSB
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EDX,DWORD PTR [EBP+var_20+0x4]
	MOV ECX,DWORD PTR [EAX+0x28]
	MOV EAX,DWORD PTR [EDX]
	PUSH ECX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.mCFD80_sub_100D0D80])
	ADD ESP, 0x08
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	PUSH 0x34
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	ADD ESP, 0x04
	MOV ESI, EAX
	MOV EBX, 0x00000000
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	TEST ESI, ESI
	JZ loc_100D1D61
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.mC5470_sub_100C6470])
	MOV EBX, EAX
loc_100D1D61:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	TEST EBX, EBX
	JZ FAR loc_100D1B7B
	PUSH 0x01
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	PUSH EAX
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.mC5640_sub_100C6640])
	TEST EAX, EAX
	JNZ FAR loc_100D1E4D
	MOV EAX,DWORD PTR [EBP+var_18+0x4]
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	MOV EDI,DWORD PTR [EBX+0x08]
	MOV ECX,DWORD PTR [EDX+0x000000A4]
	MOV ESI,DWORD PTR [ECX+0x08]
	MOV ECX, EAX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	MOV ECX,DWORD PTR [EDX+0x000000A4]
	MOV DWORD PTR [ECX+0x24],0x00000001
	MOV ECX,DWORD PTR [EDX+0x000000A4]
	TEST ECX, ECX
	JZ loc_100D1DC5
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
loc_100D1DC5:
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	MOV DWORD PTR [EBX+0x24],0x00000003
	MOV EAX,DWORD PTR [EDX+0x000000A0]
	MOV DWORD PTR [EDX+0x000000A4],EBX
	MOV ESI,DWORD PTR [EAX+0x14]
	MOV EDI,DWORD PTR [EAX+0x08]
loc_100D1DE1:
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.mC21A0_sub_100C31A0])
	ADD ESP, 0x04
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	MOV ECX,DWORD PTR [EDX+0x0000009C]
	CMP DWORD PTR [EAX],ECX
	JG loc_100D1E0B
	MOV EAX,DWORD PTR [EDI+0x04]
	MOV ECX, EAX
	AND ECX, 0x01
	ADD EAX, ECX
	LEA ESI,DWORD PTR [ESI+EAX+0x08]
	LEA EDI,DWORD PTR [EDI+EAX+0x08]
	JMP loc_100D1DE1
loc_100D1E0B:
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	MOV ECX,DWORD PTR [EDX+0x000000A0]
	MOV DWORD PTR [EDX+0x00000094],ESI
	TEST ECX, ECX
	MOV EAX,DWORD PTR [ECX+0x14]
	MOV DWORD PTR [EDX+0x00000098],EAX
	JZ loc_100D1E2D
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
loc_100D1E2D:
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	MOV EAX,DWORD PTR [EBP+var_1C+0x4]
	PUSH EDX
	MOV DWORD PTR [EDX+0x000000A0],0x00000000
	MOV ECX,DWORD PTR [EAX+0x08]
	CALL_LONG(offset [LEGO1_text.mC6890_sub_100C7890])
	XOR EAX, EAX
	JMP FAR loc_100D1B80
loc_100D1E4D:
	TEST EBX, EBX
	JZ FAR loc_100D1B7B
	PUSH 0x01
	MOV EAX,DWORD PTR [EBX]
	MOV ECX, EBX
	CALL_LONG(DWORD PTR [EAX])
	JMP FAR loc_100D1B7B
}
}

__declspec(naked) DWORD LEGO1_proc_100D1E62()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D1ED0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	PUSH EDI
	PUSH ESI
	PUSH EBX
	MOV ECX,DWORD PTR [EBP+arg3+0x4]
	OR ECX, ECX
	JZ FAR loc_100D1FBD
	MOV ESI,DWORD PTR [EBP+arg1+0x4]
	MOV EDI,DWORD PTR [EBP+arg2+0x4]
	LEA EAX,DWORD PTR [offset LEGO1_data + 0xD478]
	CMP DWORD PTR [EAX+0x08],0x00
	JNZ loc_100D1F3E
	MOV BH, 0x41
	MOV BL, 0x5A
	MOV DH, 0x20
	MOV EAX, EAX
loc_100D1EFC:
	MOV AH,BYTE PTR [ESI]
	OR AH, AH
	MOV AL,BYTE PTR [EDI]
	JZ loc_100D1F25
	OR AL, AL
	JZ loc_100D1F25
	INC ESI
	INC EDI
	CMP AH, BH
	JB loc_100D1F14
	CMP AH, BL
	JA loc_100D1F14
	ADD AH, DH
loc_100D1F14:
	CMP AL, BH
	JB loc_100D1F1E
	CMP AL, BL
	JA loc_100D1F1E
	ADD AL, DH
loc_100D1F1E:
	CMP AH, AL
	JNZ loc_100D1F2F
	DEC ECX
	JNZ loc_100D1EFC
loc_100D1F25:
	XOR ECX, ECX
	CMP AH, AL
	JZ FAR loc_100D1FBD
loc_100D1F2F:
	MOV ECX, 0xFFFFFFFF
	JB FAR loc_100D1FBD
	NEG ECX
	JMP loc_100D1FBD
loc_100D1F3E:
	CMP DWORD PTR [offset LEGO1_data + 0x195FC],0x00
	JG loc_100D1F51
	INC DWORD PTR [offset LEGO1_data + 0x19600]
	PUSH 0x00
	JMP loc_100D1F63
loc_100D1F51:
	MOV EBX, ECX
	PUSH 0x13
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	MOV DWORD PTR [ESP],0x00000001
	MOV ECX, EBX
loc_100D1F63:
	XOR EAX, EAX
	XOR EBX, EBX
	DB(0x90) 
loc_100D1F68:
	MOV AL,BYTE PTR [ESI]
	OR EAX, EAX
	MOV BL,BYTE PTR [EDI]
	JZ loc_100D1F93
	OR EBX, EBX
	JZ loc_100D1F93
	INC ESI
	INC EDI
	PUSH ECX
	PUSH EAX
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m8F1F0_sub_100901F0])
	MOV EBX, EAX
	ADD ESP, 0x04
	CALL_LONG(offset [LEGO1_text.m8F1F0_sub_100901F0])
	ADD ESP, 0x04
	POP ECX
	CMP EAX, EBX
	JNZ loc_100D1F99
	DEC ECX
	JNZ loc_100D1F68
loc_100D1F93:
	XOR ECX, ECX
	CMP EAX, EBX
	JZ loc_100D1FA2
loc_100D1F99:
	MOV ECX, 0xFFFFFFFF
	JB loc_100D1FA2
	NEG ECX
loc_100D1FA2:
	POP EAX
	OR EAX, EAX
	JNZ loc_100D1FAF
	DEC DWORD PTR [offset LEGO1_data + 0x19600]
	JMP loc_100D1FBD
loc_100D1FAF:
	MOV EBX, ECX
	PUSH 0x13
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	MOV ECX, EBX
loc_100D1FBD:
	MOV EAX, ECX
	POP EBX
	POP ESI
	POP EDI
	LEAVE
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D1FD0(DWORD arg1)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	XOR EBP, EBP
	CMP DWORD PTR [offset LEGO1_data + 0xD480],EBP
	JNZ loc_100D200D
	MOV EBX,DWORD PTR [ESP+arg1+0x14]
	MOV EAX, EBX
	CMP BYTE PTR [EBX],0x00
	JZ loc_100D2003
loc_100D1FEC:
	MOV CL,BYTE PTR [EAX]
	CMP CL, 0x61
	JL loc_100D1FFD
	CMP CL, 0x7A
	JG loc_100D1FFD
	SUB CL, 0x20
	MOV BYTE PTR [EAX],CL
loc_100D1FFD:
	INC EAX
	CMP BYTE PTR [EAX],0x00
	JNZ loc_100D1FEC
loc_100D2003:
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_100D200D:
	CMP DWORD PTR [offset LEGO1_data + 0x195FC],0x00
	JZ loc_100D202A
	PUSH 0x13
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	MOV DWORD PTR [ESP+var_4+0x18],0x00000001
	ADD ESP, 0x04
	JMP loc_100D2038
loc_100D202A:
	MOV DWORD PTR [ESP+var_4+0x14],0x00000000
	INC DWORD PTR [offset LEGO1_data + 0x19600]
loc_100D2038:
	CMP DWORD PTR [offset LEGO1_data + 0xD480],0x00
	JNZ loc_100D2086
	CMP DWORD PTR [ESP+var_4+0x14],0x00
	JZ loc_100D2054
	PUSH 0x13
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	JMP loc_100D205A
loc_100D2054:
	DEC DWORD PTR [offset LEGO1_data + 0x19600]
loc_100D205A:
	MOV EBX,DWORD PTR [ESP+arg1+0x14]
	MOV EAX, EBX
	CMP BYTE PTR [EBX],0x00
	JZ loc_100D207C
loc_100D2065:
	MOV CL,BYTE PTR [EAX]
	CMP CL, 0x61
	JL loc_100D2076
	CMP CL, 0x7A
	JG loc_100D2076
	SUB CL, 0x20
	MOV BYTE PTR [EAX],CL
loc_100D2076:
	INC EAX
	CMP BYTE PTR [EAX],0x00
	JNZ loc_100D2065
loc_100D207C:
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_100D2086:
	MOV EBX,DWORD PTR [ESP+arg1+0x14]
	PUSH 0x00
	PUSH 0x00
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xD480]
	PUSH 0x00
	PUSH -0x01
	PUSH EBX
	PUSH 0x00000200
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m903E0_sub_100913E0])
	ADD ESP, 0x1C
	MOV ESI, EAX
	TEST ESI, ESI
	JZ loc_100D20FA
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV EBP, EAX
	TEST EBP, EBP
	JZ loc_100D20FA
	PUSH 0x00
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xD480]
	PUSH ESI
	PUSH EBP
	PUSH -0x01
	PUSH EBX
	PUSH 0x00000200
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m903E0_sub_100913E0])
	ADD ESP, 0x1C
	TEST EAX, EAX
	JZ loc_100D20FA
	MOV EDI, EBP
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI, EBX
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
loc_100D20FA:
	CMP DWORD PTR [ESP+var_4+0x14],0x00
	JZ loc_100D210D
	PUSH 0x13
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	JMP loc_100D2113
loc_100D210D:
	DEC DWORD PTR [offset LEGO1_data + 0x19600]
loc_100D2113:
	PUSH EBP
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D2130(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x20
	MOV ECX,DWORD PTR [ESP+arg3+0x20]
	PUSH ESI
	MOV EDX,DWORD PTR [ESP+arg2+0x24]
	PUSH ECX
	MOV DWORD PTR [ESP+var_14+0x28],0x00000042
	MOV DWORD PTR [ESP+var_18+0x28],EAX
	PUSH EDX
	MOV DWORD PTR [ESP+var_20+0x2C],EAX
	LEA EAX,DWORD PTR [ESP+var_20+0x2C]
	MOV DWORD PTR [ESP+var_1C+0x2C],0x7FFFFFFF
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8D230_sub_1008E230])
	ADD ESP, 0x0C
	MOV ESI, EAX
	DEC DWORD PTR [ESP+var_1C+0x24]
	JS loc_100D2181
	MOV EAX,DWORD PTR [ESP+var_20+0x24]
	MOV BYTE PTR [EAX],0x00
	MOV EAX, ESI
	INC DWORD PTR [ESP+var_20+0x24]
	POP ESI
	ADD ESP, 0x20
	RET
loc_100D2181:
	LEA EAX,DWORD PTR [ESP+var_20+0x24]
	PUSH EAX
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m8D0E0_sub_1008E0E0])
	ADD ESP, 0x08
	MOV EAX, ESI
	POP ESI
	ADD ESP, 0x20
	RET
	DB(0xCC) DB(0xCC) DB(0xCC) DB(0xCC) DB(0xCC) DB(0xCC) DB(0xCC) DB(0xCC) DB(0xCC) 
	MOV EDX, offset LEGO1_data + 0x128DA
	JMP_LONG(offset [LEGO1_text.m8CE0B_loc_1008DE0B])
	MOV EDX, offset [LEGO1_data.m1294A]
loc_100D21AF:
	JMP_LONG(offset [LEGO1_text.m8CF8B_loc_1008DF8B])
	MOV EDX, offset [LEGO1_data.m1292A]
	JMP loc_100D21AF
	MOV EDX, offset [LEGO1_data.m1296A]
	JMP loc_100D21AF
}
}

__declspec(naked) DWORD LEGO1_sub_100D21C2()
{
__asm{
	MOV EDX, offset LEGO1_data + 0x128DA
	JMP_LONG(offset [LEGO1_text.m8CD90_loc_1008DD90])
	MOV EDX, offset [LEGO1_data.m1294A]
loc_100D21D1:
	JMP_LONG(offset [LEGO1_text.m8CDCE_loc_1008DDCE])
	MOV EDX, offset [LEGO1_data.m1292A]
	JMP loc_100D21D1
	MOV EDX, offset [LEGO1_data.m1296A]
	JMP loc_100D21D1
}
}

__declspec(naked) DWORD LEGO1_sub_100D21F0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg2]
	PUSH EDI
	PUSH EBX
	PUSH ESI
	MOV DL,BYTE PTR [ECX]
	MOV EDI,DWORD PTR [ESP+arg1+0xC]
	TEST DL, DL
	JZ loc_100D226A
	MOV DH,BYTE PTR [ECX+0x01]
	TEST DH, DH
	JZ loc_100D2257
loc_100D2208:
	MOV ESI, EDI
	MOV ECX,DWORD PTR [ESP+arg2+0xC]
	MOV AL,BYTE PTR [EDI]
	INC ESI
	CMP AL, DL
	JZ loc_100D222A
	TEST AL, AL
	JZ loc_100D2224
loc_100D2219:
	MOV AL,BYTE PTR [ESI]
	INC ESI
loc_100D221C:
	CMP AL, DL
	JZ loc_100D222A
	TEST AL, AL
	JNZ loc_100D2219
loc_100D2224:
	POP ESI
	POP EBX
	POP EDI
	XOR EAX, EAX
	RET
loc_100D222A:
	MOV AL,BYTE PTR [ESI]
	INC ESI
	CMP AL, DH
	JNZ loc_100D221C
	LEA EDI,DWORD PTR [ESI-0x01]
loc_100D2234:
	MOV AH,BYTE PTR [ECX+0x02]
	TEST AH, AH
	JZ loc_100D2263
	MOV AL,BYTE PTR [ESI]
	ADD ESI, 0x02
	CMP AL, AH
	JNZ loc_100D2208
	MOV AL,BYTE PTR [ECX+0x03]
	TEST AL, AL
	JZ loc_100D2263
	MOV AH,BYTE PTR [ESI-0x01]
	ADD ECX, 0x02
	CMP AL, AH
	JZ loc_100D2234
	JMP loc_100D2208
loc_100D2257:
	XOR EAX, EAX
	POP ESI
	POP EBX
	POP EDI
	MOV AL, DL
	JMP_LONG(offset [LEGO1_text.m96B16_loc_10097B16])
loc_100D2263:
	LEA EAX,DWORD PTR [EDI-0x01]
	POP ESI
	POP EBX
	POP EDI
	RET
loc_100D226A:
	MOV EAX, EDI
	POP ESI
	POP EBX
	POP EDI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D2270(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
	};

__asm{
	PUSH ESI
	PUSH EDI
	XOR EDI, EDI
	PUSH 0x74
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m89100_sub_1008A100])
	ADD ESP, 0x08
	MOV ESI, EAX
	CMP ESI, EDI
	JZ loc_100D22D0
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8C5D0__initptd])
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	MOV ECX,DWORD PTR [ESP+arg4+0xC]
	MOV EDX,DWORD PTR [ESP+arg6+0xC]
	ADD ESP, 0x04
	MOV DWORD PTR [ESI+0x48],EAX
	PUSH EDX
	MOV EAX,DWORD PTR [ESP+arg5+0xC]
	MOV DWORD PTR [ESI+0x4C],ECX
	MOV ECX,DWORD PTR [ESP+arg2+0xC]
	PUSH EAX
	MOV EDX,DWORD PTR [ESP+arg1+0x10]
	PUSH ESI
	MOV DWORD PTR [ESI+0x04],0xFFFFFFFF
	PUSH offset [LEGO1_text.mD12F0_proc_100D22F0]
	PUSH ECX
	PUSH EDX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4E8_CreateThread])
	TEST EAX, EAX
	JNZ loc_100D22E8
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B8_GetLastError])
	MOV EDI, EAX
loc_100D22D0:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	TEST EDI, EDI
	JZ loc_100D22E6
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8EDD0_sub_1008FDD0])
	ADD ESP, 0x04
loc_100D22E6:
	XOR EAX, EAX
loc_100D22E8:
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D23B0()
{
	enum{
		arg2 = 0x8,
	};

__asm{
	PUSH ESI
	MOV EAX, DWORD PTR [offset LEGO1_data.mC8E4_ptr]
	TEST EAX, EAX
	JZ loc_100D23BC
	CALL_LONG(EAX)
loc_100D23BC:
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	MOV ESI, EAX
	TEST ESI, ESI
	JNZ loc_100D23D1
	PUSH 0x10
	CALL_LONG(offset [LEGO1_text.m8B920_sub_1008C920])
	ADD ESP, 0x04
loc_100D23D1:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8C660_sub_1008D660])
	MOV EAX,DWORD PTR [ESP+arg2+0x4]
	ADD ESP, 0x04
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4E4_ExitThread])
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D254E()
{
	enum{
		arg1217184 = 0x4A4A80,
		arg1217185 = 0x4A4A84,
	};

__asm{
	FLD ST(0)
	FABS
	FLD TBYTE PTR [offset LEGO1_data + 0x128BE]
	FCOMPP
	WAIT
	FSTSW WORD PTR [EBP+arg1217184-0x4A4B20]
	WAIT
	TEST BYTE PTR [EBP+arg1217185-0x4A4B23],0x41
	JNZ_LONG(offset [LEGO1_text.mD1500_loc_100D2500])
	FLD ST(0)
	FRNDINT
	FTST
	WAIT
	FSTSW WORD PTR [EBP+arg1217184-0x4A4B20]
	WAIT
	MOV DL,BYTE PTR [EBP+arg1217185-0x4A4B23]
	FXCH ST(1)
	FSUB ST,ST(1)
	FTST
	WAIT
	FSTSW WORD PTR [EBP+arg1217184-0x4A4B20]
	FABS
	F2XM1
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D2591()
{
__asm{
	FLD ST(0)
	FRNDINT
	FCOMP ST(1)
	WAIT
	FNSTSW AX
	SAHF
	JNZ loc_100D25B7
	FLD ST(0)
	FMUL QWORD PTR [offset LEGO1_data + 0x128D2]
	FLD ST(0)
	FRNDINT
	FCOMPP
	WAIT
	FNSTSW AX
	SAHF
	JZ loc_100D25BE
	MOV EAX, 0x00000001
loc_100D25B6:
	RET
loc_100D25B7:
	MOV EAX, 0x00000000
	JMP loc_100D25B6
loc_100D25BE:
	MOV EAX, 0x00000002
	JMP loc_100D25B6
}
}

__declspec(naked) DWORD LEGO1_proc_100D25C5()
{
__asm{
	PUSH ESI
	SUB ESP, 0x74
	MOV ESI, ESP
	PUSH ESI
	SUB ESP, 0x08
	FSTP QWORD PTR [ESP]
	SUB ESP, 0x08
	FSTP QWORD PTR [ESP]
	WAIT
	FSAVE /*(108)*/BYTE PTR [ESI+0x08]
	CALL_LONG(offset [LEGO1_text.mD1600_sub_100D2600])
	ADD ESP, 0x14
	FRSTOR /*(108)*/BYTE PTR [ESI+0x08]
	FLD QWORD PTR [ESI]
	ADD ESP, 0x74
	POP ESI
	TEST EAX, EAX
	JZ loc_100D25F6
	JMP_LONG(offset [LEGO1_text.m92189_sub_10093189])
loc_100D25F6:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D2600(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
	};

__asm{
	FLD QWORD PTR [ESP+arg1]
	FABS
	SUB ESP, 0x08
	FSTP QWORD PTR [ESP+var_8+0x8]
	PUSH ESI
	XOR ESI, ESI
	CMP DWORD PTR [ESP+arg4+0xC],0x7FF00000
	JNZ loc_100D2689
	CMP DWORD PTR [ESP+arg3+0xC],ESI
	JNZ loc_100D2689
	FLD1
	FCOMP QWORD PTR [ESP+var_8+0xC]
	FNSTSW AX
	TEST AH,0x01
	JZ loc_100D2648
	MOV ECX,DWORD PTR [ESP+arg5+0xC]
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xEC84]
	MOV DWORD PTR [ECX+0x04],EAX
	MOV EAX, ESI
	MOV EDX,DWORD PTR [offset LEGO1_data + 0xEC80]
	POP ESI
	MOV DWORD PTR [ECX],EDX
	ADD ESP, 0x08
	RET
loc_100D2648:
	FLD1
	FCOMP QWORD PTR [ESP+var_8+0xC]
	MOV ECX,DWORD PTR [ESP+arg5+0xC]
	FNSTSW AX
	TEST AH,0x41
	JNZ loc_100D266D
	MOV EAX, ESI
	MOV DWORD PTR [ECX], 0x00000000
	MOV DWORD PTR [ECX+0x04],0x00000000
	POP ESI
	ADD ESP, 0x08
	RET
loc_100D266D:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xEC8C]
	MOV ESI, 0x00000001
	MOV DWORD PTR [ECX+0x04],EAX
	MOV EAX, ESI
	MOV EDX,DWORD PTR [offset LEGO1_data + 0xEC88]
	POP ESI
	MOV DWORD PTR [ECX],EDX
	ADD ESP, 0x08
	RET
loc_100D2689:
	CMP DWORD PTR [ESP+arg4+0xC],0xFFF00000
	JNZ loc_100D2703
	CMP DWORD PTR [ESP+arg3+0xC],0x00
	JNZ loc_100D2703
	FLD1
	FCOMP QWORD PTR [ESP+var_8+0xC]
	FNSTSW AX
	TEST AH,0x01
	JZ loc_100D26BF
	MOV ECX,DWORD PTR [ESP+arg5+0xC]
	MOV EAX, ESI
	POP ESI
	MOV DWORD PTR [ECX], 0x00000000
	MOV DWORD PTR [ECX+0x04],0x00000000
	ADD ESP, 0x08
	RET
loc_100D26BF:
	FLD1
	FCOMP QWORD PTR [ESP+var_8+0xC]
	MOV ECX,DWORD PTR [ESP+arg5+0xC]
	FNSTSW AX
	TEST AH,0x41
	JNZ loc_100D26E7
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xEC84]
	MOV DWORD PTR [ECX+0x04],EAX
	MOV EAX, ESI
	MOV EDX,DWORD PTR [offset LEGO1_data + 0xEC80]
	POP ESI
	MOV DWORD PTR [ECX],EDX
	ADD ESP, 0x08
	RET
loc_100D26E7:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xEC8C]
	MOV ESI, 0x00000001
	MOV DWORD PTR [ECX+0x04],EAX
	MOV EAX, ESI
	MOV EDX,DWORD PTR [offset LEGO1_data + 0xEC88]
	POP ESI
	MOV DWORD PTR [ECX],EDX
	ADD ESP, 0x08
	RET
loc_100D2703:
	CMP DWORD PTR [ESP+arg2+0xC],0x7FF00000
	JNZ loc_100D276F
	CMP DWORD PTR [ESP+arg1+0xC],0x00
	JNZ loc_100D276F
	FLDZ
	FCOMP QWORD PTR [ESP+arg3+0xC]
	FNSTSW AX
	TEST AH,0x01
	JZ loc_100D273C
	MOV ECX,DWORD PTR [ESP+arg5+0xC]
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xEC84]
	MOV DWORD PTR [ECX+0x04],EAX
	MOV EAX, ESI
	MOV EDX,DWORD PTR [offset LEGO1_data + 0xEC80]
	POP ESI
	MOV DWORD PTR [ECX],EDX
	ADD ESP, 0x08
	RET
loc_100D273C:
	FLDZ
	FCOMP QWORD PTR [ESP+arg3+0xC]
	MOV ECX,DWORD PTR [ESP+arg5+0xC]
	MOV DWORD PTR [ECX], 0x00000000
	FNSTSW AX
	TEST AH,0x41
	JNZ loc_100D2761
	MOV DWORD PTR [ECX+0x04],0x00000000
	MOV EAX, ESI
	POP ESI
	ADD ESP, 0x08
	RET
loc_100D2761:
	MOV DWORD PTR [ECX+0x04],0x3FF00000
	MOV EAX, ESI
	POP ESI
	ADD ESP, 0x08
	RET
loc_100D276F:
	CMP DWORD PTR [ESP+arg2+0xC],0xFFF00000
	JNZ FAR loc_100D2841
	CMP DWORD PTR [ESP+arg1+0xC],0x00
	JNZ FAR loc_100D2841
	MOV EAX,DWORD PTR [ESP+arg4+0xC]
	MOV ECX,DWORD PTR [ESP+arg3+0xC]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.mD1850_sub_100D2850])
	FLDZ
	FCOMP QWORD PTR [ESP+arg3+0x14]
	ADD ESP, 0x08
	MOV ECX, EAX
	FNSTSW AX
	TEST AH,0x01
	JZ loc_100D27E7
	CMP ECX, 0x01
	JNZ loc_100D27BC
	FLD QWORD PTR [offset LEGO1_data + 0xEC80]
	FCHS
	FSTP QWORD PTR [ESP+var_8+0xC]
	JMP loc_100D27CF
loc_100D27BC:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xEC84]
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xEC80]
	MOV DWORD PTR [ESP+var_4+0xC],EAX
	MOV DWORD PTR [ESP+var_8+0xC],ECX
loc_100D27CF:
	MOV ECX,DWORD PTR [ESP+arg5+0xC]
	MOV EAX,DWORD PTR [ESP+var_4+0xC]
	MOV EDX,DWORD PTR [ESP+var_8+0xC]
	MOV DWORD PTR [ECX+0x04],EAX
	MOV EAX, ESI
	MOV DWORD PTR [ECX],EDX
	POP ESI
	ADD ESP, 0x08
	RET
loc_100D27E7:
	FLDZ
	FCOMP QWORD PTR [ESP+arg3+0xC]
	FNSTSW AX
	TEST AH,0x41
	JNZ loc_100D2830
	CMP ECX, 0x01
	JNZ loc_100D280E
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xECA4]
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xECA0]
	MOV DWORD PTR [ESP+var_4+0xC],EAX
	MOV DWORD PTR [ESP+var_8+0xC],ECX
	JMP loc_100D2818
loc_100D280E:
	XOR EAX, EAX
	MOV DWORD PTR [ESP+var_8+0xC],EAX
	MOV DWORD PTR [ESP+var_4+0xC],EAX
loc_100D2818:
	MOV ECX,DWORD PTR [ESP+arg5+0xC]
	MOV EAX,DWORD PTR [ESP+var_4+0xC]
	MOV EDX,DWORD PTR [ESP+var_8+0xC]
	MOV DWORD PTR [ECX+0x04],EAX
	MOV EAX, ESI
	MOV DWORD PTR [ECX],EDX
	POP ESI
	ADD ESP, 0x08
	RET
loc_100D2830:
	MOV ECX,DWORD PTR [ESP+arg5+0xC]
	MOV DWORD PTR [ECX], 0x00000000
	MOV DWORD PTR [ECX+0x04],0x3FF00000
loc_100D2841:
	MOV EAX, ESI
	POP ESI
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D2850(DWORD arg1, DWORD arg2)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	MOV ECX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x08
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.mD2680_sub_100D3680])
	ADD ESP, 0x08
	TEST AL, 0x90
	JZ loc_100D286F
	XOR EAX, EAX
	ADD ESP, 0x08
	RET
loc_100D286F:
	MOV EAX,DWORD PTR [ESP+arg2+0x8]
	MOV ECX,DWORD PTR [ESP+arg1+0x8]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.mD2660_sub_100D3660])
	FCOMP QWORD PTR [ESP+arg1+0x10]
	ADD ESP, 0x08
	FNSTSW AX
	TEST AH,0x40
	JZ loc_100D28C9
	FLD QWORD PTR [ESP+arg1+0x8]
	FMUL QWORD PTR [offset LEGO1_rdata + 0x9188]
	FSTP QWORD PTR [ESP+var_8+0x8]
	MOV EAX,DWORD PTR [ESP+var_4+0x8]
	MOV ECX,DWORD PTR [ESP+var_8+0x8]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.mD2660_sub_100D3660])
	FCOMP QWORD PTR [ESP+var_8+0x10]
	ADD ESP, 0x08
	FNSTSW AX
	TEST AH,0x40
	JZ loc_100D28C0
	MOV EAX, 0x00000002
	ADD ESP, 0x08
	RET
loc_100D28C0:
	MOV EAX, 0x00000001
	ADD ESP, 0x08
	RET
loc_100D28C9:
	XOR EAX, EAX
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D28D0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
		arg7 = 0x1C,
		arg8 = 0x20,
	};

__asm{
	FLD TBYTE PTR [ESP+arg4]
	FLD TBYTE PTR [ESP+arg1]
loc_100D28D8:
	MOV EAX,DWORD PTR [ESP+arg2]
	ADD EAX, EAX
	JNB FAR loc_100D296A
	XOR EAX, 0x0E000000
	TEST EAX, 0x0E000000
	JZ loc_100D28F3
	FDIVP ST(1),ST
	RET
loc_100D28F3:
	SHR EAX, 0x1C
	CMP BYTE PTR [offset LEGO1_data + 0x12990+EAX],0x00
	JNZ loc_100D2902
	FDIVP ST(1),ST
	RET
loc_100D2902:
	MOV EAX,DWORD PTR [ESP+arg3]
	AND EAX, 0x00007FFF
	JZ loc_100D2974
	CMP EAX, 0x00007FFF
	JZ loc_100D2974
	FSTCW WORD PTR [ESP+arg7]
	MOV EAX,DWORD PTR [ESP+arg7]
	OR EAX, 0x0000033F
	AND EAX, 0x0000F3FF
	MOV DWORD PTR [ESP+arg8],EAX
	FLDCW WORD PTR [ESP+arg8]
	MOV EAX,DWORD PTR [ESP+arg6]
	AND EAX, 0x00007FFF
	CMP EAX, 0x01
	JZ loc_100D2953
	FMUL DWORD PTR [offset LEGO1_data + 0x129A0]
	FXCH ST(1)
	FMUL DWORD PTR [offset LEGO1_data + 0x129A0]
	FXCH ST(1)
	FLDCW WORD PTR [ESP+arg7]
	FDIVP ST(1),ST
	RET
loc_100D2953:
	FMUL DWORD PTR [offset LEGO1_data + 0x129A4]
	FXCH ST(1)
	FMUL DWORD PTR [offset LEGO1_data + 0x129A4]
	FXCH ST(1)
	FLDCW WORD PTR [ESP+arg7]
	FDIVP ST(1),ST
	RET
loc_100D296A:
	MOV EAX,DWORD PTR [ESP+arg1]
	OR EAX,DWORD PTR [ESP+arg2]
	JNZ loc_100D2977
loc_100D2974:
	FDIVP ST(1),ST
	RET
loc_100D2977:
	MOV EAX,DWORD PTR [ESP+arg3]
	AND EAX, 0x00007FFF
	JNZ loc_100D2974
	FSTCW WORD PTR [ESP+arg7]
	MOV EAX,DWORD PTR [ESP+arg7]
	OR EAX, 0x0000033F
	AND EAX, 0x0000F3FF
	MOV DWORD PTR [ESP+arg8],EAX
	FLDCW WORD PTR [ESP+arg8]
	MOV EAX,DWORD PTR [ESP+arg6]
	AND EAX, 0x00007FFF
	JZ loc_100D29B8
	CMP EAX, 0x00007FFF
	JZ loc_100D29E0
	MOV EAX,DWORD PTR [ESP+arg5]
	ADD EAX, EAX
	JNB loc_100D29E0
	JMP loc_100D29C0
loc_100D29B8:
	MOV EAX,DWORD PTR [ESP+arg5]
	ADD EAX, EAX
	JB loc_100D29E0
loc_100D29C0:
	FXCH ST(1)
	FSTP ST(0)
	FLD ST(0)
	FMUL DWORD PTR [offset LEGO1_data + 0x129A8]
	FSTP TBYTE PTR [ESP+arg1]
	FLD TBYTE PTR [ESP+arg4]
	FXCH ST(1)
	WAIT
	FLDCW WORD PTR [ESP+arg7]
	JMP FAR loc_100D28D8
loc_100D29E0:
	FLDCW WORD PTR [ESP+arg7]
	FDIVP ST(1),ST
	RET
	SUB ESP, 0x2C
	AND EAX, 0x3F
	JMP_LONG(DWORD PTR [offset LEGO1_data.m129EE_ptr+EAX*4])
}
}

__declspec(naked) DWORD LEGO1_proc_100D29F4()
{
__asm{
	FDIV ST,ST(0)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D29FA()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD19FF_proc_100D29FF])
}
}

__declspec(naked) DWORD LEGO1_proc_100D29FF()
{
__asm{
	FDIVR ST,ST(0)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2A05()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD1A0A_proc_100D2A0A])
}
}

__declspec(naked) DWORD LEGO1_proc_100D2A0A()
{
__asm{
	FDIV ST,ST(0)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2A10()
{
__asm{
	FDIVP ST(0),ST
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2A16()
{
__asm{
	FDIVR ST,ST(0)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2A1C()
{
__asm{
	FDIVRP ST(0),ST
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2A22(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg3 = 0xC,
		arg8 = 0x20,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FLD ST(0)
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg8]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FLD TBYTE PTR [ESP+arg8]
	FXCH ST(1)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2A3E()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD1A43_proc_100D2A43])
}
}

__declspec(naked) DWORD LEGO1_proc_100D2A43(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg3]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FLD TBYTE PTR [ESP+arg3]
	FXCH ST(1)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2A59()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD1A5E_proc_100D2A5E])
}
}

__declspec(naked) DWORD LEGO1_proc_100D2A5E(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg3 = 0xC,
		arg8 = 0x20,
	};

__asm{
	FXCH ST(1)
	FSTP TBYTE PTR [ESP+arg3]
	FLD ST(0)
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg8]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FLD TBYTE PTR [ESP+arg8]
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2A7A(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg3]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2A8A(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FLD TBYTE PTR [ESP+arg3]
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2A9E(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2AAE(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg3 = 0xC,
		arg8 = 0x20,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(1)
	FLD ST(0)
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg8]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(1)
	FLD TBYTE PTR [ESP+arg8]
	FXCH ST(2)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2ACE()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD1AD3_proc_100D2AD3])
}
}

__declspec(naked) DWORD LEGO1_proc_100D2AD3(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP]
	FXCH ST(1)
	FSTP TBYTE PTR [ESP+arg3]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(1)
	FLD TBYTE PTR [ESP+arg3]
	FXCH ST(2)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2AED()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD1AF2_proc_100D2AF2])
}
}

__declspec(naked) DWORD LEGO1_proc_100D2AF2(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg3 = 0xC,
		arg8 = 0x20,
	};

__asm{
	FXCH ST(2)
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(1)
	FLD ST(0)
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg8]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(1)
	FLD TBYTE PTR [ESP+arg8]
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2B12(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP]
	FXCH ST(1)
	FSTP TBYTE PTR [ESP+arg3]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(1)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2B26(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(1)
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(1)
	FLD TBYTE PTR [ESP+arg3]
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2B3E(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(1)
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(1)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2B52(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg3 = 0xC,
		arg8 = 0x20,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(2)
	FLD ST(0)
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg8]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(2)
	FLD TBYTE PTR [ESP+arg8]
	FXCH ST(3)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2B72()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD1B77_proc_100D2B77])
}
}

__declspec(naked) DWORD LEGO1_proc_100D2B77(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP]
	FXCH ST(2)
	FSTP TBYTE PTR [ESP+arg3]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(2)
	FLD TBYTE PTR [ESP+arg3]
	FXCH ST(3)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2B91()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD1B96_proc_100D2B96])
}
}

__declspec(naked) DWORD LEGO1_proc_100D2B96(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg3 = 0xC,
		arg8 = 0x20,
	};

__asm{
	FXCH ST(3)
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(2)
	FLD ST(0)
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg8]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(2)
	FLD TBYTE PTR [ESP+arg8]
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2BB6(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP]
	FXCH ST(2)
	FSTP TBYTE PTR [ESP+arg3]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(2)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2BCA(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(2)
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(2)
	FLD TBYTE PTR [ESP+arg3]
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2BE2(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(2)
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(2)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2BF6(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg3 = 0xC,
		arg8 = 0x20,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(3)
	FLD ST(0)
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg8]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(3)
	FLD TBYTE PTR [ESP+arg8]
	FXCH ST(4)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2C16()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD1C1B_proc_100D2C1B])
}
}

__declspec(naked) DWORD LEGO1_proc_100D2C1B(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP]
	FXCH ST(3)
	FSTP TBYTE PTR [ESP+arg3]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(3)
	FLD TBYTE PTR [ESP+arg3]
	FXCH ST(4)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2C35()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD1C3A_proc_100D2C3A])
}
}

__declspec(naked) DWORD LEGO1_proc_100D2C3A(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg3 = 0xC,
		arg8 = 0x20,
	};

__asm{
	FXCH ST(4)
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(3)
	FLD ST(0)
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg8]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(3)
	FLD TBYTE PTR [ESP+arg8]
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2C5A(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP]
	FXCH ST(3)
	FSTP TBYTE PTR [ESP+arg3]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(3)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2C6E(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(3)
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(3)
	FLD TBYTE PTR [ESP+arg3]
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2C86(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(3)
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(3)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2C9A(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg3 = 0xC,
		arg8 = 0x20,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(4)
	FLD ST(0)
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg8]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(4)
	FLD TBYTE PTR [ESP+arg8]
	FXCH ST(5)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2CBA()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD1CBF_proc_100D2CBF])
}
}

__declspec(naked) DWORD LEGO1_proc_100D2CBF(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP]
	FXCH ST(4)
	FSTP TBYTE PTR [ESP+arg3]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(4)
	FLD TBYTE PTR [ESP+arg3]
	FXCH ST(5)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2CD9()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD1CDE_proc_100D2CDE])
}
}

__declspec(naked) DWORD LEGO1_proc_100D2CDE(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg3 = 0xC,
		arg8 = 0x20,
	};

__asm{
	FXCH ST(5)
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(4)
	FLD ST(0)
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg8]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(4)
	FLD TBYTE PTR [ESP+arg8]
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2CFE(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP]
	FXCH ST(4)
	FSTP TBYTE PTR [ESP+arg3]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(4)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2D12(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(4)
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(4)
	FLD TBYTE PTR [ESP+arg3]
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2D2A(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(4)
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(4)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2D3E(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg3 = 0xC,
		arg8 = 0x20,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(5)
	FLD ST(0)
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg8]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(5)
	FLD TBYTE PTR [ESP+arg8]
	FXCH ST(6)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2D5E()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD1D63_proc_100D2D63])
}
}

__declspec(naked) DWORD LEGO1_proc_100D2D63(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP]
	FXCH ST(5)
	FSTP TBYTE PTR [ESP+arg3]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(5)
	FLD TBYTE PTR [ESP+arg3]
	FXCH ST(6)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2D7D()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD1D82_proc_100D2D82])
}
}

__declspec(naked) DWORD LEGO1_proc_100D2D82(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg3 = 0xC,
		arg8 = 0x20,
	};

__asm{
	FXCH ST(6)
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(5)
	FLD ST(0)
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg8]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(5)
	FLD TBYTE PTR [ESP+arg8]
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2DA2(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP]
	FXCH ST(5)
	FSTP TBYTE PTR [ESP+arg3]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(5)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2DB6(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(5)
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(5)
	FLD TBYTE PTR [ESP+arg3]
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2DCE(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(5)
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(5)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2DE2(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg3 = 0xC,
		arg8 = 0x20,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(6)
	FLD ST(0)
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg8]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(6)
	FLD TBYTE PTR [ESP+arg8]
	FXCH ST(7)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2E02()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD1E07_proc_100D2E07])
}
}

__declspec(naked) DWORD LEGO1_proc_100D2E07(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP]
	FXCH ST(6)
	FSTP TBYTE PTR [ESP+arg3]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(6)
	FLD TBYTE PTR [ESP+arg3]
	FXCH ST(7)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2E21()
{
__asm{
	ADD ESP, 0x2C
	INT 0x06
	JMP_LONG(offset [LEGO1_text.mD1E26_proc_100D2E26])
}
}

__declspec(naked) DWORD LEGO1_proc_100D2E26(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		arg3 = 0xC,
		arg8 = 0x20,
	};

__asm{
	FXCH ST(7)
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(6)
	FLD ST(0)
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+arg8]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(6)
	FLD TBYTE PTR [ESP+arg8]
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2E46(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP]
	FXCH ST(6)
	FSTP TBYTE PTR [ESP+arg3]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(6)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2E5A(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(6)
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(6)
	FLD TBYTE PTR [ESP+arg3]
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100D2E72(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg3 = 0xC,
	};

__asm{
	FSTP TBYTE PTR [ESP+arg3]
	FXCH ST(6)
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	FXCH ST(6)
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D2E86()
{
	enum{
		var_20 = -0x20,
	};

__asm{
	SUB ESP, 0x2C
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+var_20+0x2C]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	ADD ESP, 0x2C
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100D2E99(DWORD arg1)
{
	enum{
		var_24 = -0x24,
		var_20 = -0x20,
		var_18 = -0x18,
	};

__asm{
	SUB ESP, 0x2C
	FSTP TBYTE PTR [ESP+var_20+0x2C]
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	ADD ESP, 0x2C
	RET
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+var_24+0x2C]
	AND EAX, 0x7F800000
	CMP EAX, 0x7F800000
	JZ loc_100D2EF0
	FNSTSW AX
	AND EAX, 0x00003800
	JZ loc_100D2ED3
	FLD DWORD PTR [ESP+var_24+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E86_sub_100D2E86])
	POP EAX
	RETN 0x0004
loc_100D2ED3:
	FXCH ST(1)
	SUB ESP, 0x0C
	FSTP TBYTE PTR [ESP]
	FLD DWORD PTR [ESP+var_18+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E86_sub_100D2E86])
	FLD TBYTE PTR [ESP]
	FXCH ST(1)
	ADD ESP, 0x0C
	POP EAX
	RETN 0x0004
loc_100D2EF0:
	FDIV DWORD PTR [ESP+0x08]
	POP EAX
	RETN 0x0004
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+var_20+0x2C]
	AND EAX, 0x7FF00000
	CMP EAX, 0x7FF00000
	JZ loc_100D2F3C
	FNSTSW AX
	AND EAX, 0x00003800
	JZ loc_100D2F1F
	FLD QWORD PTR [ESP+var_24+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E86_sub_100D2E86])
	POP EAX
	RETN 0x0008
loc_100D2F1F:
	FXCH ST(1)
	SUB ESP, 0x0C
	FSTP TBYTE PTR [ESP]
	FLD QWORD PTR [ESP+var_18+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E86_sub_100D2E86])
	FLD TBYTE PTR [ESP]
	FXCH ST(1)
	ADD ESP, 0x0C
	POP EAX
	RETN 0x0008
loc_100D2F3C:
	FDIV QWORD PTR [ESP+0x08]
	POP EAX
	RETN 0x0008
	PUSH EAX
	FNSTSW AX
	AND EAX, 0x00003800
	JZ loc_100D2F5B
	FILD WORD PTR [ESP+var_24+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E86_sub_100D2E86])
	POP EAX
	RETN 0x0004
loc_100D2F5B:
	FXCH ST(1)
	SUB ESP, 0x0C
	FSTP TBYTE PTR [ESP]
	FILD WORD PTR [ESP+var_18+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E86_sub_100D2E86])
	FLD TBYTE PTR [ESP]
	FXCH ST(1)
	ADD ESP, 0x0C
	POP EAX
	RETN 0x0004
	PUSH EAX
	FNSTSW AX
	AND EAX, 0x00003800
	JZ loc_100D2F8F
	FILD DWORD PTR [ESP+var_24+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E86_sub_100D2E86])
	POP EAX
	RETN 0x0004
loc_100D2F8F:
	FXCH ST(1)
	SUB ESP, 0x0C
	FSTP TBYTE PTR [ESP]
	FILD DWORD PTR [ESP+var_18+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E86_sub_100D2E86])
	FLD TBYTE PTR [ESP]
	FXCH ST(1)
	ADD ESP, 0x0C
	POP EAX
	RETN 0x0004
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+var_24+0x2C]
	AND EAX, 0x7F800000
	CMP EAX, 0x7F800000
	JZ loc_100D2FF0
	FNSTSW AX
	AND EAX, 0x00003800
	JZ loc_100D2FD3
	FLD DWORD PTR [ESP+var_24+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E99_sub_100D2E99])
	POP EAX
	RETN 0x0004
loc_100D2FD3:
	FXCH ST(1)
	SUB ESP, 0x0C
	FSTP TBYTE PTR [ESP]
	FLD DWORD PTR [ESP+var_18+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E99_sub_100D2E99])
	FLD TBYTE PTR [ESP]
	FXCH ST(1)
	ADD ESP, 0x0C
	POP EAX
	RETN 0x0004
loc_100D2FF0:
	FDIVR DWORD PTR [ESP+0x08]
	POP EAX
	RETN 0x0004
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+var_20+0x2C]
	AND EAX, 0x7FF00000
	CMP EAX, 0x7FF00000
	JZ loc_100D303C
	FNSTSW AX
	AND EAX, 0x00003800
	JZ loc_100D301F
	FLD QWORD PTR [ESP+var_24+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E99_sub_100D2E99])
	POP EAX
	RETN 0x0008
loc_100D301F:
	FXCH ST(1)
	SUB ESP, 0x0C
	FSTP TBYTE PTR [ESP]
	FLD QWORD PTR [ESP+var_18+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E99_sub_100D2E99])
	FLD TBYTE PTR [ESP]
	FXCH ST(1)
	ADD ESP, 0x0C
	POP EAX
	RETN 0x0008
loc_100D303C:
	FDIVR QWORD PTR [ESP+0x08]
	POP EAX
	RETN 0x0008
	PUSH EAX
	FNSTSW AX
	AND EAX, 0x00003800
	JZ loc_100D305B
	FILD WORD PTR [ESP+var_24+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E99_sub_100D2E99])
	POP EAX
	RETN 0x0004
loc_100D305B:
	FXCH ST(1)
	SUB ESP, 0x0C
	FSTP TBYTE PTR [ESP]
	FILD WORD PTR [ESP+var_18+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E99_sub_100D2E99])
	FLD TBYTE PTR [ESP]
	FXCH ST(1)
	ADD ESP, 0x0C
	POP EAX
	RETN 0x0004
	PUSH EAX
	FNSTSW AX
	AND EAX, 0x00003800
	JZ loc_100D308F
	FILD DWORD PTR [ESP+var_24+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E99_sub_100D2E99])
	POP EAX
	RETN 0x0004
loc_100D308F:
	FXCH ST(1)
	SUB ESP, 0x0C
	FSTP TBYTE PTR [ESP]
	FILD DWORD PTR [ESP+var_18+0x2C]
	CALL_LONG(offset [LEGO1_text.mD1E99_sub_100D2E99])
	FLD TBYTE PTR [ESP]
	FXCH ST(1)
	ADD ESP, 0x0C
	POP EAX
	RETN 0x0004
	PUSH EAX
	SUB ESP, 0x2C
	FSTP TBYTE PTR [ESP]
	FSTP TBYTE PTR [ESP+var_20+0x2C]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	ADD ESP, 0x2C
	POP EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D30C1()
{
	enum{
		var_24 = -0x24,
	};

__asm{
	PUSH EAX
	SUB ESP, 0x2C
	FSTP TBYTE PTR [ESP+var_24+0x30]
	FSTP TBYTE PTR [ESP]
	CALL_LONG(offset [LEGO1_text.mD18D0_sub_100D28D0])
	ADD ESP, 0x2C
	POP EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D30D6(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8, DWORD arg9, DWORD arg10, DWORD arg11, DWORD arg12)
{
	enum{
		var_24 = -0x24,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg7 = 0x1C,
		arg8 = 0x20,
		arg9 = 0x24,
		arg10 = 0x28,
		arg11 = 0x2C,
		arg12 = 0x30,
	};

__asm{
	PUSH EAX
	PUSH EBX
	PUSH ECX
	MOV EAX,DWORD PTR [ESP+arg2+0xE]
	XOR EAX, 0x00000700
	TEST EAX, 0x00000700
	JNZ FAR loc_100D3270
	SHR EAX, 0x0B
	AND EAX, 0x0F
	CMP BYTE PTR [offset LEGO1_data + 0x129AC+EAX],0x00
	JZ FAR loc_100D3270
	MOV EAX,DWORD PTR [ESP+arg2+0xE]
	AND EAX, 0x7FFF0000
	CMP EAX, 0x7FFF0000
	JZ FAR loc_100D3270
	MOV EAX,DWORD PTR [ESP+arg8+0xE]
	AND EAX, 0x7FFF0000
	JZ FAR loc_100D3270
	CMP EAX, 0x7FFF0000
	JZ FAR loc_100D3270
	MOV EAX,DWORD PTR [ESP+arg8+0xC]
	ADD EAX, EAX
	JNZ FAR loc_100D3270
	MOV EAX,DWORD PTR [ESP+arg2+0xC]
	ADD EAX, EAX
	JNZ FAR loc_100D3270
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	AND EAX, 0x00007FFF
	ADD EAX, 0x3F
	MOV EBX,DWORD PTR [ESP+arg9+0xC]
	AND EBX, 0x00007FFF
	SUB EBX, EAX
	JA loc_100D31BE
loc_100D3160:
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	AND EAX, 0x00007FFF
	ADD EAX, 0x0A
	MOV EBX,DWORD PTR [ESP+arg9+0xC]
	AND EBX, 0x00007FFF
	SUB EBX, EAX
	JS FAR loc_100D3270
	FLD TBYTE PTR [ESP+arg7+0xC]
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	MOV EBX,DWORD PTR [ESP+arg9+0xC]
	AND EBX, 0x00007FFF
	MOV ECX, EBX
	SUB EBX, EAX
	AND EBX, 0x07
	OR EBX, 0x04
	SUB ECX, EBX
	MOV EBX, EAX
	AND EBX, 0x00008000
	OR ECX, EBX
	MOV DWORD PTR [ESP+arg3+0xC],ECX
	FLD TBYTE PTR [ESP+arg1+0xC]
	MOV DWORD PTR [ESP+arg3+0xC],EAX
	FXCH ST(1)
	FPREM
	FSTP TBYTE PTR [ESP+arg7+0xC]
	FSTP ST(0)
	JMP loc_100D3160
loc_100D31BE:
	TEST EDX,0x00000002
	JNZ loc_100D31CE
	FLD TBYTE PTR [ESP+arg1+0xC]
	FSTP TBYTE PTR [ESP+arg4+0xC]
loc_100D31CE:
	FSTCW WORD PTR [ESP+arg10+0xC]
	MOV EAX,DWORD PTR [ESP+arg10+0xC]
	OR EAX, 0x0000033F
	MOV DWORD PTR [ESP+arg11+0xC],EAX
	FLDCW WORD PTR [ESP+arg11+0xC]
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	AND EAX, 0x00007FFF
	MOV EBX,DWORD PTR [ESP+arg9+0xC]
	AND EBX, 0x00007FFF
	SUB EBX, EAX
	AND EBX, 0x3F
	OR EBX, 0x20
	ADD EBX, 0x01
	MOV ECX, EBX
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	MOV EBX,DWORD PTR [ESP+arg9+0xC]
	AND EBX, 0x00007FFF
	AND EAX, 0x00008000
	OR EBX, EAX
	MOV DWORD PTR [ESP+arg3+0xC],EBX
	FLD TBYTE PTR [ESP+arg1+0xC]
	FABS
	FLD TBYTE PTR [ESP+arg7+0xC]
	FABS
loc_100D3228:
	FCOM ST(1)
	FNSTSW AX
	AND EAX, 0x00000100
	JNZ loc_100D3235
	FSUB ST,ST(1)
loc_100D3235:
	FXCH ST(1)
	FMUL QWORD PTR [offset LEGO1_data + 0x129DC]
	FXCH ST(1)
	SUB ECX, 0x01
	JNZ loc_100D3228
	MOV EBX,DWORD PTR [ESP+arg9+0xC]
	FSTP TBYTE PTR [ESP+arg7+0xC]
	FSTP ST(0)
	FLD TBYTE PTR [ESP+arg4+0xC]
	FLD TBYTE PTR [offset LEGO1_data + 0x129E4]
	FPREM
	FSTP ST(0)
	FLD TBYTE PTR [ESP+arg7+0xC]
	FLDCW WORD PTR [ESP+arg10+0xC]
	AND EBX, 0x00008000
	JZ loc_100D327A
	FCHS
	JMP loc_100D327A
loc_100D3270:
	FLD TBYTE PTR [ESP+arg1+0xC]
	FLD TBYTE PTR [ESP+arg7+0xC]
	FPREM
loc_100D327A:
	TEST EDX,0x00000003
	JZ loc_100D32D8
	FSTSW WORD PTR [ESP+arg12+0xC]
	TEST EDX,0x00000001
	JZ loc_100D32AD
	FSTCW WORD PTR [ESP+arg10+0xC]
	MOV EAX,DWORD PTR [ESP+arg10+0xC]
	OR EAX, 0x00000300
	MOV DWORD PTR [ESP+arg11+0xC],EAX
	FLDCW WORD PTR [ESP+arg11+0xC]
	FMUL QWORD PTR [offset LEGO1_data + 0x129CC]
	FLDCW WORD PTR [ESP+arg10+0xC]
loc_100D32AD:
	MOV EAX,DWORD PTR [ESP+arg12+0xC]
	FXCH ST(1)
	FSTP ST(0)
	FLD TBYTE PTR [ESP+arg4+0xC]
	FXCH ST(1)
	AND EAX, 0x00004300
	SUB ESP, 0x1C
	FSTENV /*(28)*/BYTE PTR [ESP]
	AND DWORD PTR [ESP+var_24+0x28],0x0000BCFF
	OR DWORD PTR [ESP+var_24+0x28],EAX
	FLDENV /*(28)*/BYTE PTR [ESP]
	ADD ESP, 0x1C
loc_100D32D8:
	POP ECX
	POP EBX
	POP EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D32DC()
{
	enum{
		var_30 = -0x30,
		var_2C = -0x2C,
		var_28 = -0x28,
		var_1C = -0x1C,
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
	};

__asm{
	PUSH EDX
	SUB ESP, 0x30
	FSTP TBYTE PTR [ESP+var_1C+0x34]
	FSTP TBYTE PTR [ESP]
	XOR EDX, EDX
	MOV EAX,DWORD PTR [ESP+var_2C+0x32]
	TEST EAX, 0x7FFF0000
	JZ loc_100D32FE
	CALL_LONG(offset [LEGO1_text.mD20D6_sub_100D30D6])
	ADD ESP, 0x30
	POP EDX
	RET
loc_100D32FE:
	FLD TBYTE PTR [ESP]
	FLD TBYTE PTR [ESP+var_1C+0x34]
	MOV EAX,DWORD PTR [ESP]
	OR EAX,DWORD PTR [ESP+var_30+0x34]
	JZ loc_100D3387
	FXCH ST(1)
	FSTP TBYTE PTR [ESP+var_28+0x34]
	FLD TBYTE PTR [ESP]
	FXCH ST(1)
	OR EDX, 0x02
	FSTCW WORD PTR [ESP+var_10+0x34]
	MOV EAX,DWORD PTR [ESP+var_10+0x34]
	OR EAX, 0x0000033F
	MOV DWORD PTR [ESP+var_C+0x34],EAX
	FLDCW WORD PTR [ESP+var_C+0x34]
	MOV EAX,DWORD PTR [ESP+var_14+0x34]
	AND EAX, 0x00007FFF
	CMP EAX, 0x00007FBE
	JA loc_100D3359
	OR EDX, 0x01
	FMUL QWORD PTR [offset LEGO1_data + 0x129C4]
	FSTP TBYTE PTR [ESP+var_1C+0x34]
	FMUL QWORD PTR [offset LEGO1_data + 0x129C4]
	FSTP TBYTE PTR [ESP]
	JMP loc_100D3379
loc_100D3359:
	FSTCW WORD PTR [ESP+var_10+0x34]
	MOV EAX,DWORD PTR [ESP+var_10+0x34]
	OR EAX, 0x00000300
	MOV DWORD PTR [ESP+var_C+0x34],EAX
	FLDCW WORD PTR [ESP+var_C+0x34]
	FSTP ST(0)
	FMUL QWORD PTR [offset LEGO1_data + 0x129C4]
	FSTP TBYTE PTR [ESP]
loc_100D3379:
	FLDCW WORD PTR [ESP+var_10+0x34]
	CALL_LONG(offset [LEGO1_text.mD20D6_sub_100D30D6])
	ADD ESP, 0x30
	POP EDX
	RET
loc_100D3387:
	FPREM
	ADD ESP, 0x30
	POP EDX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D338E(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8, DWORD arg9, DWORD arg10, DWORD arg11, DWORD arg12)
{
	enum{
		var_24 = -0x24,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg7 = 0x1C,
		arg8 = 0x20,
		arg9 = 0x24,
		arg10 = 0x28,
		arg11 = 0x2C,
		arg12 = 0x30,
	};

__asm{
	PUSH EAX
	PUSH EBX
	PUSH ECX
	MOV EAX,DWORD PTR [ESP+arg2+0xE]
	XOR EAX, 0x00000700
	TEST EAX, 0x00000700
	JNZ FAR loc_100D3528
	SHR EAX, 0x0B
	AND EAX, 0x0F
	CMP BYTE PTR [offset LEGO1_data + 0x129AC+EAX],0x00
	JZ FAR loc_100D3528
	MOV EAX,DWORD PTR [ESP+arg2+0xE]
	AND EAX, 0x7FFF0000
	CMP EAX, 0x7FFF0000
	JZ FAR loc_100D3528
	MOV EAX,DWORD PTR [ESP+arg8+0xE]
	AND EAX, 0x7FFF0000
	JZ FAR loc_100D3528
	CMP EAX, 0x7FFF0000
	JZ FAR loc_100D3528
	MOV EAX,DWORD PTR [ESP+arg8+0xC]
	ADD EAX, EAX
	JNZ FAR loc_100D3528
	MOV EAX,DWORD PTR [ESP+arg2+0xC]
	ADD EAX, EAX
	JNZ FAR loc_100D3528
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	AND EAX, 0x00007FFF
	ADD EAX, 0x3F
	MOV EBX,DWORD PTR [ESP+arg9+0xC]
	AND EBX, 0x00007FFF
	SUB EBX, EAX
	JA loc_100D3476
loc_100D3418:
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	AND EAX, 0x00007FFF
	ADD EAX, 0x0A
	MOV EBX,DWORD PTR [ESP+arg9+0xC]
	AND EBX, 0x00007FFF
	SUB EBX, EAX
	JS FAR loc_100D3528
	FLD TBYTE PTR [ESP+arg7+0xC]
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	MOV EBX,DWORD PTR [ESP+arg9+0xC]
	AND EBX, 0x00007FFF
	MOV ECX, EBX
	SUB EBX, EAX
	AND EBX, 0x07
	OR EBX, 0x04
	SUB ECX, EBX
	MOV EBX, EAX
	AND EBX, 0x00008000
	OR ECX, EBX
	MOV DWORD PTR [ESP+arg3+0xC],ECX
	FLD TBYTE PTR [ESP+arg1+0xC]
	MOV DWORD PTR [ESP+arg3+0xC],EAX
	FXCH ST(1)
	FPREM
	FSTP TBYTE PTR [ESP+arg7+0xC]
	FSTP ST(0)
	JMP loc_100D3418
loc_100D3476:
	TEST EBX,0x00000002
	JNZ loc_100D3486
	FLD TBYTE PTR [ESP+arg1+0xC]
	FSTP TBYTE PTR [ESP+arg4+0xC]
loc_100D3486:
	FSTCW WORD PTR [ESP+arg10+0xC]
	MOV EAX,DWORD PTR [ESP+arg10+0xC]
	OR EAX, 0x0000033F
	MOV DWORD PTR [ESP+arg11+0xC],EAX
	FLDCW WORD PTR [ESP+arg11+0xC]
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	AND EAX, 0x00007FFF
	MOV EBX,DWORD PTR [ESP+arg9+0xC]
	AND EBX, 0x00007FFF
	SUB EBX, EAX
	AND EBX, 0x3F
	OR EBX, 0x20
	ADD EBX, 0x01
	MOV ECX, EBX
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	MOV EBX,DWORD PTR [ESP+arg9+0xC]
	AND EBX, 0x00007FFF
	AND EAX, 0x00008000
	OR EBX, EAX
	MOV DWORD PTR [ESP+arg3+0xC],EBX
	FLD TBYTE PTR [ESP+arg1+0xC]
	FABS
	FLD TBYTE PTR [ESP+arg7+0xC]
	FABS
loc_100D34E0:
	FCOM ST(1)
	FNSTSW AX
	AND EAX, 0x00000100
	JNZ loc_100D34ED
	FSUB ST,ST(1)
loc_100D34ED:
	FXCH ST(1)
	FMUL QWORD PTR [offset LEGO1_data + 0x129DC]
	FXCH ST(1)
	SUB ECX, 0x01
	JNZ loc_100D34E0
	MOV EBX,DWORD PTR [ESP+arg9+0xC]
	FSTP TBYTE PTR [ESP+arg7+0xC]
	FSTP ST(0)
	FLD TBYTE PTR [ESP+arg4+0xC]
	FLD TBYTE PTR [offset LEGO1_data + 0x129E4]
	FPREM1
	FSTP ST(0)
	FLD TBYTE PTR [ESP+arg7+0xC]
	FLDCW WORD PTR [ESP+arg10+0xC]
	AND EBX, 0x00008000
	JZ loc_100D3532
	FCHS
	JMP loc_100D3532
loc_100D3528:
	FLD TBYTE PTR [ESP+arg1+0xC]
	FLD TBYTE PTR [ESP+arg7+0xC]
	FPREM1
loc_100D3532:
	TEST EDX,0x00000003
	JZ loc_100D3590
	FSTSW WORD PTR [ESP+arg12+0xC]
	TEST EDX,0x00000001
	JZ loc_100D3565
	FSTCW WORD PTR [ESP+arg10+0xC]
	MOV EAX,DWORD PTR [ESP+arg10+0xC]
	OR EAX, 0x00000300
	MOV DWORD PTR [ESP+arg11+0xC],EAX
	FLDCW WORD PTR [ESP+arg11+0xC]
	FMUL QWORD PTR [offset LEGO1_data + 0x129CC]
	FLDCW WORD PTR [ESP+arg10+0xC]
loc_100D3565:
	MOV EAX,DWORD PTR [ESP+arg12+0xC]
	FXCH ST(1)
	FSTP ST(0)
	FLD TBYTE PTR [ESP+arg4+0xC]
	FXCH ST(1)
	AND EAX, 0x00004300
	SUB ESP, 0x1C
	FSTENV /*(28)*/BYTE PTR [ESP]
	AND DWORD PTR [ESP+var_24+0x28],0x0000BCFF
	OR DWORD PTR [ESP+var_24+0x28],EAX
	FLDENV /*(28)*/BYTE PTR [ESP]
	ADD ESP, 0x1C
loc_100D3590:
	POP ECX
	POP EBX
	POP EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D3594()
{
	enum{
		var_30 = -0x30,
		var_2C = -0x2C,
		var_28 = -0x28,
		var_1C = -0x1C,
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
	};

__asm{
	PUSH EDX
	SUB ESP, 0x30
	FSTP TBYTE PTR [ESP+var_1C+0x34]
	FSTP TBYTE PTR [ESP]
	MOV EDX, 0x00000000
	MOV EAX,DWORD PTR [ESP+var_2C+0x32]
	TEST EAX, 0x7FFF0000
	JZ loc_100D35B9
	CALL_LONG(offset [LEGO1_text.mD238E_sub_100D338E])
	ADD ESP, 0x30
	POP EDX
	RET
loc_100D35B9:
	FLD TBYTE PTR [ESP]
	FLD TBYTE PTR [ESP+var_1C+0x34]
	MOV EAX,DWORD PTR [ESP]
	OR EAX,DWORD PTR [ESP+var_30+0x34]
	JZ loc_100D3642
	FXCH ST(1)
	FSTP TBYTE PTR [ESP+var_28+0x34]
	FLD TBYTE PTR [ESP]
	FXCH ST(1)
	OR EDX, 0x02
	FSTCW WORD PTR [ESP+var_10+0x34]
	MOV EAX,DWORD PTR [ESP+var_10+0x34]
	OR EAX, 0x0000033F
	MOV DWORD PTR [ESP+var_C+0x34],EAX
	FLDCW WORD PTR [ESP+var_C+0x34]
	MOV EAX,DWORD PTR [ESP+var_14+0x34]
	AND EAX, 0x00007FFF
	CMP EAX, 0x00007FBE
	JA loc_100D3614
	OR EDX, 0x01
	FMUL QWORD PTR [offset LEGO1_data + 0x129C4]
	FSTP TBYTE PTR [ESP+var_1C+0x34]
	FMUL QWORD PTR [offset LEGO1_data + 0x129C4]
	FSTP TBYTE PTR [ESP]
	JMP loc_100D3634
loc_100D3614:
	FSTCW WORD PTR [ESP+var_10+0x34]
	MOV EAX,DWORD PTR [ESP+var_10+0x34]
	OR EAX, 0x00000300
	MOV DWORD PTR [ESP+var_C+0x34],EAX
	FLDCW WORD PTR [ESP+var_C+0x34]
	FSTP ST(0)
	FMUL QWORD PTR [offset LEGO1_data + 0x129C4]
	FSTP TBYTE PTR [ESP]
loc_100D3634:
	FLDCW WORD PTR [ESP+var_10+0x34]
	CALL_LONG(offset [LEGO1_text.mD238E_sub_100D338E])
	ADD ESP, 0x30
	POP EDX
	RET
loc_100D3642:
	FPREM
	ADD ESP, 0x30
	POP EDX
	RET
	CALL_LONG(offset [LEGO1_text.mD22DC_sub_100D32DC])
	RET
	CALL_LONG(offset [LEGO1_text.mD2594_sub_100D3594])
	RET
	FPATAN
	RET
	FPTAN
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D3660(DWORD arg1)
{
	enum{
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x08
	FLD QWORD PTR [ESP+arg1+0x8]
	FRNDINT
	FSTP QWORD PTR [ESP+var_8+0x8]
	FLD QWORD PTR [ESP+var_8+0x8]
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D3680(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV CX,WORD PTR SS:[ESP+arg2+0x2]
	AND CX, 0x7FF0
	CMP CX, 0x7FF0
	JNZ loc_100D36CA
	MOV EAX,DWORD PTR [ESP+arg2]
	MOV ECX,DWORD PTR [ESP+arg1]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m96C10_sub_10097C10])
	ADD ESP, 0x08
	CMP EAX, 0x01
	JZ loc_100D36B8
	CMP EAX, 0x02
	JZ loc_100D36BE
	CMP EAX, 0x03
	JZ loc_100D36C4
	MOV EAX, 0x00000001
	RET
loc_100D36B8:
	MOV EAX, 0x00000200
	RET
loc_100D36BE:
	MOV EAX, 0x00000004
	RET
loc_100D36C4:
	MOV EAX, 0x00000002
	RET
loc_100D36CA:
	XOR EAX, EAX
	MOV EDX,DWORD PTR [ESP+arg2]
	MOV AX,WORD PTR SS:[ESP+arg2+0x2]
	AND EDX, 0x7FFFFFFF
	AND EAX, 0x00008000
	OR EDX,DWORD PTR [ESP+arg1]
	JNZ loc_100D36F2
	CMP EAX, 0x01
	SBB EAX, EAX
	AND EAX, 0x20
	ADD EAX, 0x20
	RET
loc_100D36F2:
	TEST CX, CX
	JNZ loc_100D3714
	TEST DWORD PTR [ESP+arg2],0x000FFFFF
	JNZ loc_100D3708
	CMP DWORD PTR [ESP+arg1],0x00
	JZ loc_100D3714
loc_100D3708:
	CMP EAX, 0x01
	SBB EAX, EAX
	AND EAX, 0x70
	ADD EAX, 0x10
	RET
loc_100D3714:
	CMP EAX, 0x01
	SBB EAX, EAX
	AND EAX, 0x000000F8
	ADD EAX, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_j_DirectSoundCreate()
{
__asm{
	JMP_LONG(DWORD PTR [offset LEGO1_idata.m33C_DirectSoundCreate])
}
}

__declspec(naked) DWORD LEGO1_j_DirectDrawCreate()
{
__asm{
	JMP_LONG(DWORD PTR [offset LEGO1_idata.m32C_DirectDrawCreate])
}
}

__declspec(naked) DWORD LEGO1_j_DirectDrawEnumerateA()
{
__asm{
	JMP_LONG(DWORD PTR [offset LEGO1_idata.m328_DirectDrawEnumerateA])
}
}

__declspec(naked) DWORD LEGO1_j_Direct3DRMCreate()
{
__asm{
	JMP_LONG(DWORD PTR [offset LEGO1_idata.m594_Direct3DRMCreate])
}
}

__declspec(naked) DWORD LEGO1_j_D3DRMCreateColorRGBA()
{
__asm{
	JMP_LONG(DWORD PTR [offset LEGO1_idata.m590_D3DRMCreateColorRGBA])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100D3740(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI, ECX
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.mD27C0_sub_100D37C0])
	TEST EAX, EAX
	JNZ loc_100D376A
	PUSH ESI
	LEA ECX,DWORD PTR [EDI+0x0C]
	CALL_LONG(offset [LEGO1_text.mD27C0_sub_100D37C0])
	CMP EAX, 0x01
	MOV ECX, EAX
	MOV EAX, 0x00000000
	ADC EAX, -0x01
	AND EAX, ECX
loc_100D376A:
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100D3770(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.mD27C0_sub_100D37C0])
	TEST EAX, EAX
	JNZ loc_100D379E
	PUSH 0x04
	ADD ESI, 0x0C
	PUSH ESI
	MOV EAX,DWORD PTR [EDI]
	MOV ECX, EDI
	CALL_LONG(DWORD PTR [EAX+0x04])
	CMP EAX, 0x01
	MOV ECX, EAX
	MOV EAX, 0x00000000
	ADC EAX, -0x01
	AND EAX, ECX
loc_100D379E:
	POP EDI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100D37B0()
{
__asm{
	XOR EAX, EAX
	MOV DWORD PTR [ECX],EAX
	MOV DWORD PTR [ECX+0x04],EAX
	MOV DWORD PTR [ECX+0x08],EAX
	MOV EAX, ECX
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100D37C0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	MOV EDI, ECX
	PUSH 0x04
	MOV EAX,DWORD PTR [ESI]
	PUSH EDI
	MOV ECX, ESI
	MOV EBX,DWORD PTR [EAX+0x04]
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_100D3800
	PUSH 0x04
	LEA EAX,DWORD PTR [EDI+0x04]
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_100D3800
	PUSH 0x04
	ADD EDI, 0x08
	PUSH EDI
	MOV ECX, ESI
	CALL_LONG(EBX)
	MOV ECX, 0x00000000
	CMP EAX, 0x01
	ADC ECX, -0x01
	AND ECX, EAX
	MOV EAX, ECX
loc_100D3800:
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100D3810()
{
__asm{
	XOR EAX, EAX
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m9228_ptr]
	MOV BYTE PTR [ECX+0x06],AL
	MOV BYTE PTR [ECX+0x05],AL
	MOV BYTE PTR [ECX+0x04],AL
	MOV DWORD PTR [ECX+0x08],EAX
	MOV BYTE PTR [ECX+0x0C],AL
	MOV DWORD PTR [ECX+0x14],EAX
	MOV DWORD PTR [ECX+0x18],EAX
	MOV BYTE PTR [ECX+0x0D],AL
	MOV DWORD PTR [ECX+0x10],EAX
	MOV BYTE PTR [ECX+0x20],AL
	MOV BYTE PTR [ECX+0x21],AL
	MOV DWORD PTR [ECX+0x1C],EAX
	MOV EAX, ECX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100D3860()
{
__asm{
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x18]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m9228_ptr]
	MOV ESI, ECX
	TEST EAX, EAX
	JZ loc_100D3879
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100D3879:
	MOV EAX,DWORD PTR [ESI+0x1C]
	TEST EAX, EAX
	JZ loc_100D3889
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100D3889:
	MOV ESI,DWORD PTR [ESI+0x10]
	TEST ESI, ESI
	JZ loc_100D38E9
	MOV EAX,DWORD PTR [ESI+0x08]
	TEST EAX, EAX
	JZ loc_100D38A0
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100D38A0:
	MOV EAX,DWORD PTR [ESI+0x0C]
	TEST EAX, EAX
	JZ loc_100D38B0
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100D38B0:
	MOV EAX,DWORD PTR [ESI+0x10]
	TEST EAX, EAX
	JZ loc_100D38C0
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100D38C0:
	MOV EAX,DWORD PTR [ESI+0x14]
	TEST EAX, EAX
	JZ loc_100D38D0
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100D38D0:
	MOV EAX,DWORD PTR [ESI+0x18]
	TEST EAX, EAX
	JZ loc_100D38E0
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100D38E0:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_100D38E9:
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100D38F0(DWORD arg1)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI,DWORD PTR [ESP+arg1+0x14]
	LEA ECX,DWORD PTR [ESI+0x04]
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.mD2A20_sub_100D3A20])
	TEST EAX, EAX
	JNZ FAR loc_100D3A0A
	MOV EAX,DWORD PTR [EDI]
	PUSH 0x04
	LEA ECX,DWORD PTR [ESI+0x08]
	MOV EBX,DWORD PTR [EAX+0x04]
	PUSH ECX
	MOV ECX, EDI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ FAR loc_100D3A0A
	PUSH 0x01
	LEA EAX,DWORD PTR [ESI+0x0C]
	PUSH EAX
	MOV ECX, EDI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ FAR loc_100D3A0A
	PUSH 0x01
	LEA EAX,DWORD PTR [ESI+0x0D]
	PUSH EAX
	MOV ECX, EDI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ FAR loc_100D3A0A
	PUSH 0x01
	LEA EAX,DWORD PTR [ESI+0x20]
	PUSH EAX
	MOV ECX, EDI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ FAR loc_100D3A0A
	PUSH 0x01
	LEA EAX,DWORD PTR [ESI+0x21]
	PUSH EAX
	MOV ECX, EDI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ FAR loc_100D3A0A
	LEA EAX,DWORD PTR [ESP+var_C+0x18]
	PUSH 0x04
	PUSH EAX
	MOV ECX, EDI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ FAR loc_100D3A0A
	CMP DWORD PTR [ESP+var_C+0x18],0x00
	JZ loc_100D39BC
	MOV EAX,DWORD PTR [ESP+var_C+0x18]
	INC EAX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV ECX,DWORD PTR [ESP+var_8+0x18]
	ADD ESP, 0x04
	MOV DWORD PTR [ESI+0x18],EAX
	PUSH ECX
	PUSH EAX
	MOV ECX, EDI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_100D3A0A
	MOV EAX,DWORD PTR [ESI+0x18]
	MOV ECX,DWORD PTR [ESP+var_C+0x18]
	MOV BYTE PTR [ECX+EAX],0x00
	MOV EAX,DWORD PTR [ESI+0x18]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8B410_sub_1008C410])
	ADD ESP, 0x04
loc_100D39BC:
	LEA EAX,DWORD PTR [ESP+var_8+0x18]
	PUSH 0x04
	PUSH EAX
	MOV ECX, EDI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_100D3A0A
	CMP DWORD PTR [ESP+var_8+0x18],0x00
	JZ loc_100D3A08
	MOV EAX,DWORD PTR [ESP+var_8+0x18]
	INC EAX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV ECX,DWORD PTR [ESP+var_4+0x18]
	ADD ESP, 0x04
	MOV DWORD PTR [ESI+0x1C],EAX
	PUSH ECX
	PUSH EAX
	MOV ECX, EDI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_100D3A0A
	MOV EAX,DWORD PTR [ESI+0x1C]
	MOV ECX,DWORD PTR [ESP+var_8+0x18]
	MOV BYTE PTR [ECX+EAX],0x00
	MOV EAX,DWORD PTR [ESI+0x1C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8B410_sub_1008C410])
	ADD ESP, 0x04
loc_100D3A08:
	XOR EAX, EAX
loc_100D3A0A:
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100D3A20(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	MOV EDI, ECX
	PUSH 0x01
	MOV EAX,DWORD PTR [ESI]
	PUSH EDI
	MOV ECX, ESI
	MOV EBX,DWORD PTR [EAX+0x04]
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_100D3A60
	PUSH 0x01
	LEA EAX,DWORD PTR [EDI+0x01]
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_100D3A60
	PUSH 0x01
	ADD EDI, 0x02
	PUSH EDI
	MOV ECX, ESI
	CALL_LONG(EBX)
	MOV ECX, 0x00000000
	CMP EAX, 0x01
	ADC ECX, -0x01
	AND ECX, EAX
	MOV EAX, ECX
loc_100D3A60:
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

