#include "stdafx.h"
#include "LEGO1.h"

#pragma warning (disable:4730)
#pragma warning (disable:4733)
#pragma warning (disable:4799)
#define DB(b) __asm _emit b

__declspec(naked) DWORD LEGO1_sub_10091ED0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	MOV DWORD PTR [offset LEGO1_data + 0xCF14], EAX
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1__DllMain_12(DWORD arg1, DWORD arg2, DWORD arg3)
{
__asm{
	MOV EAX, 0x00000001
	RETN 0x000C
}
}

__declspec(naked) DWORD LEGO1_sub_10091EF0()
{
__asm{
	MOV EAX, DWORD PTR [offset LEGO1_data.mCF10]
	CMP EAX, 0x01
	JZ loc_10091F07
	TEST EAX, EAX
	JNZ loc_10091F2C
	CMP DWORD PTR [offset LEGO1_data + 0xCF14],0x01
	JNZ loc_10091F2C
loc_10091F07:
	PUSH 0x000000FC
	CALL_LONG(offset [LEGO1_text.m90F30_sub_10091F30])
	ADD ESP, 0x04
	MOV EAX, DWORD PTR [offset LEGO1_data.mD8E8]
	TEST EAX, EAX
	JZ loc_10091F1F
	CALL_LONG(EAX)
loc_10091F1F:
	PUSH 0x000000FF
	CALL_LONG(offset [LEGO1_text.m90F30_sub_10091F30])
	ADD ESP, 0x04
loc_10091F2C:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10091F30(DWORD arg1)
{
	enum{
		var_1B0 = -0x1B0,
		var_1A8 = -0x1A8,
		var_148 = -0x148,
		var_110 = -0x110,
		var_104 = -0x104,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x000001A8
	XOR ECX, ECX
	MOV EAX, offset LEGO1_data + 0xD858
	PUSH EBX
	MOV EDX,DWORD PTR [ESP+arg1+0x1AC]
	PUSH ESI
	PUSH EDI
	PUSH EBP
loc_10091F48:
	CMP DWORD PTR [EAX],EDX
	JZ loc_10091F57
	ADD EAX, 0x08
	INC ECX
	CMP EAX, offset [LEGO1_data.mD8E8]
	JB loc_10091F48
loc_10091F57:
	CMP DWORD PTR [offset LEGO1_data + 0xD858+ECX*8],EDX
	LEA EBX,DWORD PTR [ECX*8+0x00000000]
	JNZ FAR loc_1009211B
	CMP DWORD PTR [offset LEGO1_data.mCF10],0x01
	JZ FAR loc_100920D7
	CMP DWORD PTR [offset LEGO1_data.mCF10],0x00
	JNZ loc_10091F8E
	CMP DWORD PTR [offset LEGO1_data + 0xCF14],0x01
	JZ FAR loc_100920D7
loc_10091F8E:
	CMP EDX, 0x000000FC
	JZ FAR loc_1009211B
	LEA EAX,DWORD PTR [ESP+var_104+0x1B8]
	PUSH 0x00000104
	PUSH EAX
	MOV EBP,DWORD PTR [offset LEGO1_idata.m43C_GetModuleFileNameA]
	PUSH 0x00
	CALL_LONG(EBP)
	TEST EAX, EAX
	JNZ loc_10091FCB
	MOV ESI, offset [LEGO1_rdata.m6E90_str]
	LEA EDI,DWORD PTR [ESP+var_110+0x1C4]
	MOV ECX, 0x00000005
	REP MOVSD
	MOVSW
	MOVSB
loc_10091FCB:
	LEA EBP,DWORD PTR [ESP+var_110+0x1C4]
	LEA EDI,DWORD PTR [ESP+var_110+0x1C4]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	CMP ECX, 0x3C
	JBE loc_1009200F
	LEA EDI,DWORD PTR [ESP+var_110+0x1C4]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	PUSH 0x03
	REPNE SCAS
	NOT ECX
	LEA EBP,DWORD PTR [ECX+ESP+var_148+0x1C4]
	PUSH offset LEGO1_rdata + 0x6E8C
	PUSH EBP
	CALL_LONG(offset [LEGO1_text.m8B010_strncpy])
	ADD ESP, 0x0C
loc_1009200F:
	MOV ESI, offset [LEGO1_rdata.m6E70_str]
	LEA EDI,DWORD PTR [ESP+var_1B0+0x1C4]
	MOV ECX, 0x00000006
	REP MOVSD
	MOVSW
	MOV EDI, EBP
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EDX, ECX
	MOV ESI, EDI
	MOV ECX, 0xFFFFFFFF
	LEA EDI,DWORD PTR [ESP+var_1B0+0x1C4]
	SUB EAX, EAX
	REPNE SCAS
	DEC EDI
	MOV ECX, EDX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EDX
	AND ECX, 0x03
	REP MOVSB
	MOV EDI, offset LEGO1_rdata + 0x6E6C
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EDX, ECX
	MOV ESI, EDI
	MOV ECX, 0xFFFFFFFF
	LEA EDI,DWORD PTR [ESP+var_1B0+0x1C4]
	SUB EAX, EAX
	REPNE SCAS
	DEC EDI
	MOV ECX, EDX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EDX
	AND ECX, 0x03
	REP MOVSB
	MOV EDI,DWORD PTR [offset LEGO1_data.mD85C_ptr+EBX]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV ESI, EDI
	MOV EDX, ECX
	LEA EDI,DWORD PTR [ESP+var_1B0+0x1C4]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	DEC EDI
	MOV ECX, EDX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EDX
	PUSH 0x00012010
	AND ECX, 0x03
	PUSH offset [LEGO1_rdata.m6E44_str]
	REP MOVSB
	LEA EAX,DWORD PTR [ESP+var_1A8+0x1C4]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m95300_sub_10096300])
	ADD ESP, 0x0C
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x000001A8
	RET
loc_100920D7:
	CMP DWORD PTR [offset LEGO1_data + 0x19610],0x00
	JZ loc_100920ED
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x19610]
	MOV ESI,DWORD PTR [EAX+0x48]
	CMP ESI, -0x01
	JNZ loc_100920F7
loc_100920ED:
	PUSH -0x0C
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4CC_GetStdHandle])
	MOV ESI, EAX
loc_100920F7:
	MOV EDX,DWORD PTR [offset LEGO1_data.mD85C_ptr+EBX]
	PUSH 0x00
	LEA EAX,DWORD PTR [ESP+var_1A8+0x1BC]
	MOV EDI, EDX
	PUSH EAX
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	DEC ECX
	PUSH ECX
	PUSH EDX
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4D0_WriteFile])
loc_1009211B:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x000001A8
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092130(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x0C
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR EBX, EBX
	MOV EDI,DWORD PTR [ESP+arg1+0x18]
	PUSH EBP
	LEA EAX,DWORD PTR [EDI-0x02]
	CMP EAX, 0x14
	JA_LONG(offset [LEGO1_text.m91154_loc_10092154])
	XOR ECX, ECX
	MOV CL,BYTE PTR [offset LEGO1_text.m912F8_proc_100922F8+EAX]
	JMP_LONG(DWORD PTR [offset LEGO1_text.m912D8_proc_100922D8+ECX*4])
}
}

__declspec(naked) DWORD LEGO1_sub_10092310(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	PUSH ESI
	MOV ESI, EAX
	MOV EDX,DWORD PTR [ESP+arg1+0x4]
loc_1009231B:
	CMP DWORD PTR [ESI+0x04],EDX
	JZ loc_10092333
	ADD ESI, 0x0C
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xD994]
	LEA ECX,DWORD PTR [ECX*2+ECX]
	LEA ECX,DWORD PTR [ECX*4+EAX]
	CMP ECX, ESI
	JA loc_1009231B
loc_10092333:
	MOV EAX,DWORD PTR [ESI+0x04]
	SUB EAX, EDX
	CMP EAX, 0x01
	SBB EAX, EAX
	AND EAX, ESI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100923F0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	PUSH ESI
	MOV ESI, 0x00000001
	PUSH EAX
	MOV ECX,DWORD PTR [ESP+arg1+0x8]
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m460_IsBadReadPtr])
	TEST EAX, EAX
	JZ loc_1009240C
	XOR ESI, ESI
loc_1009240C:
	MOV EAX, ESI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092410(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	PUSH ESI
	MOV ESI, 0x00000001
	PUSH EAX
	MOV ECX,DWORD PTR [ESP+arg1+0x8]
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m464_IsBadWritePtr])
	TEST EAX, EAX
	JZ loc_1009242C
	XOR ESI, ESI
loc_1009242C:
	MOV EAX, ESI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092430(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH ESI
	MOV ESI, 0x00000001
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m398_IsBadCodePtr])
	TEST EAX, EAX
	JZ loc_10092447
	XOR ESI, ESI
loc_10092447:
	MOV EAX, ESI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092450(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	PUSH EDI
	PUSH ESI
	MOV ESI,DWORD PTR [EBP+arg2+0x4]
	MOV EDI,DWORD PTR [EBP+arg1+0x4]
	MOV ECX,DWORD PTR [EBP+arg3+0x4]
	CMP EDI, ESI
	JBE loc_1009246E
	MOV EAX, ESI
	ADD EAX, ECX
	CMP EDI, EAX
	JB_LONG(offset [LEGO1_text.m914FC_loc_100924FC])
loc_1009246E:
	TEST EDI,0x00000003
	JNZ_LONG(offset [LEGO1_text.m914C8_loc_100924C8])
	MOV EDX, ECX
	AND EDX, 0x03
	SHR ECX, 0x02
	REP MOVSD
	JMP_LONG(DWORD PTR [offset LEGO1_text.m91488_proc_10092488+EDX*4])
}
}

__declspec(naked) DWORD LEGO1_sub_100925A0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg1217223 = 0x4A4B1C,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	MOV ESI, EAX
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
	MOV EAX,DWORD PTR [ESI+0x50]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m916F0_sub_100926F0])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ FAR loc_100926DF
	MOV EDX,DWORD PTR [EAX+0x08]
	TEST EDX, EDX
	JZ FAR loc_100926DF
	CMP EDX, 0x05
	JNZ loc_100925E5
	MOV DWORD PTR [EAX+0x08],0x00000000
	MOV EAX, 0x00000001
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100925E5:
	CMP EDX, 0x01
	JNZ loc_100925F4
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100925F4:
	MOV EDI,DWORD PTR [ESI+0x54]
	MOV ECX,DWORD PTR [ESP+arg2+0x10]
	MOV DWORD PTR [ESI+0x54],ECX
	CMP DWORD PTR [EAX+0x04],0x08
	JNZ FAR loc_100926C2
	MOV EBX,DWORD PTR [offset LEGO1_data + 0xD988]
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xD98C]
	ADD ECX, EBX
	CMP ECX, EBX
	JLE loc_1009263F
	LEA ECX,DWORD PTR [EBX*2+EBX]
	SHL ECX, 0x02
loc_10092620:
	MOV EBP,DWORD PTR [ESI+0x50]
	ADD ECX, 0x0C
	INC EBX
	MOV DWORD PTR [ECX+EBP+arg1217223-0x4A4B20],0x00000000
	MOV EBP,DWORD PTR [offset LEGO1_data + 0xD98C]
	ADD EBP,DWORD PTR [offset LEGO1_data + 0xD988]
	CMP EBP, EBX
	JG loc_10092620
loc_1009263F:
	MOV EBX,DWORD PTR [ESI+0x58]
	MOV EAX,DWORD PTR [EAX]
	CMP EAX, 0xC000008E
	JNZ loc_10092654
	MOV DWORD PTR [ESI+0x58],0x00000083
	JMP loc_100926B2
loc_10092654:
	CMP EAX, 0xC0000090
	JNZ loc_10092664
	MOV DWORD PTR [ESI+0x58],0x00000081
	JMP loc_100926B2
loc_10092664:
	CMP EAX, 0xC0000091
	JNZ loc_10092674
	MOV DWORD PTR [ESI+0x58],0x00000084
	JMP loc_100926B2
loc_10092674:
	CMP EAX, 0xC0000093
	JNZ loc_10092684
	MOV DWORD PTR [ESI+0x58],0x00000085
	JMP loc_100926B2
loc_10092684:
	CMP EAX, 0xC000008D
	JNZ loc_10092694
	MOV DWORD PTR [ESI+0x58],0x00000082
	JMP loc_100926B2
loc_10092694:
	CMP EAX, 0xC000008F
	JNZ loc_100926A4
	MOV DWORD PTR [ESI+0x58],0x00000086
	JMP loc_100926B2
loc_100926A4:
	CMP EAX, 0xC0000092
	JNZ loc_100926B2
	MOV DWORD PTR [ESI+0x58],0x0000008A
loc_100926B2:
	MOV EAX,DWORD PTR [ESI+0x58]
	PUSH EAX
	PUSH 0x08
	CALL_LONG(EDX)
	ADD ESP, 0x08
	MOV DWORD PTR [ESI+0x58],EBX
	JMP loc_100926D2
loc_100926C2:
	MOV DWORD PTR [EAX+0x08],0x00000000
	MOV EAX,DWORD PTR [EAX+0x04]
	PUSH EAX
	CALL_LONG(EDX)
	ADD ESP, 0x04
loc_100926D2:
	MOV EAX, 0xFFFFFFFF
	POP EBP
	MOV DWORD PTR [ESI+0x54],EDI
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100926DF:
	MOV ECX,DWORD PTR [ESP+arg2+0x10]
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4D4_UnhandledExceptionFilter])
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100926F0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	PUSH ESI
	MOV ESI, EAX
	MOV EDX,DWORD PTR [ESP+arg1+0x4]
loc_100926FB:
	CMP DWORD PTR [ESI],EDX
	JZ loc_10092712
	ADD ESI, 0x0C
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xD994]
	LEA ECX,DWORD PTR [ECX*2+ECX]
	LEA ECX,DWORD PTR [ECX*4+EAX]
	CMP ECX, ESI
	JA loc_100926FB
loc_10092712:
	MOV EAX,DWORD PTR [ESI]
	SUB EAX, EDX
	CMP EAX, 0x01
	SBB EAX, EAX
	AND EAX, ESI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092720(DWORD arg1, DWORD arg2)
{
	enum{
		var_4 = -0x4,
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x04
	PUSH ESI
	WAIT
	FSTCW WORD PTR [ESP+r+0x6]
	MOV EAX,DWORD PTR [ESP+r+0x6]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m91780_sub_10092780])
	MOV ECX,DWORD PTR [ESP+arg2+0xC]
	ADD ESP, 0x04
	MOV ESI, ECX
	AND ECX,DWORD PTR [ESP+arg1+0x8]
	NOT ESI
	AND ESI, EAX
	OR ESI, ECX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m91830_sub_10092830])
	MOV WORD PTR SS:[ESP+var_4+0xC],AX
	ADD ESP, 0x04
	FLDCW WORD PTR [ESP+var_4+0x8]
	MOV EAX, ESI
	POP ESI
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092760(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	MOV ECX,DWORD PTR [ESP+arg1]
	AND EAX, 0xFFF7FFFF
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m91720_sub_10092720])
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092780(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV DX,WORD PTR SS:[ESP+arg1]
	XOR EAX, EAX
	TEST DL,0x01
	JZ loc_10092791
	MOV EAX, 0x00000010
loc_10092791:
	TEST DL,0x04
	JZ loc_10092799
	OR EAX, 0x08
loc_10092799:
	TEST DL,0x08
	JZ loc_100927A1
	OR EAX, 0x04
loc_100927A1:
	TEST DL,0x10
	JZ loc_100927A9
	OR EAX, 0x02
loc_100927A9:
	TEST DL,0x20
	JZ loc_100927B1
	OR EAX, 0x01
loc_100927B1:
	TEST DL,0x02
	JZ loc_100927BB
	OR EAX, 0x00080000
loc_100927BB:
	XOR ECX, ECX
	MOV CX, DX
	AND ECX, 0x00000C00
	CMP ECX, 0x00000400
	JZ loc_100927E0
	CMP ECX, 0x00000800
	JZ loc_100927E7
	CMP ECX, 0x00000C00
	JZ loc_100927EE
	JMP loc_100927F3
loc_100927E0:
	OR EAX, 0x00000100
	JMP loc_100927F3
loc_100927E7:
	OR EAX, 0x00000200
	JMP loc_100927F3
loc_100927EE:
	OR EAX, 0x00000300
loc_100927F3:
	XOR ECX, ECX
	MOV CX, DX
	AND ECX, 0x00000300
	JZ loc_1009280A
	CMP ECX, 0x00000200
	JZ loc_10092811
	JMP loc_10092816
loc_1009280A:
	OR EAX, 0x00020000
	JMP loc_10092816
loc_10092811:
	OR EAX, 0x00010000
loc_10092816:
	TEST DH,0x10
	JZ loc_10092820
	OR EAX, 0x00040000
loc_10092820:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092830(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	XOR AX, AX
	MOV EDX,DWORD PTR [ESP+arg1]
	TEST DL,0x10
	JZ loc_10092840
	MOV AX, 0x0001
loc_10092840:
	TEST DL,0x08
	JZ loc_10092847
	OR AL, 0x04
loc_10092847:
	TEST DL,0x04
	JZ loc_1009284E
	OR AL, 0x08
loc_1009284E:
	TEST DL,0x02
	JZ loc_10092855
	OR AL, 0x10
loc_10092855:
	TEST DL,0x01
	JZ loc_1009285C
	OR AL, 0x20
loc_1009285C:
	TEST EDX,0x00080000
	JZ loc_10092866
	OR AL, 0x02
loc_10092866:
	MOV ECX, EDX
	AND ECX, 0x00000300
	CMP ECX, 0x00000100
	JZ loc_10092888
	CMP ECX, 0x00000200
	JZ loc_1009288D
	CMP ECX, 0x00000300
	JZ loc_10092892
	JMP loc_10092895
loc_10092888:
	OR AH, 0x04
	JMP loc_10092895
loc_1009288D:
	OR AH, 0x08
	JMP loc_10092895
loc_10092892:
	OR AH, 0x0C
loc_10092895:
	MOV ECX, EDX
	AND ECX, 0x00030000
	JZ loc_100928A9
	CMP ECX, 0x00010000
	JZ loc_100928AE
	JMP loc_100928B1
loc_100928A9:
	OR AH, 0x03
	JMP loc_100928B1
loc_100928AE:
	OR AH, 0x02
loc_100928B1:
	TEST EDX,0x00040000
	JZ loc_100928BC
	OR AH, 0x10
loc_100928BC:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100928D0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg2+0x8]
	PUSH EDI
	MOV EAX, ESI
	MOV EBX, 0xFFFFFFFF
	CDQ
	AND EDX, 0x1F
	MOV CL, 0x1F
	ADD EAX, EDX
	SAR EAX, 0x05
	MOV EDI, EAX
	MOV EAX, ESI
	CDQ
	XOR EAX, EDX
	SUB EAX, EDX
	AND EAX, 0x1F
	XOR EAX, EDX
	SUB EAX, EDX
	SUB CL, AL
	MOV EAX,DWORD PTR [ESP+arg1+0xC]
	SHL EBX, CL
	NOT EBX
	TEST DWORD PTR [EDI*4+EAX],EBX
	JZ loc_1009290E
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1009290E:
	INC EDI
	CMP EDI, 0x03
	JGE loc_10092925
	LEA EAX,DWORD PTR [EDI*4+EAX]
loc_10092917:
	CMP DWORD PTR [EAX],0x00
	JNZ loc_1009292E
	ADD EAX, 0x04
	INC EDI
	CMP EDI, 0x03
	JL loc_10092917
loc_10092925:
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1009292E:
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092940(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EDI,DWORD PTR [ESP+arg2+0xC]
	MOV EBX, 0x00000001
	MOV EAX, EDI
	MOV CL, 0x1F
	CDQ
	AND EDX, 0x1F
	ADD EAX, EDX
	SAR EAX, 0x05
	MOV ESI, EAX
	MOV EAX, EDI
	CDQ
	XOR EAX, EDX
	MOV EDI,DWORD PTR [ESP+arg1+0xC]
	SUB EAX, EDX
	AND EAX, 0x1F
	XOR EAX, EDX
	SUB EAX, EDX
	SUB CL, AL
	LEA EAX,DWORD PTR [ESI*4+EDI]
	SHL EBX, CL
	PUSH EAX
	MOV ECX,DWORD PTR [EAX]
	PUSH EBX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m95490_sub_10096490])
	ADD ESP, 0x0C
	DEC ESI
	JS loc_1009299F
	LEA EDI,DWORD PTR [ESI*4+EDI]
loc_10092987:
	TEST EAX, EAX
	JZ loc_1009299F
	PUSH EDI
	MOV EAX,DWORD PTR [EDI]
	PUSH 0x01
	SUB EDI, 0x04
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m95490_sub_10096490])
	ADD ESP, 0x0C
	DEC ESI
	JNS loc_10092987
loc_1009299F:
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100929B0(DWORD arg1, DWORD arg2)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg1217224 = 0x4A4B20,
	};

__asm{
	SUB ESP, 0x08
	MOV DWORD PTR [ESP+var_4+0x8],0x00000000
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	MOV EBP,DWORD PTR [ESP+arg2+0x18]
	LEA EDI,DWORD PTR [EBP+arg1217224-0x4A4B20]
	DEC EBP
	MOV EAX, EDI
	CDQ
	AND EDX, 0x1F
	MOV EBX, 0x0000001F
	ADD EAX, EDX
	SAR EAX, 0x05
	MOV ESI, EAX
	MOV EAX, EDI
	CDQ
	XOR EAX, EDX
	SUB EAX, EDX
	AND EAX, EBX
	XOR EAX, EDX
	SUB EAX, EDX
	SUB EBX, EAX
	MOV EAX,DWORD PTR [ESP+arg1+0x18]
	LEA ECX,DWORD PTR [ESI*4+EAX]
	MOV EAX, 0x00000001
	MOV DWORD PTR [ESP+var_8+0x18],ECX
	MOV CL, BL
	SHL EAX, CL
	MOV ECX,DWORD PTR [ESP+var_8+0x18]
	TEST DWORD PTR [ECX],EAX
	JZ loc_10092A29
	INC EDI
	MOV EAX,DWORD PTR [ESP+arg1+0x18]
	PUSH EDI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m918D0_sub_100928D0])
	ADD ESP, 0x08
	TEST EAX, EAX
	JNZ loc_10092A29
	MOV EAX,DWORD PTR [ESP+arg1+0x18]
	PUSH EBP
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m91940_sub_10092940])
	MOV DWORD PTR [ESP+var_4+0x20],EAX
	ADD ESP, 0x08
loc_10092A29:
	MOV EAX, 0xFFFFFFFF
	MOV CL, BL
	SHL EAX, CL
	MOV ECX,DWORD PTR [ESP+var_8+0x18]
	INC ESI
	AND DWORD PTR [ECX],EAX
	CMP ESI, 0x03
	JGE loc_10092A50
	MOV EAX,DWORD PTR [ESP+arg1+0x18]
	MOV ECX, 0x00000003
	SUB ECX, ESI
	LEA EDI,DWORD PTR [ESI*4+EAX]
	XOR EAX, EAX
	REP STOSD
loc_10092A50:
	MOV EAX,DWORD PTR [ESP+var_4+0x18]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092A60(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	PUSH ESI
	MOV ECX,DWORD PTR [ESP+arg1+0x4]
	MOV EDX, 0x00000003
loc_10092A6E:
	MOV ESI,DWORD PTR [EAX]
	ADD EAX, 0x04
	MOV DWORD PTR [ECX],ESI
	ADD ECX, 0x04
	DEC EDX
	JNZ loc_10092A6E
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092A80(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg1]
	XOR EAX, EAX
	MOV DWORD PTR [ECX],EAX
	MOV DWORD PTR [ECX+0x04],EAX
	MOV DWORD PTR [ECX+0x08],EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092A90(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	XOR EAX, EAX
	MOV ECX,DWORD PTR [ESP+arg1]
loc_10092A96:
	CMP DWORD PTR [ECX],0x00
	JNZ loc_10092AAA
	ADD ECX, 0x04
	INC EAX
	CMP EAX, 0x03
	JL loc_10092A96
	MOV EAX, 0x00000001
	RET
loc_10092AAA:
	XOR EAX, EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092AB0(DWORD arg1, DWORD arg2)
{
	enum{
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg2]
	SUB ESP, 0x10
	MOV EAX, ECX
	PUSH EBX
	CDQ
	PUSH ESI
	AND EDX, 0x1F
	PUSH EDI
	ADD EAX, EDX
	PUSH EBP
	SAR EAX, 0x05
	MOV DWORD PTR [ESP+var_10+0x20],EAX
	MOV EAX, ECX
	CDQ
	XOR EAX, EDX
	SUB EAX, EDX
	AND EAX, 0x1F
	XOR EAX, EDX
	SUB EAX, EDX
	MOV EDX, 0xFFFFFFFF
	MOV CL, AL
	MOV ESI,DWORD PTR [ESP+arg1+0x20]
	SHL EDX, CL
	MOV EBX, ESI
	MOV CL, 0x20
	SUB CL, AL
	MOV EBP, 0x00000003
	NOT EDX
	MOV DWORD PTR [ESP+var_C+0x20],EDX
	MOV BYTE PTR [ESP+var_4+0x20],CL
	XOR EDX, EDX
loc_10092AFC:
	MOV EDI,DWORD PTR [EBX]
	ADD EBX, 0x04
	MOV ECX, EDI
	AND ECX,DWORD PTR [ESP+var_C+0x20]
	MOV DWORD PTR [ESP+var_8+0x20],ECX
	MOV CL, AL
	SHR EDI, CL
	MOV CL,BYTE PTR [ESP+var_4+0x20]
	MOV DWORD PTR [EBX-0x04],EDI
	OR EDI, EDX
	MOV EDX,DWORD PTR [ESP+var_8+0x20]
	SHL EDX, CL
	DEC EBP
	MOV DWORD PTR [EBX-0x04],EDI
	JNZ loc_10092AFC
	MOV ECX, 0x00000002
	MOV EDX, ESI
	MOV EAX,DWORD PTR [ESP+var_10+0x20]
	ADD ESI, 0x08
	SHL EAX, 0x02
	SUB EDX, EAX
	ADD EDX, 0x08
loc_10092B3A:
	CMP DWORD PTR [ESP+var_10+0x20],ECX
	JG loc_10092B46
	MOV EAX,DWORD PTR [EDX]
	MOV DWORD PTR [ESI],EAX
	JMP loc_10092B4C
loc_10092B46:
	MOV DWORD PTR [ESI], 0x00000000
loc_10092B4C:
	SUB EDX, 0x04
	SUB ESI, 0x04
	DEC ECX
	JNS loc_10092B3A
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092B60(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x18
	MOV AX,WORD PTR DS:[ECX+0x0A]
	PUSH EBX
	PUSH ESI
	XOR EBX, EBX
	MOV BX, AX
	PUSH EDI
	PUSH EBP
	AND EBX, 0x00007FFF
	SUB EBX, 0x00003FFF
	XOR ESI, ESI
	MOV SI, AX
	MOV EDX,DWORD PTR [ECX+0x02]
	AND ESI, 0x00008000
	MOV EAX,DWORD PTR [ECX+0x06]
	MOV DWORD PTR [ESP+var_18+0x28],EAX
	MOV DWORD PTR [ESP+var_14+0x28],EDX
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[ECX]
	SHL EAX, 0x10
	CMP EBX, 0xFFFFC001
	MOV DWORD PTR [ESP+var_10+0x28],EAX
	JNZ loc_10092BE6
	XOR EBX, EBX
	LEA EAX,DWORD PTR [ESP+var_18+0x28]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m91A90_sub_10092A90])
	ADD ESP, 0x04
	TEST EAX, EAX
	JZ loc_10092BCB
	XOR EAX, EAX
	MOV EDI,DWORD PTR [ESP+arg3+0x28]
	JMP FAR loc_10092CDD
loc_10092BCB:
	LEA EAX,DWORD PTR [ESP+var_18+0x28]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m91A80_sub_10092A80])
	MOV EDI,DWORD PTR [ESP+arg3+0x2C]
	ADD ESP, 0x04
	MOV EAX, 0x00000002
	JMP FAR loc_10092CDD
loc_10092BE6:
	LEA EAX,DWORD PTR [ESP+var_18+0x28]
	LEA ECX,DWORD PTR [ESP+var_C+0x28]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m91A60_sub_10092A60])
	MOV EDI,DWORD PTR [ESP+arg3+0x30]
	LEA EAX,DWORD PTR [ESP+var_18+0x30]
	ADD ESP, 0x08
	MOV ECX,DWORD PTR [EDI+0x08]
	PUSH ECX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m919B0_sub_100929B0])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ loc_10092C12
	INC EBX
loc_10092C12:
	MOV EBP,DWORD PTR [EDI+0x04]
	MOV EAX, EBP
	SUB EAX,DWORD PTR [EDI+0x08]
	CMP EAX, EBX
	JLE loc_10092C37
	LEA EAX,DWORD PTR [ESP+var_18+0x28]
	XOR EBX, EBX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m91A80_sub_10092A80])
	ADD ESP, 0x04
	MOV EAX, 0x00000002
	JMP FAR loc_10092CDD
loc_10092C37:
	CMP EBX, EBP
	JG loc_10092C89
	SUB EBP, EBX
	LEA EAX,DWORD PTR [ESP+var_C+0x28]
	LEA ECX,DWORD PTR [ESP+var_18+0x28]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m91A60_sub_10092A60])
	LEA ECX,DWORD PTR [ESP+var_18+0x30]
	ADD ESP, 0x08
	PUSH EBP
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m91AB0_sub_10092AB0])
	LEA EDX,DWORD PTR [ESP+var_18+0x30]
	ADD ESP, 0x08
	MOV ECX,DWORD PTR [EDI+0x08]
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m919B0_sub_100929B0])
	LEA ECX,DWORD PTR [ESP+var_18+0x30]
	ADD ESP, 0x08
	MOV EAX,DWORD PTR [EDI+0x0C]
	XOR EBX, EBX
	INC EAX
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m91AB0_sub_10092AB0])
	ADD ESP, 0x08
	MOV EAX, 0x00000002
	JMP loc_10092CDD
loc_10092C89:
	CMP DWORD PTR [EDI],EBX
	JG loc_10092CBF
	LEA EAX,DWORD PTR [ESP+var_18+0x28]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m91A80_sub_10092A80])
	LEA ECX,DWORD PTR [ESP+var_18+0x2C]
	MOV EAX,DWORD PTR [EDI+0x0C]
	OR DWORD PTR [ESP+var_18+0x2C],0x80000000
	ADD ESP, 0x04
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m91AB0_sub_10092AB0])
	ADD ESP, 0x08
	MOV EBX,DWORD PTR [EDI+0x14]
	ADD EBX,DWORD PTR [EDI]
	MOV EAX, 0x00000001
	JMP loc_10092CDD
loc_10092CBF:
	ADD EBX,DWORD PTR [EDI+0x14]
	MOV ECX,DWORD PTR [EDI+0x0C]
	LEA EAX,DWORD PTR [ESP+var_18+0x28]
	PUSH ECX
	AND DWORD PTR [ESP+var_18+0x2C],0x7FFFFFFF
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m91AB0_sub_10092AB0])
	ADD ESP, 0x08
	XOR EAX, EAX
loc_10092CDD:
	MOV CL, 0x1F
	SUB CL,BYTE PTR [EDI+0x0C]
	SHL EBX, CL
	MOV ECX, 0x00000000
	CMP ESI, 0x01
	ADC ECX, -0x01
	AND ECX, 0x80000000
	OR EBX, ECX
	MOV ECX,DWORD PTR [EDI+0x10]
	OR EBX,DWORD PTR [ESP+var_18+0x28]
	CMP ECX, 0x40
	JNZ loc_10092D18
	MOV EDX,DWORD PTR [ESP+arg2+0x28]
	MOV ECX,DWORD PTR [ESP+var_14+0x28]
	POP EBP
	POP EDI
	POP ESI
	MOV DWORD PTR [EDX+0x04],EBX
	POP EBX
	MOV DWORD PTR [EDX],ECX
	ADD ESP, 0x18
	RET
loc_10092D18:
	CMP ECX, 0x20
	JNZ loc_10092D23
	MOV EDX,DWORD PTR [ESP+arg2+0x28]
	MOV DWORD PTR [EDX],EBX
loc_10092D23:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x18
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092D30(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	PUSH offset LEGO1_data + 0xD998
	MOV ECX,DWORD PTR [ESP+arg1+0x4]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m91B60_sub_10092B60])
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092D50(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	PUSH offset LEGO1_data + 0xD9B0
	MOV ECX,DWORD PTR [ESP+arg1+0x4]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m91B60_sub_10092B60])
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092D70(DWORD arg1, DWORD arg2)
{
	enum{
		var_10 = -0x10,
		var_C = -0xC,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	SUB ESP, 0x10
	LEA ECX,DWORD PTR [ESP+var_10+0x10]
	PUSH 0x00
	LEA EDX,DWORD PTR [ESP+var_C+0x14]
	PUSH 0x00
	PUSH 0x00
	PUSH 0x00
	PUSH EAX
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m92820_sub_10093820])
	MOV ECX,DWORD PTR [ESP+arg1+0x2C]
	LEA EDX,DWORD PTR [ESP+var_C+0x2C]
	ADD ESP, 0x1C
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m91D30_sub_10092D30])
	ADD ESP, 0x18
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092DB0(DWORD arg1, DWORD arg2)
{
	enum{
		var_10 = -0x10,
		var_C = -0xC,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	SUB ESP, 0x10
	LEA ECX,DWORD PTR [ESP+var_10+0x10]
	PUSH 0x00
	LEA EDX,DWORD PTR [ESP+var_C+0x14]
	PUSH 0x00
	PUSH 0x00
	PUSH 0x00
	PUSH EAX
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m92820_sub_10093820])
	MOV ECX,DWORD PTR [ESP+arg1+0x2C]
	LEA EDX,DWORD PTR [ESP+var_C+0x2C]
	ADD ESP, 0x1C
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m91D50_sub_10092D50])
	ADD ESP, 0x18
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092DF0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg1217224 = 0x4A4B20,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg3]
	PUSH EBX
	MOV EDX,DWORD PTR [ESP+arg1+0x4]
	PUSH ESI
	MOV EAX,DWORD PTR [ESP+arg2+0x8]
	PUSH EDI
	PUSH EBP
	LEA EDI,DWORD PTR [EDX+0x01]
	MOV EBP,DWORD PTR [ECX+0x0C]
	MOV ESI, EDI
	MOV BYTE PTR [EDX],0x30
	TEST EAX, EAX
	JLE loc_10092E22
loc_10092E0F:
	MOV BL,BYTE PTR [EBP+arg1217224-0x4A4B20]
	TEST BL, BL
	JZ loc_10092E1B
	INC EBP
	MOV BYTE PTR [ESI],BL
	JMP loc_10092E1E
loc_10092E1B:
	MOV BYTE PTR [ESI],0x30
loc_10092E1E:
	INC ESI
	DEC EAX
	JNZ loc_10092E0F
loc_10092E22:
	MOV BYTE PTR [ESI],0x00
	TEST EAX, EAX
	JL loc_10092E40
	CMP BYTE PTR [EBP+arg1217224-0x4A4B20],0x35
	JL loc_10092E40
	DEC ESI
	CMP BYTE PTR [ESI],0x39
	JNZ loc_10092E3E
loc_10092E35:
	MOV BYTE PTR [ESI],0x30
	DEC ESI
	CMP BYTE PTR [ESI],0x39
	JZ loc_10092E35
loc_10092E3E:
	INC BYTE PTR [ESI]
loc_10092E40:
	CMP BYTE PTR [EDX],0x31
	JNZ loc_10092E4D
	POP EBP
	INC DWORD PTR [ECX+0x04]
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10092E4D:
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI, EDX
	REP MOVSD
	MOV ECX, EAX
	POP EBP
	AND ECX, 0x03
	REP MOVSB
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092E80(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_28 = -0x28,
		var_24 = -0x24,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		arg1 = 0x4,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	LEA EAX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x28
	LEA ECX,DWORD PTR [ESP+var_28+0x28]
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m91F10_sub_10092F10])
	LEA ECX,DWORD PTR [ESP+var_1C+0x3C]
	MOV EDX,DWORD PTR [ESP+var_20+0x3C]
	MOV EAX,DWORD PTR [ESP+var_24+0x3C]
	ADD ESP, 0x08
	PUSH ECX
	PUSH 0x00
	MOV ECX,DWORD PTR [ESP+var_28+0x3C]
	PUSH 0x11
	PUSH EDX
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m956A0_sub_100966A0])
	MOV EDX,DWORD PTR [ESP+arg3+0x4C]
	ADD ESP, 0x18
	LEA EDI,DWORD PTR [ESP+var_18+0x34]
	MOV DWORD PTR [EDX+0x08],EAX
	MOVSX ECX,BYTE PTR [ESP+var_18+0x32]
	MOVSX EAX,WORD PTR [ESP+var_1C+0x34]
	MOV DWORD PTR [EDX],ECX
	MOV DWORD PTR [EDX+0x04],EAX
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EBX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EAX,DWORD PTR [ESP+arg4+0x34]
	MOV EDI, EAX
	REP MOVSD
	MOV ECX, EBX
	AND ECX, 0x03
	REP MOVSB
	POP EDI
	MOV DWORD PTR [EDX+0x0C],EAX
	MOV EAX, EDX
	POP ESI
	POP EBX
	ADD ESP, 0x28
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092F10(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	PUSH EBX
	MOV DX,WORD PTR DS:[EAX+0x06]
	PUSH ESI
	MOV SI, DX
	PUSH EDI
	AND SI, 0x7FF0
	PUSH EBP
	SHR SI, 0x04
	MOV EBX, 0x80000000
	AND DX, 0x8000
	MOV ECX,DWORD PTR [EAX+0x04]
	AND ECX, 0x000FFFFF
	MOV EBP,DWORD PTR [EAX]
	MOVZX EAX,SI
	TEST EAX, EAX
	JZ loc_10092F52
	CMP EAX, 0x000007FF
	JZ loc_10092F77
	ADD SI, 0x3C00
	JMP loc_10092F7B
loc_10092F52:
	XOR EAX, EAX
	TEST ECX, ECX
	JNZ loc_10092F6E
	TEST EBP, EBP
	JNZ loc_10092F6E
	MOV EDI,DWORD PTR [ESP+arg1+0x10]
	POP EBP
	MOV WORD PTR DS:[EDI+0x08],AX
	MOV DWORD PTR [EDI+0x04],EAX
	MOV DWORD PTR [EDI],EAX
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10092F6E:
	ADD SI, 0x3C01
	XOR EBX, EBX
	JMP loc_10092F7B
loc_10092F77:
	MOV SI, 0x7FFF
loc_10092F7B:
	SHL ECX, 0x0B
	MOV EDI,DWORD PTR [ESP+arg1+0x10]
	MOV EAX, EBP
	SHR EAX, 0x15
	SHL EBP, 0x0B
	OR ECX, EAX
	OR ECX, EBX
	MOV DWORD PTR [EDI],EBP
	TEST ECX,0x80000000
	MOV DWORD PTR [EDI+0x04],ECX
	JNZ loc_10092FC0
loc_10092F9B:
	DEC SI
	MOV EAX,DWORD PTR [EDI]
	MOV EBX, EAX
	MOV ECX,DWORD PTR [EDI+0x04]
	AND EBX, 0x80000000
	ADD ECX, ECX
	SHR EBX, 0x1F
	ADD EAX, EAX
	OR EBX, ECX
	MOV DWORD PTR [EDI],EAX
	TEST EBX,0x80000000
	MOV DWORD PTR [EDI+0x04],EBX
	JZ loc_10092F9B
loc_10092FC0:
	OR SI, DX
	POP EBP
	MOV WORD PTR DS:[EDI+0x08],SI
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10092FD0()
{
	enum{
		arg1217183 = 0x4A4A7C,
		arg1217184 = 0x4A4A80,
		arg1217185 = 0x4A4A84,
		arg1217187 = 0x4A4A8C,
		arg1217188 = 0x4A4A90,
	};

__asm{
	CMP BYTE PTR [EDX+0x0E],0x05
	JNZ loc_10092FE7
	MOV BX,WORD PTR SS:[EBP+arg1217183-0x4A4B20]
	OR BH, 0x02
	AND BH, -0x02
	MOV BL, 0x3F
	JMP loc_10092FEB
loc_10092FE7:
	MOV BX, 0x133F
loc_10092FEB:
	MOV WORD PTR SS:[EBP+arg1217184-0x4A4B22],BX
	FLDCW WORD PTR [EBP+arg1217184-0x4A4B22]
	MOV EBX, offset LEGO1_data + 0xD9EC
	FXAM
	MOV DWORD PTR [EBP+arg1217187-0x4A4B20],EDX
	WAIT
	FSTSW WORD PTR [EBP+arg1217184-0x4A4B20]
	MOV BYTE PTR [EBP+arg1217188-0x4A4B20],0x00
	WAIT
	MOV CL,BYTE PTR [EBP+arg1217185-0x4A4B23]
	SHL CL, 1
	SAR CL, 1
	ROL CL, 1
	MOV AL, CL
	AND AL, 0x0F
	XLAT
	MOVSX EAX,AL
	AND ECX, 0x00000404
	MOV EBX, EDX
	ADD EBX, EAX
	ADD EBX, 0x10
	JMP_LONG(DWORD PTR [EBX])
}
}

__declspec(naked) DWORD LEGO1_sub_10093037()
{
	enum{
		arg1217183 = 0x4A4A7C,
		arg1217184 = 0x4A4A80,
		arg1217185 = 0x4A4A84,
		arg1217187 = 0x4A4A8C,
		arg1217188 = 0x4A4A90,
	};

__asm{
	CMP BYTE PTR [EDX+0x0E],0x05
	JNZ loc_1009304E
	MOV BX,WORD PTR SS:[EBP+arg1217183-0x4A4B20]
	OR BH, 0x02
	AND BH, -0x02
	MOV BL, 0x3F
	JMP loc_10093052
loc_1009304E:
	MOV BX, 0x133F
loc_10093052:
	MOV WORD PTR SS:[EBP+arg1217184-0x4A4B22],BX
	FLDCW WORD PTR [EBP+arg1217184-0x4A4B22]
	MOV EBX, offset LEGO1_data + 0xD9EC
	FXAM
	MOV DWORD PTR [EBP+arg1217187-0x4A4B20],EDX
	WAIT
	FSTSW WORD PTR [EBP+arg1217184-0x4A4B20]
	MOV BYTE PTR [EBP+arg1217188-0x4A4B20],0x00
	FXCH ST(1)
	MOV CL,BYTE PTR [EBP+arg1217185-0x4A4B23]
	FXAM
	WAIT
	FSTSW WORD PTR [EBP+arg1217184-0x4A4B20]
	FXCH ST(1)
	MOV CH,BYTE PTR [EBP+arg1217185-0x4A4B23]
	SHL CH, 1
	SAR CH, 1
	ROL CH, 1
	MOV AL, CH
	AND AL, 0x0F
	XLAT
	MOV AH, AL
	SHL CL, 1
	SAR CL, 1
	ROL CL, 1
	MOV AL, CL
	AND AL, 0x0F
	XLAT
	SHL AH, 1
	SHL AH, 1
	OR AL, AH
	MOVSX EAX,AL
	AND ECX, 0x00000404
	MOV EBX, EDX
	ADD EBX, EAX
	ADD EBX, 0x10
	JMP_LONG(DWORD PTR [EBX])
	CALL_LONG(offset [LEGO1_text.m92189_sub_10093189])
	JMP_LONG(offset [LEGO1_text.m920C8_loc_100930C8])
}
}

__declspec(naked) DWORD LEGO1_sub_10093189()
{
	enum{
		arg1217188 = 0x4A4A90,
	};

__asm{
	MOV BYTE PTR [EBP+arg1217188-0x4A4B20],0x01
	JMP_LONG(offset [LEGO1_text.m92190_loc_10093190])
}
}

__declspec(naked) DWORD LEGO1_sub_100931A0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_5C = -0x5C,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg3]
	SUB ESP, 0x5C
	XOR ECX, ECX
	PUSH EBX
	MOV CX,WORD PTR DS:[EAX]
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg2+0x64]
	PUSH EDI
	MOV DWORD PTR [ESP+var_5C+0x68],ECX
	MOV EAX,DWORD PTR [ESI]
	DEC EAX
	CMP EAX, 0x07
	JA_LONG(offset [LEGO1_text.m921E8_loc_100931E8])
	JMP_LONG(DWORD PTR [offset LEGO1_text.m922A0_proc_100932A0+EAX*4])
}
}

__declspec(naked) DWORD LEGO1_sub_100932C0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6)
{
	enum{
		var_14 = -0x14,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
		arg1217224 = 0x4A4B20,
	};

__asm{
	SUB ESP, 0x04
	CMP DWORD PTR [offset LEGO1_data + 0xD9FC],0x00
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	JNZ loc_10093326
	LEA EAX,DWORD PTR [ESP+var_4+0x14]
	MOV ESI,DWORD PTR [offset LEGO1_idata.m470_GetStringTypeW]
	PUSH EAX
	PUSH 0x01
	PUSH offset LEGO1_rdata + 0x6BB4
	PUSH 0x01
	CALL_LONG(ESI)
	TEST EAX, EAX
	JZ loc_100932F6
	MOV DWORD PTR [offset LEGO1_data + 0xD9FC],0x00000001
	JMP loc_1009332C
loc_100932F6:
	LEA EAX,DWORD PTR [ESP+var_14+0x24]
	PUSH EAX
	PUSH 0x01
	PUSH offset [LEGO1_rdata.m6BB0]
	PUSH 0x01
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m46C_GetStringTypeA])
	TEST EAX, EAX
	JZ loc_1009331C
	MOV DWORD PTR [offset LEGO1_data + 0xD9FC],0x00000002
	JMP loc_1009332C
loc_1009331C:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10093326:
	MOV ESI,DWORD PTR [offset LEGO1_idata.m470_GetStringTypeW]
loc_1009332C:
	CMP DWORD PTR [offset LEGO1_data + 0xD9FC],0x01
	JNZ loc_10093353
	MOV EAX,DWORD PTR [ESP+arg4+0x14]
	MOV ECX,DWORD PTR [ESP+arg3+0x14]
	MOV EDX,DWORD PTR [ESP+arg2+0x14]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg1+0x18]
	PUSH ECX
	PUSH EDX
	PUSH EAX
	CALL_LONG(ESI)
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10093353:
	CMP DWORD PTR [offset LEGO1_data + 0xD9FC],0x02
	JNZ FAR loc_1009346C
	XOR EDI, EDI
	MOV EBP,DWORD PTR [ESP+arg5+0x14]
	MOV DWORD PTR [ESP+var_4+0x14],EDI
	CMP EBP, EDI
	JNZ loc_10093374
	MOV EBP,DWORD PTR [offset LEGO1_data + 0xD490]
loc_10093374:
	MOV EAX,DWORD PTR [ESP+arg3+0x14]
	PUSH 0x00
	MOV ECX,DWORD PTR [ESP+arg2+0x18]
	PUSH 0x00
	PUSH 0x00
	PUSH 0x00
	PUSH EAX
	PUSH ECX
	PUSH 0x00000220
	PUSH EBP
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m42C_WideCharToMultiByte])
	MOV EBX, EAX
	TEST EBX, EBX
	JNZ loc_100933A2
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_100933A2:
	PUSH EBX
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m89100_sub_1008A100])
	ADD ESP, 0x08
	MOV ESI, EAX
	TEST ESI, ESI
	JNZ loc_100933BD
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_100933BD:
	MOV EAX,DWORD PTR [ESP+arg3+0x14]
	PUSH 0x00
	MOV ECX,DWORD PTR [ESP+arg2+0x18]
	PUSH 0x00
	PUSH EBX
	PUSH ESI
	PUSH EAX
	PUSH ECX
	PUSH 0x00000220
	PUSH EBP
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m42C_WideCharToMultiByte])
	TEST EAX, EAX
	JZ loc_10093456
	LEA EAX,DWORD PTR [EBX*2+0x00000002]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV EDI, EAX
	TEST EDI, EDI
	JZ loc_10093456
	MOV ECX,DWORD PTR [ESP+arg6+0x14]
	TEST ECX, ECX
	JNZ loc_10093401
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xD480]
loc_10093401:
	MOV EAX,DWORD PTR [ESP+arg3+0x14]
	PUSH EDI
	MOV EDX,DWORD PTR [ESP+arg1+0x18]
	PUSH EBX
	LEA EBP,DWORD PTR [EAX*2+EDI]
	PUSH ESI
	MOV WORD PTR SS:[EBP+arg1217224-0x4A4B20],0xFFFF
	PUSH EDX
	MOV WORD PTR SS:[EBP+arg1217224-0x4A4B22],0xFFFF
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m46C_GetStringTypeA])
	CMP WORD PTR SS:[EBP+arg1217224-0x4A4B22],0xFFFF
	MOV DWORD PTR [ESP+var_4+0x14],EAX
	JZ loc_1009344E
	CMP WORD PTR SS:[EBP+arg1217224-0x4A4B20],0xFFFF
	JNZ loc_1009344E
	MOV EAX,DWORD PTR [ESP+arg3+0x14]
	MOV ECX,DWORD PTR [ESP+arg4+0x14]
	ADD EAX, EAX
	PUSH EAX
	PUSH EDI
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m91450_sub_10092450])
	ADD ESP, 0x0C
	JMP loc_10093456
loc_1009344E:
	MOV DWORD PTR [ESP+var_4+0x14],0x00000000
loc_10093456:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	MOV EAX,DWORD PTR [ESP+var_4+0x18]
	ADD ESP, 0x04
loc_1009346C:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10093480(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6)
{
	enum{
		var_14 = -0x14,
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
	};

__asm{
	SUB ESP, 0x04
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xDA00]
	TEST EAX, EAX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	JNZ loc_100934DC
	LEA EAX,DWORD PTR [ESP+r+0x12]
	MOV ESI,DWORD PTR [offset LEGO1_idata.m46C_GetStringTypeA]
	PUSH EAX
	PUSH 0x01
	PUSH offset [LEGO1_rdata.m6BB0]
	PUSH 0x01
	PUSH 0x00
	CALL_LONG(ESI)
	TEST EAX, EAX
	JZ loc_100934B3
	MOV EAX, 0x00000002
	JMP loc_100934E2
loc_100934B3:
	LEA EAX,DWORD PTR [ESP+var_14+0x26]
	PUSH EAX
	PUSH 0x01
	PUSH offset LEGO1_rdata + 0x6BB4
	PUSH 0x01
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m470_GetStringTypeW])
	TEST EAX, EAX
	JZ loc_100934D2
	MOV EAX, 0x00000001
	JMP loc_100934E2
loc_100934D2:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_100934DC:
	MOV ESI,DWORD PTR [offset LEGO1_idata.m46C_GetStringTypeA]
loc_100934E2:
	MOV DWORD PTR [offset LEGO1_data + 0xDA00], EAX
	CMP EAX, 0x02
	JNZ loc_10093519
	MOV EDX,DWORD PTR [ESP+arg6+0x14]
	TEST EDX, EDX
	JNZ loc_100934FA
	MOV EDX,DWORD PTR [offset LEGO1_data + 0xD480]
loc_100934FA:
	MOV ECX,DWORD PTR [ESP+arg4+0x14]
	MOV EAX,DWORD PTR [ESP+arg3+0x14]
	MOV EBX,DWORD PTR [ESP+arg2+0x14]
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+arg1+0x18]
	PUSH EAX
	PUSH EBX
	PUSH ECX
	PUSH EDX
	CALL_LONG(ESI)
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10093519:
	MOV DWORD PTR [offset LEGO1_data + 0xDA00], EAX
	CMP EAX, 0x01
	JNZ loc_1009359B
	XOR EBX, EBX
	XOR ESI, ESI
	MOV EDI,DWORD PTR [ESP+arg5+0x14]
	CMP EDI, EBX
	JNZ loc_10093535
	MOV EDI,DWORD PTR [offset LEGO1_data + 0xD490]
loc_10093535:
	MOV EAX,DWORD PTR [ESP+arg3+0x14]
	PUSH 0x00
	MOV ECX,DWORD PTR [ESP+arg2+0x18]
	PUSH 0x00
	PUSH EAX
	PUSH ECX
	PUSH 0x09
	PUSH EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m424_MultiByteToWideChar])
	MOV EBP, EAX
	TEST EBP, EBP
	JZ loc_10093590
	PUSH EBP
	PUSH 0x02
	CALL_LONG(offset [LEGO1_text.m89100_sub_1008A100])
	ADD ESP, 0x08
	MOV ESI, EAX
	TEST ESI, ESI
	JZ loc_10093590
	MOV EAX,DWORD PTR [ESP+arg3+0x14]
	PUSH EBP
	MOV ECX,DWORD PTR [ESP+arg2+0x18]
	PUSH ESI
	PUSH EAX
	PUSH ECX
	PUSH 0x01
	PUSH EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m424_MultiByteToWideChar])
	TEST EAX, EAX
	JZ loc_10093590
	MOV ECX,DWORD PTR [ESP+arg4+0x14]
	PUSH ECX
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg1+0x1C]
	PUSH ESI
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m470_GetStringTypeW])
	MOV EBX, EAX
loc_10093590:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX, EBX
loc_1009359B:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100935B0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	INC DWORD PTR [offset LEGO1_data + 0xCB70]
	MOV ESI,DWORD PTR [ESP+arg1+0x4]
	PUSH 0x00001000
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV DWORD PTR [ESI+0x08],EAX
	TEST EAX, EAX
	JZ loc_100935DC
	OR DWORD PTR [ESI+0x0C],0x08
	MOV DWORD PTR [ESI+0x18],0x00001000
	JMP loc_100935ED
loc_100935DC:
	OR DWORD PTR [ESI+0x0C],0x04
	LEA EAX,DWORD PTR [ESI+0x14]
	MOV DWORD PTR [ESI+0x08],EAX
	MOV DWORD PTR [ESI+0x18],0x00000002
loc_100935ED:
	MOV EAX,DWORD PTR [ESI+0x08]
	MOV DWORD PTR [ESI],EAX
	MOV DWORD PTR [ESI+0x04],0x00000000
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10093600(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg1]
	CMP EDX,DWORD PTR [offset LEGO1_data + 0x19710]
	JB loc_1009360F
	XOR EAX, EAX
	RET
loc_1009360F:
	MOV EAX, EDX
	AND EDX, 0x1F
	SHL EDX, 0x02
	AND EAX, -0x19
	SAR EAX, 0x03
	LEA EDX,DWORD PTR [EDX*8+EDX]
	MOV ECX,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	XOR EAX, EAX
	MOV AL,BYTE PTR [EDX+ECX+0x04]
	AND EAX, 0x40
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10093630(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	CMP DWORD PTR [offset LEGO1_data + 0x195FC],0x00
	PUSH ESI
	PUSH EDI
	JZ loc_1009364C
	PUSH 0x13
	MOV EDI, 0x00000001
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	ADD ESP, 0x04
	JMP loc_10093654
loc_1009364C:
	XOR EDI, EDI
	INC DWORD PTR [offset LEGO1_data + 0x19600]
loc_10093654:
	MOV EAX,DWORD PTR [ESP+arg2+0x8]
	MOV ECX,DWORD PTR [ESP+arg1+0x8]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m92690_sub_10093690])
	ADD ESP, 0x08
	MOV ESI, EAX
	TEST EDI, EDI
	JZ loc_1009367B
	PUSH 0x13
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	MOV EAX, ESI
	POP EDI
	POP ESI
	RET
loc_1009367B:
	MOV EAX, ESI
	POP EDI
	POP ESI
	DEC DWORD PTR [offset LEGO1_data + 0x19600]
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10093690(DWORD arg1, DWORD arg2)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x04
	TEST ECX, ECX
	JNZ loc_100936A1
	XOR EAX, EAX
	ADD ESP, 0x04
	RET
loc_100936A1:
	CMP DWORD PTR [offset LEGO1_data + 0xD480],0x00
	JNZ loc_100936D6
	CMP WORD PTR SS:[ESP+arg2+0x4],0x00FF
	JBE loc_100936C7
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x0000002A
	MOV EAX, 0xFFFFFFFF
	ADD ESP, 0x04
	RET
loc_100936C7:
	MOV AL,BYTE PTR [ESP+arg2+0x4]
	MOV BYTE PTR [ECX],AL
	MOV EAX, 0x00000001
	ADD ESP, 0x04
	RET
loc_100936D6:
	LEA EAX,DWORD PTR [ESP+var_4+0x4]
	MOV EDX,DWORD PTR [offset LEGO1_data + 0xD1FC]
	MOV DWORD PTR [ESP+var_4+0x4],0x00000000
	PUSH EAX
	PUSH 0x00
	PUSH EDX
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xD490]
	PUSH ECX
	PUSH 0x01
	LEA ECX,DWORD PTR [ESP+arg2+0x18]
	PUSH ECX
	PUSH 0x00000220
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m42C_WideCharToMultiByte])
	TEST EAX, EAX
	JZ loc_10093710
	CMP DWORD PTR [ESP+var_4+0x4],0x00
	JZ loc_10093720
loc_10093710:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x0000002A
	MOV EAX, 0xFFFFFFFF
loc_10093720:
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10093730(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV EAX,DWORD PTR [ESP+arg4+0x8]
	OR EAX, EAX
	JNZ loc_10093752
	MOV ECX,DWORD PTR [ESP+arg3+0x8]
	MOV EAX,DWORD PTR [ESP+arg2+0x8]
	XOR EDX, EDX
	DIV ECX
	MOV EBX, EAX
	MOV EAX,DWORD PTR [ESP+arg1+0x8]
	DIV ECX
	MOV EDX, EBX
	JMP loc_10093793
loc_10093752:
	MOV ECX, EAX
	MOV EBX,DWORD PTR [ESP+arg3+0x8]
	MOV EDX,DWORD PTR [ESP+arg2+0x8]
	MOV EAX,DWORD PTR [ESP+arg1+0x8]
loc_10093760:
	SHR ECX, 1
	RCR EBX, 1
	SHR EDX, 1
	RCR EAX, 1
	OR ECX, ECX
	JNZ loc_10093760
	DIV EBX
	MOV ESI, EAX
	MUL DWORD PTR [ESP+arg4+0x8]
	MOV ECX, EAX
	MOV EAX,DWORD PTR [ESP+arg3+0x8]
	MUL ESI
	ADD EDX, ECX
	JB loc_1009378E
	CMP EDX,DWORD PTR [ESP+arg2+0x8]
	JA loc_1009378E
	JB loc_1009378F
	CMP EAX,DWORD PTR [ESP+arg1+0x8]
	JBE loc_1009378F
loc_1009378E:
	DEC ESI
loc_1009378F:
	XOR EDX, EDX
	MOV EAX, ESI
loc_10093793:
	POP ESI
	POP EBX
	RETN 0x0010
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100937A0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	PUSH EBX
	MOV EAX,DWORD PTR [ESP+arg4+0x4]
	OR EAX, EAX
	JNZ loc_100937C1
	MOV ECX,DWORD PTR [ESP+arg3+0x4]
	MOV EAX,DWORD PTR [ESP+arg2+0x4]
	XOR EDX, EDX
	DIV ECX
	MOV EAX,DWORD PTR [ESP+arg1+0x4]
	DIV ECX
	MOV EAX, EDX
	XOR EDX, EDX
	JMP loc_10093811
loc_100937C1:
	MOV ECX, EAX
	MOV EBX,DWORD PTR [ESP+arg3+0x4]
	MOV EDX,DWORD PTR [ESP+arg2+0x4]
	MOV EAX,DWORD PTR [ESP+arg1+0x4]
loc_100937CF:
	SHR ECX, 1
	RCR EBX, 1
	SHR EDX, 1
	RCR EAX, 1
	OR ECX, ECX
	JNZ loc_100937CF
	DIV EBX
	MOV ECX, EAX
	MUL DWORD PTR [ESP+arg4+0x4]
	XCHG EAX, ECX
	MUL DWORD PTR [ESP+arg3+0x4]
	ADD EDX, ECX
	JB loc_100937FA
	CMP EDX,DWORD PTR [ESP+arg2+0x4]
	JA loc_100937FA
	JB loc_10093802
	CMP EAX,DWORD PTR [ESP+arg1+0x4]
	JBE loc_10093802
loc_100937FA:
	SUB EAX,DWORD PTR [ESP+arg3+0x4]
	SBB EDX,DWORD PTR [ESP+arg4+0x4]
loc_10093802:
	SUB EAX,DWORD PTR [ESP+arg1+0x4]
	SBB EDX,DWORD PTR [ESP+arg2+0x4]
	NEG EDX
	NEG EAX
	SBB EDX, 0x00
loc_10093811:
	POP EBX
	RETN 0x0010
}
}

__declspec(naked) DWORD LEGO1_sub_10093820(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_50 = -0x50,
		var_4C = -0x4C,
		var_48 = -0x48,
		var_44 = -0x44,
		var_40 = -0x40,
		var_3C = -0x3C,
		var_38 = -0x38,
		var_34 = -0x34,
		var_30 = -0x30,
		var_2C = -0x2C,
		var_28 = -0x28,
		arg3 = 0xC,
	};

__asm{
	SUB ESP, 0x54
	PUSH EBX
	PUSH ESI
	MOV DWORD PTR [ESP+var_3C+0x5C],0x00000001
	PUSH EDI
	PUSH EBP
	LEA EBP,DWORD PTR [ESP+var_28+0x64]
	XOR EDI, EDI
	MOV WORD PTR SS:[ESP+var_50+0x62],DI
	MOV DWORD PTR [ESP+var_50+0x64],EDI
	MOV DWORD PTR [ESP+var_44+0x64],EDI
	MOV DWORD PTR [ESP+var_34+0x64],EDI
	MOV DWORD PTR [ESP+var_38+0x64],EDI
	MOV DWORD PTR [ESP+var_30+0x64],EDI
	XOR ECX, ECX
	MOV ESI,DWORD PTR [ESP+arg3+0x64]
	MOV DWORD PTR [ESP+var_2C+0x64],EDI
	MOV DWORD PTR [ESP+var_48+0x64],EDI
	MOV DWORD PTR [ESP+var_40+0x64],EDI
	MOV DWORD PTR [ESP+var_4C+0x64],ESI
loc_10093864:
	MOV AL,BYTE PTR [ESI]
	CMP AL, 0x20
	JZ loc_10093876
	CMP AL, 0x09
	JZ loc_10093876
	CMP AL, 0x0A
	JZ loc_10093876
	CMP AL, 0x0D
	JNZ_LONG(offset [LEGO1_text.m92879_loc_10093879])
loc_10093876:
	INC ESI
	JMP loc_10093864
}
}

__declspec(naked) DWORD LEGO1_sub_10093F70()
{
	enum{
		var_4 = -0x4,
		arg1217224 = 0x4A4B20,
		arg1217225 = 0x4A4B24,
		arg1217226 = 0x4A4B28,
		arg1217227 = 0x4A4B2C,
		arg1217512 = 0x4A4FA0,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX, 0xFFFFFFFF
	PUSH EBP
	XOR EDI, EDI
	PUSH 0x12
	MOV ESI, offset LEGO1_data + 0x19610
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	MOV DWORD PTR [ESP+var_4+0x18],EDI
	ADD ESP, 0x04
loc_10093F91:
	MOV EBP,DWORD PTR [ESI]
	TEST EBP, EBP
	JZ FAR loc_10094035
	LEA EAX,DWORD PTR [EBP+arg1217512-0x4A4B20]
	CMP EAX, EBP
	JBE loc_10094018
loc_10093FA5:
	TEST BYTE PTR [EBP+arg1217225-0x4A4B20],0x01
	JNZ loc_10093FF2
	CMP DWORD PTR [EBP+arg1217226-0x4A4B20],0x00
	JNZ loc_10093FD8
	PUSH 0x11
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	ADD ESP, 0x04
	CMP DWORD PTR [EBP+arg1217226-0x4A4B20],0x00
	JNZ loc_10093FCE
	LEA EAX,DWORD PTR [EBP+arg1217227-0x4A4B20]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3C0_InitializeCriticalSection])
	INC DWORD PTR [EBP+arg1217226-0x4A4B20]
loc_10093FCE:
	PUSH 0x11
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
loc_10093FD8:
	LEA EAX,DWORD PTR [EBP+arg1217227-0x4A4B20]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
	TEST BYTE PTR [EBP+arg1217225-0x4A4B20],0x01
	JZ loc_10094002
	LEA EAX,DWORD PTR [EBP+arg1217227-0x4A4B20]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
loc_10093FF2:
	ADD EBP, 0x24
	MOV EAX,DWORD PTR [ESI]
	ADD EAX, 0x00000480
	CMP EAX, EBP
	JA loc_10093FA5
	JMP loc_10094018
loc_10094002:
	MOV EAX, EBP
	MOV ECX, 0x00000024
	MOV DWORD PTR [EBP+arg1217224-0x4A4B20],0xFFFFFFFF
	SUB EAX,DWORD PTR [ESI]
	CDQ
	IDIV ECX
	LEA EBX,DWORD PTR [EAX+EDI]
loc_10094018:
	CMP EBX, -0x01
	JNZ loc_1009409A
	ADD EDI, 0x20
	ADD ESI, 0x04
	INC DWORD PTR [ESP+var_4+0x14]
	CMP ESI, offset LEGO1_data + 0x19710
	JB FAR loc_10093F91
	JMP loc_1009409A
loc_10094035:
	PUSH 0x00000480
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	TEST EAX, EAX
	JZ loc_1009409A
	MOV ECX,DWORD PTR [ESP+var_4+0x14]
	LEA EDX,DWORD PTR [EAX+0x00000480]
	ADD DWORD PTR [offset LEGO1_data + 0x19710],0x20
	LEA ESI,DWORD PTR [offset LEGO1_data + 0x19610+ECX*4]
	CMP EDX, EAX
	MOV DWORD PTR [ESI],EAX
	JBE loc_1009408A
	XOR EDX, EDX
	MOV EBX, 0x0000000A
loc_1009406B:
	MOV BYTE PTR [EAX+0x04],DL
	ADD EAX, 0x24
	MOV DWORD PTR [EAX-0x24],0xFFFFFFFF
	MOV BYTE PTR [EAX-0x1F],BL
	MOV DWORD PTR [EAX-0x1C],EDX
	MOV ECX,DWORD PTR [ESI]
	ADD ECX, 0x00000480
	CMP ECX, EAX
	JA loc_1009406B
loc_1009408A:
	MOV EBX,DWORD PTR [ESP+var_4+0x14]
	SHL EBX, 0x05
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m93250_sub_10094250])
	ADD ESP, 0x04
loc_1009409A:
	PUSH 0x12
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100940B0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg1]
	PUSH EBX
	PUSH ESI
	CMP DWORD PTR [offset LEGO1_data + 0x19710],ECX
	PUSH EDI
	JBE loc_10094135
	MOV EAX, ECX
	AND EAX, -0x19
	SAR EAX, 0x03
	LEA EDI,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	MOV EAX, ECX
	AND EAX, 0x1F
	MOV EDX,DWORD PTR [EDI]
	SHL EAX, 0x02
	LEA ESI,DWORD PTR [EAX*8+EAX]
	CMP DWORD PTR [ESI+EDX],-0x01
	JNZ loc_10094135
	CMP DWORD PTR [offset LEGO1_data + 0xCF14],0x01
	JNZ loc_10094126
	TEST ECX, ECX
	JZ loc_100940F9
	CMP ECX, 0x01
	JZ loc_10094108
	CMP ECX, 0x02
	JZ loc_10094117
	JMP loc_10094126
loc_100940F9:
	MOV EBX,DWORD PTR [ESP+arg2+0xC]
	PUSH EBX
	PUSH -0x0A
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m474_SetStdHandle])
	JMP loc_1009412A
loc_10094108:
	MOV EBX,DWORD PTR [ESP+arg2+0xC]
	PUSH EBX
	PUSH -0x0B
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m474_SetStdHandle])
	JMP loc_1009412A
loc_10094117:
	MOV EBX,DWORD PTR [ESP+arg2+0xC]
	PUSH EBX
	PUSH -0x0C
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m474_SetStdHandle])
	JMP loc_1009412A
loc_10094126:
	MOV EBX,DWORD PTR [ESP+arg2+0xC]
loc_1009412A:
	MOV EAX,DWORD PTR [EDI]
	POP EDI
	MOV DWORD PTR [ESI+EAX],EBX
	XOR EAX, EAX
	POP ESI
	POP EBX
	RET
loc_10094135:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000009
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	POP EDI
	MOV DWORD PTR [EAX], 0x00000000
	MOV EAX, 0xFFFFFFFF
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10094160(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg1]
	PUSH ESI
	PUSH EDI
	CMP DWORD PTR [offset LEGO1_data + 0x19710],ECX
	JBE loc_100941D3
	MOV EAX, ECX
	AND EAX, -0x19
	SAR EAX, 0x03
	LEA EDI,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	MOV EAX, ECX
	AND EAX, 0x1F
	SHL EAX, 0x02
	LEA ESI,DWORD PTR [EAX*8+EAX]
	MOV EAX,DWORD PTR [EDI]
	ADD EAX, ESI
	TEST BYTE PTR [EAX+0x04],0x01
	JZ loc_100941D3
	CMP DWORD PTR [EAX],-0x01
	JZ loc_100941D3
	CMP DWORD PTR [offset LEGO1_data + 0xCF14],0x01
	JNZ loc_100941C5
	TEST ECX, ECX
	JZ loc_100941AF
	CMP ECX, 0x01
	JZ loc_100941B5
	CMP ECX, 0x02
	JZ loc_100941BB
	JMP loc_100941C5
loc_100941AF:
	PUSH 0x00
	PUSH -0x0A
	JMP loc_100941BF
loc_100941B5:
	PUSH 0x00
	PUSH -0x0B
	JMP loc_100941BF
loc_100941BB:
	PUSH 0x00
	PUSH -0x0C
loc_100941BF:
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m474_SetStdHandle])
loc_100941C5:
	MOV EAX,DWORD PTR [EDI]
	POP EDI
	MOV DWORD PTR [ESI+EAX],0xFFFFFFFF
	XOR EAX, EAX
	POP ESI
	RET
loc_100941D3:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000009
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	POP EDI
	MOV DWORD PTR [EAX], 0x00000000
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10094200(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg1]
	CMP ECX,DWORD PTR [offset LEGO1_data + 0x19710]
	JNB loc_1009422E
	MOV EAX, ECX
	AND ECX, 0x1F
	SHL ECX, 0x02
	AND EAX, -0x19
	SAR EAX, 0x03
	LEA EDX,DWORD PTR [ECX*8+ECX]
	MOV EAX,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	ADD EAX, EDX
	TEST BYTE PTR [EAX+0x04],0x01
	JZ loc_1009422E
	MOV EAX,DWORD PTR [EAX]
	RET
loc_1009422E:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000009
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	MOV DWORD PTR [EAX], 0x00000000
	MOV EAX, 0xFFFFFFFF
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10094250(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH EBX
	PUSH ESI
	MOV ECX, EAX
	PUSH EDI
	AND ECX, -0x19
	SAR ECX, 0x03
	AND EAX, 0x1F
	SHL EAX, 0x02
	LEA EDI,DWORD PTR [offset LEGO1_data + 0x19610+ECX]
	LEA ESI,DWORD PTR [EAX*8+EAX]
	MOV EBX,DWORD PTR [EDI]
	ADD EBX, ESI
	CMP DWORD PTR [EBX+0x08],0x00
	JNZ loc_1009429F
	PUSH 0x11
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	ADD ESP, 0x04
	CMP DWORD PTR [EBX+0x08],0x00
	JNZ loc_10094295
	LEA EAX,DWORD PTR [EBX+0x0C]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3C0_InitializeCriticalSection])
	INC DWORD PTR [EBX+0x08]
loc_10094295:
	PUSH 0x11
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
loc_1009429F:
	MOV EAX,DWORD PTR [EDI]
	ADD EAX, ESI
	ADD EAX, 0x0C
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100942C0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg1]
	MOV EAX, ECX
	AND ECX, 0x1F
	SHL ECX, 0x02
	AND EAX, -0x19
	SAR EAX, 0x03
	LEA EDX,DWORD PTR [ECX*8+ECX]
	MOV EAX,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	ADD EAX, EDX
	ADD EAX, 0x0C
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100942F0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	CMP ESI,DWORD PTR [offset LEGO1_data + 0x19710]
	JNB loc_1009437E
	MOV EAX, ESI
	AND EAX, -0x19
	SAR EAX, 0x03
	LEA EBX,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	MOV EAX, ESI
	AND EAX, 0x1F
	MOV ECX,DWORD PTR [EBX]
	SHL EAX, 0x02
	LEA EDI,DWORD PTR [EAX*8+EAX]
	TEST BYTE PTR [EDI+ECX+0x04],0x01
	JZ loc_1009437E
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m93250_sub_10094250])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [EBX]
	TEST BYTE PTR [EDI+EAX+0x04],0x01
	JZ loc_1009435F
	PUSH ESI
	MOV EDI, 0x00000000
	CALL_LONG(offset [LEGO1_text.m93200_sub_10094200])
	ADD ESP, 0x04
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m478_FlushFileBuffers])
	TEST EAX, EAX
	JNZ loc_10094354
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B8_GetLastError])
	MOV EDI, EAX
loc_10094354:
	TEST EDI, EDI
	JZ loc_1009436F
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	MOV DWORD PTR [EAX],EDI
loc_1009435F:
	MOV EDI, 0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000009
loc_1009436F:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m932C0_sub_100942C0])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1009437E:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	POP EDI
	MOV DWORD PTR [EAX], 0x00000009
	MOV EAX, 0xFFFFFFFF
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100943A0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_14 = -0x14,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	SUB ESP, 0x1C
	XOR EAX, EAX
	MOV DWORD PTR [ESP+var_8+0x1C],EAX
	PUSH EBX
	MOV DWORD PTR [ESP+var_C+0x20],0x0000000C
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg2+0x28]
	PUSH EBP
	TEST ESI,0x00000080
	JZ loc_100943C9
	MOV BL, 0x10
	MOV DWORD PTR [ESP+var_4+0x2C],EAX
	JMP loc_100943D3
loc_100943C9:
	MOV DWORD PTR [ESP+var_4+0x2C],0x00000001
	XOR BL, BL
loc_100943D3:
	TEST ESI,0x00008000
	JNZ loc_100943F2
	TEST ESI,0x00004000
	JNZ loc_100943EF
	CMP DWORD PTR [offset LEGO1_data + 0xEB7C],0x00008000
	JZ loc_100943F2
loc_100943EF:
	OR BL, -0x80
loc_100943F2:
	MOV EAX, ESI
	AND EAX, 0x03
	JZ loc_10094426
	CMP EAX, 0x01
	JZ loc_10094430
	CMP EAX, 0x02
	JZ loc_1009443A
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000016
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	POP EBP
	MOV DWORD PTR [EAX], 0x00000000
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x1C
	RET
loc_10094426:
	MOV DWORD PTR [ESP+var_14+0x2C],0x80000000
	JMP loc_10094442
loc_10094430:
	MOV DWORD PTR [ESP+var_14+0x2C],0x40000000
	JMP loc_10094442
loc_1009443A:
	MOV DWORD PTR [ESP+var_14+0x2C],0xC0000000
loc_10094442:
	MOV EAX,DWORD PTR [ESP+arg3+0x2C]
	SUB EAX, 0x10
	CMP EAX, 0x30
	JA_LONG(offset [LEGO1_text.m9345D_loc_1009445D])
	XOR ECX, ECX
	MOV CL,BYTE PTR [offset LEGO1_text.m937C8_proc_100947C8+EAX]
	JMP_LONG(DWORD PTR [offset LEGO1_text.m937B4_proc_100947B4+ECX*4])
}
}

__declspec(naked) DWORD LEGO1_sub_100948B0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR EBX, EBX
	MOV BX,WORD PTR DS:[offset LEGO1_data + 0xDA50]
	PUSH EBP
	XOR EDI, EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x10]
	MOV DI,WORD PTR DS:[offset LEGO1_data + 0xDA4E]
	TEST ESI, ESI
	JNZ loc_100948D8
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100948D8:
	LEA EAX,DWORD PTR [ESI+0x04]
	PUSH EAX
	PUSH 0x31
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	MOV EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x08]
	PUSH EAX
	PUSH 0x32
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x0C]
	PUSH EAX
	PUSH 0x33
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x10]
	PUSH EAX
	PUSH 0x34
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x14]
	PUSH EAX
	PUSH 0x35
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x18]
	PUSH EAX
	PUSH 0x36
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	PUSH ESI
	PUSH 0x37
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x20]
	PUSH EAX
	PUSH 0x2A
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x24]
	PUSH EAX
	PUSH 0x2B
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x28]
	PUSH EAX
	PUSH 0x2C
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x2C]
	PUSH EAX
	PUSH 0x2D
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x30]
	PUSH EAX
	PUSH 0x2E
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x34]
	PUSH EAX
	PUSH 0x2F
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x1C]
	PUSH EAX
	PUSH 0x30
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x38]
	PUSH EAX
	PUSH 0x44
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x3C]
	PUSH EAX
	PUSH 0x45
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x40]
	PUSH EAX
	PUSH 0x46
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x44]
	PUSH EAX
	PUSH 0x47
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x48]
	PUSH EAX
	PUSH 0x48
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x4C]
	PUSH EAX
	PUSH 0x49
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x50]
	PUSH EAX
	PUSH 0x4A
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x54]
	PUSH EAX
	PUSH 0x4B
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x58]
	PUSH EAX
	PUSH 0x4C
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x5C]
	PUSH EAX
	PUSH 0x4D
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x60]
	PUSH EAX
	PUSH 0x4E
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x64]
	PUSH EAX
	PUSH 0x4F
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x68]
	PUSH EAX
	PUSH 0x38
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x6C]
	PUSH EAX
	PUSH 0x39
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x70]
	PUSH EAX
	PUSH 0x3A
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x74]
	PUSH EAX
	PUSH 0x3B
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x78]
	PUSH EAX
	PUSH 0x3C
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x7C]
	PUSH EAX
	PUSH 0x3D
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x00000080]
	PUSH EAX
	PUSH 0x3E
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x00000084]
	PUSH EAX
	PUSH 0x3F
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x00000088]
	PUSH EAX
	PUSH 0x40
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x0000008C]
	PUSH EAX
	PUSH 0x41
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x00000090]
	PUSH EAX
	PUSH 0x42
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x00000094]
	PUSH EAX
	PUSH 0x43
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x00000098]
	PUSH EAX
	PUSH 0x28
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x0000009C]
	PUSH EAX
	PUSH 0x29
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x000000A0]
	PUSH EAX
	PUSH 0x1F
	PUSH EBX
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	LEA EAX,DWORD PTR [ESI+0x000000A4]
	PUSH EAX
	PUSH 0x20
	PUSH EBX
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBP, EAX
	PUSH ESI
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m93E70_sub_10094E70])
	ADD ESP, 0x08
	OR EBP, EAX
	MOV EAX, EBP
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10094C30(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x4]
	TEST ESI, ESI
	JZ FAR loc_10094E61
	MOV EAX,DWORD PTR [ESI+0x04]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x08]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x0C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x10]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x14]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x18]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x24]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x28]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x2C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x30]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x34]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x1C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x38]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x3C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x40]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x44]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x48]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x4C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x50]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x54]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x58]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x5C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x60]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x64]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x68]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x6C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x70]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x74]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x78]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x7C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x00000080]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x00000084]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x00000088]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x0000008C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x00000090]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x00000094]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x00000098]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x0000009C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x000000A0]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x000000A4]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x000000A8]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_10094E61:
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10094E70(DWORD arg1, DWORD arg2)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x0C
	LEA EAX,DWORD PTR [ESP+var_4+0xC]
	PUSH ESI
	MOV DWORD PTR [ESP+var_4+0x10],0x00000000
	MOV DWORD PTR [ESP+var_8+0x10],0x00000000
	PUSH EDI
	PUSH EAX
	MOV EDI,DWORD PTR [ESP+arg1+0x18]
	PUSH 0x23
	PUSH EDI
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	MOV ESI, EAX
	LEA EAX,DWORD PTR [ESP+var_8+0x14]
	PUSH EAX
	PUSH 0x25
	PUSH EDI
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR ESI, EAX
	LEA EAX,DWORD PTR [ESP+var_C+0x14]
	PUSH EAX
	PUSH 0x1E
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR ESI, EAX
	JZ loc_10094ECF
	MOV EAX, ESI
	POP EDI
	POP ESI
	ADD ESP, 0x0C
	RET
loc_10094ECF:
	MOV EDI,DWORD PTR [ESP+arg2+0x14]
	PUSH 0x0D
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV EDX, EAX
	MOV DWORD PTR [EDI+0x000000A8],EAX
	CMP DWORD PTR [ESP+var_4+0x14],0x00
	JZ loc_10094EFC
	MOV BYTE PTR [EDX],0x48
	INC EDX
	CMP DWORD PTR [ESP+var_8+0x14],0x00
	JZ loc_10094F0B
	MOV BYTE PTR [EDX],0x48
	JMP loc_10094F0A
loc_10094EFC:
	MOV BYTE PTR [EDX],0x68
	INC EDX
	CMP DWORD PTR [ESP+var_8+0x14],0x00
	JZ loc_10094F0B
	MOV BYTE PTR [EDX],0x68
loc_10094F0A:
	INC EDX
loc_10094F0B:
	MOV EAX,DWORD PTR [ESP+var_C+0x14]
	CMP BYTE PTR [EAX],0x00
	JZ loc_10094F1F
loc_10094F14:
	MOV CL,BYTE PTR [EAX]
	INC EAX
	MOV BYTE PTR [EDX],CL
	INC EDX
	CMP BYTE PTR [EAX],0x00
	JNZ loc_10094F14
loc_10094F1F:
	MOV BYTE PTR [EDX],0x6D
	INC EDX
	CMP DWORD PTR [ESP+var_8+0x14],0x00
	JZ loc_10094F2E
	MOV BYTE PTR [EDX],0x6D
	INC EDX
loc_10094F2E:
	MOV EAX,DWORD PTR [ESP+var_C+0x14]
	CMP BYTE PTR [EAX],0x00
	JZ loc_10094F42
loc_10094F37:
	MOV CL,BYTE PTR [EAX]
	INC EAX
	MOV BYTE PTR [EDX],CL
	INC EDX
	CMP BYTE PTR [EAX],0x00
	JNZ loc_10094F37
loc_10094F42:
	MOV BYTE PTR [EDX],0x73
	MOV BYTE PTR [EDX+0x01],0x73
	INC EDX
	MOV BYTE PTR [EDX+0x01],0x00
	MOV EAX,DWORD PTR [ESP+var_C+0x14]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX, ESI
	POP EDI
	POP ESI
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10095190(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg1]
	PUSH EBX
	CMP BYTE PTR [EDX],0x00
	JZ loc_100951D1
loc_1009519A:
	MOV AL,BYTE PTR [EDX]
	CMP AL, 0x30
	JL loc_100951B0
	CMP AL, 0x39
	JG loc_100951B0
	SUB AL, 0x30
	MOV BYTE PTR [EDX],AL
	INC EDX
	CMP BYTE PTR [EDX],0x00
	JNZ loc_1009519A
	POP EBX
	RET
loc_100951B0:
	CMP AL, 0x3B
	JNZ loc_100951CB
	MOV EAX, EDX
loc_100951B6:
	LEA ECX,DWORD PTR [EAX+0x01]
	MOV BL,BYTE PTR [ECX]
	MOV BYTE PTR [EAX],BL
	MOV EAX, ECX
	CMP BYTE PTR [ECX],0x00
	JNZ loc_100951B6
	CMP BYTE PTR [EDX],0x00
	JNZ loc_1009519A
	POP EBX
	RET
loc_100951CB:
	INC EDX
	CMP BYTE PTR [EDX],0x00
	JNZ loc_1009519A
loc_100951D1:
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100952D0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
		arg1217224 = 0x4A4B20,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	PUSH EBP
	XOR EDI, EDI
	MOV DI,WORD PTR DS:[offset LEGO1_data + 0xDA44]
	TEST ESI, ESI
	JNZ loc_100952EF
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100952EF:
	LEA EAX,DWORD PTR [ESI+0x0C]
	PUSH EAX
	PUSH 0x15
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	MOV EBX, EAX
	LEA EAX,DWORD PTR [ESI+0x10]
	PUSH EAX
	PUSH 0x14
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBX, EAX
	LEA EAX,DWORD PTR [ESI+0x14]
	PUSH EAX
	PUSH 0x16
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBX, EAX
	LEA EAX,DWORD PTR [ESI+0x18]
	PUSH EAX
	PUSH 0x17
	PUSH EDI
	LEA EBP,DWORD PTR [ESI+0x1C]
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBX, EAX
	PUSH EBP
	PUSH 0x18
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBX, EAX
	MOV EAX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m94420_sub_10095420])
	ADD ESP, 0x04
	LEA EAX,DWORD PTR [ESI+0x20]
	PUSH EAX
	PUSH 0x50
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBX, EAX
	LEA EAX,DWORD PTR [ESI+0x24]
	PUSH EAX
	PUSH 0x51
	PUSH EDI
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBX, EAX
	LEA EAX,DWORD PTR [ESI+0x28]
	PUSH EAX
	PUSH 0x1A
	PUSH EDI
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBX, EAX
	LEA EAX,DWORD PTR [ESI+0x29]
	PUSH EAX
	PUSH 0x19
	PUSH EDI
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBX, EAX
	LEA EAX,DWORD PTR [ESI+0x2A]
	PUSH EAX
	PUSH 0x54
	PUSH EDI
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBX, EAX
	LEA EAX,DWORD PTR [ESI+0x2B]
	PUSH EAX
	PUSH 0x55
	PUSH EDI
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBX, EAX
	LEA EAX,DWORD PTR [ESI+0x2C]
	PUSH EAX
	PUSH 0x56
	PUSH EDI
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBX, EAX
	LEA EAX,DWORD PTR [ESI+0x2D]
	PUSH EAX
	PUSH 0x57
	PUSH EDI
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBX, EAX
	LEA EAX,DWORD PTR [ESI+0x2E]
	PUSH EAX
	PUSH 0x52
	PUSH EDI
	ADD ESI, 0x2F
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBX, EAX
	PUSH ESI
	PUSH 0x53
	PUSH EDI
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m96600_sub_10097600])
	ADD ESP, 0x10
	OR EBX, EAX
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10095420(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg1]
	PUSH EBX
	CMP BYTE PTR [EDX],0x00
	JZ loc_10095461
loc_1009542A:
	MOV AL,BYTE PTR [EDX]
	CMP AL, 0x30
	JL loc_10095440
	CMP AL, 0x39
	JG loc_10095440
	SUB AL, 0x30
	MOV BYTE PTR [EDX],AL
	INC EDX
	CMP BYTE PTR [EDX],0x00
	JNZ loc_1009542A
	POP EBX
	RET
loc_10095440:
	CMP AL, 0x3B
	JNZ loc_1009545B
	MOV EAX, EDX
loc_10095446:
	LEA ECX,DWORD PTR [EAX+0x01]
	MOV BL,BYTE PTR [ECX]
	MOV BYTE PTR [EAX],BL
	MOV EAX, ECX
	CMP BYTE PTR [ECX],0x00
	JNZ loc_10095446
	CMP BYTE PTR [EDX],0x00
	JNZ loc_1009542A
	POP EBX
	RET
loc_1009545B:
	INC EDX
	CMP BYTE PTR [EDX],0x00
	JNZ loc_1009542A
loc_10095461:
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10095470(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x4]
	TEST ESI, ESI
	JZ loc_100954D4
	MOV EAX,DWORD PTR [ESI+0x0C]
	CMP EAX, offset LEGO1_data + 0xEC3C
	JZ loc_100954D4
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x10]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x14]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x18]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x1C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x24]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_100954D4:
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10095820(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR ESI, ESI
	CMP DWORD PTR [offset LEGO1_data + 0xD73C],ESI
	JNZ loc_10095843
	MOV EBX,DWORD PTR [ESP+arg2+0xC]
	MOV EDI,DWORD PTR [ESP+arg1+0xC]
	PUSH EBX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m96AD0_sub_10097AD0])
	ADD ESP, 0x08
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10095843:
	PUSH 0x19
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	MOV EDI,DWORD PTR [ESP+arg1+0x10]
	MOV EBX,DWORD PTR [ESP+arg2+0x10]
	ADD ESP, 0x04
loc_10095855:
	XOR EAX, EAX
	XOR ECX, ECX
	MOV AL,BYTE PTR [EDI]
	MOV CL, AL
	TEST BYTE PTR [offset LEGO1_data + 0xD639+ECX],0x04
	JZ loc_10095886
	MOV CL,BYTE PTR [EDI+0x01]
	INC EDI
	TEST CL, CL
	JZ loc_10095880
	SHL EAX, 0x08
	XOR EDX, EDX
	MOV DL, CL
	OR EDX, EAX
	CMP EDX, EBX
	JNZ loc_1009588C
	LEA ESI,DWORD PTR [EDI-0x01]
	JMP loc_1009588C
loc_10095880:
	TEST ESI, ESI
	JNZ loc_1009588C
	JMP loc_1009588A
loc_10095886:
	CMP EAX, EBX
	JNZ loc_1009588C
loc_1009588A:
	MOV ESI, EDI
loc_1009588C:
	MOV EAX, EDI
	INC EDI
	CMP BYTE PTR [EAX],0x00
	JNZ loc_10095855
	PUSH 0x19
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	MOV EAX, ESI
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100958B0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	CMP DWORD PTR [offset LEGO1_data + 0xD73C],0x00
	PUSH EBX
	PUSH ESI
	PUSH EDI
	JNZ loc_100958D2
	MOV EDI,DWORD PTR [ESP+arg2+0xC]
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
	PUSH EDI
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m96B10_sub_10097B10])
	ADD ESP, 0x08
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100958D2:
	PUSH 0x19
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	MOV ESI,DWORD PTR [ESP+arg1+0x10]
	MOV EDI,DWORD PTR [ESP+arg2+0x10]
	ADD ESP, 0x04
	MOVZX EBX,BYTE PTR DS:[ESI]
	TEST BX, BX
	JZ loc_1009594B
	MOV EDX, 0x00000004
loc_100958F2:
	XOR EAX, EAX
	MOV AL, BL
	TEST BYTE PTR [offset LEGO1_data + 0xD639+EAX],DL
	JZ loc_10095927
	MOV AL,BYTE PTR [ESI+0x01]
	INC ESI
	TEST AL, AL
	JZ loc_1009593B
	MOVZX EBX,BX
	SHL EBX, 0x08
	XOR ECX, ECX
	MOV CL, AL
	OR EBX, ECX
	CMP EBX, EDI
	JNZ loc_1009592E
	PUSH 0x19
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	LEA EAX,DWORD PTR [ESI-0x01]
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10095927:
	MOVZX EAX,BX
	CMP EAX, EDI
	JZ loc_1009594B
loc_1009592E:
	MOVZX EBX,BYTE PTR DS:[ESI+0x01]
	INC ESI
	TEST BX, BX
	JNZ loc_100958F2
	JMP loc_1009594B
loc_1009593B:
	PUSH 0x19
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1009594B:
	PUSH 0x19
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	MOVZX EAX,BX
	ADD ESP, 0x04
	SUB EAX, EDI
	CMP EAX, 0x01
	POP EDI
	SBB EAX, EAX
	AND EAX, ESI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10095970(DWORD arg1)
{
	enum{
		var_60 = -0x60,
		var_5C = -0x5C,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x64
	XOR EAX, EAX
	MOV DWORD PTR [ESP+var_5C+0x64],EAX
	PUSH EBX
	MOV BYTE PTR [ESP+var_60+0x67],AL
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x6C]
	PUSH EDI
	PUSH EBP
	CMP ESI, 0x04
	JA loc_10095991
	JMP_LONG(DWORD PTR [offset LEGO1_text.m94BD0_proc_10095BD0+ESI*4])
loc_10095991:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000016
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	POP EBP
	MOV DWORD PTR [EAX], 0x00000000
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x64
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10095BF0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg1217224 = 0x4A4B20,
	};

__asm{
	SUB ESP, 0x0C
	PUSH EBX
	PUSH ESI
	MOV EBX,DWORD PTR [ESP+arg1+0x14]
	PUSH EDI
	PUSH EBP
	MOV EDX, EBX
	MOV ESI, 0x00000002
	CMP DWORD PTR [EBX],0x00
	JZ loc_10095C26
loc_10095C07:
	CMP ESI, 0x00007FFF
	JA loc_10095C26
	MOV EDI,DWORD PTR [EDX]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	ADD ESI, ECX
	ADD EDX, 0x04
	CMP DWORD PTR [EDX],0x00
	JNZ loc_10095C07
loc_10095C26:
	MOV DWORD PTR [ESP+var_4+0x1C],ESI
	CMP ESI, 0x00007FFF
	JB loc_10095C5F
	MOV ECX,DWORD PTR [ESP+arg4+0x1C]
	MOV DWORD PTR [ECX], 0x00000000
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000007
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	POP EBP
	MOV DWORD PTR [EAX], 0x0000000A
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_10095C5F:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	MOV ECX,DWORD PTR [ESP+arg3+0x20]
	ADD ESP, 0x04
	TEST EAX, EAX
	MOV DWORD PTR [ECX],EAX
	JNZ loc_10095C9F
	MOV ECX,DWORD PTR [ESP+arg4+0x1C]
	MOV DWORD PTR [ECX], 0x00000000
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x0000000C
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	POP EBP
	MOV DWORD PTR [EAX], 0x00000008
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_10095C9F:
	MOV EBP,DWORD PTR [ESP+arg2+0x1C]
	TEST EBP, EBP
	JZ loc_10095CD7
	MOV EDX, EBP
	MOV ESI, 0x00000002
	CMP DWORD PTR [EBP+arg1217224-0x4A4B20],0x00
	JZ loc_10095CD3
loc_10095CB4:
	CMP ESI, 0x00007FFF
	JA loc_10095CD3
	MOV EDI,DWORD PTR [EDX]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	ADD ESI, ECX
	ADD EDX, 0x04
	CMP DWORD PTR [EDX],0x00
	JNZ loc_10095CB4
loc_10095CD3:
	TEST EBP, EBP
	JNZ loc_10095CF7
loc_10095CD7:
	MOV ECX,DWORD PTR [ESP+arg4+0x1C]
	MOV DWORD PTR [ECX], 0x00000000
loc_10095CE1:
	MOV ECX,DWORD PTR [ESP+arg3+0x1C]
	MOV EDI,DWORD PTR [EBX]
	TEST EDI, EDI
	MOV EDX,DWORD PTR [ECX]
	JNZ FAR loc_10095E67
	INC EDX
	JMP FAR loc_10095E98
loc_10095CF7:
	CMP DWORD PTR [offset LEGO1_data + 0xCF04],0x00
	JNZ loc_10095D1B
	CALL_LONG(offset [LEGO1_text.m90D40_sub_10091D40])
	MOV DWORD PTR [offset LEGO1_data + 0xCF04], EAX
	TEST EAX, EAX
	JNZ loc_10095D1B
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_10095D1B:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xCF04]
	MOV DWORD PTR [ESP+var_C+0x1C],0x00000000
	CMP BYTE PTR [EAX],0x00
	JZ loc_10095D5A
loc_10095D2D:
	MOV EDI,DWORD PTR [offset LEGO1_data + 0xCF04]
	ADD EDI,DWORD PTR [ESP+var_C+0x1C]
	CMP BYTE PTR [EDI],0x3D
	JZ loc_10095D5A
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xCF04]
	ADD DWORD PTR [ESP+var_C+0x1C],ECX
	MOV ECX,DWORD PTR [ESP+var_C+0x1C]
	CMP BYTE PTR [ECX+EAX],0x00
	JNZ loc_10095D2D
loc_10095D5A:
	MOV EDI,DWORD PTR [ESP+var_C+0x1C]
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xCF04]
	MOV DWORD PTR [ESP+var_8+0x1C],EDI
	CMP BYTE PTR [EDI+EAX],0x3D
	JNZ loc_10095DB0
	XOR EDX, EDX
loc_10095D6F:
	MOV EDI,DWORD PTR [ESP+var_8+0x1C]
	ADD EDI,DWORD PTR [offset LEGO1_data + 0xCF04]
	CMP BYTE PTR [EDI+0x01],DL
	JZ loc_10095DB0
	CMP BYTE PTR [EDI+0x02],0x3A
	JNZ loc_10095DB0
	CMP BYTE PTR [EDI+0x03],0x3D
	JNZ loc_10095DB0
	ADD EDI, 0x04
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	MOV EDI,DWORD PTR [ESP+var_8+0x1C]
	NOT ECX
	LEA EAX,DWORD PTR [EDI+ECX+0x04]
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xCF04]
	MOV DWORD PTR [ESP+var_8+0x1C],EAX
	CMP BYTE PTR [EAX+ECX],0x3D
	JZ loc_10095D6F
loc_10095DB0:
	SUB ESI,DWORD PTR [ESP+var_C+0x1C]
	MOV EDI,DWORD PTR [ESP+arg5+0x1C]
	ADD ESI,DWORD PTR [ESP+var_8+0x1C]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	MOV EAX,DWORD PTR [ESP+var_4+0x1C]
	NOT ECX
	LEA EAX,DWORD PTR [EAX+ECX-0x01]
	ADD EAX, ESI
	CMP EAX, 0x00007FFE
	JBE loc_10095E14
	MOV ECX,DWORD PTR [ESP+arg3+0x1C]
	MOV EAX,DWORD PTR [ECX]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	MOV ECX,DWORD PTR [ESP+arg3+0x20]
	ADD ESP, 0x04
	MOV DWORD PTR [ECX], 0x00000000
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000007
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	POP EBP
	MOV DWORD PTR [EAX], 0x0000000A
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_10095E14:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	MOV ECX,DWORD PTR [ESP+arg4+0x20]
	ADD ESP, 0x04
	TEST EAX, EAX
	MOV DWORD PTR [ECX],EAX
	JNZ FAR loc_10095CE1
	MOV ECX,DWORD PTR [ESP+arg3+0x1C]
	MOV EAX,DWORD PTR [ECX]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	MOV ECX,DWORD PTR [ESP+arg3+0x20]
	ADD ESP, 0x04
	MOV DWORD PTR [ECX], 0x00000000
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x0000000C
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	POP EBP
	MOV DWORD PTR [EAX], 0x00000008
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_10095E67:
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI, EDX
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	MOV EDI,DWORD PTR [EBX]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	ADD EDX, ECX
	ADD EBX, 0x04
loc_10095E98:
	CMP DWORD PTR [EBX],0x00
	JZ loc_10095EDB
loc_10095E9D:
	MOV EDI,DWORD PTR [EBX]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI, EDX
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	MOV EDI,DWORD PTR [EBX]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	ADD EBX, 0x04
	LEA EDX,DWORD PTR [EDX+ECX-0x01]
	MOV BYTE PTR [EDX],0x20
	INC EDX
	CMP DWORD PTR [EBX],0x00
	JNZ loc_10095E9D
loc_10095EDB:
	MOV ECX,DWORD PTR [ESP+arg4+0x1C]
	TEST EBP, EBP
	MOV BYTE PTR [EDX-0x01],0x00
	MOV BYTE PTR [EDX],0x00
	MOV EDX,DWORD PTR [ECX]
	JZ loc_10095F51
	MOV EAX,DWORD PTR [ESP+var_8+0x1C]
	MOV ESI,DWORD PTR [offset LEGO1_data + 0xCF04]
	SUB EAX,DWORD PTR [ESP+var_C+0x1C]
	MOV EDI, EDX
	ADD ESI,DWORD PTR [ESP+var_C+0x1C]
	MOV ECX, EAX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EAX
	ADD EDX, EAX
	AND ECX, 0x03
	REP MOVSB
	CMP DWORD PTR [EBP+arg1217224-0x4A4B20],0x00
	JZ loc_10095F51
loc_10095F16:
	MOV EDI,DWORD PTR [EBP+arg1217224-0x4A4B20]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI, EDX
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	MOV EDI,DWORD PTR [EBP+arg1217224-0x4A4B20]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	ADD EDX, ECX
	ADD EBP, 0x04
	CMP DWORD PTR [EBP+arg1217224-0x4A4B20],0x00
	JNZ loc_10095F16
loc_10095F51:
	TEST EDX, EDX
	JZ loc_10095F64
	MOV ECX,DWORD PTR [ESP+arg4+0x1C]
	CMP DWORD PTR [ECX],EDX
	JNZ loc_10095F61
	MOV BYTE PTR [EDX],0x00
	INC EDX
loc_10095F61:
	MOV BYTE PTR [EDX],0x00
loc_10095F64:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xCF04]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	XOR EAX, EAX
	MOV DWORD PTR [offset LEGO1_data + 0xCF04],0x00000000
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10095F90(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	CMP DWORD PTR [offset LEGO1_data + 0x195FC],0x00
	PUSH ESI
	PUSH EDI
	JZ loc_10095FAC
	PUSH 0x13
	MOV ESI, 0x00000001
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	ADD ESP, 0x04
	JMP loc_10095FB4
loc_10095FAC:
	XOR ESI, ESI
	INC DWORD PTR [offset LEGO1_data + 0x19600]
loc_10095FB4:
	MOV EAX,DWORD PTR [ESP+arg3+0x8]
	MOV ECX,DWORD PTR [ESP+arg2+0x8]
	MOV EDX,DWORD PTR [ESP+arg1+0x8]
	PUSH EAX
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m94FF0_sub_10095FF0])
	ADD ESP, 0x0C
	MOV EDI, EAX
	TEST ESI, ESI
	JZ loc_10095FE0
	PUSH 0x13
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EDI
	POP ESI
	RET
loc_10095FE0:
	MOV EAX, EDI
	DEC DWORD PTR [offset LEGO1_data + 0x19600]
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10095FF0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg2+0x8]
	TEST ESI, ESI
	JZ FAR loc_100960F0
	MOV EDI,DWORD PTR [ESP+arg3+0x8]
	TEST EDI, EDI
	JZ FAR loc_100960F0
	MOV AL,BYTE PTR [ESI]
	TEST AL, AL
	JNZ loc_10096022
	MOV ECX,DWORD PTR [ESP+arg1+0x8]
	TEST ECX, ECX
	JZ loc_1009601D
	MOV WORD PTR DS:[ECX],0x0000
loc_1009601D:
	XOR EAX, EAX
	POP EDI
	POP ESI
	RET
loc_10096022:
	CMP DWORD PTR [offset LEGO1_data + 0xD480],0x00
	JNZ loc_10096042
	MOV ECX,DWORD PTR [ESP+arg1+0x8]
	TEST ECX, ECX
	JZ loc_1009603A
	MOVZX AX,AL
	MOV WORD PTR DS:[ECX],AX
loc_1009603A:
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	RET
loc_10096042:
	XOR ECX, ECX
	MOV CL, AL
	MOV EAX, DWORD PTR [offset LEGO1_data.mCFF0_ptr]
	TEST BYTE PTR [ECX*2+EAX+0x01],0x80
	JZ loc_100960B3
	CMP DWORD PTR [offset LEGO1_data + 0xD1FC],0x01
	JLE loc_1009608A
	CMP EDI,DWORD PTR [offset LEGO1_data + 0xD1FC]
	JL loc_10096090
	MOV ECX,DWORD PTR [ESP+arg1+0x8]
	CMP ECX, 0x01
	SBB EAX, EAX
	INC EAX
	MOV EDX,DWORD PTR [offset LEGO1_data + 0xD490]
	PUSH EAX
	PUSH ECX
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xD1FC]
	PUSH ECX
	PUSH ESI
	PUSH 0x09
	PUSH EDX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m424_MultiByteToWideChar])
	TEST EAX, EAX
	JNZ loc_10096098
loc_1009608A:
	CMP EDI,DWORD PTR [offset LEGO1_data + 0xD1FC]
loc_10096090:
	JB loc_100960A0
	CMP BYTE PTR [ESI+0x01],0x00
	JZ loc_100960A0
loc_10096098:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xD1FC]
	POP EDI
	POP ESI
	RET
loc_100960A0:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	POP EDI
	MOV DWORD PTR [EAX], 0x0000002A
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RET
loc_100960B3:
	MOV ECX,DWORD PTR [ESP+arg1+0x8]
	CMP ECX, 0x01
	SBB EAX, EAX
	INC EAX
	PUSH EAX
	PUSH ECX
	PUSH 0x01
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xD490]
	PUSH ESI
	PUSH 0x09
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m424_MultiByteToWideChar])
	TEST EAX, EAX
	JNZ loc_100960E8
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	POP EDI
	MOV DWORD PTR [EAX], 0x0000002A
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RET
loc_100960E8:
	MOV EAX, 0x00000001
	POP EDI
	POP ESI
	RET
loc_100960F0:
	XOR EAX, EAX
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10096100(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV EBX,DWORD PTR [ESP+arg1+0x8]
	CMP EBX, -0x01
	JZ loc_10096180
	MOV ESI,DWORD PTR [ESP+arg2+0x8]
	MOV EAX,DWORD PTR [ESI+0x0C]
	TEST AL, 0x01
	JNZ loc_1009611E
	TEST AL, 0x80
	JZ loc_10096180
	TEST AL, 0x02
	JNZ loc_10096180
loc_1009611E:
	CMP DWORD PTR [ESI+0x08],0x00
	JNZ loc_1009612D
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m925B0_sub_100935B0])
	ADD ESP, 0x04
loc_1009612D:
	MOV EAX,DWORD PTR [ESI]
	CMP DWORD PTR [ESI+0x08],EAX
	JNZ loc_10096145
	CMP DWORD PTR [ESI+0x04],0x00
	JZ loc_10096142
	MOV EAX, 0xFFFFFFFF
	POP ESI
	POP EBX
	RET
loc_10096142:
	INC EAX
	MOV DWORD PTR [ESI],EAX
loc_10096145:
	TEST BYTE PTR [ESI+0x0C],0x40
	MOV EAX,DWORD PTR [ESI]
	JZ loc_1009615F
	DEC EAX
	MOV DWORD PTR [ESI],EAX
	CMP BYTE PTR [EAX],BL
	JZ loc_10096164
	INC EAX
	MOV DWORD PTR [ESI],EAX
	MOV EAX, 0xFFFFFFFF
	POP ESI
	POP EBX
	RET
loc_1009615F:
	DEC EAX
	MOV DWORD PTR [ESI],EAX
	MOV BYTE PTR [EAX],BL
loc_10096164:
	INC DWORD PTR [ESI+0x04]
	MOV EAX,DWORD PTR [ESI+0x0C]
	AND EAX, -0x11
	MOV DWORD PTR [ESI+0x0C],EAX
	OR EAX, 0x01
	MOV DWORD PTR [ESI+0x0C],EAX
	MOV EAX, EBX
	AND EAX, 0x000000FF
	POP ESI
	POP EBX
	RET
loc_10096180:
	MOV EAX, 0xFFFFFFFF
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10096190()
{
__asm{
	CMP DWORD PTR [offset LEGO1_data + 0xEA60],0x00
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	JNZ_LONG(offset [LEGO1_text.m95209_loc_10096209])
	MOV ESI, offset [LEGO1_data.mE250_ptr]
	JMP_LONG(offset [LEGO1_text.m951A2_loc_100961A2])
}
}

__declspec(naked) DWORD LEGO1_sub_10096300()
{
	enum{
		var_4 = -0x4,
		r = 0x0,
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR ESI, ESI
	CMP DWORD PTR [offset LEGO1_data + 0xEA70],ESI
	JNZ loc_1009634F
	PUSH offset [LEGO1_rdata.m7468_str]
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m484_LoadLibraryA])
	MOV EBX, EAX
	TEST EBX, EBX
	JZ loc_1009638C
	PUSH offset [LEGO1_rdata.m745C_str]
	MOV EDI,DWORD PTR [offset LEGO1_idata.m414_GetProcAddress]
	PUSH EBX
	CALL_LONG(EDI)
	MOV DWORD PTR [offset LEGO1_data + 0xEA70], EAX
	TEST EAX, EAX
	JZ loc_1009638C
	PUSH offset [LEGO1_rdata.m744C_str]
	PUSH EBX
	CALL_LONG(EDI)
	PUSH offset [LEGO1_rdata.m7438_str]
	MOV DWORD PTR [offset LEGO1_data + 0xEA74], EAX
	PUSH EBX
	CALL_LONG(EDI)
	MOV DWORD PTR [offset LEGO1_data + 0xEA78], EAX
loc_1009634F:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xEA74]
	TEST EAX, EAX
	JZ loc_1009635C
	CALL_LONG(EAX)
	MOV ESI, EAX
loc_1009635C:
	TEST ESI, ESI
	JZ loc_10096372
	CMP DWORD PTR [offset LEGO1_data + 0xEA78],0x00
	JZ loc_10096372
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_data + 0xEA78])
	MOV ESI, EAX
loc_10096372:
	MOV EAX,DWORD PTR [ESP+arg1+0x14]
	MOV ECX,DWORD PTR [ESP+r+0x14]
	MOV EDX,DWORD PTR [ESP+var_4+0x14]
	PUSH EAX
	PUSH ECX
	PUSH EDX
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_data + 0xEA70])
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1009638C:
	XOR EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100963A0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8AD90_sub_1008BD90])
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x19720]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m89300_sub_1008A300])
	ADD ESP, 0x04
	MOV ECX,DWORD PTR [offset LEGO1_data + 0x1971C]
	SUB ECX,DWORD PTR [offset LEGO1_data + 0x19720]
	ADD ECX, 0x04
	CMP EAX, ECX
	JNB loc_10096411
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x19720]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m89300_sub_1008A300])
	ADD ESP, 0x04
	ADD EAX, 0x10
	MOV ECX,DWORD PTR [offset LEGO1_data + 0x19720]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m89160_sub_1008A160])
	ADD ESP, 0x08
	TEST EAX, EAX
	JNZ loc_100963F5
	CALL_LONG(offset [LEGO1_text.m8ADA0_sub_1008BDA0])
	XOR EAX, EAX
	POP ESI
	RET
loc_100963F5:
	MOV ECX,DWORD PTR [offset LEGO1_data + 0x1971C]
	SUB ECX,DWORD PTR [offset LEGO1_data + 0x19720]
	AND ECX, -0x04
	MOV DWORD PTR [offset LEGO1_data + 0x19720], EAX
	ADD ECX, EAX
	MOV DWORD PTR [offset LEGO1_data + 0x1971C],ECX
loc_10096411:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x1971C]
	MOV ESI,DWORD PTR [ESP+arg1+0x4]
	MOV DWORD PTR [EAX],ESI
	ADD DWORD PTR [offset LEGO1_data + 0x1971C],0x04
	CALL_LONG(offset [LEGO1_text.m8ADA0_sub_1008BDA0])
	MOV EAX, ESI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10096430(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m953A0_sub_100963A0])
	ADD ESP, 0x04
	CMP EAX, 0x01
	SBB EAX, EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10096490(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH ESI
	XOR EAX, EAX
	MOV EDX,DWORD PTR [ESP+arg2+0x4]
	MOV ECX,DWORD PTR [ESP+arg1+0x4]
	LEA ESI,DWORD PTR [EDX+ECX]
	CMP ECX, ESI
	JA loc_100964A6
	CMP EDX, ESI
	JBE loc_100964AB
loc_100964A6:
	MOV EAX, 0x00000001
loc_100964AB:
	MOV ECX,DWORD PTR [ESP+arg3+0x4]
	MOV DWORD PTR [ECX],ESI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100964C0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	MOV EDI,DWORD PTR [ESP+arg2+0x8]
	PUSH ESI
	MOV EAX,DWORD PTR [EDI]
	PUSH EAX
	MOV ECX,DWORD PTR [ESI]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m95490_sub_10096490])
	ADD ESP, 0x0C
	TEST EAX, EAX
	JZ loc_100964F5
	LEA EAX,DWORD PTR [ESI+0x04]
	PUSH EAX
	PUSH 0x01
	MOV ECX,DWORD PTR [EAX]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m95490_sub_10096490])
	ADD ESP, 0x0C
	TEST EAX, EAX
	JZ loc_100964F5
	INC DWORD PTR [ESI+0x08]
loc_100964F5:
	LEA EAX,DWORD PTR [ESI+0x04]
	MOV ECX,DWORD PTR [EDI+0x04]
	PUSH EAX
	PUSH ECX
	MOV EDX,DWORD PTR [EAX]
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m95490_sub_10096490])
	ADD ESP, 0x0C
	TEST EAX, EAX
	JZ loc_1009650F
	INC DWORD PTR [ESI+0x08]
loc_1009650F:
	MOV ECX,DWORD PTR [ESI+0x08]
	ADD ESI, 0x08
	PUSH ESI
	MOV EAX,DWORD PTR [EDI+0x08]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m95490_sub_10096490])
	ADD ESP, 0x0C
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10096530(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg1]
	PUSH ESI
	PUSH EDI
	MOV EAX,DWORD PTR [EDX]
	MOV EDI, EAX
	MOV ECX,DWORD PTR [EDX+0x04]
	AND EDI, 0x80000000
	MOV ESI, ECX
	SHR EDI, 0x1F
	AND ESI, 0x80000000
	SHR ESI, 0x1F
	ADD EAX, EAX
	MOV DWORD PTR [EDX],EAX
	LEA EAX,DWORD PTR [ECX*2+0x00000000]
	OR EAX, EDI
	POP EDI
	MOV DWORD PTR [EDX+0x04],EAX
	MOV EAX,DWORD PTR [EDX+0x08]
	ADD EAX, EAX
	OR EAX, ESI
	POP ESI
	MOV DWORD PTR [EDX+0x08],EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10096570(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	MOV ECX,DWORD PTR [ESI+0x08]
	MOV EAX,DWORD PTR [ESI+0x04]
	MOV EDX, ECX
	MOV EDI, EAX
	SHR ECX, 0x01
	AND EDX, 0x01
	SHL EDX, 0x1F
	AND EDI, 0x01
	SHL EDI, 0x1F
	MOV DWORD PTR [ESI+0x08],ECX
	SHR EAX, 0x01
	OR EAX, EDX
	MOV DWORD PTR [ESI+0x04],EAX
	MOV EAX,DWORD PTR [ESI]
	SHR EAX, 0x01
	OR EAX, EDI
	POP EDI
	MOV DWORD PTR [ESI],EAX
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100965B0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg1217224 = 0x4A4B20,
	};

__asm{
	SUB ESP, 0x0C
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg3+0x14]
	PUSH EDI
	MOV DI, 0x404E
	PUSH EBP
	MOV EBX,DWORD PTR [ESP+arg2+0x1C]
	MOV DWORD PTR [ESI], 0x00000000
	MOV DWORD PTR [ESI+0x04],0x00000000
	MOV DWORD PTR [ESI+0x08],0x00000000
	TEST EBX, EBX
	JZ loc_10096648
	MOV EBP,DWORD PTR [ESP+arg1+0x1C]
loc_100965DF:
	LEA ECX,DWORD PTR [ESP+var_C+0x1C]
	MOV EAX,DWORD PTR [ESI]
	MOV EDX,DWORD PTR [ESI+0x04]
	PUSH ESI
	MOV DWORD PTR [ECX],EAX
	MOV EAX,DWORD PTR [ESI+0x08]
	MOV DWORD PTR [ECX+0x04],EDX
	MOV DWORD PTR [ECX+0x08],EAX
	CALL_LONG(offset [LEGO1_text.m95530_sub_10096530])
	ADD ESP, 0x04
	DEC EBX
	INC EBP
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m95530_sub_10096530])
	LEA ECX,DWORD PTR [ESP+var_C+0x20]
	ADD ESP, 0x04
	PUSH ECX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m954C0_sub_100964C0])
	ADD ESP, 0x08
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m95530_sub_10096530])
	MOVSX ECX,BYTE PTR [EBP+arg1217224-0x4A4B21]
	MOV DWORD PTR [ESP+var_8+0x20],0x00000000
	MOV DWORD PTR [ESP+var_4+0x20],0x00000000
	MOV DWORD PTR [ESP+var_C+0x20],ECX
	LEA ECX,DWORD PTR [ESP+var_C+0x20]
	ADD ESP, 0x04
	PUSH ECX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m954C0_sub_100964C0])
	ADD ESP, 0x08
	TEST EBX, EBX
	JNZ loc_100965DF
loc_10096648:
	CMP DWORD PTR [ESI+0x08],0x00
	JNZ loc_10096675
loc_1009664E:
	SUB DI, 0x10
	MOV EDX,DWORD PTR [ESI+0x04]
	MOV ECX, EDX
	MOV EAX,DWORD PTR [ESI]
	SHR ECX, 0x10
	MOV EBX, EAX
	SHL EDX, 0x10
	MOV DWORD PTR [ESI+0x08],ECX
	SHR EBX, 0x10
	SHL EAX, 0x10
	OR EDX, EBX
	MOV DWORD PTR [ESI+0x04],EDX
	MOV DWORD PTR [ESI],EAX
	TEST ECX, ECX
	JZ loc_1009664E
loc_10096675:
	TEST BYTE PTR [ESI+0x09],0x80
	JNZ loc_1009668C
loc_1009667B:
	DEC DI
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m95530_sub_10096530])
	ADD ESP, 0x04
	TEST BYTE PTR [ESI+0x09],0x80
	JZ loc_1009667B
loc_1009668C:
	MOV WORD PTR DS:[ESI+0x0A],DI
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100966A0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6)
{
	enum{
		var_28 = -0x28,
		var_24 = -0x24,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
		arg1217224 = 0x4A4B20,
	};

__asm{
	SUB ESP, 0x28
	MOV EAX, 0x000000CC
	MOV BYTE PTR [ESP+var_18+0x28],AL
	PUSH EBX
	MOV BYTE PTR [ESP+var_14+0x29],AL
	PUSH ESI
	MOV BYTE PTR [ESP+var_14+0x2E],AL
	PUSH EDI
	MOV BYTE PTR [ESP+var_14+0x33],AL
	PUSH EBP
	MOV BYTE PTR [ESP+var_14+0x38],AL
	MOV BYTE PTR [ESP+var_10+0x35],AL
	MOV BYTE PTR [ESP+var_10+0x36],AL
	MOV BYTE PTR [ESP+var_10+0x37],AL
	MOV BYTE PTR [ESP+var_10+0x38],AL
	MOV BYTE PTR [ESP+var_C+0x35],AL
	MOV BYTE PTR [ESP+var_C+0x36],0xFB
	MOV BYTE PTR [ESP+var_C+0x37],0x3F
	MOV AX,WORD PTR SS:[ESP+arg3+0x38]
	MOV EDI,DWORD PTR [ESP+arg6+0x38]
	MOV DWORD PTR [ESP+var_1C+0x38],0x00000001
	AND AX, 0x8000
	MOV CX,WORD PTR SS:[ESP+arg3+0x38]
	AND CX, 0x7FFF
	TEST AX, AX
	JZ loc_10096708
	MOV BYTE PTR [EDI+0x02],0x2D
	JMP loc_1009670C
loc_10096708:
	MOV BYTE PTR [EDI+0x02],0x20
loc_1009670C:
	TEST CX, CX
	JNZ loc_10096741
	CMP DWORD PTR [ESP+arg2+0x38],0x00
	JNZ loc_10096741
	CMP DWORD PTR [ESP+arg1+0x38],0x00
	JNZ loc_10096741
	MOV BYTE PTR [EDI+0x02],0x20
	MOV WORD PTR DS:[EDI],0x0000
	MOV EAX, 0x00000001
	MOV BYTE PTR [EDI+0x03],0x01
	MOV BYTE PTR [EDI+0x04],0x30
	MOV BYTE PTR [EDI+0x05],0x00
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x28
	RET
loc_10096741:
	CMP CX, 0x7FFF
	JNZ FAR loc_1009683E
	CMP DWORD PTR [ESP+arg2+0x38],0x80000000
	MOV WORD PTR DS:[EDI],0x0001
	JNZ loc_10096762
	CMP DWORD PTR [ESP+arg1+0x38],0x00
	JZ loc_10096797
loc_10096762:
	TEST BYTE PTR [ESP+arg2+0x3B],0x40
	JNZ loc_10096797
	MOV EAX, DWORD PTR [offset LEGO1_rdata.m748C_str]
	MOV ECX, offset [LEGO1_rdata.m748C_str]
	LEA EDX,DWORD PTR [EDI+0x04]
	MOV DWORD PTR [ESP+var_1C+0x38],0x00000000
	MOV DWORD PTR [EDX],EAX
	MOV BX,WORD PTR DS:[ECX+0x04]
	MOV WORD PTR DS:[EDX+0x04],BX
	MOV CL,BYTE PTR [ECX+0x06]
	MOV BYTE PTR [EDX+0x06],CL
	MOV BYTE PTR [EDI+0x03],0x06
	JMP FAR loc_100969FB
loc_10096797:
	TEST AX, AX
	JZ loc_100967D6
	CMP DWORD PTR [ESP+arg2+0x38],0xC0000000
	JNZ loc_100967D6
	CMP DWORD PTR [ESP+arg1+0x38],0x00
	JNZ loc_100967D6
	MOV ECX,DWORD PTR [offset LEGO1_rdata.m7484_str]
	MOV EAX, offset [LEGO1_rdata.m7484_str]
	LEA EDX,DWORD PTR [EDI+0x04]
	MOV DWORD PTR [ESP+var_1C+0x38],0x00000000
	MOV DWORD PTR [EDX],ECX
	MOV AX,WORD PTR DS:[EAX+0x04]
	MOV WORD PTR DS:[EDX+0x04],AX
	MOV BYTE PTR [EDI+0x03],0x05
	JMP FAR loc_100969FB
loc_100967D6:
	CMP DWORD PTR [ESP+arg2+0x38],0x80000000
	JNZ loc_10096810
	CMP DWORD PTR [ESP+arg1+0x38],0x00
	JNZ loc_10096810
	MOV ECX,DWORD PTR [offset LEGO1_rdata.m747C_str]
	MOV EAX, offset [LEGO1_rdata.m747C_str]
	LEA EDX,DWORD PTR [EDI+0x04]
	MOV DWORD PTR [ESP+var_1C+0x38],0x00000000
	MOV DWORD PTR [EDX],ECX
	MOV AX,WORD PTR DS:[EAX+0x04]
	MOV WORD PTR DS:[EDX+0x04],AX
	MOV BYTE PTR [EDI+0x03],0x05
	JMP FAR loc_100969FB
loc_10096810:
	MOV EAX, DWORD PTR [offset LEGO1_rdata.m7474_str]
	MOV EDX, offset [LEGO1_rdata.m7474_str]
	LEA ECX,DWORD PTR [EDI+0x04]
	MOV DWORD PTR [ESP+var_1C+0x38],0x00000000
	MOV DWORD PTR [ECX],EAX
	MOV BX,WORD PTR DS:[EDX+0x04]
	MOV WORD PTR DS:[ECX+0x04],BX
	MOV DL,BYTE PTR [EDX+0x06]
	MOV BYTE PTR [ECX+0x06],DL
	MOV BYTE PTR [EDI+0x03],0x06
	JMP FAR loc_100969FB
loc_1009683E:
	MOV EAX,DWORD PTR [ESP+arg2+0x38]
	SHR EAX, 0x18
	MOVZX ESI,AX
	MOV AX, CX
	SHR AX, 0x08
	MOVZX EDX,AX
	LEA ESI,DWORD PTR [ESI*2+EDX]
	MOV EAX, ESI
	LEA EDX,DWORD PTR [ESI*8+ESI]
	LEA ESI,DWORD PTR [EDX*2+EAX]
	MOVZX EDX,CX
	LEA ESI,DWORD PTR [ESI*4+EAX]
	MOV EAX, EDX
	SHL EDX, 0x04
	ADD EDX, EAX
	MOV WORD PTR SS:[ESP+var_1C+0x36],CX
	LEA EAX,DWORD PTR [EDX*8+EAX]
	LEA EDX,DWORD PTR [EAX*8+EAX]
	MOV EAX,DWORD PTR [ESP+arg2+0x38]
	SHL EDX, 0x04
	MOV ECX,DWORD PTR [ESP+arg1+0x38]
	ADD ESI, EDX
	PUSH 0x01
	SUB ESI, 0x134312F4
	MOV DWORD PTR [ESP+var_20+0x3A],EAX
	SAR ESI, 0x10
	MOV DWORD PTR [ESP+var_24+0x3A],ECX
	MOVSX EAX,SI
	MOV WORD PTR SS:[ESP+var_28+0x3C],0x0000
	NEG EAX
	LEA ECX,DWORD PTR [ESP+var_28+0x3C]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m96440_sub_10097440])
	ADD ESP, 0x0C
	CMP WORD PTR SS:[ESP+var_1C+0x36],0x3FFF
	JB loc_100968CC
	INC SI
	LEA EAX,DWORD PTR [ESP+var_18+0x38]
	LEA ECX,DWORD PTR [ESP+var_28+0x38]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m96190_sub_10097190])
	ADD ESP, 0x08
loc_100968CC:
	TEST BYTE PTR [ESP+arg5+0x38],0x1
	MOV WORD PTR DS:[EDI],SI
	JZ loc_10096905
	MOVSX EAX,SI
	MOV ESI,DWORD PTR [ESP+arg4+0x38]
	ADD ESI, EAX
	TEST ESI, ESI
	JG loc_10096909
	MOV BYTE PTR [EDI+0x02],0x20
	MOV WORD PTR DS:[EDI],0x0000
	MOV EAX, 0x00000001
	MOV BYTE PTR [EDI+0x03],0x01
	MOV BYTE PTR [EDI+0x04],0x30
	MOV BYTE PTR [EDI+0x05],0x00
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x28
	RET
loc_10096905:
	MOV ESI,DWORD PTR [ESP+arg4+0x38]
loc_10096909:
	CMP ESI, 0x15
	JLE loc_10096913
	MOV ESI, 0x00000015
loc_10096913:
	XOR EBX, EBX
	MOV EBP, 0x00000008
	MOV BX,WORD PTR SS:[ESP+var_1C+0x36]
	MOV WORD PTR SS:[ESP+var_1C+0x36],0x0000
	SUB EBX, 0x00003FFE
loc_1009692C:
	LEA EAX,DWORD PTR [ESP+var_28+0x38]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m95530_sub_10096530])
	ADD ESP, 0x04
	DEC EBP
	JNZ loc_1009692C
	TEST EBX, EBX
	JGE loc_1009695A
	NEG EBX
	AND EBX, 0x000000FF
	JLE loc_1009695A
loc_1009694A:
	LEA EAX,DWORD PTR [ESP+var_28+0x38]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m95570_sub_10096570])
	ADD ESP, 0x04
	DEC EBX
	JNZ loc_1009694A
loc_1009695A:
	LEA EBP,DWORD PTR [EDI+0x04]
	INC ESI
	MOV EBX, EBP
	TEST ESI, ESI
	JLE loc_100969C7
loc_10096964:
	LEA EDX,DWORD PTR [ESP+var_28+0x38]
	LEA ECX,DWORD PTR [ESP+var_C+0x38]
	INC EBX
	MOV EAX,DWORD PTR [EDX]
	MOV DWORD PTR [ECX],EAX
	MOV EAX,DWORD PTR [EDX+0x04]
	MOV EDX,DWORD PTR [EDX+0x08]
	MOV DWORD PTR [ECX+0x04],EAX
	MOV DWORD PTR [ECX+0x08],EDX
	LEA ECX,DWORD PTR [ESP+var_28+0x38]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m95530_sub_10096530])
	LEA ECX,DWORD PTR [ESP+var_28+0x3C]
	ADD ESP, 0x04
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m95530_sub_10096530])
	LEA ECX,DWORD PTR [ESP+var_C+0x3C]
	LEA EDX,DWORD PTR [ESP+var_28+0x3C]
	ADD ESP, 0x04
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m954C0_sub_100964C0])
	LEA ECX,DWORD PTR [ESP+var_28+0x40]
	ADD ESP, 0x08
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m95530_sub_10096530])
	MOV AL,BYTE PTR [ESP+var_1C+0x3B]
	ADD ESP, 0x04
	ADD AL, 0x30
	DEC ESI
	MOV BYTE PTR [EBX-0x01],AL
	MOV BYTE PTR [ESP+var_1C+0x37],0x00
	JNZ loc_10096964
loc_100969C7:
	MOV AL,BYTE PTR [EBX-0x01]
	DEC EBX
	DEC EBX
	CMP AL, 0x35
	JL loc_10096A07
	CMP EBX, EBP
	JB loc_100969E5
loc_100969D4:
	CMP BYTE PTR [EBX],0x39
	JNZ loc_100969E1
	MOV BYTE PTR [EBX],0x30
	DEC EBX
	CMP EBX, EBP
	JNB loc_100969D4
loc_100969E1:
	CMP EBX, EBP
	JNB loc_100969E9
loc_100969E5:
	INC WORD PTR DS:[EDI]
	INC EBX
loc_100969E9:
	INC BYTE PTR [EBX]
loc_100969EB:
	SUB EBX, EDI
	SUB BL, 0x03
	MOVSX EAX,BL
	MOV BYTE PTR [EDI+0x03],BL
	MOV BYTE PTR [EDI+EAX+0x04],0x00
loc_100969FB:
	MOV EAX,DWORD PTR [ESP+var_1C+0x38]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x28
	RET
loc_10096A07:
	CMP EBX, EBP
	JB loc_10096A19
loc_10096A0B:
	CMP BYTE PTR [EBX],0x30
	JNZ loc_10096A15
	DEC EBX
	CMP EBX, EBP
	JNB loc_10096A0B
loc_10096A15:
	CMP EBX, EBP
	JNB loc_100969EB
loc_10096A19:
	MOV WORD PTR DS:[EDI],0x0000
	MOV BYTE PTR [EBP+arg1217224-0x4A4B20],0x30
	MOV EAX, 0x00000001
	POP EBP
	MOV BYTE PTR [EDI+0x02],0x20
	MOV BYTE PTR [EDI+0x03],0x01
	MOV BYTE PTR [EDI+0x05],0x00
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x28
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10096A40(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x04
	XOR ECX, ECX
	PUSH EBX
	PUSH ESI
	MOV DWORD PTR [EAX+0x04],ECX
	MOV EAX,DWORD PTR [ESP+arg1+0xC]
	PUSH EDI
	MOV DWORD PTR [EAX+0x08],ECX
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	MOV DWORD PTR [EAX+0x0C],ECX
	MOV ECX,DWORD PTR [ESP+arg3+0x10]
	TEST CL,0x10
	JZ loc_10096A75
	MOV ESI, 0xC000008F
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	OR DWORD PTR [EAX+0x04],0x01
	JMP loc_10096A79
loc_10096A75:
	MOV ESI,DWORD PTR [ESP+var_4+0x10]
loc_10096A79:
	TEST CL,0x02
	JZ loc_10096A8B
	MOV ESI, 0xC0000093
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	OR DWORD PTR [EAX+0x04],0x02
loc_10096A8B:
	TEST CL,0x01
	JZ loc_10096A9D
	MOV ESI, 0xC0000091
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	OR DWORD PTR [EAX+0x04],0x04
loc_10096A9D:
	TEST CL,0x04
	JZ loc_10096AAF
	MOV ESI, 0xC000008E
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	OR DWORD PTR [EAX+0x04],0x08
loc_10096AAF:
	TEST CL,0x08
	JZ loc_10096AC1
	MOV ESI, 0xC0000090
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	OR DWORD PTR [EAX+0x04],0x10
loc_10096AC1:
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	MOV EBX,DWORD PTR [ESP+arg2+0x10]
	ADD EAX, 0x08
	MOV EDX,DWORD PTR [EBX]
	NOT EDX
	MOV ECX,DWORD PTR [EAX]
	AND EDX, 0x01
	SHL EDX, 0x04
	XOR EDX, ECX
	AND EDX, 0x10
	XOR EDX, ECX
	MOV DWORD PTR [EAX],EDX
	MOV EAX,DWORD PTR [EBX]
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
	AND EAX, 0x04
	ADD ECX, 0x08
	CMP EAX, 0x01
	SBB EAX, EAX
	MOV EDX,DWORD PTR [ECX]
	NEG EAX
	SHL EAX, 0x03
	XOR EAX, EDX
	AND EAX, 0x08
	XOR EAX, EDX
	MOV DWORD PTR [ECX],EAX
	MOV EAX,DWORD PTR [EBX]
	MOV EDX,DWORD PTR [ESP+arg1+0x10]
	AND EAX, 0x08
	ADD EDX, 0x08
	CMP EAX, 0x01
	SBB EAX, EAX
	MOV ECX,DWORD PTR [EDX]
	NEG EAX
	SHL EAX, 0x02
	XOR EAX, ECX
	AND EAX, 0x04
	XOR EAX, ECX
	MOV DWORD PTR [EDX],EAX
	MOV EDX,DWORD PTR [ESP+arg1+0x10]
	ADD EDX, 0x08
	MOV EAX,DWORD PTR [EBX]
	AND EAX, 0x10
	MOV ECX,DWORD PTR [EDX]
	CMP EAX, 0x01
	SBB EAX, EAX
	NEG EAX
	ADD EAX, EAX
	XOR EAX, ECX
	AND EAX, 0x02
	XOR EAX, ECX
	MOV DWORD PTR [EDX],EAX
	MOV EAX,DWORD PTR [EBX]
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
	AND EAX, 0x20
	ADD ECX, 0x08
	CMP EAX, 0x01
	SBB EAX, EAX
	MOV EDX,DWORD PTR [ECX]
	NEG EAX
	XOR EAX, EDX
	AND EAX, 0x01
	XOR EAX, EDX
	MOV DWORD PTR [ECX],EAX
	CALL_LONG(offset [LEGO1_text.m960B0_sub_100970B0])
	TEST AL, 0x01
	JZ loc_10096B72
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
	OR DWORD PTR [ECX+0x0C],0x10
loc_10096B72:
	TEST AL, 0x04
	JZ loc_10096B7E
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
	OR DWORD PTR [ECX+0x0C],0x08
loc_10096B7E:
	TEST AL, 0x08
	JZ loc_10096B8A
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
	OR DWORD PTR [ECX+0x0C],0x04
loc_10096B8A:
	TEST AL, 0x10
	JZ loc_10096B96
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
	OR DWORD PTR [ECX+0x0C],0x02
loc_10096B96:
	TEST AL, 0x20
	JZ loc_10096BA2
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	OR DWORD PTR [EAX+0x0C],0x01
loc_10096BA2:
	MOV EAX,DWORD PTR [EBX]
	AND EAX, 0x00000C00
	CMP EAX, 0x00000400
	JA loc_10096BB8
	JZ loc_10096BD1
	TEST EAX, EAX
	JZ loc_10096BC8
	JMP loc_10096C00
loc_10096BB8:
	CMP EAX, 0x00000800
	JZ loc_10096BE5
	CMP EAX, 0x00000C00
	JZ loc_10096BF9
	JMP loc_10096C00
loc_10096BC8:
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	AND DWORD PTR [EAX],-0x04
	JMP loc_10096C00
loc_10096BD1:
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
	MOV EAX,DWORD PTR [EAX]
	AND EAX, -0x03
	OR EAX, 0x01
	MOV DWORD PTR [ECX],EAX
	JMP loc_10096C00
loc_10096BE5:
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
	MOV EAX,DWORD PTR [EAX]
	AND EAX, -0x02
	OR EAX, 0x02
	MOV DWORD PTR [ECX],EAX
	JMP loc_10096C00
loc_10096BF9:
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	OR DWORD PTR [EAX],0x03
loc_10096C00:
	MOV EAX,DWORD PTR [EBX]
	AND EAX, 0x00000300
	JZ loc_10096C19
	CMP EAX, 0x00000200
	JZ loc_10096C29
	CMP EAX, 0x00000300
	JZ loc_10096C3D
	JMP loc_10096C44
loc_10096C19:
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	MOV ECX,DWORD PTR [EAX]
	AND ECX, -0x15
	OR ECX, 0x08
	MOV DWORD PTR [EAX],ECX
	JMP loc_10096C44
loc_10096C29:
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
	MOV EAX,DWORD PTR [EAX]
	AND EAX, -0x19
	OR EAX, 0x04
	MOV DWORD PTR [ECX],EAX
	JMP loc_10096C44
loc_10096C3D:
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	AND DWORD PTR [EAX],-0x1D
loc_10096C44:
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	MOV ECX,DWORD PTR [ESP+arg4+0x10]
	SHL ECX, 0x05
	MOV EAX,DWORD PTR [EAX]
	XOR ECX, EAX
	AND ECX, 0x0001FFE0
	XOR ECX, EAX
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	MOV DWORD PTR [EAX],ECX
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	OR DWORD PTR [EAX+0x20],0x01
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	MOV ECX,DWORD PTR [EAX+0x20]
	ADD EAX, 0x20
	AND ECX, -0x1D
	OR ECX, 0x02
	MOV DWORD PTR [EAX],ECX
	MOV EAX,DWORD PTR [ESP+arg5+0x10]
	MOV EDX,DWORD PTR [ESP+arg1+0x10]
	MOV ECX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [EDX+0x14],ECX
	MOV EAX,DWORD PTR [EAX]
	MOV DWORD PTR [EDX+0x10],EAX
	MOV EDX,DWORD PTR [ESP+arg1+0x10]
	OR DWORD PTR [EDX+0x50],0x01
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	MOV EDI,DWORD PTR [ESP+arg6+0x10]
	MOV ECX,DWORD PTR [EAX+0x50]
	ADD EAX, 0x50
	AND ECX, -0x1D
	OR ECX, 0x02
	MOV DWORD PTR [EAX],ECX
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
	MOV EAX,DWORD PTR [EDI+0x04]
	MOV DWORD PTR [ECX+0x44],EAX
	MOV EDX,DWORD PTR [EDI]
	MOV DWORD PTR [ECX+0x40],EDX
	CALL_LONG(offset [LEGO1_text.m960D0_sub_100970D0])
	LEA ECX,DWORD PTR [ESP+arg1+0x10]
	PUSH ECX
	PUSH 0x01
	PUSH 0x00
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m488_RaiseException])
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	ADD EAX, 0x08
	TEST BYTE PTR [EAX],0x10
	JZ loc_10096CDF
	AND DWORD PTR [EBX],-0x02
loc_10096CDF:
	TEST BYTE PTR [EAX],0x08
	JZ loc_10096CE7
	AND DWORD PTR [EBX],-0x05
loc_10096CE7:
	TEST BYTE PTR [EAX],0x04
	JZ loc_10096CEF
	AND DWORD PTR [EBX],-0x09
loc_10096CEF:
	TEST BYTE PTR [EAX],0x02
	JZ loc_10096CF7
	AND DWORD PTR [EBX],-0x11
loc_10096CF7:
	TEST BYTE PTR [EAX],0x01
	JZ loc_10096CFF
	AND DWORD PTR [EBX],-0x21
loc_10096CFF:
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	MOV EAX,DWORD PTR [EAX]
	AND EAX, 0x03
	CMP EAX, 0x03
	JA_LONG(offset [LEGO1_text.m95D42_loc_10096D42])
	JMP_LONG(DWORD PTR [offset LEGO1_text.m95D9C_proc_10096D9C+EAX*4])
}
}

__declspec(naked) DWORD LEGO1_sub_10096DB0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	SUB ESP, 0x0C
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	MOV EDI,DWORD PTR [ESP+arg1+0x1C]
	MOV ESI, EDI
	AND ESI, 0x1F
	TEST EDI,0x00000008
	JZ loc_10096DE1
	TEST BYTE PTR [ESP+arg3+0x1C],0x1
	JZ loc_10096DE1
	PUSH 0x01
	AND ESI, -0x09
	CALL_LONG(offset [LEGO1_text.m96130_sub_10097130])
	ADD ESP, 0x04
	JMP FAR loc_10097045
loc_10096DE1:
	TEST EDI,0x00000004
	JZ loc_10096E02
	TEST BYTE PTR [ESP+arg3+0x1C],0x4
	JZ loc_10096E02
	PUSH 0x04
	AND ESI, -0x05
	CALL_LONG(offset [LEGO1_text.m96130_sub_10097130])
	ADD ESP, 0x04
	JMP FAR loc_10097045
loc_10096E02:
	TEST EDI,0x00000001
	JZ FAR loc_10096F43
	TEST BYTE PTR [ESP+arg3+0x1C],0x8
	JZ FAR loc_10096F43
	PUSH 0x08
	CALL_LONG(offset [LEGO1_text.m96130_sub_10097130])
	MOV EAX,DWORD PTR [ESP+arg3+0x20]
	ADD ESP, 0x04
	AND EAX, 0x00000C00
	CMP EAX, 0x00000400
	JA loc_10096E41
	JZ loc_10096E98
	TEST EAX, EAX
	JZ loc_10096E5F
	AND ESI, -0x02
	JMP FAR loc_10097045
loc_10096E41:
	CMP EAX, 0x00000800
	JZ FAR loc_10096ED1
	CMP EAX, 0x00000C00
	JZ FAR loc_10096F0A
	AND ESI, -0x02
	JMP FAR loc_10097045
loc_10096E5F:
	FLDZ
	MOV EBX,DWORD PTR [ESP+arg2+0x1C]
	FCOMP QWORD PTR [EBX]
	FNSTSW AX
	TEST AH,0x01
	JZ loc_10096E86
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xEC84]
	AND ESI, -0x02
	MOV DWORD PTR [EBX+0x04],EAX
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xEC80]
	MOV DWORD PTR [EBX],ECX
	JMP FAR loc_10097045
loc_10096E86:
	FLD QWORD PTR [offset LEGO1_data + 0xEC80]
	FCHS
	AND ESI, -0x02
	FSTP QWORD PTR [EBX]
	JMP FAR loc_10097045
loc_10096E98:
	FLDZ
	MOV EBX,DWORD PTR [ESP+arg2+0x1C]
	FCOMP QWORD PTR [EBX]
	FNSTSW AX
	TEST AH,0x01
	JZ loc_10096EBF
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xEC94]
	AND ESI, -0x02
	MOV DWORD PTR [EBX+0x04],EAX
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xEC90]
	MOV DWORD PTR [EBX],ECX
	JMP FAR loc_10097045
loc_10096EBF:
	FLD QWORD PTR [offset LEGO1_data + 0xEC80]
	FCHS
	AND ESI, -0x02
	FSTP QWORD PTR [EBX]
	JMP FAR loc_10097045
loc_10096ED1:
	FLDZ
	MOV EBX,DWORD PTR [ESP+arg2+0x1C]
	FCOMP QWORD PTR [EBX]
	FNSTSW AX
	TEST AH,0x01
	JZ loc_10096EF8
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xEC84]
	AND ESI, -0x02
	MOV DWORD PTR [EBX+0x04],EAX
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xEC80]
	MOV DWORD PTR [EBX],ECX
	JMP FAR loc_10097045
loc_10096EF8:
	FLD QWORD PTR [offset LEGO1_data + 0xEC90]
	FCHS
	AND ESI, -0x02
	FSTP QWORD PTR [EBX]
	JMP FAR loc_10097045
loc_10096F0A:
	FLDZ
	MOV EBX,DWORD PTR [ESP+arg2+0x1C]
	FCOMP QWORD PTR [EBX]
	FNSTSW AX
	TEST AH,0x01
	JZ loc_10096F31
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xEC94]
	AND ESI, -0x02
	MOV DWORD PTR [EBX+0x04],EAX
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xEC90]
	MOV DWORD PTR [EBX],ECX
	JMP FAR loc_10097045
loc_10096F31:
	FLD QWORD PTR [offset LEGO1_data + 0xEC90]
	FCHS
	AND ESI, -0x02
	FSTP QWORD PTR [EBX]
	JMP FAR loc_10097045
loc_10096F43:
	TEST EDI,0x00000002
	JZ FAR loc_10097045
	TEST BYTE PTR [ESP+arg3+0x1C],0x10
	JZ FAR loc_10097045
	XOR EBP, EBP
	TEST EDI,0x00000010
	JZ loc_10096F69
	MOV EBP, 0x00000001
loc_10096F69:
	MOV EBX,DWORD PTR [ESP+arg2+0x1C]
	MOV EAX,DWORD PTR [EBX+0x04]
	AND EAX, 0x7FFFFFFF
	OR EAX,DWORD PTR [EBX]
	JZ FAR loc_1009702F
	LEA EAX,DWORD PTR [ESP+var_4+0x1C]
	MOV ECX,DWORD PTR [EBX+0x04]
	PUSH EAX
	MOV EDX,DWORD PTR [EBX]
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m96C80_sub_10097C80])
	FSTP QWORD PTR [ESP+var_C+0x28]
	MOV ECX,DWORD PTR [ESP+var_4+0x28]
	ADD ESP, 0x0C
	SUB ECX, 0x00000600
	CMP ECX, 0xFFFFFBCE
	JGE loc_10096FB8
	XOR EAX, EAX
	MOV EBP, 0x00000001
	MOV DWORD PTR [ESP+var_C+0x1C],EAX
	MOV DWORD PTR [ESP+var_8+0x1C],EAX
	JMP loc_10097020
loc_10096FB8:
	FLDZ
	FCOMP QWORD PTR [ESP+var_C+0x1C]
	MOV EDX, 0x00000001
	FNSTSW AX
	TEST AH,0x41
	JZ loc_10096FCC
	XOR EDX, EDX
loc_10096FCC:
	AND WORD PTR SS:[ESP+var_4+0x1A],0x0F
	OR BYTE PTR [ESP+var_4+0x1A],0x10
	CMP ECX, 0xFFFFFC03
	JGE loc_10097012
	MOV EAX, 0xFFFFFC03
	SUB EAX, ECX
	MOV ECX, 0x00000001
loc_10096FEB:
	TEST DWORD PTR [ESP+var_C+0x1C],ECX
	JZ loc_10096FF7
	TEST EBP, EBP
	JNZ loc_10096FF7
	MOV EBP, ECX
loc_10096FF7:
	SHR DWORD PTR [ESP+var_C+0x1C],0x01
	TEST DWORD PTR [ESP+var_8+0x1C],ECX
	JZ loc_1009700A
	OR DWORD PTR [ESP+var_C+0x1C],0x80000000
loc_1009700A:
	SHR DWORD PTR [ESP+var_8+0x1C],0x01
	DEC EAX
	JNZ loc_10096FEB
loc_10097012:
	TEST EDX, EDX
	JZ loc_10097020
	FLD QWORD PTR [ESP+var_C+0x1C]
	FCHS
	FSTP QWORD PTR [ESP+var_C+0x1C]
loc_10097020:
	MOV EAX,DWORD PTR [ESP+var_8+0x1C]
	MOV ECX,DWORD PTR [ESP+var_C+0x1C]
	MOV DWORD PTR [EBX+0x04],EAX
	MOV DWORD PTR [EBX],ECX
	JMP loc_10097034
loc_1009702F:
	MOV EBP, 0x00000001
loc_10097034:
	TEST EBP, EBP
	JZ loc_10097042
	PUSH 0x10
	CALL_LONG(offset [LEGO1_text.m96130_sub_10097130])
	ADD ESP, 0x04
loc_10097042:
	AND ESI, -0x03
loc_10097045:
	TEST EDI,0x00000010
	JZ loc_10097061
	TEST BYTE PTR [ESP+arg3+0x1C],0x20
	JZ loc_10097061
	PUSH 0x20
	AND ESI, -0x11
	CALL_LONG(offset [LEGO1_text.m96130_sub_10097130])
	ADD ESP, 0x04
loc_10097061:
	POP EBP
	CMP ESI, 0x01
	SBB EAX, EAX
	POP EDI
	NEG EAX
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10097070(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	CMP EAX, 0x01
	JZ loc_10097084
	CMP EAX, 0x02
	JL loc_1009709B
	CMP EAX, 0x03
	JLE loc_10097090
	RET
loc_10097084:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000021
	RET
loc_10097090:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000022
loc_1009709B:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100970A0()
{
__asm{
	XOR EAX, EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100970B0()
{
	enum{
		r = 0x0,
	};

__asm{
	SUB ESP, 0x04
	WAIT
	FSTSW WORD PTR [ESP+r+0x2]
	MOVSX EAX,WORD PTR [ESP+r+0x2]
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100970D0()
{
	enum{
		r = 0x0,
	};

__asm{
	SUB ESP, 0x04
	FSTSW WORD PTR [ESP+r+0x2]
	FCLEX
	MOVSX EAX,WORD PTR [ESP+r+0x2]
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100970F0(DWORD arg1, DWORD arg2)
{
	enum{
		var_4 = -0x4,
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x04
	WAIT
	FSTCW WORD PTR [ESP+var_4+0x4]
	MOV AX,WORD PTR SS:[ESP+arg2+0x4]
	MOV DX, AX
	NOT DX
	AND DX,WORD PTR SS:[ESP+var_4+0x4]
	AND AX,WORD PTR SS:[ESP+arg1+0x4]
	OR DX, AX
	MOV WORD PTR SS:[ESP+r+0x2],DX
	FLDCW WORD PTR [ESP+r+0x2]
	MOVSX EAX,WORD PTR [ESP+var_4+0x4]
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10097130(DWORD arg1)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x0C
	TEST CL,0x01
	JZ loc_10097147
	FLD TBYTE PTR [offset LEGO1_data + 0xEB60]
	FISTP DWORD PTR [ESP+var_C+0xC]
	WAIT
loc_10097147:
	TEST CL,0x08
	JZ loc_1009715D
	WAIT
	FNSTSW AX
	FLD TBYTE PTR [offset LEGO1_data + 0xEB60]
	FSTP QWORD PTR [ESP+var_8+0xC]
	WAIT
	WAIT
	FNSTSW AX
loc_1009715D:
	TEST CL,0x10
	JZ loc_1009716D
	FLD TBYTE PTR [offset LEGO1_data + 0xEB70]
	FSTP QWORD PTR [ESP+var_8+0xC]
	WAIT
loc_1009716D:
	TEST CL,0x04
	JZ loc_1009717B
	FLDZ
	FLD1
	FDIVRP ST(1),ST
	FSTP ST(0)
	WAIT
loc_1009717B:
	TEST CL,0x20
	JZ loc_10097187
	FLDPI
	FSTP QWORD PTR [ESP+var_8+0xC]
	WAIT
loc_10097187:
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10097190(DWORD arg1, DWORD arg2)
{
	enum{
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg1217224 = 0x4A4B20,
	};

__asm{
	SUB ESP, 0x1C
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x24]
	PUSH EDI
	MOV CX,WORD PTR DS:[ESI+0x0A]
	PUSH EBP
	XOR EDI, EDI
	MOV EDX,DWORD PTR [ESP+arg2+0x2C]
	MOV DX,WORD PTR DS:[EDX+0x0A]
	MOV DWORD PTR [ESP+var_18+0x2C],EDI
	MOV AX, DX
	MOV DWORD PTR [ESP+var_14+0x2C],EDI
	XOR AX, CX
	MOV DWORD PTR [ESP+var_10+0x2C],EDI
	AND AX, 0x8000
	AND CX, 0x7FFF
	AND DX, 0x7FFF
	MOV WORD PTR SS:[ESP+var_1C+0x2C],AX
	LEA EAX,DWORD PTR [EDX+ECX]
	MOV WORD PTR SS:[ESP+var_18+0x2A],AX
	CMP CX, 0x7FFF
	JNB FAR loc_1009740C
	CMP DX, 0x7FFF
	JNB FAR loc_1009740C
	CMP AX, 0xBFFD
	JA FAR loc_1009740C
	CMP AX, 0x3FBF
	JA loc_1009720C
	POP EBP
	MOV DWORD PTR [ESI+0x08],EDI
	MOV DWORD PTR [ESI+0x04],EDI
	MOV DWORD PTR [ESI],EDI
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x1C
	RET
loc_1009720C:
	TEST CX, CX
	JNZ loc_10097238
	INC WORD PTR SS:[ESP+var_18+0x2A]
	TEST DWORD PTR [ESI+0x08],0x7FFFFFFF
	JNZ loc_10097238
	CMP DWORD PTR [ESI+0x04],0x00
	JNZ loc_10097238
	CMP DWORD PTR [ESI],0x00
	JNZ loc_10097238
	MOV WORD PTR DS:[ESI+0x0A],0x0000
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x1C
	RET
loc_10097238:
	XOR EAX, EAX
	TEST DX, DX
	JNZ loc_1009726A
	INC WORD PTR SS:[ESP+var_18+0x2A]
	MOV EDX,DWORD PTR [ESP+arg2+0x2C]
	TEST DWORD PTR [EDX+0x08],0x7FFFFFFF
	JNZ loc_1009726A
	CMP DWORD PTR [EDX+0x04],EAX
	JNZ loc_1009726A
	CMP DWORD PTR [EDX],EAX
	JNZ loc_1009726A
	POP EBP
	MOV DWORD PTR [ESI+0x08],EAX
	POP EDI
	MOV DWORD PTR [ESI+0x04],EAX
	MOV DWORD PTR [ESI],EAX
	POP ESI
	POP EBX
	ADD ESP, 0x1C
	RET
loc_1009726A:
	XOR EAX, EAX
	MOV DWORD PTR [ESP+var_8+0x2C],EAX
	MOV DWORD PTR [ESP+var_C+0x2C],EAX
loc_10097274:
	MOV EDI,DWORD PTR [ESP+var_C+0x2C]
	MOV EBX, 0x00000008
	ADD EDI, EDI
	MOV EAX, 0x00000005
	SUB EAX,DWORD PTR [ESP+var_C+0x2C]
	MOV DWORD PTR [ESP+var_4+0x2C],EAX
	TEST EAX, EAX
	JLE loc_100972D2
	MOV EAX,DWORD PTR [ESP+var_8+0x2C]
	LEA EBP,DWORD PTR [EAX+ESP+var_18+0x2C]
loc_10097298:
	XOR ECX, ECX
	MOV EDX,DWORD PTR [ESP+arg2+0x2C]
	MOV CX,WORD PTR DS:[EDX+EBX]
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[ESI+EDI]
	PUSH EBP
	IMUL ECX,EAX
	PUSH ECX
	MOV EDX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m95490_sub_10096490])
	ADD ESP, 0x0C
	TEST EAX, EAX
	JZ loc_100972C6
	MOV EAX,DWORD PTR [ESP+var_8+0x2C]
	INC WORD PTR DS:[EAX+ESP+var_14+0x2C]
loc_100972C6:
	ADD EDI, 0x02
	SUB EBX, 0x02
	DEC DWORD PTR [ESP+var_4+0x2C]
	JNZ loc_10097298
loc_100972D2:
	ADD DWORD PTR [ESP+var_8+0x2C],0x02
	INC DWORD PTR [ESP+var_C+0x2C]
	CMP DWORD PTR [ESP+var_C+0x2C],0x05
	JL loc_10097274
	SUB WORD PTR SS:[ESP+var_18+0x2A],0x3FFE
	CMP WORD PTR SS:[ESP+var_18+0x2A],0x00
	JLE loc_1009731E
	MOV EDI, 0x80000000
loc_100972F6:
	TEST DWORD PTR [ESP+var_10+0x2C],EDI
	JNZ loc_10097316
	LEA EAX,DWORD PTR [ESP+var_18+0x2C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m95530_sub_10096530])
	DEC WORD PTR SS:[ESP+var_18+0x2E]
	ADD ESP, 0x04
	CMP WORD PTR SS:[ESP+var_18+0x2A],0x00
	JG loc_100972F6
loc_10097316:
	CMP WORD PTR SS:[ESP+var_18+0x2A],0x00
	JG loc_10097363
loc_1009731E:
	DEC WORD PTR SS:[ESP+var_18+0x2A]
	JNS loc_10097356
	MOV DI,WORD PTR SS:[ESP+var_18+0x2A]
	MOV EBX,DWORD PTR [ESP+var_18+0x2C]
	NEG DI
	ADD WORD PTR SS:[ESP+var_18+0x2A],DI
	MOV EBP, 0x00000001
loc_1009733B:
	TEST WORD PTR SS:[ESP+var_18+0x2C],BP
	JZ loc_10097343
	INC EBX
loc_10097343:
	LEA EAX,DWORD PTR [ESP+var_18+0x2C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m95570_sub_10096570])
	ADD ESP, 0x04
	DEC DI
	JNZ loc_1009733B
	JMP loc_1009735A
loc_10097356:
	MOV EBX,DWORD PTR [ESP+var_18+0x2C]
loc_1009735A:
	TEST EBX, EBX
	JZ loc_10097363
	OR BYTE PTR [ESP+var_18+0x2C],0x01
loc_10097363:
	MOV EAX, 0x00008000
	CMP WORD PTR SS:[ESP+var_18+0x2C],AX
	JBE loc_100973AD
	CMP DWORD PTR [ESP+var_14+0x2A],-0x01
	JNZ loc_100973A9
	XOR ECX, ECX
	MOV DWORD PTR [ESP+var_14+0x2A],ECX
	CMP DWORD PTR [ESP+var_10+0x2A],-0x01
	JNZ loc_100973A3
	MOV DWORD PTR [ESP+var_10+0x2A],ECX
	CMP WORD PTR SS:[ESP+var_C+0x2A],0xFFFF
	JNZ loc_1009739C
	MOV WORD PTR SS:[ESP+var_C+0x2A],AX
	INC WORD PTR SS:[ESP+var_18+0x2A]
	JMP loc_100973AD
loc_1009739C:
	INC WORD PTR SS:[ESP+var_C+0x2A]
	JMP loc_100973AD
loc_100973A3:
	INC DWORD PTR [ESP+var_10+0x2A]
	JMP loc_100973AD
loc_100973A9:
	INC DWORD PTR [ESP+var_14+0x2A]
loc_100973AD:
	CMP WORD PTR SS:[ESP+var_18+0x2A],0x7FFF
	JB loc_100973E0
	MOV DWORD PTR [ESI+0x04],0x00000000
	CMP WORD PTR SS:[ESP+var_1C+0x2C],0x01
	SBB EAX, EAX
	POP EBP
	AND EAX, 0x80000000
	POP EDI
	SUB EAX, 0x00008000
	MOV DWORD PTR [ESI], 0x00000000
	MOV DWORD PTR [ESI+0x08],EAX
	POP ESI
	POP EBX
	ADD ESP, 0x1C
	RET
loc_100973E0:
	MOV AX,WORD PTR SS:[ESP+var_14+0x2A]
	MOV WORD PTR DS:[ESI],AX
	MOV AX,WORD PTR SS:[ESP+var_18+0x2A]
	MOV ECX,DWORD PTR [ESP+var_14+0x2C]
	OR AX,WORD PTR SS:[ESP+var_1C+0x2C]
	MOV DWORD PTR [ESI+0x02],ECX
	MOV WORD PTR DS:[ESI+0x0A],AX
	MOV EDX,DWORD PTR [ESP+var_10+0x2C]
	POP EBP
	MOV DWORD PTR [ESI+0x06],EDX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x1C
	RET
loc_1009740C:
	MOV DWORD PTR [ESI+0x04],0x00000000
	CMP WORD PTR SS:[ESP+var_1C+0x2C],0x01
	SBB EAX, EAX
	POP EBP
	AND EAX, 0x80000000
	POP EDI
	SUB EAX, 0x00008000
	MOV DWORD PTR [ESI], 0x00000000
	MOV DWORD PTR [ESI+0x08],EAX
	POP ESI
	POP EBX
	ADD ESP, 0x1C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10097440(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	SUB ESP, 0x0C
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, offset [LEGO1_data.mEC48_ptr]
	MOV EDI,DWORD PTR [ESP+arg2+0x18]
	TEST EDI, EDI
	JZ loc_100974B4
	JGE loc_1009745C
	NEG EDI
	MOV ESI, offset LEGO1_data + 0xEDA8
loc_1009745C:
	CMP DWORD PTR [ESP+arg3+0x18],0x00
	MOV EBX,DWORD PTR [ESP+arg1+0x18]
	JNZ loc_1009746C
	MOV WORD PTR DS:[EBX],0x0000
loc_1009746C:
	TEST EDI, EDI
	JZ loc_100974B4
loc_10097470:
	ADD ESI, 0x54
	MOV EAX, EDI
	SAR EDI, 0x03
	AND EAX, 0x07
	TEST EAX, EAX
	JZ loc_100974B0
	LEA EAX,DWORD PTR [EAX*2+EAX]
	LEA EDX,DWORD PTR [EAX*4+ESI]
	CMP WORD PTR DS:[EDX],0x8000
	JB loc_100974A6
	LEA ECX,DWORD PTR [ESP+var_C+0x18]
	MOV EAX,DWORD PTR [EDX]
	MOV DWORD PTR [ECX],EAX
	MOV EAX,DWORD PTR [EDX+0x04]
	MOV DWORD PTR [ECX+0x04],EAX
	MOV EDX,DWORD PTR [EDX+0x08]
	MOV DWORD PTR [ECX+0x08],EDX
	MOV EDX, ECX
	DEC DWORD PTR [ESP+var_8+0x16]
loc_100974A6:
	PUSH EDX
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m96190_sub_10097190])
	ADD ESP, 0x08
loc_100974B0:
	TEST EDI, EDI
	JNZ loc_10097470
loc_100974B4:
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100974C0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8, DWORD arg9, DWORD arg10, DWORD arg11, DWORD arg12, DWORD arg13, DWORD arg14, DWORD arg15, DWORD arg16, DWORD arg17, DWORD arg18, DWORD arg19, DWORD arg20, DWORD arg21, DWORD arg22, DWORD arg23, DWORD arg24, DWORD arg25, DWORD arg26, DWORD arg27, DWORD arg28, DWORD arg29, DWORD arg30, DWORD arg31, DWORD arg32, DWORD arg33, DWORD arg34, DWORD arg35, DWORD arg36, DWORD arg37, DWORD arg38, DWORD arg39, DWORD arg40, DWORD arg41, DWORD arg42, DWORD arg43, DWORD arg44, DWORD arg45, DWORD arg46, DWORD arg47, DWORD arg48, DWORD arg49, DWORD arg50, DWORD arg51, DWORD arg52, DWORD arg53, DWORD arg54, DWORD arg55, DWORD arg56, DWORD arg57, DWORD arg58, DWORD arg59, DWORD arg60, DWORD arg61, DWORD arg62, DWORD arg63, DWORD arg64, DWORD arg65, DWORD arg66, DWORD arg67, DWORD arg68, DWORD arg69, DWORD arg70, DWORD arg71, DWORD arg72, DWORD arg73, DWORD arg74, DWORD arg75, DWORD arg76, DWORD arg77, DWORD arg78, DWORD arg79, DWORD arg80, DWORD arg81, DWORD arg82, DWORD arg83, DWORD arg84, DWORD arg85, DWORD arg86, DWORD arg87, DWORD arg88, DWORD arg89, DWORD arg90, DWORD arg91, DWORD arg92, DWORD arg93, DWORD arg94, DWORD arg95, DWORD arg96, DWORD arg97, DWORD arg98, DWORD arg99, DWORD arg100, DWORD arg101, DWORD arg102, DWORD arg103, DWORD arg104, DWORD arg105, DWORD arg106, DWORD arg107, DWORD arg108, DWORD arg109, DWORD arg110, DWORD arg111, DWORD arg112, DWORD arg113, DWORD arg114, DWORD arg115, DWORD arg116, DWORD arg117, DWORD arg118, DWORD arg119, DWORD arg120, DWORD arg121, DWORD arg122, DWORD arg123, DWORD arg124, DWORD arg125, DWORD arg126, DWORD arg127, DWORD arg128, DWORD arg129, DWORD arg130, DWORD arg131, DWORD arg132, DWORD arg133, DWORD arg134, DWORD arg135, DWORD arg136, DWORD arg137, DWORD arg138, DWORD arg139, DWORD arg140, DWORD arg141, DWORD arg142, DWORD arg143, DWORD arg144, DWORD arg145, DWORD arg146, DWORD arg147, DWORD arg148, DWORD arg149, DWORD arg150, DWORD arg151, DWORD arg152, DWORD arg153, DWORD arg154, DWORD arg155, DWORD arg156, DWORD arg157, DWORD arg158, DWORD arg159, DWORD arg160, DWORD arg161, DWORD arg162, DWORD arg163, DWORD arg164, DWORD arg165, DWORD arg166, DWORD arg167, DWORD arg168, DWORD arg169, DWORD arg170, DWORD arg171, DWORD arg172, DWORD arg173, DWORD arg174, DWORD arg175, DWORD arg176, DWORD arg177, DWORD arg178, DWORD arg179, DWORD arg180, DWORD arg181, DWORD arg182, DWORD arg183, DWORD arg184, DWORD arg185, DWORD arg186, DWORD arg187, DWORD arg188, DWORD arg189, DWORD arg190, DWORD arg191, DWORD arg192, DWORD arg193, DWORD arg194, DWORD arg195, DWORD arg196, DWORD arg197, DWORD arg198, DWORD arg199, DWORD arg200, DWORD arg201, DWORD arg202, DWORD arg203, DWORD arg204, DWORD arg205, DWORD arg206, DWORD arg207, DWORD arg208, DWORD arg209, DWORD arg210, DWORD arg211, DWORD arg212, DWORD arg213, DWORD arg214, DWORD arg215, DWORD arg216, DWORD arg217, DWORD arg218, DWORD arg219, DWORD arg220, DWORD arg221, DWORD arg222, DWORD arg223, DWORD arg224, DWORD arg225, DWORD arg226, DWORD arg227, DWORD arg228, DWORD arg229, DWORD arg230, DWORD arg231, DWORD arg232, DWORD arg233, DWORD arg234, DWORD arg235, DWORD arg236, DWORD arg237, DWORD arg238, DWORD arg239, DWORD arg240, DWORD arg241, DWORD arg242, DWORD arg243, DWORD arg244, DWORD arg245, DWORD arg246, DWORD arg247, DWORD arg248, DWORD arg249, DWORD arg250, DWORD arg251, DWORD arg252, DWORD arg253, DWORD arg254, DWORD arg255, DWORD arg256, DWORD arg257, DWORD arg258, DWORD arg259, DWORD arg260, DWORD arg261, DWORD arg262, DWORD arg263, DWORD arg264, DWORD arg265, DWORD arg266, DWORD arg267, DWORD arg268, DWORD arg269, DWORD arg270, DWORD arg271, DWORD arg272, DWORD arg273, DWORD arg274, DWORD arg275, DWORD arg276, DWORD arg277, DWORD arg278, DWORD arg279, DWORD arg280, DWORD arg281, DWORD arg282, DWORD arg283, DWORD arg284, DWORD arg285, DWORD arg286, DWORD arg287, DWORD arg288, DWORD arg289, DWORD arg290, DWORD arg291, DWORD arg292, DWORD arg293, DWORD arg294, DWORD arg295, DWORD arg296, DWORD arg297, DWORD arg298, DWORD arg299, DWORD arg300, DWORD arg301, DWORD arg302, DWORD arg303, DWORD arg304, DWORD arg305, DWORD arg306, DWORD arg307, DWORD arg308, DWORD arg309, DWORD arg310, DWORD arg311, DWORD arg312, DWORD arg313, DWORD arg314, DWORD arg315, DWORD arg316, DWORD arg317, DWORD arg318, DWORD arg319, DWORD arg320, DWORD arg321, DWORD arg322, DWORD arg323, DWORD arg324, DWORD arg325, DWORD arg326, DWORD arg327, DWORD arg328, DWORD arg329, DWORD arg330, DWORD arg331, DWORD arg332, DWORD arg333, DWORD arg334, DWORD arg335, DWORD arg336, DWORD arg337, DWORD arg338, DWORD arg339, DWORD arg340, DWORD arg341, DWORD arg342, DWORD arg343, DWORD arg344, DWORD arg345, DWORD arg346, DWORD arg347, DWORD arg348, DWORD arg349, DWORD arg350, DWORD arg351, DWORD arg352, DWORD arg353, DWORD arg354, DWORD arg355, DWORD arg356, DWORD arg357, DWORD arg358, DWORD arg359, DWORD arg360, DWORD arg361, DWORD arg362, DWORD arg363, DWORD arg364, DWORD arg365, DWORD arg366, DWORD arg367, DWORD arg368, DWORD arg369, DWORD arg370, DWORD arg371, DWORD arg372, DWORD arg373, DWORD arg374, DWORD arg375, DWORD arg376, DWORD arg377, DWORD arg378, DWORD arg379, DWORD arg380, DWORD arg381, DWORD arg382, DWORD arg383, DWORD arg384, DWORD arg385, DWORD arg386, DWORD arg387, DWORD arg388, DWORD arg389, DWORD arg390, DWORD arg391, DWORD arg392, DWORD arg393, DWORD arg394, DWORD arg395, DWORD arg396, DWORD arg397, DWORD arg398, DWORD arg399, DWORD arg400, DWORD arg401, DWORD arg402, DWORD arg403, DWORD arg404, DWORD arg405, DWORD arg406, DWORD arg407, DWORD arg408, DWORD arg409, DWORD arg410, DWORD arg411, DWORD arg412, DWORD arg413, DWORD arg414, DWORD arg415, DWORD arg416, DWORD arg417, DWORD arg418, DWORD arg419, DWORD arg420, DWORD arg421, DWORD arg422, DWORD arg423, DWORD arg424, DWORD arg425, DWORD arg426, DWORD arg427, DWORD arg428, DWORD arg429, DWORD arg430, DWORD arg431, DWORD arg432, DWORD arg433, DWORD arg434, DWORD arg435, DWORD arg436, DWORD arg437, DWORD arg438, DWORD arg439, DWORD arg440, DWORD arg441, DWORD arg442, DWORD arg443, DWORD arg444, DWORD arg445, DWORD arg446, DWORD arg447, DWORD arg448, DWORD arg449, DWORD arg450, DWORD arg451, DWORD arg452, DWORD arg453, DWORD arg454, DWORD arg455, DWORD arg456, DWORD arg457, DWORD arg458, DWORD arg459, DWORD arg460, DWORD arg461, DWORD arg462, DWORD arg463, DWORD arg464, DWORD arg465, DWORD arg466, DWORD arg467, DWORD arg468, DWORD arg469, DWORD arg470, DWORD arg471, DWORD arg472, DWORD arg473, DWORD arg474, DWORD arg475, DWORD arg476, DWORD arg477, DWORD arg478, DWORD arg479, DWORD arg480, DWORD arg481, DWORD arg482, DWORD arg483, DWORD arg484, DWORD arg485, DWORD arg486, DWORD arg487, DWORD arg488, DWORD arg489, DWORD arg490, DWORD arg491, DWORD arg492, DWORD arg493, DWORD arg494, DWORD arg495, DWORD arg496, DWORD arg497, DWORD arg498, DWORD arg499, DWORD arg500, DWORD arg501, DWORD arg502, DWORD arg503, DWORD arg504, DWORD arg505, DWORD arg506, DWORD arg507, DWORD arg508, DWORD arg509, DWORD arg510, DWORD arg511, DWORD arg512, DWORD arg513, DWORD arg514, DWORD arg515, DWORD arg516, DWORD arg517, DWORD arg518, DWORD arg519, DWORD arg520, DWORD arg521, DWORD arg522, DWORD arg523, DWORD arg524, DWORD arg525, DWORD arg526, DWORD arg527, DWORD arg528, DWORD arg529, DWORD arg530, DWORD arg531, DWORD arg532, DWORD arg533, DWORD arg534, DWORD arg535, DWORD arg536, DWORD arg537, DWORD arg538, DWORD arg539, DWORD arg540, DWORD arg541, DWORD arg542, DWORD arg543, DWORD arg544, DWORD arg545, DWORD arg546, DWORD arg547, DWORD arg548, DWORD arg549, DWORD arg550, DWORD arg551, DWORD arg552, DWORD arg553, DWORD arg554, DWORD arg555, DWORD arg556, DWORD arg557, DWORD arg558, DWORD arg559, DWORD arg560, DWORD arg561, DWORD arg562, DWORD arg563, DWORD arg564, DWORD arg565, DWORD arg566, DWORD arg567, DWORD arg568, DWORD arg569, DWORD arg570, DWORD arg571, DWORD arg572, DWORD arg573, DWORD arg574, DWORD arg575, DWORD arg576, DWORD arg577, DWORD arg578, DWORD arg579, DWORD arg580, DWORD arg581, DWORD arg582, DWORD arg583, DWORD arg584, DWORD arg585, DWORD arg586, DWORD arg587, DWORD arg588, DWORD arg589, DWORD arg590, DWORD arg591, DWORD arg592, DWORD arg593, DWORD arg594, DWORD arg595, DWORD arg596, DWORD arg597, DWORD arg598, DWORD arg599, DWORD arg600, DWORD arg601, DWORD arg602, DWORD arg603, DWORD arg604, DWORD arg605, DWORD arg606, DWORD arg607, DWORD arg608, DWORD arg609, DWORD arg610, DWORD arg611, DWORD arg612, DWORD arg613, DWORD arg614, DWORD arg615, DWORD arg616, DWORD arg617, DWORD arg618, DWORD arg619, DWORD arg620, DWORD arg621, DWORD arg622, DWORD arg623, DWORD arg624, DWORD arg625, DWORD arg626, DWORD arg627, DWORD arg628, DWORD arg629, DWORD arg630, DWORD arg631, DWORD arg632, DWORD arg633, DWORD arg634, DWORD arg635, DWORD arg636, DWORD arg637, DWORD arg638, DWORD arg639, DWORD arg640, DWORD arg641, DWORD arg642, DWORD arg643, DWORD arg644, DWORD arg645, DWORD arg646, DWORD arg647, DWORD arg648, DWORD arg649, DWORD arg650, DWORD arg651, DWORD arg652, DWORD arg653, DWORD arg654, DWORD arg655, DWORD arg656, DWORD arg657, DWORD arg658, DWORD arg659, DWORD arg660, DWORD arg661, DWORD arg662, DWORD arg663, DWORD arg664, DWORD arg665, DWORD arg666, DWORD arg667, DWORD arg668, DWORD arg669, DWORD arg670, DWORD arg671, DWORD arg672, DWORD arg673, DWORD arg674, DWORD arg675, DWORD arg676, DWORD arg677, DWORD arg678, DWORD arg679, DWORD arg680, DWORD arg681, DWORD arg682, DWORD arg683, DWORD arg684, DWORD arg685, DWORD arg686, DWORD arg687, DWORD arg688, DWORD arg689, DWORD arg690, DWORD arg691, DWORD arg692, DWORD arg693, DWORD arg694, DWORD arg695, DWORD arg696, DWORD arg697, DWORD arg698, DWORD arg699, DWORD arg700, DWORD arg701, DWORD arg702, DWORD arg703, DWORD arg704, DWORD arg705, DWORD arg706, DWORD arg707, DWORD arg708, DWORD arg709, DWORD arg710, DWORD arg711, DWORD arg712, DWORD arg713, DWORD arg714, DWORD arg715, DWORD arg716, DWORD arg717, DWORD arg718, DWORD arg719, DWORD arg720, DWORD arg721, DWORD arg722, DWORD arg723, DWORD arg724, DWORD arg725, DWORD arg726, DWORD arg727, DWORD arg728, DWORD arg729, DWORD arg730, DWORD arg731, DWORD arg732, DWORD arg733, DWORD arg734, DWORD arg735, DWORD arg736, DWORD arg737, DWORD arg738, DWORD arg739, DWORD arg740, DWORD arg741, DWORD arg742, DWORD arg743, DWORD arg744, DWORD arg745, DWORD arg746, DWORD arg747, DWORD arg748, DWORD arg749, DWORD arg750, DWORD arg751, DWORD arg752, DWORD arg753, DWORD arg754, DWORD arg755, DWORD arg756, DWORD arg757, DWORD arg758, DWORD arg759, DWORD arg760, DWORD arg761, DWORD arg762, DWORD arg763, DWORD arg764, DWORD arg765, DWORD arg766, DWORD arg767, DWORD arg768, DWORD arg769, DWORD arg770, DWORD arg771, DWORD arg772, DWORD arg773, DWORD arg774, DWORD arg775, DWORD arg776, DWORD arg777, DWORD arg778, DWORD arg779, DWORD arg780, DWORD arg781, DWORD arg782, DWORD arg783, DWORD arg784, DWORD arg785, DWORD arg786, DWORD arg787, DWORD arg788, DWORD arg789, DWORD arg790, DWORD arg791, DWORD arg792, DWORD arg793, DWORD arg794, DWORD arg795, DWORD arg796, DWORD arg797, DWORD arg798, DWORD arg799, DWORD arg800, DWORD arg801, DWORD arg802, DWORD arg803, DWORD arg804, DWORD arg805, DWORD arg806, DWORD arg807, DWORD arg808, DWORD arg809, DWORD arg810, DWORD arg811, DWORD arg812, DWORD arg813, DWORD arg814, DWORD arg815, DWORD arg816, DWORD arg817, DWORD arg818, DWORD arg819, DWORD arg820, DWORD arg821, DWORD arg822, DWORD arg823, DWORD arg824, DWORD arg825, DWORD arg826, DWORD arg827, DWORD arg828, DWORD arg829, DWORD arg830, DWORD arg831, DWORD arg832, DWORD arg833, DWORD arg834, DWORD arg835, DWORD arg836, DWORD arg837, DWORD arg838, DWORD arg839, DWORD arg840, DWORD arg841, DWORD arg842, DWORD arg843, DWORD arg844, DWORD arg845, DWORD arg846, DWORD arg847, DWORD arg848, DWORD arg849, DWORD arg850, DWORD arg851, DWORD arg852, DWORD arg853, DWORD arg854, DWORD arg855, DWORD arg856, DWORD arg857, DWORD arg858, DWORD arg859, DWORD arg860, DWORD arg861, DWORD arg862, DWORD arg863, DWORD arg864, DWORD arg865, DWORD arg866, DWORD arg867, DWORD arg868, DWORD arg869, DWORD arg870, DWORD arg871, DWORD arg872, DWORD arg873, DWORD arg874, DWORD arg875, DWORD arg876, DWORD arg877, DWORD arg878, DWORD arg879, DWORD arg880, DWORD arg881, DWORD arg882, DWORD arg883, DWORD arg884, DWORD arg885, DWORD arg886, DWORD arg887, DWORD arg888, DWORD arg889, DWORD arg890, DWORD arg891, DWORD arg892, DWORD arg893, DWORD arg894, DWORD arg895, DWORD arg896, DWORD arg897, DWORD arg898, DWORD arg899, DWORD arg900, DWORD arg901, DWORD arg902, DWORD arg903, DWORD arg904, DWORD arg905, DWORD arg906, DWORD arg907, DWORD arg908, DWORD arg909, DWORD arg910, DWORD arg911, DWORD arg912, DWORD arg913, DWORD arg914, DWORD arg915, DWORD arg916, DWORD arg917, DWORD arg918, DWORD arg919, DWORD arg920, DWORD arg921, DWORD arg922, DWORD arg923, DWORD arg924, DWORD arg925, DWORD arg926, DWORD arg927, DWORD arg928, DWORD arg929, DWORD arg930, DWORD arg931, DWORD arg932, DWORD arg933, DWORD arg934, DWORD arg935, DWORD arg936, DWORD arg937, DWORD arg938, DWORD arg939, DWORD arg940, DWORD arg941, DWORD arg942, DWORD arg943, DWORD arg944, DWORD arg945, DWORD arg946, DWORD arg947, DWORD arg948, DWORD arg949, DWORD arg950, DWORD arg951, DWORD arg952, DWORD arg953, DWORD arg954, DWORD arg955, DWORD arg956, DWORD arg957, DWORD arg958, DWORD arg959, DWORD arg960, DWORD arg961, DWORD arg962, DWORD arg963, DWORD arg964, DWORD arg965, DWORD arg966, DWORD arg967, DWORD arg968, DWORD arg969, DWORD arg970, DWORD arg971, DWORD arg972, DWORD arg973, DWORD arg974, DWORD arg975, DWORD arg976, DWORD arg977, DWORD arg978, DWORD arg979, DWORD arg980, DWORD arg981, DWORD arg982, DWORD arg983, DWORD arg984, DWORD arg985, DWORD arg986, DWORD arg987, DWORD arg988, DWORD arg989, DWORD arg990, DWORD arg991, DWORD arg992, DWORD arg993, DWORD arg994, DWORD arg995, DWORD arg996, DWORD arg997, DWORD arg998, DWORD arg999, DWORD arg1000, DWORD arg1001, DWORD arg1002, DWORD arg1003, DWORD arg1004, DWORD arg1005, DWORD arg1006, DWORD arg1007, DWORD arg1008, DWORD arg1009, DWORD arg1010, DWORD arg1011, DWORD arg1012, DWORD arg1013, DWORD arg1014, DWORD arg1015, DWORD arg1016, DWORD arg1017, DWORD arg1018, DWORD arg1019, DWORD arg1020, DWORD arg1021, DWORD arg1022, DWORD arg1023, DWORD arg1024, DWORD arg1025, DWORD arg1026, DWORD arg1027, DWORD arg1028)
{
	enum{
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
		arg1027 = 0x100C,
		arg1028 = 0x1010,
	};

__asm{
	MOV EAX, 0x00001008
	CALL_LONG(offset [LEGO1_text.m8EC90__chkstk])
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR EBX, EBX
	MOV ESI,DWORD PTR [ESP+arg1027+0xC]
	PUSH EBP
	PUSH 0x01
	PUSH EBX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8ED40_sub_1008FD40])
	MOV DWORD PTR [ESP+r+0x1C],EAX
	ADD ESP, 0x0C
	CMP EAX, -0x01
	JZ FAR loc_100975E2
	PUSH 0x02
	PUSH EBX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8ED40_sub_1008FD40])
	ADD ESP, 0x0C
	CMP EAX, -0x01
	JZ FAR loc_100975E2
	MOV ECX,DWORD PTR [ESP+arg1028+0x10]
	MOV EBP, ECX
	SUB EBP, EAX
	TEST EBP, EBP
	JLE loc_10097583
	LEA EDI,DWORD PTR [ESP+arg2+0x10]
	XOR EAX, EAX
	MOV ECX, 0x00000400
	PUSH 0x00008000
	REP STOSD
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m96D70_sub_10097D70])
	MOV DWORD PTR [ESP+arg1+0x18],EAX
	ADD ESP, 0x08
loc_10097533:
	MOV EAX, 0x00001000
	CMP EBP, EAX
	JGE loc_1009753E
	MOV EAX, EBP
loc_1009753E:
	PUSH EAX
	LEA EAX,DWORD PTR [ESP+arg2+0x14]
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8E100_sub_1008F100])
	ADD ESP, 0x0C
	MOV EDI, EAX
	CMP EDI, -0x01
	JZ loc_1009755C
	SUB EBP, EDI
	TEST EBP, EBP
	JG loc_10097533
	JMP loc_10097573
loc_1009755C:
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	CMP DWORD PTR [EAX],0x05
	JNZ loc_10097571
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x0000000D
loc_10097571:
	MOV EBX, EDI
loc_10097573:
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m96D70_sub_10097D70])
	ADD ESP, 0x08
	JMP loc_100975C5
loc_10097583:
	JGE loc_100975C5
	PUSH 0x00
	PUSH ECX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8ED40_sub_1008FD40])
	ADD ESP, 0x0C
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m93200_sub_10094200])
	ADD ESP, 0x04
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m48C_SetEndOfFile])
	CMP EAX, 0x01
	SBB EBX, EBX
	CMP EBX, -0x01
	JNZ loc_100975C5
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x0000000D
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	MOV EDI, EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B8_GetLastError])
	MOV DWORD PTR [EDI],EAX
loc_100975C5:
	MOV EAX,DWORD PTR [ESP+r+0x10]
	PUSH 0x00
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8ED40_sub_1008FD40])
	ADD ESP, 0x0C
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00001008
	RET
loc_100975E2:
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00001008
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10097600(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_80 = -0x80,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x00000080
	CMP EAX, 0x01
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	JNZ FAR loc_100976F4
	LEA ESI,DWORD PTR [ESP+var_80+0x90]
	XOR EBX, EBX
	LEA EAX,DWORD PTR [ESP+var_80+0x90]
	PUSH EBX
	MOV ECX,DWORD PTR [ESP+arg3+0x94]
	PUSH 0x00000080
	MOV EDI,DWORD PTR [ESP+arg2+0x98]
	PUSH EAX
	PUSH ECX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m96990_sub_10097990])
	ADD ESP, 0x14
	TEST EAX, EAX
	JNZ loc_1009769A
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B8_GetLastError])
	CMP EAX, 0x7A
	JNZ FAR loc_100976D7
	MOV EAX,DWORD PTR [ESP+arg3+0x90]
	PUSH EBX
	PUSH EBX
	PUSH EBX
	PUSH EAX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m96990_sub_10097990])
	ADD ESP, 0x14
	MOV EBP, EAX
	CMP EBP, EBX
	JZ loc_100976D7
	PUSH EBP
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV ESI, EAX
	CMP ESI, EBX
	JZ loc_100976D7
	MOV EBX, 0x00000001
	PUSH 0x00
	MOV EAX,DWORD PTR [ESP+arg3+0x94]
	PUSH EBP
	PUSH ESI
	PUSH EAX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m96990_sub_10097990])
	ADD ESP, 0x14
	TEST EAX, EAX
	JZ loc_100976D7
loc_1009769A:
	PUSH EAX
	MOV EBP, EAX
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	MOV EDI,DWORD PTR [ESP+arg4+0x94]
	ADD ESP, 0x04
	TEST EAX, EAX
	MOV DWORD PTR [EDI],EAX
	JZ loc_100976D7
	PUSH EBP
	PUSH ESI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8B010_strncpy])
	ADD ESP, 0x0C
	TEST EBX, EBX
	JZ loc_100976CA
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_100976CA:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000080
	RET
loc_100976D7:
	TEST EBX, EBX
	JZ loc_100976E4
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_100976E4:
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000080
	RET
loc_100976F4:
	TEST EAX, EAX
	JNZ FAR loc_100977A6
	MOV EAX,DWORD PTR [ESP+arg3+0x90]
	PUSH 0x00
	MOV EDI,DWORD PTR [ESP+arg2+0x94]
	PUSH 0x04
	PUSH offset LEGO1_data + 0x194D8
	PUSH EAX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m96860_sub_10097860])
	ADD ESP, 0x14
	TEST EAX, EAX
	JNZ loc_10097731
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000080
	RET
loc_10097731:
	MOV EDI,DWORD PTR [ESP+arg4+0x90]
	MOV ESI, offset LEGO1_data + 0x194D8
	MOV EBX, 0x00000001
	MOV BYTE PTR [EDI],0x00
loc_10097745:
	MOV AL,BYTE PTR [ESI]
	CMP DWORD PTR [offset LEGO1_data + 0xD1FC],EBX
	MOV BYTE PTR [ESP+var_80+0x90],AL
	JLE loc_10097766
	PUSH 0x04
	XOR EAX, EAX
	MOV AL,BYTE PTR [ESP+var_80+0x94]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8D000_sub_1008E000])
	ADD ESP, 0x08
	JMP loc_10097779
loc_10097766:
	XOR ECX, ECX
	MOV EDX,DWORD PTR [offset LEGO1_data.mCFF0_ptr]
	MOV CL, AL
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[ECX*2+EDX]
	AND EAX, 0x04
loc_10097779:
	TEST EAX, EAX
	JZ loc_10097799
	MOV CL, 0x0A
	MOV AL,BYTE PTR [EDI]
	IMUL CL
	MOV CL,BYTE PTR [ESP+var_80+0x90]
	ADD ESI, 0x02
	ADD CL, AL
	SUB CL, 0x30
	CMP ESI, offset LEGO1_data + 0x194E0
	MOV BYTE PTR [EDI],CL
	JB loc_10097745
loc_10097799:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000080
	RET
loc_100977A6:
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000080
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100977C0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg3]
	PUSH ESI
	MOV EAX,DWORD PTR [ESP+arg1+0x4]
	CMP ECX, 0x0A
	JNZ loc_100977E7
	TEST EAX, EAX
	JGE loc_100977E7
	MOV ESI,DWORD PTR [ESP+arg2+0x4]
	PUSH 0x01
	PUSH ECX
	PUSH ESI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m96800_sub_10097800])
	ADD ESP, 0x10
	MOV EAX, ESI
	POP ESI
	RET
loc_100977E7:
	MOV ESI,DWORD PTR [ESP+arg2+0x4]
	PUSH 0x00
	PUSH ECX
	PUSH ESI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m96800_sub_10097800])
	ADD ESP, 0x10
	MOV EAX, ESI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10097800(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	CMP DWORD PTR [ESP+arg4],0x00
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg2+0x8]
	PUSH EDI
	PUSH EBP
	JZ loc_1009781B
	MOV BYTE PTR [ESI],0x2D
	INC ESI
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
	NEG ECX
	JMP loc_1009781F
loc_1009781B:
	MOV ECX,DWORD PTR [ESP+arg1+0x10]
loc_1009781F:
	MOV EDI, ESI
	MOV EBP,DWORD PTR [ESP+arg3+0x10]
loc_10097825:
	MOV EAX, ECX
	SUB EDX, EDX
	DIV EBP
	MOV EBX, EDX
	MOV EAX, ECX
	SUB EDX, EDX
	DIV EBP
	MOV ECX, EAX
	CMP EBX, 0x09
	JBE loc_1009783F
	ADD BL, 0x57
	JMP loc_10097842
loc_1009783F:
	ADD BL, 0x30
loc_10097842:
	MOV BYTE PTR [ESI],BL
	INC ESI
	TEST ECX, ECX
	JNZ loc_10097825
	MOV BYTE PTR [ESI],0x00
	DEC ESI
loc_1009784D:
	MOV AL,BYTE PTR [ESI]
	MOV CL,BYTE PTR [EDI]
	MOV BYTE PTR [ESI],CL
	DEC ESI
	MOV BYTE PTR [EDI],AL
	INC EDI
	CMP EDI, ESI
	JB loc_1009784D
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10097860(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
	};

__asm{
	PUSH EBX
	MOV EAX, DWORD PTR [offset LEGO1_data.mEC74]
	PUSH ESI
	TEST EAX, EAX
	PUSH EDI
	PUSH EBP
	JNZ loc_100978A8
	PUSH 0x00
	MOV ESI,DWORD PTR [offset LEGO1_idata.m494_GetLocaleInfoW]
	PUSH 0x00
	PUSH 0x01
	PUSH 0x00
	CALL_LONG(ESI)
	TEST EAX, EAX
	JZ loc_10097888
	MOV EAX, 0x00000001
	JMP loc_100978AE
loc_10097888:
	PUSH 0x00
	PUSH 0x00
	PUSH 0x01
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m490_GetLocaleInfoA])
	TEST EAX, EAX
	JZ loc_100978A1
	MOV EAX, 0x00000002
	JMP loc_100978AE
loc_100978A1:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100978A8:
	MOV ESI,DWORD PTR [offset LEGO1_idata.m494_GetLocaleInfoW]
loc_100978AE:
	MOV DWORD PTR [offset LEGO1_data.mEC74], EAX
	CMP EAX, 0x01
	JNZ loc_100978D3
	MOV EAX,DWORD PTR [ESP+arg4+0x10]
	MOV ECX,DWORD PTR [ESP+arg3+0x10]
	MOV EDX,DWORD PTR [ESP+arg2+0x10]
	PUSH EAX
	MOV EBX,DWORD PTR [ESP+arg1+0x14]
	PUSH ECX
	PUSH EDX
	PUSH EBX
	CALL_LONG(ESI)
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100978D3:
	MOV DWORD PTR [offset LEGO1_data.mEC74], EAX
	CMP EAX, 0x02
	JNZ FAR loc_10097961
	MOV EDI,DWORD PTR [ESP+arg5+0x10]
	TEST EDI, EDI
	JNZ loc_100978EF
	MOV EDI,DWORD PTR [offset LEGO1_data + 0xD490]
loc_100978EF:
	MOV EAX,DWORD PTR [ESP+arg2+0x10]
	PUSH 0x00
	MOV EBX,DWORD PTR [ESP+arg1+0x14]
	PUSH 0x00
	PUSH EAX
	PUSH EBX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m490_GetLocaleInfoA])
	MOV EBP, EAX
	TEST EBP, EBP
	JNZ loc_10097910
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10097910:
	PUSH EBP
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV ESI, EAX
	TEST ESI, ESI
	JNZ loc_10097926
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10097926:
	MOV EAX,DWORD PTR [ESP+arg2+0x10]
	PUSH EBP
	PUSH ESI
	PUSH EAX
	PUSH EBX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m490_GetLocaleInfoA])
	TEST EAX, EAX
	JZ loc_10097956
	MOV EAX,DWORD PTR [ESP+arg4+0x10]
	TEST EAX, EAX
	JNZ loc_10097966
	PUSH 0x00
	PUSH 0x00
	PUSH -0x01
	PUSH ESI
	PUSH 0x01
	PUSH EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m424_MultiByteToWideChar])
	MOV EDI, EAX
	TEST EDI, EDI
	JNZ loc_1009797E
loc_10097956:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	XOR EAX, EAX
loc_10097961:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10097966:
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg3+0x14]
	PUSH EAX
	PUSH -0x01
	PUSH ESI
	PUSH 0x01
	PUSH EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m424_MultiByteToWideChar])
	MOV EDI, EAX
	TEST EDI, EDI
	JZ loc_10097956
loc_1009797E:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10097990(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg1217224 = 0x4A4B20,
	};

__asm{
	PUSH EBX
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xEC78]
	PUSH ESI
	TEST EAX, EAX
	PUSH EDI
	PUSH EBP
	JNZ loc_100979D8
	PUSH 0x00
	MOV ESI,DWORD PTR [offset LEGO1_idata.m490_GetLocaleInfoA]
	PUSH 0x00
	PUSH 0x01
	PUSH 0x00
	CALL_LONG(ESI)
	TEST EAX, EAX
	JZ loc_100979B8
	MOV EAX, 0x00000002
	JMP loc_100979DE
loc_100979B8:
	PUSH 0x00
	PUSH 0x00
	PUSH 0x01
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m494_GetLocaleInfoW])
	TEST EAX, EAX
	JZ loc_100979D1
	MOV EAX, 0x00000001
	JMP loc_100979DE
loc_100979D1:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100979D8:
	MOV ESI,DWORD PTR [offset LEGO1_idata.m490_GetLocaleInfoA]
loc_100979DE:
	MOV DWORD PTR [offset LEGO1_data + 0xEC78], EAX
	CMP EAX, 0x02
	JNZ loc_10097A03
	MOV EAX,DWORD PTR [ESP+arg4+0x10]
	MOV ECX,DWORD PTR [ESP+arg3+0x10]
	MOV EDX,DWORD PTR [ESP+arg2+0x10]
	PUSH EAX
	MOV EBX,DWORD PTR [ESP+arg1+0x14]
	PUSH ECX
	PUSH EDX
	PUSH EBX
	CALL_LONG(ESI)
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10097A03:
	MOV DWORD PTR [offset LEGO1_data + 0xEC78], EAX
	CMP EAX, 0x01
	JNZ FAR loc_10097A9F
	MOV EDI,DWORD PTR [ESP+arg5+0x10]
	TEST EDI, EDI
	JNZ loc_10097A1F
	MOV EDI,DWORD PTR [offset LEGO1_data + 0xD490]
loc_10097A1F:
	MOV EAX,DWORD PTR [ESP+arg2+0x10]
	PUSH 0x00
	MOV EBX,DWORD PTR [ESP+arg1+0x14]
	PUSH 0x00
	PUSH EAX
	PUSH EBX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m494_GetLocaleInfoW])
	MOV EBP, EAX
	TEST EBP, EBP
	JNZ loc_10097A40
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10097A40:
	LEA EAX,DWORD PTR [EBP*2+arg1217224-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV ESI, EAX
	TEST ESI, ESI
	JNZ loc_10097A5D
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10097A5D:
	MOV EAX,DWORD PTR [ESP+arg2+0x10]
	PUSH EBP
	PUSH ESI
	PUSH EAX
	PUSH EBX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m494_GetLocaleInfoW])
	TEST EAX, EAX
	JZ loc_10097A94
	MOV EAX,DWORD PTR [ESP+arg4+0x10]
	PUSH 0x00
	PUSH 0x00
	TEST EAX, EAX
	JNZ loc_10097AA4
	PUSH 0x00
	PUSH 0x00
	PUSH -0x01
	PUSH ESI
	PUSH 0x00000220
	PUSH EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m42C_WideCharToMultiByte])
	MOV EDI, EAX
	TEST EDI, EDI
	JNZ loc_10097ABF
loc_10097A94:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	XOR EAX, EAX
loc_10097A9F:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10097AA4:
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg3+0x1C]
	PUSH EAX
	PUSH -0x01
	PUSH ESI
	PUSH 0x00000220
	PUSH EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m42C_WideCharToMultiByte])
	MOV EDI, EAX
	TEST EDI, EDI
	JZ loc_10097A94
loc_10097ABF:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10097AD0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	PUSH EDI
	MOV EDI,DWORD PTR [EBP+arg1+0x4]
	XOR EAX, EAX
	OR ECX, -0x01
	REPNE SCAS
	INC ECX
	NEG ECX
	DEC EDI
	MOV AL,BYTE PTR [EBP+arg2+0x4]
	STD
	REPNE SCAS
	INC EDI
	CMP BYTE PTR [EDI],AL
	JZ loc_10097AF1
	XOR EAX, EAX
	JMP loc_10097AF3
loc_10097AF1:
	MOV EAX, EDI
loc_10097AF3:
	CLD
	POP EDI
	LEAVE
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10097B10(DWORD arg1, DWORD arg2)
{
	enum{
		arg2 = 0x8,
	};

__asm{
	XOR EAX, EAX
	MOV AL,BYTE PTR [ESP+arg2]
	JMP_LONG(offset [LEGO1_text.m96B16_loc_10097B16])
}
}

__declspec(naked) DWORD LEGO1_sub_10097BD0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	MOV ECX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x08
	MOV DWORD PTR [ESP+var_4+0x8],EAX
	MOV EAX,DWORD PTR [ESP+arg3+0x8]
	ADD AX, 0x03FE
	MOV DWORD PTR [ESP+var_8+0x8],ECX
	SHL AX, 0x04
	MOV CX,WORD PTR SS:[ESP+arg2+0xA]
	AND CX, 0x800F
	OR AX, CX
	MOV WORD PTR SS:[ESP+r+0x6],AX
	FLD QWORD PTR [ESP+var_8+0x8]
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10097C10(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	CMP DWORD PTR [ESP+arg2],0x7FF00000
	JNZ loc_10097C27
	CMP DWORD PTR [ESP+arg1],0x00
	JNZ loc_10097C27
	MOV EAX, 0x00000001
	RET
loc_10097C27:
	CMP DWORD PTR [ESP+arg2],0xFFF00000
	JNZ loc_10097C3E
	CMP DWORD PTR [ESP+arg1],0x00
	JNZ loc_10097C3E
	MOV EAX, 0x00000002
	RET
loc_10097C3E:
	MOV AX,WORD PTR SS:[ESP+arg2+0x2]
	AND AX, 0x7FF8
	CMP AX, 0x7FF8
	JNZ loc_10097C53
	MOV EAX, 0x00000003
	RET
loc_10097C53:
	CMP AX, 0x7FF0
	JNZ loc_10097C70
	TEST DWORD PTR [ESP+arg2],0x0007FFFF
	JNZ loc_10097C6A
	CMP DWORD PTR [ESP+arg1],0x00
	JZ loc_10097C70
loc_10097C6A:
	MOV EAX, 0x00000004
	RET
loc_10097C70:
	XOR EAX, EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10097C80(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	SUB ESP, 0x08
	AND EAX, 0x7FFFFFFF
	PUSH ESI
	OR EAX,DWORD PTR [ESP+arg1+0xC]
	PUSH EDI
	JNZ loc_10097CA3
	XOR ESI, ESI
	MOV DWORD PTR [ESP+var_8+0x10],ESI
	MOV DWORD PTR [ESP+var_4+0x10],ESI
	JMP FAR loc_10097D5E
loc_10097CA3:
	MOV SI,WORD PTR SS:[ESP+arg2+0x12]
	AND SI, 0x7FF0
	JNZ FAR loc_10097D39
	TEST DWORD PTR [ESP+arg2+0x10],0x000FFFFF
	JNZ loc_10097CC4
	CMP DWORD PTR [ESP+arg1+0x10],0x00
	JZ loc_10097D39
loc_10097CC4:
	FLDZ
	FCOMP QWORD PTR [ESP+arg1+0x10]
	MOV ESI, 0xFFFFFC03
	FNSTSW AX
	TEST AH,0x41
	MOV EAX, 0x00000001
	JZ loc_10097CDD
	XOR EAX, EAX
loc_10097CDD:
	TEST BYTE PTR [ESP+arg2+0x12],0x10
	JNZ loc_10097D0F
	MOV ECX, 0x80000000
	MOV EDX, 0x00000001
	MOV EDI, 0x00000010
loc_10097CF3:
	SHL DWORD PTR [ESP+arg2+0x10],0x01
	TEST DWORD PTR [ESP+arg1+0x10],ECX
	JZ loc_10097D02
	OR DWORD PTR [ESP+arg2+0x10],EDX
loc_10097D02:
	DEC ESI
	SHL DWORD PTR [ESP+arg1+0x10],0x01
	TEST WORD PTR SS:[ESP+arg2+0x12],DI
	JZ loc_10097CF3
loc_10097D0F:
	AND WORD PTR SS:[ESP+arg2+0x12],0xFFEF
	TEST EAX, EAX
	JZ loc_10097D1F
	OR BYTE PTR [ESP+arg2+0x13],0x80
loc_10097D1F:
	MOV EAX,DWORD PTR [ESP+arg2+0x10]
	PUSH 0x00
	MOV ECX,DWORD PTR [ESP+arg1+0x14]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m96BD0_sub_10097BD0])
	FSTP QWORD PTR [ESP+var_8+0x1C]
	ADD ESP, 0x0C
	JMP loc_10097D5E
loc_10097D39:
	MOV EAX,DWORD PTR [ESP+arg2+0x10]
	PUSH 0x00
	SHR SI, 0x04
	PUSH EAX
	MOVSX ESI,SI
	MOV ECX,DWORD PTR [ESP+arg1+0x18]
	SUB ESI, 0x000003FE
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m96BD0_sub_10097BD0])
	FSTP QWORD PTR [ESP+var_8+0x1C]
	ADD ESP, 0x0C
loc_10097D5E:
	FLD QWORD PTR [ESP+var_8+0x10]
	MOV EAX,DWORD PTR [ESP+arg3+0x10]
	POP EDI
	MOV DWORD PTR [EAX],ESI
	POP ESI
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10097D70(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg1]
	PUSH EBX
	MOV EAX, ECX
	AND ECX, 0x1F
	SHL ECX, 0x02
	AND EAX, -0x19
	SAR EAX, 0x03
	MOV EDX,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	LEA EAX,DWORD PTR [ECX*8+ECX]
	LEA ECX,DWORD PTR [EAX+EDX+0x04]
	XOR EDX, EDX
	MOV BL,BYTE PTR [ECX]
	MOV AL, BL
	AND AL, 0x80
	MOV DL, AL
	MOV EAX,DWORD PTR [ESP+arg2+0x4]
	CMP EAX, 0x00008000
	JNZ loc_10097DAA
	AND BL, 0x7F
	JMP loc_10097DB4
loc_10097DAA:
	CMP EAX, 0x00004000
	JNZ loc_10097DC7
	OR BL, -0x80
loc_10097DB4:
	MOV BYTE PTR [ECX],BL
	CMP EDX, 0x01
	SBB EAX, EAX
	POP EBX
	AND EAX, 0x00004000
	ADD EAX, 0x00004000
	RET
loc_10097DC7:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	POP EBX
	MOV DWORD PTR [EAX], 0x00000016
	MOV EAX, 0xFFFFFFFF
	RET
	DB(0xCC) DB(0xCC) DB(0xCC) DB(0xCC) DB(0xCC) DB(0xCC) DB(0xCC) 
	PUSH EBP
	MOV EBP, ESP
	PUSH EDI
	MOV EDI,DWORD PTR [EBP+arg2]
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m96E10_strlen])
	POP EDX
	INC EAX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	POP EDX
	OR EAX, EAX
	JZ loc_10097E03
	PUSH EDI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m96E90_sub_10097E90])
	POP EDX
	POP EDX
loc_10097E03:
	POP EDI
	LEAVE
	RET
}
}

__declspec(naked) DWORD LEGO1_strlen(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg1]
	TEST ECX,0x00000003
	JZ loc_10097E30
loc_10097E1C:
	MOV AL,BYTE PTR [ECX]
	INC ECX
	TEST AL, AL
	JZ loc_10097E63
	TEST ECX,0x00000003
	JNZ loc_10097E1C
	ADD EAX, 0x00000000
loc_10097E30:
	MOV EAX,DWORD PTR [ECX]
	MOV EDX, 0x7EFEFEFF
	ADD EDX, EAX
	XOR EAX, -0x01
	XOR EAX, EDX
	ADD ECX, 0x04
	TEST EAX, 0x81010100
	JZ loc_10097E30
	MOV EAX,DWORD PTR [ECX-0x04]
	TEST AL, AL
	JZ loc_10097E81
	TEST AH, AH
	JZ loc_10097E77
	TEST EAX, 0x00FF0000
	JZ loc_10097E6D
	TEST EAX, 0xFF000000
	JZ loc_10097E63
	JMP loc_10097E30
loc_10097E63:
	LEA EAX,DWORD PTR [ECX-0x01]
	MOV ECX,DWORD PTR [ESP+arg1]
	SUB EAX, ECX
	RET
loc_10097E6D:
	LEA EAX,DWORD PTR [ECX-0x02]
	MOV ECX,DWORD PTR [ESP+arg1]
	SUB EAX, ECX
	RET
loc_10097E77:
	LEA EAX,DWORD PTR [ECX-0x03]
	MOV ECX,DWORD PTR [ESP+arg1]
	SUB EAX, ECX
	RET
loc_10097E81:
	LEA EAX,DWORD PTR [ECX-0x04]
	MOV ECX,DWORD PTR [ESP+arg1]
	SUB EAX, ECX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10097E90(DWORD arg1)
{
	enum{
		r = 0x0,
		arg1 = 0x4,
	};

__asm{
	PUSH EDI
	MOV EDI,DWORD PTR [ESP+arg1+0x4]
	JMP loc_10097F01
	MOV EAX, EAX
	MOV EAX, EAX
	MOV EAX, EAX
	MOV ECX,DWORD PTR [ESP+r+0x4]
	PUSH EDI
	TEST ECX,0x00000003
	JZ loc_10097EBC
loc_10097EAD:
	MOV AL,BYTE PTR [ECX]
	INC ECX
	TEST AL, AL
	JZ loc_10097EEF
	TEST ECX,0x00000003
	JNZ loc_10097EAD
loc_10097EBC:
	MOV EAX,DWORD PTR [ECX]
	MOV EDX, 0x7EFEFEFF
	ADD EDX, EAX
	XOR EAX, -0x01
	XOR EAX, EDX
	ADD ECX, 0x04
	TEST EAX, 0x81010100
	JZ loc_10097EBC
	MOV EAX,DWORD PTR [ECX-0x04]
	TEST AL, AL
	JZ loc_10097EFE
	TEST AH, AH
	JZ loc_10097EF9
	TEST EAX, 0x00FF0000
	JZ loc_10097EF4
	TEST EAX, 0xFF000000
	JZ loc_10097EEF
	JMP loc_10097EBC
loc_10097EEF:
	LEA EDI,DWORD PTR [ECX-0x01]
	JMP loc_10097F01
loc_10097EF4:
	LEA EDI,DWORD PTR [ECX-0x02]
	JMP loc_10097F01
loc_10097EF9:
	LEA EDI,DWORD PTR [ECX-0x03]
	JMP loc_10097F01
loc_10097EFE:
	LEA EDI,DWORD PTR [ECX-0x04]
loc_10097F01:
	MOV ECX,DWORD PTR [ESP+arg1+0x8]
	TEST ECX,0x00000003
	JZ loc_10097F26
loc_10097F0D:
	MOV DL,BYTE PTR [ECX]
	INC ECX
	TEST DL, DL
	JZ loc_10097F78
	MOV BYTE PTR [EDI],DL
	INC EDI
	TEST ECX,0x00000003
	JNZ loc_10097F0D
	JMP loc_10097F26
loc_10097F21:
	MOV DWORD PTR [EDI],EDX
	ADD EDI, 0x04
loc_10097F26:
	MOV EDX, 0x7EFEFEFF
	MOV EAX,DWORD PTR [ECX]
	ADD EDX, EAX
	XOR EAX, -0x01
	XOR EAX, EDX
	MOV EDX,DWORD PTR [ECX]
	ADD ECX, 0x04
	TEST EAX, 0x81010100
	JZ loc_10097F21
	TEST DL, DL
	JZ loc_10097F78
	TEST DH, DH
	JZ loc_10097F6F
	TEST EDX,0x00FF0000
	JZ loc_10097F62
	TEST EDX,0xFF000000
	JZ loc_10097F5A
	JMP loc_10097F21
loc_10097F5A:
	MOV DWORD PTR [EDI],EDX
	MOV EAX,DWORD PTR [ESP+r+0x8]
	POP EDI
	RET
loc_10097F62:
	MOV WORD PTR DS:[EDI],DX
	MOV EAX,DWORD PTR [ESP+r+0x8]
	MOV BYTE PTR [EDI+0x02],0x00
	POP EDI
	RET
loc_10097F6F:
	MOV WORD PTR DS:[EDI],DX
	MOV EAX,DWORD PTR [ESP+r+0x8]
	POP EDI
	RET
loc_10097F78:
	MOV BYTE PTR [EDI],DL
	MOV EAX,DWORD PTR [ESP+r+0x8]
	POP EDI
	RET
}
}

__declspec(naked) DWORD LEGO1_j_DirectInputCreateA()
{
__asm{
	JMP_LONG(DWORD PTR [offset LEGO1_idata.m334_DirectInputCreateA])
}
}

__declspec(naked) DWORD LEGO1_j_RtlUnwind()
{
__asm{
	JMP_LONG(DWORD PTR [offset LEGO1_idata.m3D4_RtlUnwind])
}
}

__declspec(naked) DWORD LEGO1_sub_10098FB0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m98013_proc_10099013]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	PUSH 0x00000310
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EDI, EAX
	MOV EAX, 0x00000000
	TEST EDI, EDI
	JZ loc_10098FF8
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m98570_sub_10099570])
loc_10098FF8:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP EDI
	MOV DWORD PTR FS:[0x00000000],ECX
	MOV DWORD PTR [ESI],EAX
	MOV EAX, ESI
	POP ESI
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10099030()
{
__asm{
	PUSH ESI
	MOV ESI,DWORD PTR [ECX]
	TEST ESI, ESI
	JZ loc_10099047
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m985F0_sub_100995F0])
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_10099047:
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10099050(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	MOV EDX,DWORD PTR [ESP+arg1]
	PUSH EAX
	MOV ECX,DWORD PTR [ECX]
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m98610_sub_10099610])
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10099070(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	MOV ECX,DWORD PTR [ECX]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m987E0_sub_100997E0])
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10099080(DWORD arg1)
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m980D8_proc_100990D8]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m3D80_ptr]
	MOV ESI, ECX
	XOR ECX, ECX
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV BYTE PTR [ESI+0x04],CL
	MOV DWORD PTR [EBP+var_8+0x4],ECX
	MOV DWORD PTR [ESI], offset [LEGO1_rdata.m7710_ptr]
	MOV DWORD PTR [ESI+0x08],EAX
	MOV EAX, ESI
	MOV DWORD PTR [ESI+0x0C],ECX
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP ESI
	MOV DWORD PTR FS:[0x00000000],ECX
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_10099149()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m44AD0_loc_10045AD0])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10099160(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH ESI
	MOV EDX, ECX
	MOV EAX,DWORD PTR [ESP+arg2+0x4]
	PUSH EDI
	MOV ESI,DWORD PTR [EDX+0x08]
	MOV EDI,DWORD PTR [ESP+arg1+0x8]
	ADD ESI,DWORD PTR [EDX+0x0C]
	MOV ECX, EAX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	POP EDI
	ADD DWORD PTR [EDX+0x0C],EAX
	XOR EAX, EAX
	POP ESI
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_100991C0()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m98210_proc_10099210]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	XOR EAX, EAX
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	PUSH ESI
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV BYTE PTR [ECX+0x04],AL
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m3D80_ptr]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m7730_ptr]
	MOV DWORD PTR [ECX+0x08],EAX
	MOV EAX, ECX
	MOV ESI, ECX
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP ESI
	MOV DWORD PTR FS:[0x00000000],ECX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_loc_10099250()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m982A4_proc_100992A4]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m7730_ptr]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EAX,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	TEST EAX, EAX
	JZ loc_1009928B
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8ABD0_sub_1008BBD0])
	ADD ESP, 0x04
loc_1009928B:
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m982AE_sub_100992AE])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100992AE()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m44AD0_loc_10045AD0])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100992C0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x08]
	TEST EAX, EAX
	JNZ loc_100992D1
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RETN 0x0008
loc_100992D1:
	MOV ESI,DWORD PTR [ESP+arg2+0x4]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg1+0x8]
	PUSH ESI
	PUSH 0x01
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8A950_sub_1008B950])
	ADD ESP, 0x10
	SUB EAX, ESI
	CMP EAX, 0x01
	MOV EAX, 0x00000000
	ADC EAX, -0x01
	POP ESI
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100993A0(DWORD arg1, DWORD arg2)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	MOV EAX,DWORD PTR [ECX+0x08]
	PUSH EDI
	PUSH EBP
	MOV EBX, ECX
	TEST EAX, EAX
	JZ loc_100993B9
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8ABD0_sub_1008BBD0])
	ADD ESP, 0x04
loc_100993B9:
	MOV BYTE PTR [ESP+var_4+0x14],0x00
	MOV EDX,DWORD PTR [ESP+arg2+0x14]
	TEST DL,0x01
	JZ loc_100993FD
	MOV EDI, offset LEGO1_data + 0xF0A8
	MOV ECX, 0xFFFFFFFF
	MOV BYTE PTR [EBX+0x04],0x01
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EBP, ECX
	MOV ESI, EDI
	MOV ECX, 0xFFFFFFFF
	LEA EDI,DWORD PTR [ESP+var_4+0x14]
	SUB EAX, EAX
	REPNE SCAS
	DEC EDI
	MOV ECX, EBP
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EBP
	AND ECX, 0x03
	REP MOVSB
loc_100993FD:
	TEST DL,0x02
	JZ loc_1009943E
	CMP BYTE PTR [EBX+0x04],0x01
	JZ loc_1009940C
	MOV BYTE PTR [EBX+0x04],0x02
loc_1009940C:
	MOV EDI, offset LEGO1_data + 0x75B0
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EBP, ECX
	MOV ESI, EDI
	MOV ECX, 0xFFFFFFFF
	LEA EDI,DWORD PTR [ESP+var_4+0x14]
	SUB EAX, EAX
	REPNE SCAS
	DEC EDI
	MOV ECX, EBP
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EBP
	AND ECX, 0x03
	REP MOVSB
loc_1009943E:
	TEST DL,0x04
	JZ loc_1009944A
	MOV EDI, offset LEGO1_data + 0xF0A4
	JMP loc_1009944F
loc_1009944A:
	MOV EDI, offset LEGO1_data + 0xF0A0
loc_1009944F:
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EDX, ECX
	MOV ESI, EDI
	MOV ECX, 0xFFFFFFFF
	LEA EDI,DWORD PTR [ESP+var_4+0x14]
	SUB EAX, EAX
	REPNE SCAS
	DEC EDI
	MOV ECX, EDX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EDX
	AND ECX, 0x03
	REP MOVSB
	LEA EAX,DWORD PTR [ESP+var_4+0x14]
	MOV ECX,DWORD PTR [ESP+arg1+0x14]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8AFF0_sub_1008BFF0])
	ADD ESP, 0x08
	MOV DWORD PTR [EBX+0x08],EAX
	CMP EAX, 0x01
	POP EBP
	SBB EAX, EAX
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_proc_100994A0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV ECX,DWORD PTR [ECX+0x0C]
	MOV EAX,DWORD PTR [ESP+arg1]
	MOV DWORD PTR [EAX],ECX
	XOR EAX, EAX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_100994C0()
{
__asm{
	XOR EAX, EAX
	MOV BYTE PTR [ECX],AL
	MOV BYTE PTR [ECX+0x01],AL
	MOV BYTE PTR [ECX+0x02],AL
	MOV EAX, ECX
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100994D0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	MOV EDI, ECX
	PUSH 0x01
	MOV EAX,DWORD PTR [ESI]
	PUSH EDI
	MOV ECX, ESI
	MOV EBX,DWORD PTR [EAX+0x04]
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_10099510
	PUSH 0x01
	LEA EAX,DWORD PTR [EDI+0x01]
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_10099510
	PUSH 0x01
	ADD EDI, 0x02
	PUSH EDI
	MOV ECX, ESI
	CALL_LONG(EBX)
	MOV ECX, 0x00000000
	CMP EAX, 0x01
	ADC ECX, -0x01
	AND ECX, EAX
	MOV EAX, ECX
loc_10099510:
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10099520(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	MOV EDI, ECX
	PUSH 0x01
	MOV EAX,DWORD PTR [ESI]
	PUSH EDI
	MOV ECX, ESI
	MOV EBX,DWORD PTR [EAX+0x08]
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_10099560
	PUSH 0x01
	LEA EAX,DWORD PTR [EDI+0x01]
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(EBX)
	TEST EAX, EAX
	JNZ loc_10099560
	PUSH 0x01
	ADD EDI, 0x02
	PUSH EDI
	MOV ECX, ESI
	CALL_LONG(EBX)
	MOV ECX, 0x00000000
	CMP EAX, 0x01
	ADC ECX, -0x01
	AND ECX, EAX
	MOV EAX, ECX
loc_10099560:
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_10099570()
{
__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX, ECX
	MOV ESI, 0x000000FF
	LEA EDI,DWORD PTR [EBX+0x0C]
loc_1009957D:
	MOV ECX, EDI
	ADD EDI, 0x03
	CALL_LONG(offset [LEGO1_text.m984C0_sub_100994C0])
	DEC ESI
	JNS loc_1009957D
	XOR EAX, EAX
	POP EDI
	POP ESI
	MOV DWORD PTR [EBX],EAX
	MOV DWORD PTR [EBX+0x04],EAX
	MOV DWORD PTR [EBX+0x08],EAX
	MOV DWORD PTR [EBX+0x0000030C],EAX
	MOV EAX, EBX
	POP EBX
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100995A0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, 0x000000FF
	LEA EBX,DWORD PTR [ECX+0x0C]
	MOV EDI, ECX
loc_100995AD:
	MOV ECX, EBX
	ADD EBX, 0x03
	CALL_LONG(offset [LEGO1_text.m984C0_sub_100994C0])
	DEC ESI
	JNS loc_100995AD
	MOV EAX,DWORD PTR [ESP+arg1+0xC]
	MOV ECX,DWORD PTR [ESP+arg2+0xC]
	MOV DWORD PTR [EDI],EAX
	MOV DWORD PTR [EDI+0x04],ECX
	MOV DWORD PTR [EDI+0x08],0x00000000
	IMUL ECX,EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EDI+0x0000030C],EAX
	MOV EAX, EDI
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_sub_100995F0()
{
__asm{
	MOV EAX,DWORD PTR [ECX+0x0000030C]
	TEST EAX, EAX
	JZ loc_10099603
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_10099603:
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10099610(DWORD arg1, DWORD arg2)
{
	enum{
		var_18 = -0x18,
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		r = 0x0,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x10
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX, ECX
	MOV ESI,DWORD PTR [ESP+arg1+0x1C]
	PUSH EBP
	MOV EAX,DWORD PTR [ESI]
	PUSH 0x04
	PUSH EBX
	MOV ECX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [ESP+var_10+0x28],ECX
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [ESP+var_10+0x28])
	TEST EAX, EAX
	JNZ FAR loc_100997CA
	PUSH 0x04
	LEA EAX,DWORD PTR [EBX+0x04]
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [ESP+var_10+0x28])
	TEST EAX, EAX
	JNZ FAR loc_100997CA
	PUSH 0x04
	LEA EAX,DWORD PTR [EBX+0x08]
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [ESP+var_10+0x28])
	TEST EAX, EAX
	JNZ FAR loc_100997CA
	XOR EBP, EBP
	CMP DWORD PTR [EBX+0x08],EBP
	JBE loc_10099682
	LEA EDI,DWORD PTR [EBX+0x0C]
loc_10099669:
	PUSH ESI
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m984D0_sub_100994D0])
	TEST EAX, EAX
	JNZ FAR loc_100997CA
	ADD EDI, 0x03
	INC EBP
	CMP DWORD PTR [EBX+0x08],EBP
	JA loc_10099669
loc_10099682:
	MOV EAX,DWORD PTR [EBX+0x0000030C]
	TEST EAX, EAX
	JZ loc_10099695
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_10099695:
	MOV EAX,DWORD PTR [EBX+0x04]
	IMUL EAX,DWORD PTR [EBX]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	MOV DWORD PTR [EBX+0x0000030C],EAX
	MOV EAX,DWORD PTR [EBX+0x04]
	MOV ECX,DWORD PTR [EBX+0x0000030C]
	IMUL EAX,DWORD PTR [EBX]
	PUSH EAX
	PUSH ECX
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [ESP+var_10+0x28])
	TEST EAX, EAX
	JNZ FAR loc_100997CA
	CMP DWORD PTR [ESP+r+0x28],0x00
	JZ FAR loc_100997C8
	MOV EDI,DWORD PTR [EBX+0x04]
	MOV ECX,DWORD PTR [EBX]
	CMP EDI, ECX
	JZ FAR loc_100997C8
	JNB loc_10099754
	MOV EAX, ECX
	SUB EDX, EDX
	DIV EDI
	IMUL ECX,ECX
	MOV DWORD PTR [ESP+var_18+0x28],EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [ESP+var_10+0x28],EAX
	MOV ECX,DWORD PTR [EBX+0x0000030C]
	MOV DWORD PTR [ESP+var_C+0x28],ECX
	MOV EDX, EAX
	MOV DWORD PTR [ESP+var_8+0x28],0x00000000
	ADD ESP, 0x04
	CMP DWORD PTR [EBX+0x04],0x00
	JBE loc_1009974D
loc_10099714:
	CMP DWORD PTR [ESP+var_18+0x28],0x00
	JZ loc_1009973A
	MOV EAX,DWORD PTR [ESP+var_18+0x28]
loc_1009971F:
	MOV EBP,DWORD PTR [EBX]
	MOV EDI, EDX
	MOV ESI,DWORD PTR [ESP+var_10+0x28]
	MOV ECX, EBP
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EBP
	AND ECX, 0x03
	REP MOVSB
	ADD EDX,DWORD PTR [EBX]
	DEC EAX
	JNZ loc_1009971F
loc_1009973A:
	MOV EAX,DWORD PTR [EBX]
	INC DWORD PTR [ESP+var_C+0x28]
	MOV ECX,DWORD PTR [ESP+var_C+0x28]
	ADD DWORD PTR [ESP+var_10+0x28],EAX
	CMP DWORD PTR [EBX+0x04],ECX
	JA loc_10099714
loc_1009974D:
	MOV EAX,DWORD PTR [EBX]
	MOV DWORD PTR [EBX+0x04],EAX
	JMP loc_100997AF
loc_10099754:
	MOV EAX, EDI
	SUB EDX, EDX
	DIV ECX
	IMUL EDI,EDI
	MOV ESI, EAX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [ESP+var_10+0x28],EAX
	MOV EDX,DWORD PTR [EBX+0x0000030C]
	ADD ESP, 0x04
	MOV EDI, EAX
	CMP DWORD PTR [EBX+0x04],0x00
	MOV DWORD PTR [ESP+var_18+0x28],0x00000000
	JBE loc_100997AA
loc_10099782:
	XOR EBP, EBP
	CMP DWORD PTR [EBX],EBP
	JBE loc_1009979D
loc_10099788:
	TEST ESI, ESI
	JZ loc_10099797
	MOV EAX, ESI
loc_1009978E:
	MOV CL,BYTE PTR [EDX]
	INC EDI
	DEC EAX
	MOV BYTE PTR [EDI-0x01],CL
	JNZ loc_1009978E
loc_10099797:
	INC EDX
	INC EBP
	CMP DWORD PTR [EBX],EBP
	JA loc_10099788
loc_1009979D:
	INC DWORD PTR [ESP+var_18+0x28]
	MOV EAX,DWORD PTR [ESP+var_18+0x28]
	CMP DWORD PTR [EBX+0x04],EAX
	JA loc_10099782
loc_100997AA:
	MOV EAX,DWORD PTR [EBX+0x04]
	MOV DWORD PTR [EBX],EAX
loc_100997AF:
	MOV EAX,DWORD PTR [EBX+0x0000030C]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	MOV EAX,DWORD PTR [ESP+var_10+0x28]
	ADD ESP, 0x04
	MOV DWORD PTR [EBX+0x0000030C],EAX
loc_100997C8:
	XOR EAX, EAX
loc_100997CA:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RETN 0x0008
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100997E0(DWORD arg1)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
	PUSH EDI
	PUSH EBP
	MOV EDI, ECX
	MOV EAX,DWORD PTR [ESI]
	PUSH 0x04
	PUSH EDI
	MOV ECX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [ESP+var_4+0x1C],ECX
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [ESP+var_4+0x1C])
	TEST EAX, EAX
	JNZ loc_10099860
	PUSH 0x04
	LEA EAX,DWORD PTR [EDI+0x04]
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [ESP+var_4+0x1C])
	TEST EAX, EAX
	JNZ loc_10099860
	PUSH 0x04
	LEA EAX,DWORD PTR [EDI+0x08]
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [ESP+var_4+0x1C])
	TEST EAX, EAX
	JNZ loc_10099860
	XOR EBX, EBX
	CMP DWORD PTR [EDI+0x08],EBX
	JBE loc_10099842
	LEA EBP,DWORD PTR [EDI+0x0C]
loc_1009982D:
	PUSH ESI
	MOV ECX, EBP
	CALL_LONG(offset [LEGO1_text.m98520_sub_10099520])
	TEST EAX, EAX
	JNZ loc_10099860
	ADD EBP, 0x03
	INC EBX
	CMP DWORD PTR [EDI+0x08],EBX
	JA loc_1009982D
loc_10099842:
	MOV EAX,DWORD PTR [EDI+0x0000030C]
	TEST EAX, EAX
	JZ loc_1009985E
	MOV ECX,DWORD PTR [EDI+0x04]
	IMUL ECX,DWORD PTR [EDI]
	PUSH ECX
	PUSH EAX
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [ESP+var_4+0x1C])
	TEST EAX, EAX
	JNZ loc_10099860
loc_1009985E:
	XOR EAX, EAX
loc_10099860:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_10099870()
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m988C5_proc_100998C5]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m46FC_ptr]
	PUSH EAX
	XOR EAX, EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	MOV BYTE PTR [EBP+var_8+0x4],AL
	CALL_LONG(offset [LEGO1_text.m988BA_sub_100998BA])
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m988CF_sub_100998CF])
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100998BA()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	ADD ECX, 0x18
	JMP_LONG(offset [LEGO1_text.m595A0_loc_1005A5A0])
}
}

__declspec(naked) DWORD LEGO1_sub_100998CF()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV ECX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m5A660_loc_1005B660])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_100998E0(DWORD arg1)
{
	enum{
		var_108 = -0x108,
		var_100 = -0x100,
		var_FC = -0xFC,
		var_E4 = -0xE4,
		var_9C = -0x9C,
		var_98 = -0x98,
		var_94 = -0x94,
		var_90 = -0x90,
		var_78 = -0x78,
		var_54 = -0x54,
		var_50 = -0x50,
		var_48 = -0x48,
		var_34 = -0x34,
		var_30 = -0x30,
		var_2C = -0x2C,
		var_28 = -0x28,
		var_24 = -0x24,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_text.m98CA4_proc_10099CA4]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x000000F8
	XOR EAX, EAX
	MOV DWORD PTR [EBP+var_18+0x4],ECX
	PUSH EBX
	MOV ECX, 0x0000001B
	PUSH ESI
	PUSH EDI
	LEA EDI,DWORD PTR [EBP+var_108+0x4]
	REP STOSD
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	PUSH 0x00
	MOV DWORD PTR [EBP+var_108+0x4],0x0000006C
	MOV ESI,DWORD PTR [EAX+0x04]
	PUSH 0x00
	LEA EAX,DWORD PTR [EBP+var_108+0x4]
	MOV EDI,DWORD PTR [ESI]
	PUSH EAX
	PUSH 0x00
	PUSH ESI
	CALL_LONG(DWORD PTR [EDI+0x64])
	TEST EAX, EAX
	JNZ loc_1009995A
	MOV EAX,DWORD PTR [EBP+var_FC+0x4]
	MOV ECX,DWORD PTR [EBP+var_100+0x4]
	MOV DWORD PTR [EBP+var_24+0x4],EAX
	MOV EDX,DWORD PTR [EBP+var_E4+0x4]
	PUSH EDX
	MOV DWORD PTR [EBP+var_1C+0x4],ECX
	PUSH ESI
	CALL_LONG(DWORD PTR [EDI+0x00000080])
loc_1009995A:
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	MOV EAX,DWORD PTR [ECX+0x1C]
	MOV EDX,DWORD PTR [EAX]
	MOV DWORD PTR [EBP+var_14+0x4],EDX
	CMP EDX, EAX
	JZ FAR loc_10099A4B
loc_1009996D:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	CMP DWORD PTR [EAX+0x0C],0x00
	JNZ FAR loc_10099A37
	LEA ESI,DWORD PTR [EAX+0x08]
	MOV EAX,DWORD PTR [ESI]
	MOV EAX,DWORD PTR [EAX+0x0C]
	PUSH EAX
	MOV EBX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBX+0x04])
	TEST EAX, EAX
	JZ FAR loc_10099A37
	MOV EAX,DWORD PTR [ESI]
	MOV EAX,DWORD PTR [EAX+0x0C]
	PUSH EAX
	MOV EBX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBX+0x08])
	CMP EAX, 0x01
	JNZ FAR loc_10099A37
	MOV EAX,DWORD PTR [ESI]
	MOV EDX,DWORD PTR [EBP+arg1+0x4]
	MOV ECX,DWORD PTR [EAX]
	MOV EAX,DWORD PTR [EDX]
loc_100999AD:
	MOV DL,BYTE PTR [ECX]
	CMP DL,BYTE PTR [EAX]
	JNZ loc_100999CD
	OR DL, DL
	JZ loc_100999C9
	MOV DL,BYTE PTR [ECX+0x01]
	CMP DL,BYTE PTR [EAX+0x01]
	JNZ loc_100999CD
	ADD ECX, 0x02
	ADD EAX, 0x02
	OR DL, DL
	JNZ loc_100999AD
loc_100999C9:
	XOR EAX, EAX
	JMP loc_100999D2
loc_100999CD:
	SBB EAX, EAX
	SBB EAX, -0x01
loc_100999D2:
	TEST EAX, EAX
	JNZ loc_10099A37
	MOV ESI,DWORD PTR [ESI]
	LEA EDI,DWORD PTR [EBP+var_9C+0x4]
	XOR EAX, EAX
	MOV ECX, 0x0000001B
	MOV EBX,DWORD PTR [ESI+0x04]
	PUSH EAX
	REP STOSD
	MOV DWORD PTR [EBP+var_9C+0x4],0x0000006C
	PUSH EAX
	MOV EDI,DWORD PTR [EBX]
	LEA EAX,DWORD PTR [EBP+var_9C+0x4]
	PUSH EAX
	PUSH 0x00
	PUSH EBX
	CALL_LONG(DWORD PTR [EDI+0x64])
	TEST EAX, EAX
	JNZ loc_10099A37
	XOR EDI, EDI
	MOV EAX,DWORD PTR [EBP+var_24+0x4]
	CMP DWORD PTR [EBP+var_90+0x4],EAX
	JNZ loc_10099A26
	MOV EAX,DWORD PTR [EBP+var_1C+0x4]
	CMP DWORD PTR [EBP+var_94+0x4],EAX
	JNZ loc_10099A26
	MOV EDI, 0x00000001
loc_10099A26:
	MOV EAX,DWORD PTR [EBP+var_78+0x4]
	PUSH EAX
	PUSH EBX
	MOV EBX,DWORD PTR [EBX]
	CALL_LONG(DWORD PTR [EBX+0x00000080])
	TEST EDI, EDI
	JNZ loc_10099A70
loc_10099A37:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV EDX,DWORD PTR [EBP+var_18+0x4]
	MOV ECX,DWORD PTR [EAX]
	MOV DWORD PTR [EBP+var_14+0x4],ECX
	CMP DWORD PTR [EDX+0x1C],ECX
	JNZ FAR loc_1009996D
loc_10099A4B:
	PUSH 0x10
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	ADD ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV ESI, EAX
	TEST ESI, ESI
	JZ loc_10099A98
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m64BF0_sub_10065BF0])
	MOV EBX, EAX
	JMP loc_10099A9A
loc_10099A70:
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	MOV DWORD PTR [EAX+0x0C],0x00000001
	MOV EAX,DWORD PTR [ESI+0x0C]
	PUSH EAX
	MOV EBX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EBX+0x04])
	MOV EAX, ESI
loc_10099A85:
	MOV ECX,DWORD PTR [EBP+var_10+0x4]
	POP EDI
	MOV DWORD PTR FS:[0x00000000],ECX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0004
loc_10099A98:
	XOR EBX, EBX
loc_10099A9A:
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	MOV EAX,DWORD PTR [EAX+0x08]
	PUSH EAX
	MOV DWORD PTR [EBX+0x08],EAX
	MOV EDI,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EDI+0x04])
	LEA EDI,DWORD PTR [EBP+var_9C+0x4]
	XOR EAX, EAX
	MOV ECX, 0x0000001B
	REP STOSD
	MOV ECX,DWORD PTR [EBP+var_FC+0x4]
	MOV EAX,DWORD PTR [EBP+var_100+0x4]
	MOV DWORD PTR [EBP+var_90+0x4],ECX
	MOV DWORD PTR [EBP+var_94+0x4],EAX
	MOV DWORD PTR [EBP+var_9C+0x4],0x0000006C
	MOV DWORD PTR [EBP+var_98+0x4],0x00001007
	MOV DWORD PTR [EBP+var_34+0x4],0x00001800
	MOV DWORD PTR [EBP+var_54+0x4],0x00000020
	LEA ESI,DWORD PTR [EBX+0x04]
	XOR EDI, EDI
	MOV DWORD PTR [EBP+var_50+0x4],0x00000060
	MOV DWORD PTR [EBP+var_48+0x4],0x00000008
	CALL_LONG(offset [LEGO1_text.m14720__VideoManager__YAPAVLegoVideoManager__XZ])
	MOV EAX,DWORD PTR [EAX+0x74]
	PUSH EDI
	PUSH ESI
	LEA ECX,DWORD PTR [EBP+var_9C+0x4]
	MOV EAX,DWORD PTR [EAX+0x0C]
	PUSH ECX
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x18])
	TEST EAX, EAX
	JNZ FAR loc_10099C9D
	MOV DWORD PTR [EBP+var_30+0x4],EDI
	MOV EAX,DWORD PTR [EBP+var_90+0x4]
	DEC EAX
	MOV DWORD PTR [EBP+var_2C+0x4],EDI
	MOV DWORD PTR [EBP+var_28+0x4],EAX
	MOV EAX,DWORD PTR [EBP+var_94+0x4]
	DEC EAX
	MOV DWORD PTR [EBP+var_24+0x4],EAX
	MOV EAX,DWORD PTR [ESI]
	MOV ECX,DWORD PTR [EBX+0x08]
	PUSH ECX
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x7C])
	MOV ECX,DWORD PTR [ESI]
	PUSH 0x10
	LEA EDX,DWORD PTR [EBP+var_30+0x4]
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	PUSH EDX
	MOV EDX,DWORD PTR [EAX+0x04]
	PUSH EDX
	MOV EAX,DWORD PTR [ECX]
	PUSH EDI
	PUSH EDI
	PUSH ECX
	CALL_LONG(DWORD PTR [EAX+0x1C])
	TEST EAX, EAX
	JZ loc_10099B9B
	MOV EAX,DWORD PTR [ESI]
	PUSH EAX
	MOV ESI,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [ESI+0x08])
	MOV EAX,DWORD PTR [EBX+0x08]
	PUSH EAX
	MOV ESI,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [ESI+0x08])
	TEST EBX, EBX
	JZ loc_10099B94
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m64C00_sub_10065C00])
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_10099B94:
	XOR EAX, EAX
	JMP FAR loc_10099A85
loc_10099B9B:
	CALL_LONG(offset [LEGO1_text.m14720__VideoManager__YAPAVLegoVideoManager__XZ])
	MOV EAX,DWORD PTR [EAX+0x64]
	LEA EDX,DWORD PTR [EBX+0x0C]
	PUSH EDX
	MOV ECX,DWORD PTR [EAX+0x04]
	MOV EAX,DWORD PTR [ESI]
	MOV EDI,DWORD PTR [ECX]
	PUSH EAX
	PUSH ECX
	CALL_LONG(DWORD PTR [EDI+0x48])
	TEST EAX, EAX
	JZ loc_10099BE3
	MOV EAX,DWORD PTR [ESI]
	PUSH EAX
	MOV ESI,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [ESI+0x08])
	MOV EAX,DWORD PTR [EBX+0x08]
	PUSH EAX
	MOV ESI,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [ESI+0x08])
	TEST EBX, EBX
	JZ loc_10099BDC
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m64C00_sub_10065C00])
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_10099BDC:
	XOR EAX, EAX
	JMP FAR loc_10099A85
loc_10099BE3:
	MOV EAX,DWORD PTR [EBX+0x0C]
	PUSH EBX
	PUSH EAX
	MOV ESI,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [ESI+0x18])
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	MOV DWORD PTR [EBP+var_20+0x4],EBX
	MOV EAX,DWORD PTR [ECX+0x1C]
	PUSH 0x10
	MOV DWORD PTR [EBP+var_14+0x4],EAX
	LEA ESI,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [EBP+var_1C+0x4],0x00000001
	MOV EDI,DWORD PTR [ESI]
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	ADD ESP, 0x04
	TEST EDI, EDI
	JZ loc_10099C1D
	MOV ECX,DWORD PTR [EBP+var_14+0x4]
	MOV DWORD PTR [EAX],ECX
	MOV DWORD PTR [EAX+0x04],EDI
	JMP loc_10099C22
loc_10099C1D:
	MOV DWORD PTR [EAX],EAX
	MOV DWORD PTR [EAX+0x04],EAX
loc_10099C22:
	MOV DWORD PTR [ESI],EAX
	MOV ECX,DWORD PTR [EAX+0x04]
	MOV DWORD PTR [ECX],EAX
	ADD EAX, 0x08
	JZ loc_10099C39
	MOV ECX,DWORD PTR [EBP+var_20+0x4]
	MOV EDX,DWORD PTR [EBP+var_1C+0x4]
	MOV DWORD PTR [EAX],ECX
	MOV DWORD PTR [EAX+0x04],EDX
loc_10099C39:
	MOV ECX,DWORD PTR [EBP+var_18+0x4]
	INC DWORD PTR [ECX+0x20]
	MOV EAX,DWORD PTR [EBX+0x0C]
	PUSH EAX
	MOV ESI,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [ESI+0x04])
	MOV EAX,DWORD PTR [EBX]
	TEST EAX, EAX
	JZ loc_10099C57
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_10099C57:
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV ECX, 0xFFFFFFFF
	MOV EDI,DWORD PTR [EAX]
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m85240_sub_10086240])
	MOV DWORD PTR [EBX],EAX
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	ADD ESP, 0x04
	MOV ECX, 0xFFFFFFFF
	MOV EDI,DWORD PTR [EAX]
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EDX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI,DWORD PTR [EBX]
	REP MOVSD
	MOV ECX, EDX
	AND ECX, 0x03
	REP MOVSB
	MOV EAX, EBX
	JMP FAR loc_10099A85
loc_10099C9D:
	XOR EAX, EAX
	JMP FAR loc_10099A85
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10099CC0(DWORD arg1)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x04
	PUSH ESI
	PUSH EDI
	MOV ESI, ECX
	MOV EDI,DWORD PTR [ESP+arg1+0xC]
	TEST EDI, EDI
	JZ loc_10099D49
	MOV ECX,DWORD PTR [ESI+0x1C]
	MOV EAX,DWORD PTR [ECX]
	MOV DWORD PTR [ESP+var_4+0xC],EAX
	CMP EAX, ECX
	JZ loc_10099D49
loc_10099CDC:
	MOV EAX,DWORD PTR [ESP+var_4+0xC]
	CMP DWORD PTR [EAX+0x08],EDI
	JZ loc_10099CF7
	MOV EDX,DWORD PTR [EAX]
	MOV DWORD PTR [ESP+var_4+0xC],EDX
	CMP EDX, ECX
	JNZ loc_10099CDC
	POP EDI
	POP ESI
	ADD ESP, 0x04
	RETN 0x0004
loc_10099CF7:
	MOV EAX,DWORD PTR [ESP+var_4+0xC]
	MOV DWORD PTR [EAX+0x0C],0x00000000
	MOV EAX,DWORD PTR [EDI+0x0C]
	PUSH EAX
	MOV EAX,DWORD PTR [EAX]
	CALL_LONG(DWORD PTR [EAX+0x08])
	CMP EAX, 0x01
	JNZ loc_10099D49
	TEST EDI, EDI
	JZ loc_10099D24
	MOV ECX, EDI
	CALL_LONG(offset [LEGO1_text.m64C00_sub_10065C00])
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_10099D24:
	MOV EDX,DWORD PTR [ESP+var_8+0x10]
	MOV EAX,DWORD PTR [ESP+var_8+0x10]
	PUSH EAX
	MOV ECX,DWORD PTR [EDX+0x04]
	ADD EDX, 0x04
	MOV EDI,DWORD PTR [EAX]
	MOV DWORD PTR [ECX],EDI
	MOV ECX,DWORD PTR [EDX]
	MOV EDI,DWORD PTR [EAX]
	MOV DWORD PTR [EDI+0x04],ECX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
	DEC DWORD PTR [ESI+0x20]
loc_10099D49:
	POP EDI
	POP ESI
	ADD ESP, 0x04
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_10099D60()
{
__asm{
	XOR EAX, EAX
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m7764_ptr]
	MOV DWORD PTR [ECX+0x04],EAX
	MOV DWORD PTR [ECX+0x08],EAX
	MOV DWORD PTR [ECX+0x0C],EAX
	MOV EAX, ECX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10099DA0()
{
__asm{
	PUSH ESI
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m7764_ptr]
	MOV ESI, ECX
	MOV ECX,DWORD PTR [ECX+0x04]
	TEST ECX, ECX
	JZ loc_10099DB6
	PUSH 0x01
	MOV EAX,DWORD PTR [ECX]
	CALL_LONG(DWORD PTR [EAX])
loc_10099DB6:
	MOV EAX,DWORD PTR [ESI+0x0C]
	TEST EAX, EAX
	JZ loc_10099DC6
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_10099DC6:
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10099DD0()
{
__asm{
	MOV EAX, ECX
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m7768_ptr]
	MOV DWORD PTR [ECX+0x04],0x00000000
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_proc_10099DE0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	MOV ESI, ECX
	CALL_LONG(offset [LEGO1_text.m98E00_sub_10099E00])
	TEST BYTE PTR [ESP+arg1+0x4],0x01
	JZ loc_10099DF8
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m85260_sub_10086260])
	ADD ESP, 0x04
loc_10099DF8:
	MOV EAX, ESI
	POP ESI
	RETN 0x0004
}
}

__declspec(naked) DWORD LEGO1_sub_10099E00()
{
__asm{
	MOV EAX,DWORD PTR [ECX+0x04]
	MOV DWORD PTR [ECX], offset [LEGO1_rdata.m7768_ptr]
	TEST EAX, EAX
	JZ loc_10099E13
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m990A0_sub_1009A0A0])
loc_10099E13:
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10099E20(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	LEA EAX,DWORD PTR [ECX+0x04]
	MOV EDX,DWORD PTR [ESP+arg1]
	PUSH EAX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m98E60_sub_10099E60])
	RETN 0x0004
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_10099E40(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ECX+0x04]
	MOV EDX,DWORD PTR [ESP+arg1]
	PUSH EAX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m99020_sub_1009A020])
	RETN 0x0004
}
}

