#include "stdafx.h"
#include "LEGO1.h"

#pragma warning (disable:4730)
#pragma warning (disable:4733)
#pragma warning (disable:4799)
#define DB(b) __asm _emit b

__declspec(naked) DWORD __stdcall LEGO1_sub_1008ADE0(DWORD arg1, DWORD arg2)
{
	enum{
		var_4 = -0x4,
		arg2 = 0x8,
		arg1217233 = 0x4A4B44,
		arg1217248 = 0x4A4B80,
		arg1217254 = 0x4A4B98,
	};

__asm{
	PUSH EBX
	MOV EDX, 0x00000008
	PUSH ESI
	PUSH EDI
	PUSH EBP
	MOV EDI, 0x00000001
	MOV ESI,DWORD PTR [ESP+arg2+0x10]
	PUSH 0x00000202
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m86ED0_sub_10087ED0])
	TEST EAX, EAX
	JNZ loc_1008AE17
	MOV EDX, 0x0000000E
	XOR ECX, ECX
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
loc_1008AE17:
	MOV EBX, ESI
	AND EBX, 0xFFFF0000
	MOV AX,WORD PTR DS:[EBX+0x0E]
	AND AX, 0xFFF8
	CMP AX, 0xCAD0
	JZ loc_1008AE42
	MOV EDX, 0x0000000E
	MOV ECX, ESI
	CALL_LONG(offset [LEGO1_text.m88B80_sub_10089B80])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
loc_1008AE42:
	PUSH 0x00001002
	MOV EDX, 0x0000001A
	MOV ECX, EBX
	CALL_LONG(offset [LEGO1_text.m86ED0_sub_10087ED0])
	TEST EAX, EAX
	JZ_LONG(offset [LEGO1_text.m89F2C_loc_1008AF2C])
	MOV AX,WORD PTR DS:[EBX+0x0E]
	MOV CX, AX
	AND CX, 0xFFF8
	CMP CX, 0xCAD0
	JNZ_LONG(offset [LEGO1_text.m89F2C_loc_1008AF2C])
	AND AL, 0x07
	CMP AL, 0x05
	JNB_LONG(offset [LEGO1_text.m89F2C_loc_1008AF2C])
	MOV EAX,DWORD PTR [ESP+var_4+0x18]
	TEST EAX, EAX
	JZ loc_1008AE8C
	CMP DWORD PTR [EBX],EAX
	JNZ_LONG(offset [LEGO1_text.m89F2C_loc_1008AF2C])
loc_1008AE8C:
	MOV EBP,DWORD PTR [EBX]
	MOV AX,WORD PTR SS:[EBP+arg1217233-0x4A4B22]
	TEST AL, 0x02
	JZ loc_1008AEBB
	TEST AL, 0x01
	JZ loc_1008AEAE
	MOV ECX, EBP
	CALL_LONG(offset [LEGO1_text.m88100_sub_10089100])
	TEST EAX, EAX
	JNZ loc_1008AEB8
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x0008
loc_1008AEAE:
	LEA EAX,DWORD PTR [EBP+arg1217248-0x4A4B20]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
loc_1008AEB8:
	INC DWORD PTR [EBP+arg1217254-0x4A4B20]
loc_1008AEBB:
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[EBX+0x0E]
	AND EAX, 0x07
	CMP EAX, 0x04
	JA_LONG(offset [LEGO1_text.m89EFA_loc_1008AEFA])
	JMP_LONG(DWORD PTR [offset LEGO1_text.m89F38_proc_1008AF38+EAX*4])
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1008AF50(DWORD arg1, DWORD arg2)
{
	enum{
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBP
	MOV EAX,DWORD PTR [ESP+arg2+0x4]
	MOV EBP, ESP
	ADD EAX, 0x0C
	SUB ESP, 0x04
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	PUSH EBX
	MOV EBX,DWORD PTR FS:[0x00000000]
	MOV EAX,DWORD PTR [EBX]
	MOV DWORD PTR FS:[0x00000000], EAX
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV EBX,DWORD PTR [EBP+arg2+0x4]
	MOV ESP,DWORD PTR [EBX-0x04]
	MOV EBP,DWORD PTR [EBP+var_8+0x4]
	JMP_LONG(EAX)
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0008
}
}

__declspec(naked) DWORD LEGO1_CallMemberFunction1()
{
__asm{
	POP EAX
	POP ECX
	XCHG DWORD PTR [ESP],EAX
	JMP_LONG(EAX)
}
}

__declspec(naked) DWORD LEGO1_CallMemberFunction1_1()
{
__asm{
	POP EAX
	POP ECX
	XCHG DWORD PTR [ESP],EAX
	JMP_LONG(EAX)
}
}

__declspec(naked) DWORD LEGO1_CallMemberFunction1_2()
{
__asm{
	POP EAX
	POP ECX
	XCHG DWORD PTR [ESP],EAX
	JMP_LONG(EAX)
}
}

__declspec(naked) DWORD LEGO1_sub_1008AFC0(DWORD arg1, DWORD arg2)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EAX, DWORD PTR FS:[0x00000000]
	MOV DWORD PTR [EBP+var_C+0x4],EAX
	MOV DWORD PTR [EBP+var_8+0x4],offset [LEGO1_text.m89FEC_proc_1008AFEC]
	PUSH 0x00
	MOV EAX,DWORD PTR [EBP+arg2+0x4]
	PUSH EAX
	MOV EAX,DWORD PTR [EBP+var_8+0x4]
	PUSH EAX
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m97F9E_j_RtlUnwind])
	JMP_LONG(offset [LEGO1_text.m89FEC_proc_1008AFEC])
}
}

__declspec(naked) DWORD LEGO1_sub_1008B060(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	MOV ECX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x14
	MOV DWORD PTR [ESP+var_C+0x14],EAX
	MOV DWORD PTR [ESP+var_8+0x14],ECX
	MOV DWORD PTR [ESP+var_14+0x14],0x00000000
	MOV DWORD PTR [ESP+var_10+0x14],offset [LEGO1_text.m8A0D0_proc_1008B0D0]
	MOV EAX,DWORD PTR [ESP+arg4+0x14]
	INC EAX
	MOV DWORD PTR [ESP+var_4+0x14],EAX
	MOV EAX, DWORD PTR FS:[0x00000000]
	MOV DWORD PTR [ESP+var_14+0x14],EAX
	LEA EAX,DWORD PTR [ESP+var_14+0x14]
	MOV DWORD PTR FS:[0x00000000], EAX
	MOV EAX,DWORD PTR [ESP+arg5+0x14]
	PUSH EAX
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+arg3+0x1C]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8C4F0_sub_1008D4F0])
	MOV ECX, EAX
	MOV EAX,DWORD PTR [ESP+var_14+0x14]
	MOV DWORD PTR FS:[0x00000000], EAX
	MOV EAX, ECX
	ADD ESP, 0x14
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B100(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7)
{
	enum{
		var_38 = -0x38,
		var_34 = -0x34,
		var_30 = -0x30,
		var_2C = -0x2C,
		var_28 = -0x28,
		var_24 = -0x24,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg5 = 0x14,
		arg6 = 0x18,
		arg7 = 0x1C,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	SUB ESP, 0x34
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV DWORD PTR [EBP+var_2C+0x4],0x00000000
	MOV DWORD PTR [EBP+var_28+0x4],offset [LEGO1_text.m8A1E0_proc_1008B1E0]
	MOV EAX,DWORD PTR [EBP+arg5+0x4]
	MOV DWORD PTR [EBP+var_24+0x4],EAX
	MOV EAX,DWORD PTR [EBP+arg2+0x4]
	MOV DWORD PTR [EBP+var_20+0x4],EAX
	MOV EAX,DWORD PTR [EBP+arg6+0x4]
	MOV DWORD PTR [EBP+var_1C+0x4],EAX
	MOV EAX,DWORD PTR [EBP+arg7+0x4]
	MOV DWORD PTR [EBP+var_18+0x4],EAX
	MOV DWORD PTR [EBP+var_14+0x4],0x00000000
	MOV DWORD PTR [EBP+var_10+0x4],0x00000000
	MOV DWORD PTR [EBP+var_C+0x4],0x00000000
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV DWORD PTR [EBP+var_14+0x4],offset [LEGO1_text.m8A199_proc_1008B199]
	MOV DWORD PTR [EBP+var_10+0x4],ESP
	MOV DWORD PTR [EBP+var_C+0x4],EBP
	MOV EAX, DWORD PTR FS:[0x00000000]
	MOV DWORD PTR [EBP+var_2C+0x4],EAX
	LEA EAX,DWORD PTR [EBP+var_2C+0x4]
	MOV DWORD PTR FS:[0x00000000], EAX
	MOV DWORD PTR [EBP+var_38+0x4],0x00000001
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV DWORD PTR [EBP+var_34+0x4],EAX
	MOV EAX,DWORD PTR [EBP+arg3+0x4]
	MOV DWORD PTR [EBP+var_30+0x4],EAX
	LEA EAX,DWORD PTR [EBP+var_34+0x4]
	PUSH EAX
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV EAX,DWORD PTR [EAX]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	CALL_LONG(DWORD PTR [EAX+0x68])
	ADD ESP, 0x08
	MOV DWORD PTR [EBP+var_38+0x4],0x00000000
	JMP_LONG(offset [LEGO1_text.m8A199_proc_1008B199])
}
}

__declspec(naked) DWORD LEGO1_sub_1008B24C(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	PUSH 0x00
	PUSH 0x00
	PUSH offset [LEGO1_text.m8A264_proc_1008B264]
	PUSH DWORD PTR [EBP+arg1+0x4]
	CALL_LONG(offset [LEGO1_text.m97F9E_j_RtlUnwind])
	JMP_LONG(offset [LEGO1_text.m8A264_proc_1008B264])
}
}

__declspec(naked) DWORD LEGO1_sub_1008B28E(DWORD arg1, DWORD arg2)
{
	enum{
		var_14 = -0x14,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EAX,DWORD PTR [ESP+arg1+0xC]
	PUSH EAX
	PUSH -0x02
	PUSH offset [LEGO1_text.m8A26C_proc_1008B26C]
	PUSH DWORD PTR FS:[0x00000000]
	MOV DWORD PTR FS:[0x00000000],ESP
loc_1008B2AB:
	MOV EAX,DWORD PTR [ESP+arg1+0x1C]
	MOV EBX,DWORD PTR [EAX+0x08]
	MOV ESI,DWORD PTR [EAX+0x0C]
	CMP ESI, -0x01
	JZ loc_1008B2E8
	CMP ESI,DWORD PTR [ESP+arg2+0x1C]
	JZ loc_1008B2E8
	LEA ESI,DWORD PTR [ESI*2+ESI]
	MOV ECX,DWORD PTR [ESI*4+EBX]
	MOV DWORD PTR [ESP+var_14+0x1C],ECX
	MOV DWORD PTR [EAX+0x0C],ECX
	CMP DWORD PTR [ESI*4+EBX+0x04],0x00
	JNZ loc_1008B2E6
	PUSH 0x00000101
	MOV EAX,DWORD PTR [ESI*4+EBX+0x08]
	CALL_LONG(offset [LEGO1_text.m8A322_sub_1008B322])
	CALL_LONG(DWORD PTR [ESI*4+EBX+0x08])
loc_1008B2E6:
	JMP loc_1008B2AB
loc_1008B2E8:
	POP DWORD PTR FS:[0x00000000]
	ADD ESP, 0x0C
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B2F6()
{
__asm{
	XOR EAX, EAX
	MOV ECX,DWORD PTR FS:[0x00000000]
	CMP DWORD PTR [ECX+0x04],offset [LEGO1_text.m8A26C_proc_1008B26C]
	JNZ loc_1008B318
	MOV EDX,DWORD PTR [ECX+0x0C]
	MOV EDX,DWORD PTR [EDX+0x0C]
	CMP DWORD PTR [ECX+0x08],EDX
	JNZ loc_1008B318
	MOV EAX, 0x00000001
loc_1008B318:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B319()
{
__asm{
	PUSH EBX
	PUSH ECX
	MOV EBX, offset LEGO1_data + 0xC8BC
	JMP_LONG(offset [LEGO1_text.m8A32C_loc_1008B32C])
}
}

__declspec(naked) DWORD LEGO1_sub_1008B322()
{
	enum{
		arg1217226 = 0x4A4B28,
	};

__asm{
	PUSH EBX
	PUSH ECX
	MOV EBX, offset LEGO1_data + 0xC8BC
	MOV ECX,DWORD PTR [EBP+arg1217226-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m8A32C_loc_1008B32C])
}
}

__declspec(naked) DWORD LEGO1_sub_1008B370()
{
__asm{
	MOV DWORD PTR [offset LEGO1_data.mCF2C_ptr],offset [LEGO1_text.m8C820_proc_1008D820]
	MOV DWORD PTR [offset LEGO1_data.mCF30_ptr],offset [LEGO1_text.m8C8A0_proc_1008D8A0]
	MOV DWORD PTR [offset LEGO1_data.mCF34_ptr],offset [LEGO1_text.m8C7B0_proc_1008D7B0]
	MOV DWORD PTR [offset LEGO1_data.mCF38_ptr],offset [LEGO1_text.m8C880_proc_1008D880]
	MOV EAX, offset [LEGO1_text.m8CC40_proc_1008DC40]
	MOV DWORD PTR [offset LEGO1_data.mCF28_ptr], EAX
	MOV DWORD PTR [offset LEGO1_data.mCF3C_ptr], EAX
	RET
	DB(0xCC) DB(0xCC) DB(0xCC) DB(0xCC) DB(0xCC) DB(0xCC) DB(0xCC) DB(0xCC) 
	MOV EDX, offset [LEGO1_data.mCF40]
loc_1008B3B5:
	JMP_LONG(offset [LEGO1_text.m8CF8B_loc_1008DF8B])
	MOV EDX, offset [LEGO1_data.mCF60]
	JMP loc_1008B3B5
	MOV EDX, offset [LEGO1_data.mCF80]
	JMP loc_1008B3B5
	MOV EDX, offset [LEGO1_data.mCFA0]
	JMP_LONG(offset [LEGO1_text.m8CE0B_loc_1008DE0B])
	MOV EDX, offset [LEGO1_data.mCF40]
	JMP_LONG(offset [LEGO1_text.m8A3D7_loc_1008B3D7])
}
}

__declspec(naked) DWORD LEGO1_sub_1008B3DC()
{
__asm{
	MOV EDX, offset [LEGO1_data.mCF60]
	JMP_LONG(offset [LEGO1_text.m8A3D7_loc_1008B3D7])
	MOV EDX, offset [LEGO1_data.mCF80]
	JMP_LONG(offset [LEGO1_text.m8A3D7_loc_1008B3D7])
	MOV EDX, offset [LEGO1_data.mCFA0]
	JMP_LONG(offset [LEGO1_text.m8CD90_loc_1008DD90])
}
}

__declspec(naked) DWORD LEGO1_sub_1008B400(DWORD arg1)
{
	enum{
		arg1 = 0x4,
		arg1217224 = 0x4A4B20,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	PUSH EBP
	MOV EDI, 0x00000001
loc_1008B40D:
	CMP DWORD PTR [offset LEGO1_data + 0xD1FC],EDI
	JLE loc_1008B426
	PUSH 0x08
	XOR EAX, EAX
	MOV AL,BYTE PTR [ESI]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8D000_sub_1008E000])
	ADD ESP, 0x08
	JMP loc_1008B439
loc_1008B426:
	XOR EDX, EDX
	MOV ECX,DWORD PTR [offset LEGO1_data.mCFF0_ptr]
	MOV DL,BYTE PTR [ESI]
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[EDX*2+ECX]
	AND EAX, 0x08
loc_1008B439:
	TEST EAX, EAX
	JZ loc_1008B440
	INC ESI
	JMP loc_1008B40D
loc_1008B440:
	XOR EBX, EBX
	MOV BL,BYTE PTR [ESI]
	INC ESI
	MOV EDI, EBX
	CMP EBX, 0x2D
	JZ loc_1008B451
	CMP EBX, 0x2B
	JNZ loc_1008B456
loc_1008B451:
	XOR EBX, EBX
	MOV BL,BYTE PTR [ESI]
	INC ESI
loc_1008B456:
	XOR EBP, EBP
loc_1008B458:
	CMP DWORD PTR [offset LEGO1_data + 0xD1FC],0x01
	JLE loc_1008B46E
	PUSH 0x04
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m8D000_sub_1008E000])
	ADD ESP, 0x08
	JMP loc_1008B47D
loc_1008B46E:
	MOV ECX,DWORD PTR [offset LEGO1_data.mCFF0_ptr]
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[EBX*2+ECX]
	AND EAX, 0x04
loc_1008B47D:
	TEST EAX, EAX
	JZ loc_1008B491
	LEA EAX,DWORD PTR [EBP*4+EBP+arg1217224-0x4A4B20]
	INC ESI
	LEA EBP,DWORD PTR [EAX*2+EBX-0x30]
	XOR EBX, EBX
	MOV BL,BYTE PTR [ESI-0x01]
	JMP loc_1008B458
loc_1008B491:
	MOV EAX, EBP
	CMP EDI, 0x2D
	JNZ loc_1008B49F
	NEG EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1008B49F:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B4B0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8A400_sub_1008B400])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B4C0(DWORD arg1, DWORD arg2)
{
	enum{
		var_20 = -0x20,
		arg1 = 0x4,
		arg2 = 0x8,
		arg1217230 = 0x4A4B38,
	};

__asm{
	SUB ESP, 0x20
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg2+0x28]
	PUSH EDI
	PUSH EBP
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	MOV EBP, EAX
	LEA EDI,DWORD PTR [ESP+var_20+0x30]
	XOR EAX, EAX
	MOV ECX, 0x00000008
	REP STOSD
loc_1008B4DF:
	MOV AL,BYTE PTR [ESI]
	XOR EBX, EBX
	MOV CL, AL
	MOV DL, 0x01
	SHR CL, 0x03
	INC ESI
	MOV BL, CL
	MOV CL, AL
	AND CL, 0x07
	SHL DL, CL
	OR BYTE PTR [EBX+ESP+var_20+0x30],DL
	TEST AL, AL
	JNZ loc_1008B4DF
	MOV EAX,DWORD PTR [ESP+arg1+0x30]
	TEST EAX, EAX
	JNZ loc_1008B507
	MOV EAX,DWORD PTR [EBP+arg1217230-0x4A4B20]
loc_1008B507:
	MOV CL,BYTE PTR [EAX]
	XOR EBX, EBX
	MOV DL, CL
	MOV ESI, 0x00000001
	SHR DL, 0x03
	AND CL, 0x07
	MOV BL, DL
	XOR EDX, EDX
	SHL ESI, CL
	MOV DL,BYTE PTR [EBX+ESP+var_20+0x30]
	TEST ESI, EDX
	JZ loc_1008B54C
loc_1008B526:
	CMP BYTE PTR [EAX],0x00
	JZ loc_1008B54C
	MOV CL,BYTE PTR [EAX+0x01]
	INC EAX
	MOV DL, CL
	XOR EBX, EBX
	SHR DL, 0x03
	MOV ESI, 0x00000001
	MOV BL, DL
	AND CL, 0x07
	SHL ESI, CL
	XOR EDX, EDX
	MOV DL,BYTE PTR [EBX+ESP+var_20+0x30]
	TEST ESI, EDX
	JNZ loc_1008B526
loc_1008B54C:
	MOV ESI, EAX
	CMP BYTE PTR [EAX],0x00
	JZ loc_1008B57E
loc_1008B553:
	MOV CL,BYTE PTR [EAX]
	XOR EDX, EDX
	MOV BL, CL
	AND CL, 0x07
	SHR BL, 0x03
	MOV DL, BL
	XOR EBX, EBX
	MOV BL,BYTE PTR [EDX+ESP+var_20+0x30]
	MOV EDX, 0x00000001
	SHL EDX, CL
	TEST EDX, EBX
	JNZ loc_1008B57A
	INC EAX
	CMP BYTE PTR [EAX],0x00
	JNZ loc_1008B553
	JMP loc_1008B57E
loc_1008B57A:
	MOV BYTE PTR [EAX],0x00
	INC EAX
loc_1008B57E:
	MOV DWORD PTR [EBP+arg1217230-0x4A4B20],EAX
	SUB EAX, ESI
	POP EBP
	CMP EAX, 0x01
	MOV EAX, 0x00000000
	POP EDI
	ADC EAX, -0x01
	AND EAX, ESI
	POP ESI
	POP EBX
	ADD ESP, 0x20
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B5A0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x20
	LEA ECX,DWORD PTR [ESP+arg3+0x20]
	PUSH ESI
	MOV DWORD PTR [ESP+var_14+0x24],0x00000042
	MOV DWORD PTR [ESP+var_18+0x24],EAX
	PUSH ECX
	MOV DWORD PTR [ESP+var_20+0x28],EAX
	LEA EAX,DWORD PTR [ESP+var_20+0x28]
	MOV DWORD PTR [ESP+var_1C+0x28],0x7FFFFFFF
	MOV EDX,DWORD PTR [ESP+arg2+0x28]
	PUSH EDX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8D230_sub_1008E230])
	ADD ESP, 0x0C
	MOV ESI, EAX
	DEC DWORD PTR [ESP+var_1C+0x24]
	JS loc_1008B5F1
	MOV EAX,DWORD PTR [ESP+var_20+0x24]
	MOV BYTE PTR [EAX],0x00
	MOV EAX, ESI
	INC DWORD PTR [ESP+var_20+0x24]
	POP ESI
	ADD ESP, 0x20
	RET
loc_1008B5F1:
	LEA EAX,DWORD PTR [ESP+var_20+0x24]
	PUSH EAX
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m8D0E0_sub_1008E0E0])
	ADD ESP, 0x08
	MOV EAX, ESI
	POP ESI
	ADD ESP, 0x20
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B608()
{
	enum{
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	ADD ESP, -0x0C
	WAIT
	FSTCW WORD PTR [EBP+var_4+0x2]
	WAIT
	MOV AX,WORD PTR SS:[EBP+var_4+0x2]
	OR AH, 0x0C
	MOV WORD PTR SS:[EBP+var_8+0x4],AX
	FLDCW WORD PTR [EBP+var_8+0x4]
	FISTP QWORD PTR [EBP+var_10+0x4]
	FLDCW WORD PTR [EBP+var_4+0x2]
	MOV EAX,DWORD PTR [EBP+var_10+0x4]
	MOV EDX,DWORD PTR [EBP+var_C+0x4]
	LEAVE
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B630(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	MOV ECX,DWORD PTR [ESP+arg1]
	MOV DWORD PTR [EAX+0x14],ECX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B640()
{
__asm{
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	MOV ECX,DWORD PTR [EAX+0x14]
	MOV EDX, ECX
	LEA ECX,DWORD PTR [ECX*4+ECX]
	LEA ECX,DWORD PTR [ECX*4+ECX]
	ADD ECX, EDX
	LEA ECX,DWORD PTR [ECX*8+EDX]
	SHL ECX, 0x08
	SUB ECX, EDX
	LEA ECX,DWORD PTR [ECX*4+EDX+0x00269EC3]
	MOV DWORD PTR [EAX+0x14],ECX
	MOV EAX, ECX
	AND EAX, 0x7FFF0000
	SHR EAX, 0x10
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B680(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	PUSH EDI
	PUSH ESI
	PUSH EBX
	MOV ECX,DWORD PTR [EBP+arg3+0x4]
	JECXZ loc_1008B6B1
	MOV EBX, ECX
	MOV EDI,DWORD PTR [EBP+arg1+0x4]
	MOV ESI, EDI
	XOR EAX, EAX
	REPNE SCAS
	NEG ECX
	ADD ECX, EBX
	MOV EDI, ESI
	MOV ESI,DWORD PTR [EBP+arg2+0x4]
	REPE CMPS
	MOV AL,BYTE PTR [ESI-0x01]
	XOR ECX, ECX
	CMP AL,BYTE PTR [EDI-0x01]
	JA loc_1008B6AF
	JZ loc_1008B6B1
	DEC ECX
	DEC ECX
loc_1008B6AF:
	NOT ECX
loc_1008B6B1:
	MOV EAX, ECX
	POP EBX
	POP ESI
	POP EDI
	LEAVE
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B6C0(DWORD arg1)
{
	enum{
		var_18 = -0x18,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x18
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x20]
	MOV EDI, 0x00000001
loc_1008B6CE:
	CMP DWORD PTR [offset LEGO1_data + 0xD1FC],EDI
	JLE loc_1008B6E7
	PUSH 0x08
	XOR EAX, EAX
	MOV AL,BYTE PTR [ESI]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8D000_sub_1008E000])
	ADD ESP, 0x08
	JMP loc_1008B6FA
loc_1008B6E7:
	XOR EDX, EDX
	MOV ECX,DWORD PTR [offset LEGO1_data.mCFF0_ptr]
	MOV DL,BYTE PTR [ESI]
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[EDX*2+ECX]
	AND EAX, 0x08
loc_1008B6FA:
	TEST EAX, EAX
	JZ loc_1008B701
	INC ESI
	JMP loc_1008B6CE
loc_1008B701:
	PUSH 0x00
	MOV EDI, ESI
	PUSH 0x00
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	DEC ECX
	LEA EAX,DWORD PTR [ESP+var_18+0x28]
	PUSH ECX
	PUSH ESI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8DCF0_sub_1008ECF0])
	FLD QWORD PTR [EAX+0x10]
	ADD ESP, 0x14
	POP EDI
	POP ESI
	ADD ESP, 0x18
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B730(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DEC0_sub_1008EEC0])
	ADD ESP, 0x04
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DFA0_sub_1008EFA0])
	MOV ECX,DWORD PTR [ESP+arg2+0x10]
	ADD ESP, 0x04
	MOV EDI, EAX
	LEA EAX,DWORD PTR [ESP+arg3+0xC]
	PUSH EAX
	PUSH ECX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8D230_sub_1008E230])
	ADD ESP, 0x0C
	MOV EBX, EAX
	PUSH ESI
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8E040_sub_1008F040])
	ADD ESP, 0x08
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DF30_sub_1008EF30])
	ADD ESP, 0x04
	MOV EAX, EBX
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B780(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg4+0x8]
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DEC0_sub_1008EEC0])
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	MOV ECX,DWORD PTR [ESP+arg2+0xC]
	MOV EDX,DWORD PTR [ESP+arg1+0xC]
	ADD ESP, 0x04
	PUSH ESI
	PUSH EAX
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m8A7C0_sub_1008B7C0])
	ADD ESP, 0x10
	MOV EDI, EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DF30_sub_1008EF30])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B7C0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg1217224 = 0x4A4B20,
		arg1217225 = 0x4A4B24,
		arg1217227 = 0x4A4B2C,
		arg1217228 = 0x4A4B30,
		arg1217230 = 0x4A4B38,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x0C
	MOV DWORD PTR [ESP+var_8+0xC],EAX
	PUSH EBX
	MOV EAX,DWORD PTR [ESP+arg3+0x10]
	PUSH ESI
	IMUL EAX,DWORD PTR [ESP+arg2+0x14]
	PUSH EDI
	MOV EBX, EAX
	MOV DWORD PTR [ESP+var_C+0x18],EAX
	PUSH EBP
	TEST EAX, EAX
	JNZ loc_1008B7EC
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_1008B7EC:
	MOV EBP,DWORD PTR [ESP+arg4+0x1C]
	TEST DWORD PTR [EBP+arg1217227-0x4A4B20],0x0000010C
	JZ loc_1008B802
	MOV EAX,DWORD PTR [EBP+arg1217230-0x4A4B20]
	MOV DWORD PTR [ESP+var_4+0x1C],EAX
	JMP loc_1008B80A
loc_1008B802:
	MOV DWORD PTR [ESP+var_4+0x1C],0x00001000
loc_1008B80A:
	CMP DWORD PTR [ESP+var_C+0x1C],0x00
	JZ FAR loc_1008B8F6
loc_1008B815:
	MOV ECX,DWORD PTR [EBP+arg1217227-0x4A4B20]
	AND ECX, 0x00000108
	JZ loc_1008B857
	MOV EAX,DWORD PTR [EBP+arg1217225-0x4A4B20]
	TEST EAX, EAX
	JZ loc_1008B857
	CMP EBX, EAX
	MOV EDX, EBX
	JB loc_1008B82F
	MOV EDX, EAX
loc_1008B82F:
	MOV ECX, EDX
	MOV EAX, EDX
	SHR ECX, 0x02
	MOV EDI,DWORD PTR [EBP+arg1217224-0x4A4B20]
	MOV ESI,DWORD PTR [ESP+var_8+0x1C]
	SUB EBX, EDX
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	SUB DWORD PTR [EBP+arg1217225-0x4A4B20],EAX
	ADD DWORD PTR [EBP+arg1217224-0x4A4B20],EDX
	ADD DWORD PTR [ESP+var_8+0x1C],EDX
	JMP FAR loc_1008B8EE
loc_1008B857:
	CMP DWORD PTR [ESP+var_4+0x1C],EBX
	JA loc_1008B8C0
	TEST ECX, ECX
	JZ loc_1008B872
	PUSH EBP
	CALL_LONG(offset [LEGO1_text.m8E340_sub_1008F340])
	ADD ESP, 0x04
	TEST EAX, EAX
	JNZ FAR loc_1008B902
loc_1008B872:
	CMP DWORD PTR [ESP+var_4+0x1C],0x00
	MOV ESI, EBX
	JZ loc_1008B887
	MOV ESI, EBX
	MOV EAX, EBX
	SUB EDX, EDX
	DIV DWORD PTR [ESP+var_4+0x1C]
	SUB ESI, EDX
loc_1008B887:
	MOV EAX,DWORD PTR [ESP+var_8+0x1C]
	PUSH ESI
	PUSH EAX
	MOV ECX,DWORD PTR [EBP+arg1217228-0x4A4B20]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8E080_sub_1008F080])
	ADD ESP, 0x0C
	CMP EAX, -0x01
	JZ loc_1008B916
	SUB EBX, EAX
	ADD DWORD PTR [ESP+var_8+0x1C],EAX
	CMP EAX, ESI
	JNB loc_1008B8EE
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	SUB EDX, EDX
	OR DWORD PTR [EBP+arg1217227-0x4A4B20],0x20
	SUB EAX, EBX
	DIV DWORD PTR [ESP+arg2+0x1C]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_1008B8C0:
	MOV EAX,DWORD PTR [ESP+var_8+0x1C]
	PUSH EBP
	MOVSX ECX,BYTE PTR [EAX]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8D0E0_sub_1008E0E0])
	ADD ESP, 0x08
	CMP EAX, -0x01
	JZ loc_1008B92E
	DEC EBX
	MOV EAX,DWORD PTR [EBP+arg1217230-0x4A4B20]
	INC DWORD PTR [ESP+var_8+0x1C]
	MOV DWORD PTR [ESP+var_4+0x1C],EAX
	TEST EAX, EAX
	JG loc_1008B8EE
	MOV DWORD PTR [ESP+var_4+0x1C],0x00000001
loc_1008B8EE:
	TEST EBX, EBX
	JNZ FAR loc_1008B815
loc_1008B8F6:
	MOV EAX,DWORD PTR [ESP+arg3+0x1C]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_1008B902:
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	SUB EDX, EDX
	SUB EAX, EBX
	DIV DWORD PTR [ESP+arg2+0x1C]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_1008B916:
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	SUB EDX, EDX
	OR DWORD PTR [EBP+arg1217227-0x4A4B20],0x20
	SUB EAX, EBX
	DIV DWORD PTR [ESP+arg2+0x1C]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_1008B92E:
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	SUB EDX, EDX
	SUB EAX, EBX
	DIV DWORD PTR [ESP+arg2+0x1C]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B950(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg4+0x8]
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DEC0_sub_1008EEC0])
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	MOV ECX,DWORD PTR [ESP+arg2+0xC]
	MOV EDX,DWORD PTR [ESP+arg1+0xC]
	ADD ESP, 0x04
	PUSH ESI
	PUSH EAX
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m8A990_sub_1008B990])
	ADD ESP, 0x10
	MOV EDI, EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DF30_sub_1008EF30])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008B990(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x0C
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	PUSH EBX
	MOV DWORD PTR [ESP+var_C+0x10],ECX
	PUSH ESI
	IMUL EAX,DWORD PTR [ESP+arg2+0x14]
	MOV DWORD PTR [ESP+var_8+0x14],EAX
	PUSH EDI
	PUSH EBP
	TEST EAX, EAX
	MOV EBP, EAX
	JNZ loc_1008B9BC
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_1008B9BC:
	MOV EBX,DWORD PTR [ESP+arg4+0x1C]
	TEST DWORD PTR [EBX+0x0C],0x0000010C
	JZ loc_1008B9D2
	MOV EAX,DWORD PTR [EBX+0x18]
	MOV DWORD PTR [ESP+var_4+0x1C],EAX
	JMP loc_1008B9DA
loc_1008B9D2:
	MOV DWORD PTR [ESP+var_4+0x1C],0x00001000
loc_1008B9DA:
	CMP DWORD PTR [ESP+var_8+0x1C],0x00
	JZ FAR loc_1008BA86
loc_1008B9E5:
	TEST DWORD PTR [EBX+0x0C],0x0000010C
	JZ loc_1008BA20
	MOV EAX,DWORD PTR [EBX+0x04]
	TEST EAX, EAX
	JZ loc_1008BA20
	CMP EBP, EAX
	MOV EDX, EBP
	JB loc_1008B9FD
	MOV EDX, EAX
loc_1008B9FD:
	MOV ECX, EDX
	MOV EAX, EDX
	SHR ECX, 0x02
	MOV EDI,DWORD PTR [ESP+var_C+0x1C]
	MOV ESI,DWORD PTR [EBX]
	SUB EBP, EDX
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	SUB DWORD PTR [EBX+0x04],EDX
	ADD DWORD PTR [EBX],EDX
	ADD DWORD PTR [ESP+var_C+0x1C],EDX
	JMP loc_1008BA7E
loc_1008BA20:
	CMP DWORD PTR [ESP+var_4+0x1C],EBP
	JA loc_1008BA5E
	CMP DWORD PTR [ESP+var_4+0x1C],0x00
	MOV ECX, EBP
	JZ loc_1008BA3B
	MOV ECX, EBP
	MOV EAX, EBP
	SUB EDX, EDX
	DIV DWORD PTR [ESP+var_4+0x1C]
	SUB ECX, EDX
loc_1008BA3B:
	PUSH ECX
	MOV EAX,DWORD PTR [EBX+0x10]
	MOV ECX,DWORD PTR [ESP+var_C+0x20]
	PUSH ECX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8E590_sub_1008F590])
	ADD ESP, 0x0C
	TEST EAX, EAX
	JZ loc_1008BA92
	CMP EAX, -0x01
	JZ loc_1008BAAA
	SUB EBP, EAX
	ADD DWORD PTR [ESP+var_C+0x1C],EAX
	JMP loc_1008BA7E
loc_1008BA5E:
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m8E490_sub_1008F490])
	ADD ESP, 0x04
	CMP EAX, -0x01
	JZ loc_1008BAC2
	MOV ECX,DWORD PTR [ESP+var_C+0x1C]
	DEC EBP
	INC DWORD PTR [ESP+var_C+0x1C]
	MOV BYTE PTR [ECX],AL
	MOV EAX,DWORD PTR [EBX+0x18]
	MOV DWORD PTR [ESP+var_4+0x1C],EAX
loc_1008BA7E:
	TEST EBP, EBP
	JNZ FAR loc_1008B9E5
loc_1008BA86:
	MOV EAX,DWORD PTR [ESP+arg3+0x1C]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_1008BA92:
	MOV EAX,DWORD PTR [ESP+var_8+0x1C]
	SUB EDX, EDX
	OR DWORD PTR [EBX+0x0C],0x10
	SUB EAX, EBP
	DIV DWORD PTR [ESP+arg2+0x1C]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_1008BAAA:
	MOV EAX,DWORD PTR [ESP+var_8+0x1C]
	SUB EDX, EDX
	OR DWORD PTR [EBX+0x0C],0x20
	SUB EAX, EBP
	DIV DWORD PTR [ESP+arg2+0x1C]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_1008BAC2:
	MOV EAX,DWORD PTR [ESP+var_8+0x1C]
	SUB EDX, EDX
	SUB EAX, EBP
	DIV DWORD PTR [ESP+arg2+0x1C]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008BBD0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI, 0xFFFFFFFF
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	TEST BYTE PTR [ESI+0x0C],0x40
	JZ loc_1008BBED
	MOV DWORD PTR [ESI+0x0C],0x00000000
	MOV EAX, EDI
	POP EDI
	POP ESI
	RET
loc_1008BBED:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DEC0_sub_1008EEC0])
	ADD ESP, 0x04
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8AC10_sub_1008BC10])
	ADD ESP, 0x04
	MOV EDI, EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DF30_sub_1008EF30])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008BC10(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI, 0xFFFFFFFF
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	TEST BYTE PTR [ESI+0x0C],0x83
	JZ loc_1008BC63
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8E340_sub_1008F340])
	ADD ESP, 0x04
	MOV EDI, EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8EC20_sub_1008FC20])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x10]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8EB20_sub_1008FB20])
	ADD ESP, 0x04
	TEST EAX, EAX
	JGE loc_1008BC4C
	MOV EDI, 0xFFFFFFFF
	JMP loc_1008BC63
loc_1008BC4C:
	MOV EAX,DWORD PTR [ESI+0x1C]
	TEST EAX, EAX
	JZ loc_1008BC63
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	MOV DWORD PTR [ESI+0x1C],0x00000000
	ADD ESP, 0x04
loc_1008BC63:
	MOV DWORD PTR [ESI+0x0C],0x00000000
	MOV EAX, EDI
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008BC70()
{
__asm{
	MOV EAX, DWORD PTR [offset LEGO1_data.mC8DC_ptr]
	TEST EAX, EAX
	JZ loc_1008BC7B
	CALL_LONG(EAX)
loc_1008BC7B:
	PUSH offset [LEGO1_data.m30]
	PUSH offset LEGO1_data + 0x24
	CALL_LONG(offset [LEGO1_text.m8ADB0_sub_1008BDB0])
	ADD ESP, 0x08
	PUSH offset [LEGO1_data.m20]
	PUSH offset [LEGO1_data.m0]
	CALL_LONG(offset [LEGO1_text.m8ADB0_sub_1008BDB0])
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008BCA0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH 0x00
	PUSH 0x01
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8ACD0_sub_1008BCD0])
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008BCC0()
{
__asm{
	PUSH 0x01
	PUSH 0x00
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m8ACD0_sub_1008BCD0])
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008BCD0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8AD90_sub_1008BD90])
	CMP DWORD PTR [offset LEGO1_data + 0xCBB4],0x01
	MOV ESI,DWORD PTR [ESP+arg1+0xC]
	JNZ loc_1008BCF3
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B4_GetCurrentProcess])
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3DC_TerminateProcess])
loc_1008BCF3:
	MOV DWORD PTR [offset LEGO1_data + 0xCBB0],0x00000001
	CMP DWORD PTR [ESP+arg2+0xC],0x00
	MOV EBX,DWORD PTR [ESP+arg3+0xC]
	MOV BYTE PTR [offset LEGO1_data + 0xCBAC],BL
	JNZ loc_1008BD4D
	CMP DWORD PTR [offset LEGO1_data + 0x19720],0x00
	JZ loc_1008BD3B
	MOV EDI,DWORD PTR [offset LEGO1_data + 0x1971C]
	SUB EDI, 0x04
	CMP EDI,DWORD PTR [offset LEGO1_data + 0x19720]
	JB loc_1008BD3B
loc_1008BD28:
	MOV EAX,DWORD PTR [EDI]
	TEST EAX, EAX
	JZ loc_1008BD30
	CALL_LONG(EAX)
loc_1008BD30:
	SUB EDI, 0x04
	CMP EDI,DWORD PTR [offset LEGO1_data + 0x19720]
	JNB loc_1008BD28
loc_1008BD3B:
	PUSH offset [LEGO1_data.m40]
	PUSH offset LEGO1_data + 0x34
	CALL_LONG(offset [LEGO1_text.m8ADB0_sub_1008BDB0])
	ADD ESP, 0x08
loc_1008BD4D:
	PUSH offset LEGO1_data + 0x48
	PUSH offset LEGO1_data + 0x44
	CALL_LONG(offset [LEGO1_text.m8ADB0_sub_1008BDB0])
	ADD ESP, 0x08
	TEST EBX, EBX
	JZ loc_1008BD6C
	CALL_LONG(offset [LEGO1_text.m8ADA0_sub_1008BDA0])
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1008BD6C:
	MOV DWORD PTR [offset LEGO1_data + 0xCBB4],0x00000001
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3D8_ExitProcess])
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008BD90()
{
__asm{
	PUSH 0x0D
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008BDA0()
{
__asm{
	PUSH 0x0D
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008BDB0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI,DWORD PTR [ESP+arg2+0x8]
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	CMP EDI, ESI
	JBE loc_1008BDCD
loc_1008BDBE:
	MOV EAX,DWORD PTR [ESI]
	TEST EAX, EAX
	JZ loc_1008BDC6
	CALL_LONG(EAX)
loc_1008BDC6:
	ADD ESI, 0x04
	CMP EDI, ESI
	JA loc_1008BDBE
loc_1008BDCD:
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008BDD0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DEC0_sub_1008EEC0])
	ADD ESP, 0x04
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8AE00_sub_1008BE00])
	ADD ESP, 0x04
	MOV EDI, EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DF30_sub_1008EF30])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008BE00(DWORD arg1)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg1217224 = 0x4A4B20,
		arg1217225 = 0x4A4B24,
	};

__asm{
	SUB ESP, 0x0C
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	MOV EDI,DWORD PTR [ESP+arg1+0x1C]
	CMP DWORD PTR [EDI+0x04],0x00
	MOV EAX,DWORD PTR [EDI+0x10]
	MOV DWORD PTR [ESP+var_C+0x1C],EAX
	JGE loc_1008BE1F
	MOV DWORD PTR [EDI+0x04],0x00000000
loc_1008BE1F:
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	PUSH 0x01
	PUSH 0x00
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8ECC0_sub_1008FCC0])
	ADD ESP, 0x0C
	MOV ESI, EAX
	TEST ESI, ESI
	JGE loc_1008BE43
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_1008BE43:
	MOV EBX,DWORD PTR [EDI+0x0C]
	TEST EBX,0x00000108
	JNZ loc_1008BE5B
	SUB ESI,DWORD PTR [EDI+0x04]
	POP EBP
	MOV EAX, ESI
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_1008BE5B:
	MOV EDX,DWORD PTR [EDI]
	MOV ECX,DWORD PTR [EDI+0x08]
	MOV EAX, EDX
	SUB EAX, ECX
	MOV DWORD PTR [ESP+var_8+0x1C],EAX
	MOV DWORD PTR [ESP+var_4+0x1C],EAX
	TEST BL,0x03
	JZ loc_1008BEB8
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	MOV EBP,DWORD PTR [ESP+var_C+0x1C]
	AND EAX, -0x19
	AND EBP, 0x1F
	SAR EAX, 0x03
	SHL EBP, 0x02
	MOV EAX,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	LEA EBP,DWORD PTR [EBP*8+EBP+arg1217224-0x4A4B20]
	TEST BYTE PTR [EBP+EAX+arg1217225-0x4A4B20],0x80
	JZ loc_1008BEA8
	CMP ECX, EDX
	JNB loc_1008BEA8
loc_1008BE9A:
	CMP BYTE PTR [ECX],0x0A
	JNZ loc_1008BEA3
	INC DWORD PTR [ESP+var_4+0x1C]
loc_1008BEA3:
	INC ECX
	CMP ECX, EDX
	JB loc_1008BE9A
loc_1008BEA8:
	TEST ESI, ESI
	JNZ loc_1008BED5
	MOV EAX,DWORD PTR [ESP+var_4+0x1C]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_1008BEB8:
	TEST BL,0x80
	JNZ loc_1008BEA8
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	POP EBP
	MOV DWORD PTR [EAX], 0x00000016
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_1008BED5:
	TEST BL,0x01
	JZ FAR loc_1008BF94
	MOV EAX,DWORD PTR [EDI+0x04]
	TEST EAX, EAX
	JNZ loc_1008BEF2
	MOV DWORD PTR [ESP+var_4+0x1C],0x00000000
	JMP FAR loc_1008BF94
loc_1008BEF2:
	MOV EBP,DWORD PTR [ESP+var_8+0x1C]
	LEA EBX,DWORD PTR [EBP+EAX]
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	AND EAX, -0x19
	SAR EAX, 0x03
	ADD EAX, offset LEGO1_data + 0x19610
	MOV DWORD PTR [ESP+var_8+0x1C],EAX
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	AND EAX, 0x1F
	MOV ECX,DWORD PTR [ESP+var_8+0x1C]
	SHL EAX, 0x02
	LEA EBP,DWORD PTR [EAX*8+EAX]
	MOV EAX,DWORD PTR [ECX]
	TEST BYTE PTR [EBP+EAX+arg1217225-0x4A4B20],0x80
	JZ loc_1008BF92
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	PUSH 0x02
	PUSH 0x00
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8ECC0_sub_1008FCC0])
	ADD ESP, 0x0C
	CMP EAX, ESI
	JNZ loc_1008BF58
	MOV EAX,DWORD PTR [EDI+0x08]
	LEA ECX,DWORD PTR [EBX+EAX]
	CMP ECX, EAX
	JBE loc_1008BF50
loc_1008BF45:
	CMP BYTE PTR [EAX],0x0A
	JNZ loc_1008BF4B
	INC EBX
loc_1008BF4B:
	INC EAX
	CMP ECX, EAX
	JA loc_1008BF45
loc_1008BF50:
	TEST BYTE PTR [EDI+0x0D],0x20
	JZ loc_1008BF92
	JMP loc_1008BF91
loc_1008BF58:
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	PUSH 0x00
	PUSH ESI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8ECC0_sub_1008FCC0])
	ADD ESP, 0x0C
	CMP EBX, 0x00000200
	JA loc_1008BF81
	MOV EAX,DWORD PTR [EDI+0x0C]
	TEST AL, 0x08
	JZ loc_1008BF81
	TEST AH,0x04
	MOV EBX, 0x00000200
	JZ loc_1008BF84
loc_1008BF81:
	MOV EBX,DWORD PTR [EDI+0x18]
loc_1008BF84:
	MOV EAX,DWORD PTR [ESP+var_8+0x1C]
	MOV ECX,DWORD PTR [EAX]
	TEST BYTE PTR [EBP+ECX+arg1217225-0x4A4B20],0x04
	JZ loc_1008BF92
loc_1008BF91:
	INC EBX
loc_1008BF92:
	SUB ESI, EBX
loc_1008BF94:
	MOV EAX,DWORD PTR [ESP+var_4+0x1C]
	POP EBP
	ADD EAX, ESI
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008BFB0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH ESI
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8F080_sub_10090080])
	MOV ESI, EAX
	TEST ESI, ESI
	JNZ loc_1008BFC2
	XOR EAX, EAX
	POP EDI
	POP ESI
	RET
loc_1008BFC2:
	MOV EAX,DWORD PTR [ESP+arg3+0x8]
	PUSH ESI
	MOV ECX,DWORD PTR [ESP+arg2+0xC]
	PUSH EAX
	MOV EDX,DWORD PTR [ESP+arg1+0x10]
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m8EE70_sub_1008FE70])
	ADD ESP, 0x10
	MOV EDI, EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DF30_sub_1008EF30])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008BFF0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	PUSH 0x40
	MOV ECX,DWORD PTR [ESP+arg1+0x4]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8AFB0_sub_1008BFB0])
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_strncpy(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg3]
	PUSH EDI
	TEST ECX, ECX
	JZ loc_1008C093
	PUSH ESI
	PUSH EBX
	MOV EBX, ECX
	MOV ESI,DWORD PTR [ESP+arg2+0xC]
	TEST ESI,0x00000003
	MOV EDI,DWORD PTR [ESP+arg1+0xC]
	JNZ loc_1008C034
	SHR ECX, 0x02
	JNZ loc_1008C0A1
	JMP loc_1008C055
loc_1008C034:
	MOV AL,BYTE PTR [ESI]
	INC ESI
	MOV BYTE PTR [EDI],AL
	INC EDI
	DEC ECX
	JZ loc_1008C062
	TEST AL, AL
	JZ loc_1008C06A
	TEST ESI,0x00000003
	JNZ loc_1008C034
	MOV EBX, ECX
	SHR ECX, 0x02
	JNZ loc_1008C0A1
loc_1008C050:
	AND EBX, 0x03
	JZ loc_1008C062
loc_1008C055:
	MOV AL,BYTE PTR [ESI]
	INC ESI
	MOV BYTE PTR [EDI],AL
	INC EDI
	TEST AL, AL
	JZ loc_1008C08E
	DEC EBX
	JNZ loc_1008C055
loc_1008C062:
	MOV EAX,DWORD PTR [ESP+arg1+0xC]
	POP EBX
	POP ESI
	POP EDI
	RET
loc_1008C06A:
	TEST EDI,0x00000003
	JZ loc_1008C084
loc_1008C072:
	MOV BYTE PTR [EDI],AL
	INC EDI
	DEC ECX
	JZ FAR loc_1008C106
	TEST EDI,0x00000003
	JNZ loc_1008C072
loc_1008C084:
	MOV EBX, ECX
	SHR ECX, 0x02
	JNZ loc_1008C0F7
loc_1008C08B:
	MOV BYTE PTR [EDI],AL
	INC EDI
loc_1008C08E:
	DEC EBX
	JNZ loc_1008C08B
	POP EBX
	POP ESI
loc_1008C093:
	MOV EAX,DWORD PTR [ESP+arg1+0x4]
	POP EDI
	RET
loc_1008C099:
	MOV DWORD PTR [EDI],EDX
	ADD EDI, 0x04
	DEC ECX
	JZ loc_1008C050
loc_1008C0A1:
	MOV EDX, 0x7EFEFEFF
	MOV EAX,DWORD PTR [ESI]
	ADD EDX, EAX
	XOR EAX, -0x01
	XOR EAX, EDX
	MOV EDX,DWORD PTR [ESI]
	ADD ESI, 0x04
	TEST EAX, 0x81010100
	JZ loc_1008C099
	TEST DL, DL
	JZ loc_1008C0EB
	TEST DH, DH
	JZ loc_1008C0E1
	TEST EDX,0x00FF0000
	JZ loc_1008C0D7
	TEST EDX,0xFF000000
	JNZ loc_1008C099
	MOV DWORD PTR [EDI],EDX
	JMP loc_1008C0EF
loc_1008C0D7:
	AND EDX, 0x0000FFFF
	MOV DWORD PTR [EDI],EDX
	JMP loc_1008C0EF
loc_1008C0E1:
	AND EDX, 0x000000FF
	MOV DWORD PTR [EDI],EDX
	JMP loc_1008C0EF
loc_1008C0EB:
	XOR EDX, EDX
	MOV DWORD PTR [EDI],EDX
loc_1008C0EF:
	ADD EDI, 0x04
	XOR EAX, EAX
	DEC ECX
	JZ loc_1008C101
loc_1008C0F7:
	XOR EAX, EAX
loc_1008C0F9:
	MOV DWORD PTR [EDI],EAX
	ADD EDI, 0x04
	DEC ECX
	JNZ loc_1008C0F9
loc_1008C101:
	AND EBX, 0x03
	JNZ loc_1008C08B
loc_1008C106:
	MOV EAX,DWORD PTR [ESP+arg4]
	POP EBX
	POP ESI
	POP EDI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008C110(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	PUSH EDI
	PUSH ESI
	PUSH EBX
	MOV ESI,DWORD PTR [EBP+arg2+0x4]
	MOV EDI,DWORD PTR [EBP+arg1+0x4]
	LEA EAX,DWORD PTR [offset LEGO1_data + 0xD478]
	CMP DWORD PTR [EAX+0x08],0x00
	JNZ loc_1008C163
	MOV AL, 0xFF
	MOV EAX, EAX
loc_1008C12C:
	OR AL, AL
	JZ loc_1008C15E
	MOV AL,BYTE PTR [ESI]
	INC ESI
	MOV AH,BYTE PTR [EDI]
	INC EDI
	CMP AH, AL
	JZ loc_1008C12C
	SUB AL, 0x41
	CMP AL, 0x1A
	SBB CL, CL
	AND CL, 0x20
	ADD AL, CL
	ADD AL, 0x41
	XCHG AL, AH
	SUB AL, 0x41
	CMP AL, 0x1A
	SBB CL, CL
	AND CL, 0x20
	ADD AL, CL
	ADD AL, 0x41
	CMP AL, AH
	JZ loc_1008C12C
	SBB AL, AL
	SBB AL, 0xFF
loc_1008C15E:
	MOVSX EAX,AL
	JMP loc_1008C1D2
loc_1008C163:
	CMP DWORD PTR [offset LEGO1_data + 0x195FC],0x00
	JG loc_1008C176
	INC DWORD PTR [offset LEGO1_data + 0x19600]
	PUSH 0x00
	JMP loc_1008C184
loc_1008C176:
	PUSH 0x13
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	MOV DWORD PTR [ESP],0x00000001
loc_1008C184:
	MOV EAX, 0x000000FF
	XOR EBX, EBX
	DB(0x90) 
loc_1008C18C:
	OR AL, AL
	JZ loc_1008C1B7
	MOV AL,BYTE PTR [ESI]
	INC ESI
	MOV BL,BYTE PTR [EDI]
	INC EDI
	CMP AL, BL
	JZ loc_1008C18C
	PUSH EAX
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m8F1F0_sub_100901F0])
	MOV EBX, EAX
	ADD ESP, 0x04
	CALL_LONG(offset [LEGO1_text.m8F1F0_sub_100901F0])
	ADD ESP, 0x04
	CMP BL, AL
	JZ loc_1008C18C
	SBB EAX, EAX
	SBB EAX, -0x01
loc_1008C1B7:
	MOV EBX, EAX
	POP EAX
	OR EAX, EAX
	JNZ loc_1008C1C6
	DEC DWORD PTR [offset LEGO1_data + 0x19600]
	JMP loc_1008C1D0
loc_1008C1C6:
	PUSH 0x13
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
loc_1008C1D0:
	MOV EAX, EBX
loc_1008C1D2:
	POP EBX
	POP ESI
	POP EDI
	LEAVE
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008C1E0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	LEA EAX,DWORD PTR [ESP+arg3]
	PUSH 0x00
	MOV ECX,DWORD PTR [ESP+arg2+0x4]
	PUSH EAX
	MOV EDX,DWORD PTR [ESP+arg1+0x8]
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m8F2E0_sub_100902E0])
	ADD ESP, 0x10
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008C200(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_20 = -0x20,
		var_1C = -0x1C,
		var_18 = -0x18,
		var_14 = -0x14,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	SUB ESP, 0x20
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	PUSH EDI
	MOV DWORD PTR [ESP+var_14+0x24],0x00000049
	MOV EDI,DWORD PTR [ESP+arg1+0x24]
	MOV DWORD PTR [ESP+var_18+0x24],EDI
	MOV DWORD PTR [ESP+var_20+0x24],EDI
	REPNE SCAS
	NOT ECX
	DEC ECX
	LEA EAX,DWORD PTR [ESP+arg3+0x24]
	MOV DWORD PTR [ESP+var_1C+0x24],ECX
	PUSH EAX
	MOV EDX,DWORD PTR [ESP+arg2+0x28]
	LEA ECX,DWORD PTR [ESP+var_20+0x28]
	PUSH EDX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8F580_sub_10090580])
	ADD ESP, 0x0C
	POP EDI
	ADD ESP, 0x20
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1008C250(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		var_24 = -0x24,
		var_20 = -0x20,
		var_14 = -0x14,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset LEGO1_rdata + 0x6988
	PUSH offset [LEGO1_text.m8B980_proc_1008C980]
	PUSH EAX
	XOR EAX, EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x10
	MOV DWORD PTR [EBP+var_24+0x4],EAX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	MOV DWORD PTR [EBP+var_20+0x4],EAX
	MOV ESI,DWORD PTR [EBP+arg3+0x4]
	CMP ESI, EAX
	JLE loc_1008C29B
	MOV EDI,DWORD PTR [EBP+arg4+0x4]
loc_1008C288:
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	CALL_LONG(EDI)
	MOV EAX,DWORD PTR [EBP+arg2+0x4]
	ADD DWORD PTR [EBP+arg1+0x4],EAX
	INC DWORD PTR [EBP+var_20+0x4]
	CMP ESI,DWORD PTR [EBP+var_20+0x4]
	JG loc_1008C288
loc_1008C29B:
	MOV DWORD PTR [EBP+var_24+0x4],0x00000001
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m8B2C0_sub_1008C2C0])
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	POP EDI
	MOV DWORD PTR FS:[0x00000000], EAX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0014
}
}

__declspec(naked) DWORD LEGO1_sub_1008C2C0()
{
	enum{
		arg1217216 = 0x4A4B00,
		arg1217217 = 0x4A4B04,
		arg1217226 = 0x4A4B28,
		arg1217227 = 0x4A4B2C,
		arg1217230 = 0x4A4B38,
	};

__asm{
	CMP DWORD PTR [EBP+arg1217216-0x4A4B20],0x00
	JNZ loc_1008C2DB
	MOV EAX,DWORD PTR [EBP+arg1217230-0x4A4B20]
	PUSH EAX
	MOV EAX,DWORD PTR [EBP+arg1217217-0x4A4B20]
	PUSH EAX
	MOV EAX,DWORD PTR [EBP+arg1217227-0x4A4B20]
	PUSH EAX
	MOV EAX,DWORD PTR [EBP+arg1217226-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8B370_sub_1008C370])
loc_1008C2DB:
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1008C2E0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_20 = -0x20,
		var_14 = -0x14,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset LEGO1_rdata + 0x6998
	PUSH offset [LEGO1_text.m8B980_proc_1008C980]
	PUSH EAX
	XOR EAX, EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	MOV ECX,DWORD PTR [EBP+arg3+0x4]
	IMUL ECX,DWORD PTR [EBP+arg2+0x4]
	SUB ESP, 0x0C
	ADD DWORD PTR [EBP+arg1+0x4],ECX
	MOV DWORD PTR [EBP+var_20+0x4],EAX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	DEC DWORD PTR [EBP+arg3+0x4]
	JS loc_1008C32B
loc_1008C31A:
	MOV EAX,DWORD PTR [EBP+arg2+0x4]
	SUB DWORD PTR [EBP+arg1+0x4],EAX
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	CALL_LONG(DWORD PTR [EBP+arg4+0x4])
	DEC DWORD PTR [EBP+arg3+0x4]
	JNS loc_1008C31A
loc_1008C32B:
	MOV DWORD PTR [EBP+var_20+0x4],0x00000001
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m8B350_sub_1008C350])
	MOV EAX,DWORD PTR [EBP+var_14+0x4]
	POP EDI
	MOV DWORD PTR FS:[0x00000000], EAX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0010
}
}

__declspec(naked) DWORD LEGO1_sub_1008C350()
{
	enum{
		arg1217217 = 0x4A4B04,
		arg1217226 = 0x4A4B28,
		arg1217227 = 0x4A4B2C,
		arg1217228 = 0x4A4B30,
		arg1217229 = 0x4A4B34,
	};

__asm{
	CMP DWORD PTR [EBP+arg1217217-0x4A4B20],0x00
	JNZ loc_1008C36B
	MOV EAX,DWORD PTR [EBP+arg1217229-0x4A4B20]
	PUSH EAX
	MOV EAX,DWORD PTR [EBP+arg1217228-0x4A4B20]
	PUSH EAX
	MOV EAX,DWORD PTR [EBP+arg1217227-0x4A4B20]
	PUSH EAX
	MOV EAX,DWORD PTR [EBP+arg1217226-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8B370_sub_1008C370])
loc_1008C36B:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008C370(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_1C = -0x1C,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset LEGO1_rdata + 0x69A8
	PUSH offset [LEGO1_text.m8B980_proc_1008C980]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV DWORD PTR [EBP+var_1C+0x4],ESP
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EBX,DWORD PTR [EBP+arg3+0x4]
	DEC EBX
	MOV DWORD PTR [EBP+arg3+0x4],EBX
	JS_LONG(offset [LEGO1_text.m8B3CE_loc_1008C3CE])
	MOV ESI,DWORD PTR [EBP+arg1+0x4]
	MOV EDI,DWORD PTR [EBP+arg2+0x4]
loc_1008C3AC:
	SUB ESI, EDI
	MOV DWORD PTR [EBP+arg1+0x4],ESI
	MOV ECX, ESI
	CALL_LONG(DWORD PTR [EBP+arg4+0x4])
	DEC EBX
	MOV DWORD PTR [EBP+arg3+0x4],EBX
	JNS loc_1008C3AC
	JMP_LONG(offset [LEGO1_text.m8B3CE_loc_1008C3CE])
}
}

__declspec(naked) DWORD LEGO1_proc_1008C3BE()
{
	enum{
		arg1217219 = 0x4A4B0C,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217219-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8B3F0_sub_1008C3F0])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_1008C3CB()
{
	enum{
		arg1217218 = 0x4A4B08,
	};

__asm{
	MOV ESP,DWORD PTR [EBP+arg1217218-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m8B3CE_loc_1008C3CE])
}
}

__declspec(naked) DWORD __stdcall LEGO1_loc_1008C3CE(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		arg1217220 = 0x4A4B10,
		arg1217223 = 0x4A4B1C,
	};

__asm{
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0xFFFFFFFF
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	POP EDI
	MOV DWORD PTR FS:[0x00000000], EAX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RETN 0x0010
}
}

__declspec(naked) DWORD LEGO1_sub_1008C3F0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	MOV ECX,DWORD PTR [EAX]
	CMP DWORD PTR [ECX], 0xE06D7363
	JNZ loc_1008C403
	CALL_LONG(offset [LEGO1_text.m902E0_sub_100912E0])
loc_1008C403:
	XOR EAX, EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008C410(DWORD arg1)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	XOR EBP, EBP
	CMP DWORD PTR [offset LEGO1_data + 0xD480],EBP
	JNZ loc_1008C44D
	MOV EBX,DWORD PTR [ESP+arg1+0x14]
	MOV EAX, EBX
	CMP BYTE PTR [EBX],0x00
	JZ loc_1008C443
loc_1008C42C:
	MOV CL,BYTE PTR [EAX]
	CMP CL, 0x41
	JL loc_1008C43D
	CMP CL, 0x5A
	JG loc_1008C43D
	ADD CL, 0x20
	MOV BYTE PTR [EAX],CL
loc_1008C43D:
	INC EAX
	CMP BYTE PTR [EAX],0x00
	JNZ loc_1008C42C
loc_1008C443:
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_1008C44D:
	CMP DWORD PTR [offset LEGO1_data + 0x195FC],0x00
	JZ loc_1008C46A
	PUSH 0x13
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	MOV DWORD PTR [ESP+var_4+0x18],0x00000001
	ADD ESP, 0x04
	JMP loc_1008C478
loc_1008C46A:
	MOV DWORD PTR [ESP+var_4+0x14],0x00000000
	INC DWORD PTR [offset LEGO1_data + 0x19600]
loc_1008C478:
	CMP DWORD PTR [offset LEGO1_data + 0xD480],0x00
	JNZ loc_1008C4C6
	CMP DWORD PTR [ESP+var_4+0x14],0x00
	JZ loc_1008C494
	PUSH 0x13
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	JMP loc_1008C49A
loc_1008C494:
	DEC DWORD PTR [offset LEGO1_data + 0x19600]
loc_1008C49A:
	MOV EBX,DWORD PTR [ESP+arg1+0x14]
	MOV EAX, EBX
	CMP BYTE PTR [EBX],0x00
	JZ loc_1008C4BC
loc_1008C4A5:
	MOV CL,BYTE PTR [EAX]
	CMP CL, 0x41
	JL loc_1008C4B6
	CMP CL, 0x5A
	JG loc_1008C4B6
	ADD CL, 0x20
	MOV BYTE PTR [EAX],CL
loc_1008C4B6:
	INC EAX
	CMP BYTE PTR [EAX],0x00
	JNZ loc_1008C4A5
loc_1008C4BC:
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_1008C4C6:
	MOV EBX,DWORD PTR [ESP+arg1+0x14]
	PUSH 0x00
	PUSH 0x00
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xD480]
	PUSH 0x00
	PUSH -0x01
	PUSH EBX
	PUSH 0x00000100
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m903E0_sub_100913E0])
	ADD ESP, 0x1C
	MOV ESI, EAX
	TEST ESI, ESI
	JZ loc_1008C53A
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV EBP, EAX
	TEST EBP, EBP
	JZ loc_1008C53A
	PUSH 0x00
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xD480]
	PUSH ESI
	PUSH EBP
	PUSH -0x01
	PUSH EBX
	PUSH 0x00000100
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m903E0_sub_100913E0])
	ADD ESP, 0x1C
	TEST EAX, EAX
	JZ loc_1008C53A
	MOV EDI, EBP
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI, EBX
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
loc_1008C53A:
	CMP DWORD PTR [ESP+var_4+0x14],0x00
	JZ loc_1008C54D
	PUSH 0x13
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	JMP loc_1008C553
loc_1008C54D:
	DEC DWORD PTR [offset LEGO1_data + 0x19600]
loc_1008C553:
	PUSH EBP
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008C570(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3E0_GetFileAttributesA])
	CMP EAX, -0x01
	JNZ loc_1008C595
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B8_GetLastError])
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8EDD0_sub_1008FDD0])
	ADD ESP, 0x04
	MOV EAX, 0xFFFFFFFF
	RET
loc_1008C595:
	TEST AL, 0x01
	JZ loc_1008C5BC
	TEST BYTE PTR [ESP+arg2],0x02
	JZ loc_1008C5BC
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x0000000D
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	MOV DWORD PTR [EAX], 0x00000005
	MOV EAX, 0xFFFFFFFF
	RET
loc_1008C5BC:
	XOR EAX, EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008C5C0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV EDI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8DEC0_sub_1008EEC0])
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	MOV ECX,DWORD PTR [ESP+arg2+0xC]
	ADD ESP, 0x04
	PUSH EAX
	PUSH ECX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8B600_sub_1008C600])
	ADD ESP, 0x0C
	MOV ESI, EAX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8DF30_sub_1008EF30])
	ADD ESP, 0x04
	MOV EAX, ESI
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008C600(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	MOV EAX,DWORD PTR [ESI+0x0C]
	TEST AL, 0x83
	JZ loc_1008C686
	MOV EDI,DWORD PTR [ESP+arg3+0xC]
	TEST EDI, EDI
	JZ loc_1008C620
	CMP EDI, 0x01
	JZ loc_1008C620
	CMP EDI, 0x02
	JNZ loc_1008C686
loc_1008C620:
	AND EAX, -0x11
	CMP EDI, 0x01
	MOV DWORD PTR [ESI+0x0C],EAX
	JNZ loc_1008C63E
	PUSH ESI
	XOR EDI, EDI
	CALL_LONG(offset [LEGO1_text.m8AE00_sub_1008BE00])
	MOV EBX,DWORD PTR [ESP+arg2+0x10]
	ADD ESP, 0x04
	ADD EBX, EAX
	JMP loc_1008C642
loc_1008C63E:
	MOV EBX,DWORD PTR [ESP+arg2+0xC]
loc_1008C642:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8E340_sub_1008F340])
	ADD ESP, 0x04
	MOV EAX,DWORD PTR [ESI+0x0C]
	TEST AL, 0x80
	JZ loc_1008C65A
	AND EAX, -0x04
	MOV DWORD PTR [ESI+0x0C],EAX
	JMP loc_1008C66E
loc_1008C65A:
	TEST AL, 0x01
	JZ loc_1008C66E
	TEST AL, 0x08
	JZ loc_1008C66E
	TEST AH,0x04
	JNZ loc_1008C66E
	MOV DWORD PTR [ESI+0x18],0x00000200
loc_1008C66E:
	PUSH EDI
	MOV EAX,DWORD PTR [ESI+0x10]
	PUSH EBX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8ECC0_sub_1008FCC0])
	ADD ESP, 0x0C
	INC EAX
	CMP EAX, 0x01
	POP EDI
	SBB EAX, EAX
	POP ESI
	POP EBX
	RET
loc_1008C686:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	POP EDI
	MOV DWORD PTR [EAX], 0x00000016
	MOV EAX, 0xFFFFFFFF
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008C6A0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	CMP DWORD PTR [offset LEGO1_data + 0xD1FC],0x01
	JLE loc_1008C6B9
	MOV ECX,DWORD PTR [ESP+arg1]
	PUSH 0x04
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8D000_sub_1008E000])
	ADD ESP, 0x08
	RET
loc_1008C6B9:
	MOV EDX,DWORD PTR [offset LEGO1_data.mCFF0_ptr]
	XOR EAX, EAX
	MOV ECX,DWORD PTR [ESP+arg1]
	MOV AX,WORD PTR DS:[ECX*2+EDX]
	AND EAX, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008C6D0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	CMP DWORD PTR [offset LEGO1_data + 0xD1FC],0x01
	JLE loc_1008C6E9
	MOV ECX,DWORD PTR [ESP+arg1]
	PUSH 0x08
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8D000_sub_1008E000])
	ADD ESP, 0x08
	RET
loc_1008C6E9:
	MOV EDX,DWORD PTR [offset LEGO1_data.mCFF0_ptr]
	XOR EAX, EAX
	MOV ECX,DWORD PTR [ESP+arg1]
	MOV AX,WORD PTR DS:[ECX*2+EDX]
	AND EAX, 0x08
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1008C700(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	CMP EAX, 0x01
	JNZ FAR loc_1008C807
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m408_GetVersion])
	CMP DWORD PTR [offset LEGO1_data + 0xCF14],0x00
	MOV DWORD PTR [offset LEGO1_data + 0xCB78], EAX
	JNZ loc_1008C75F
	CMP AL, 0x03
	JNZ loc_1008C736
	TEST EAX, 0x80000000
	JZ loc_1008C736
	PUSH 0x02
	CALL_LONG(offset [LEGO1_text.m90ED0_sub_10091ED0])
	ADD ESP, 0x04
loc_1008C736:
	PUSH offset [LEGO1_rdata.m69BC_str]
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3EC_GetModuleHandleA])
	TEST EAX, EAX
	JZ loc_1008C75F
	PUSH offset [LEGO1_rdata.m69B4_str]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m414_GetProcAddress])
	TEST EAX, EAX
	JZ loc_1008C75F
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m90ED0_sub_10091ED0])
	ADD ESP, 0x04
loc_1008C75F:
	CALL_LONG(offset [LEGO1_text.m90640_sub_10091640])
	TEST EAX, EAX
	JNZ loc_1008C76D
	XOR EAX, EAX
	RETN 0x000C
loc_1008C76D:
	XOR EDX, EDX
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xCB78]
	MOV DL, CH
	MOV EAX, ECX
	SHR ECX, 0x10
	AND EAX, 0x000000FF
	MOV DWORD PTR [offset LEGO1_data + 0xCB84],EDX
	MOV DWORD PTR [offset LEGO1_data + 0xCB80], EAX
	SHL EAX, 0x08
	MOV DWORD PTR [offset LEGO1_data + 0xCB78],ECX
	ADD EAX, EDX
	MOV DWORD PTR [offset LEGO1_data + 0xCB7C], EAX
	CALL_LONG(offset [LEGO1_text.m8C540_sub_1008D540])
	TEST EAX, EAX
	JNZ loc_1008C7AF
	CALL_LONG(offset [LEGO1_text.m90680_sub_10091680])
	XOR EAX, EAX
	RETN 0x000C
loc_1008C7AF:
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3E4_GetCommandLineA])
	MOV DWORD PTR [offset LEGO1_data + 0x19714], EAX
	CALL_LONG(offset [LEGO1_text.m90D40_sub_10091D40])
	CMP DWORD PTR [offset LEGO1_data + 0x19714],0x00
	MOV DWORD PTR [offset LEGO1_data + 0xCF04], EAX
	JZ loc_1008C7F8
	TEST EAX, EAX
	JZ loc_1008C7F8
	CALL_LONG(offset [LEGO1_text.m8E840_sub_1008F840])
	CALL_LONG(offset [LEGO1_text.m90D30_sub_10091D30])
	CALL_LONG(offset [LEGO1_text.m907B0_sub_100917B0])
	CALL_LONG(offset [LEGO1_text.m906C0_sub_100916C0])
	CALL_LONG(offset [LEGO1_text.m8AC70_sub_1008BC70])
	MOV EAX, 0x00000001
	INC DWORD PTR [offset LEGO1_data + 0xCF00]
	RETN 0x000C
loc_1008C7F8:
	CALL_LONG(offset [LEGO1_text.m8C5A0_sub_1008D5A0])
	CALL_LONG(offset [LEGO1_text.m90680_sub_10091680])
	XOR EAX, EAX
	RETN 0x000C
loc_1008C807:
	TEST EAX, EAX
	JNZ loc_1008C844
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xCF00]
	TEST EAX, EAX
	JLE loc_1008C83F
	DEC EAX
	CMP DWORD PTR [offset LEGO1_data + 0xCBB0],0x00
	MOV DWORD PTR [offset LEGO1_data + 0xCF00], EAX
	JNZ loc_1008C828
	CALL_LONG(offset [LEGO1_text.m8ACC0_sub_1008BCC0])
loc_1008C828:
	CALL_LONG(offset [LEGO1_text.m8EA20_sub_1008FA20])
	CALL_LONG(offset [LEGO1_text.m8C5A0_sub_1008D5A0])
	CALL_LONG(offset [LEGO1_text.m90680_sub_10091680])
	MOV EAX, 0x00000001
	RETN 0x000C
loc_1008C83F:
	XOR EAX, EAX
	RETN 0x000C
loc_1008C844:
	CMP EAX, 0x03
	JNZ loc_1008C853
	PUSH 0x00
	CALL_LONG(offset [LEGO1_text.m8C660_sub_1008D660])
	ADD ESP, 0x04
loc_1008C853:
	MOV EAX, 0x00000001
	RETN 0x000C
}
}

__declspec(naked) DWORD __stdcall LEGO1_EntryPoint(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_8 = -0x8,
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBX
	MOV EAX, 0x00000001
	MOV EBX,DWORD PTR [ESP+arg2+0x4]
	PUSH ESI
	PUSH EDI
	TEST EBX, EBX
	PUSH EBP
	JNZ loc_1008C883
	CMP DWORD PTR [offset LEGO1_data + 0xCF00],0x00
	JNZ loc_1008C883
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x000C
loc_1008C883:
	CMP EBX, 0x01
	JZ loc_1008C88D
	CMP EBX, 0x02
	JNZ loc_1008C8C7
loc_1008C88D:
	MOV ECX,DWORD PTR [offset LEGO1_data + 0x19718]
	TEST ECX, ECX
	JZ loc_1008C8A6
	MOV EDI,DWORD PTR [ESP+arg3+0x10]
	MOV ESI,DWORD PTR [ESP+arg1+0x10]
	PUSH EDI
	PUSH EBX
	PUSH ESI
	CALL_LONG(ECX)
	JMP loc_1008C8AE
loc_1008C8A6:
	MOV ESI,DWORD PTR [ESP+var_8+0x1C]
	MOV EDI,DWORD PTR [ESP+r+0x1C]
loc_1008C8AE:
	TEST EAX, EAX
	JZ loc_1008C8BE
	PUSH EDI
	PUSH EBX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8B700_sub_1008C700])
	TEST EAX, EAX
	JNZ loc_1008C8CF
loc_1008C8BE:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x000C
loc_1008C8C7:
	MOV ESI,DWORD PTR [ESP+arg1+0x10]
	MOV EDI,DWORD PTR [ESP+arg3+0x10]
loc_1008C8CF:
	PUSH EDI
	PUSH EBX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m90EE0__DllMain_12])
	MOV EBP, EAX
	CMP EBX, 0x01
	JNZ loc_1008C8EB
	TEST EBP, EBP
	JNZ loc_1008C8EB
	PUSH EDI
	PUSH 0x00
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8B700_sub_1008C700])
loc_1008C8EB:
	TEST EBX, EBX
	JZ loc_1008C8F4
	CMP EBX, 0x03
	JNZ loc_1008C916
loc_1008C8F4:
	PUSH EDI
	PUSH EBX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8B700_sub_1008C700])
	TEST EAX, EAX
	JNZ loc_1008C902
	XOR EBP, EBP
loc_1008C902:
	TEST EBP, EBP
	JZ loc_1008C916
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x19718]
	TEST EAX, EAX
	JZ loc_1008C916
	PUSH EDI
	PUSH EBX
	PUSH ESI
	CALL_LONG(EAX)
	MOV EBP, EAX
loc_1008C916:
	MOV EAX, EBP
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RETN 0x000C
}
}

__declspec(naked) DWORD LEGO1_sub_1008C920(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR [offset LEGO1_data.mCF10]
	CMP EAX, 0x01
	JZ loc_1008C937
	TEST EAX, EAX
	JNZ loc_1008C93C
	CMP DWORD PTR [offset LEGO1_data + 0xCF14],0x01
	JNZ loc_1008C93C
loc_1008C937:
	CALL_LONG(offset [LEGO1_text.m90EF0_sub_10091EF0])
loc_1008C93C:
	MOV EAX,DWORD PTR [ESP+arg1]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m90F30_sub_10091F30])
	ADD ESP, 0x04
	PUSH 0x000000FF
	CALL_LONG(DWORD PTR [offset LEGO1_data.mCF0C_ptr])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008C960()
{
__asm{
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x19368]
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008C970()
{
__asm{
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xD8EC]
	RET
	DB(0xCC) DB(0xCC) 
	PUSH ESI
	INC EBX
	XOR DH,BYTE PTR [EAX]
	POP EAX
	INC EBX
	XOR BYTE PTR [EAX],DH
	JMP_LONG(offset [LEGO1_text.m8B980_proc_1008C980])
}
}

__declspec(naked) DWORD LEGO1_sub_1008CA60()
{
__asm{
	PUSH 0x0A
	CALL_LONG(offset [LEGO1_text.m90F30_sub_10091F30])
	ADD ESP, 0x04
	PUSH 0x16
	CALL_LONG(offset [LEGO1_text.m91130_sub_10092130])
	ADD ESP, 0x04
	PUSH 0x03
	CALL_LONG(offset [LEGO1_text.m8ACA0_sub_1008BCA0])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008CA80(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
		arg7 = 0x1C,
		arg8 = 0x20,
	};

__asm{
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg5+0x4]
	CMP DWORD PTR [ESI], 0x19930520
	JZ loc_1008CA92
	CALL_LONG(offset [LEGO1_text.m90360_sub_10091360])
loc_1008CA92:
	MOV ECX,DWORD PTR [ESP+arg1+0x4]
	TEST BYTE PTR [ECX+0x04],0x66
	JZ loc_1008CAC5
	CMP DWORD PTR [ESI+0x04],0x00
	JZ loc_1008CABE
	CMP DWORD PTR [ESP+arg6+0x4],0x00
	JNZ loc_1008CABE
	MOV EAX,DWORD PTR [ESP+arg4+0x4]
	PUSH -0x01
	MOV ECX,DWORD PTR [ESP+arg2+0x8]
	PUSH ESI
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8BF60_sub_1008CF60])
	ADD ESP, 0x10
loc_1008CABE:
	MOV EAX, 0x00000001
	POP ESI
	RET
loc_1008CAC5:
	CMP DWORD PTR [ESI+0x0C],0x00
	JZ loc_1008CB35
	CMP DWORD PTR [ECX], 0xE06D7363
	JNZ loc_1008CB0D
	CMP DWORD PTR [ECX+0x14],0x19930520
	JBE loc_1008CB0D
	MOV EAX,DWORD PTR [ECX+0x1C]
	MOV EDX,DWORD PTR [EAX+0x08]
	TEST EDX, EDX
	JZ loc_1008CB0D
	MOV EAX,DWORD PTR [ESP+arg8+0x4]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg7+0x8]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg6+0xC]
	PUSH EAX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg4+0x14]
	MOV EAX,DWORD PTR [ESP+arg3+0x14]
	PUSH ESI
	PUSH EAX
	MOV ESI,DWORD PTR [ESP+arg2+0x1C]
	PUSH ESI
	PUSH ECX
	CALL_LONG(EDX)
	ADD ESP, 0x20
	POP ESI
	RET
loc_1008CB0D:
	MOV EAX,DWORD PTR [ESP+arg7+0x4]
	MOV EDX,DWORD PTR [ESP+arg6+0x4]
	PUSH EAX
	PUSH EDX
	MOV EAX,DWORD PTR [ESP+arg8+0xC]
	MOV EDX,DWORD PTR [ESP+arg3+0xC]
	PUSH EAX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg4+0x14]
	MOV EAX,DWORD PTR [ESP+arg2+0x14]
	PUSH ESI
	PUSH EDX
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8BB40_sub_1008CB40])
	ADD ESP, 0x20
loc_1008CB35:
	MOV EAX, 0x00000001
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008CB40(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
		arg7 = 0x1C,
		arg8 = 0x20,
		arg1217224 = 0x4A4B20,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	SUB ESP, 0x18
	PUSH EBX
	MOV ECX,DWORD PTR [EAX+0x08]
	MOV DWORD PTR [ESP+var_14+0x1C],ECX
	PUSH ESI
	PUSH EDI
	CMP ECX, -0x01
	PUSH EBP
	JL loc_1008CB60
	MOV EAX,DWORD PTR [ESP+arg5+0x28]
	CMP DWORD PTR [EAX+0x04],ECX
	JG loc_1008CB65
loc_1008CB60:
	CALL_LONG(offset [LEGO1_text.m90360_sub_10091360])
loc_1008CB65:
	MOV EAX,DWORD PTR [ESP+arg1+0x28]
	CMP DWORD PTR [EAX], 0xE06D7363
	JNZ loc_1008CBEB
	CMP DWORD PTR [EAX+0x10],0x03
	JNZ loc_1008CBEB
	CMP DWORD PTR [EAX+0x14],0x19930520
	JNZ loc_1008CBEB
	CMP DWORD PTR [EAX+0x1C],0x00
	JNZ loc_1008CBEB
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	CMP DWORD PTR [EAX+0x6C],0x00
	JZ FAR loc_1008CDD6
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	MOV EAX,DWORD PTR [EAX+0x6C]
	MOV DWORD PTR [ESP+arg1+0x28],EAX
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	MOV EAX,DWORD PTR [EAX+0x70]
	PUSH 0x01
	MOV ECX,DWORD PTR [ESP+arg1+0x2C]
	MOV DWORD PTR [ESP+arg3+0x2C],EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m913F0_sub_100923F0])
	ADD ESP, 0x08
	TEST EAX, EAX
	JNZ loc_1008CBC5
	CALL_LONG(offset [LEGO1_text.m90360_sub_10091360])
loc_1008CBC5:
	MOV EAX,DWORD PTR [ESP+arg1+0x28]
	CMP DWORD PTR [EAX], 0xE06D7363
	JNZ loc_1008CBEB
	CMP DWORD PTR [EAX+0x10],0x03
	JNZ loc_1008CBEB
	CMP DWORD PTR [EAX+0x14],0x19930520
	JNZ loc_1008CBEB
	CMP DWORD PTR [EAX+0x1C],0x00
	JNZ loc_1008CBEB
	CALL_LONG(offset [LEGO1_text.m90360_sub_10091360])
loc_1008CBEB:
	MOV EAX,DWORD PTR [ESP+arg1+0x28]
	CMP DWORD PTR [EAX], 0xE06D7363
	JNZ FAR loc_1008CD92
	CMP DWORD PTR [EAX+0x10],0x03
	JNZ FAR loc_1008CD92
	CMP DWORD PTR [EAX+0x14],0x19930520
	JNZ FAR loc_1008CD92
	LEA EAX,DWORD PTR [ESP+var_8+0x28]
	LEA ECX,DWORD PTR [ESP+var_C+0x28]
	MOV EDX,DWORD PTR [ESP+var_14+0x28]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg7+0x2C]
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+arg5+0x30]
	PUSH EDX
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8BEC0_sub_1008CEC0])
	MOV ECX,DWORD PTR [ESP+var_C+0x3C]
	MOV DWORD PTR [ESP+var_18+0x3C],EAX
	ADD ESP, 0x14
	CMP DWORD PTR [ESP+var_8+0x28],ECX
	JBE FAR loc_1008CD74
loc_1008CC45:
	MOV ECX,DWORD PTR [ESP+var_14+0x28]
	MOV EAX,DWORD PTR [ESP+var_18+0x28]
	CMP DWORD PTR [EAX],ECX
	JG FAR loc_1008CD5D
	CMP DWORD PTR [EAX+0x04],ECX
	JL FAR loc_1008CD5D
	MOV ECX,DWORD PTR [EAX+0x10]
	MOV EDX,DWORD PTR [EAX+0x0C]
	MOV DWORD PTR [ESP+var_10+0x28],EDX
	TEST EDX, EDX
	JZ FAR loc_1008CD5D
loc_1008CC70:
	MOV EAX,DWORD PTR [ESP+arg1+0x28]
	MOV EDX,DWORD PTR [EAX+0x1C]
	MOV EAX,DWORD PTR [EDX+0x0C]
	LEA EBP,DWORD PTR [EAX+0x04]
	MOV EDX,DWORD PTR [EAX]
	TEST EDX, EDX
	JZ FAR loc_1008CD14
loc_1008CC87:
	MOV EAX,DWORD PTR [ESP+arg1+0x28]
	MOV ESI,DWORD PTR [ECX+0x04]
	TEST ESI, ESI
	MOV EBX,DWORD PTR [EAX+0x1C]
	MOV EAX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	MOV DWORD PTR [ESP+var_4+0x28],EBX
	JZ loc_1008CCFF
	CMP BYTE PTR [ESI+0x08],0x00
	JZ loc_1008CCFF
	CMP ESI,DWORD PTR [EAX+0x04]
	JZ loc_1008CCD9
	ADD ESI, 0x08
	MOV EDI,DWORD PTR [EAX+0x04]
	ADD EDI, 0x08
loc_1008CCB0:
	MOV BL,BYTE PTR [ESI]
	CMP BL,BYTE PTR [EDI]
	JNZ loc_1008CCD0
	OR BL, BL
	JZ loc_1008CCCC
	MOV BL,BYTE PTR [ESI+0x01]
	CMP BL,BYTE PTR [EDI+0x01]
	JNZ loc_1008CCD0
	ADD ESI, 0x02
	ADD EDI, 0x02
	OR BL, BL
	JNZ loc_1008CCB0
loc_1008CCCC:
	XOR ESI, ESI
	JMP loc_1008CCD5
loc_1008CCD0:
	SBB ESI, ESI
	SBB ESI, -0x01
loc_1008CCD5:
	TEST ESI, ESI
	JNZ loc_1008CCFB
loc_1008CCD9:
	TEST BYTE PTR [EAX],0x02
	JZ loc_1008CCE3
	TEST BYTE PTR [ECX],0x08
	JZ loc_1008CCFB
loc_1008CCE3:
	MOV EAX,DWORD PTR [ESP+var_4+0x28]
	MOV EAX,DWORD PTR [EAX]
	TEST AL, 0x01
	JZ loc_1008CCF2
	TEST BYTE PTR [ECX],0x01
	JZ loc_1008CCFB
loc_1008CCF2:
	TEST AL, 0x02
	JZ loc_1008CCFF
	TEST BYTE PTR [ECX],0x02
	JNZ loc_1008CCFF
loc_1008CCFB:
	XOR EAX, EAX
	JMP loc_1008CD04
loc_1008CCFF:
	MOV EAX, 0x00000001
loc_1008CD04:
	TEST EAX, EAX
	JNZ loc_1008CD28
	DEC EDX
	ADD EBP, 0x04
	TEST EDX, EDX
	JNZ FAR loc_1008CC87
loc_1008CD14:
	ADD ECX, 0x10
	DEC DWORD PTR [ESP+var_10+0x28]
	CMP DWORD PTR [ESP+var_10+0x28],0x00
	JNZ FAR loc_1008CC70
	JMP loc_1008CD5D
loc_1008CD28:
	MOV EAX,DWORD PTR [ESP+arg8+0x28]
	MOV EDX,DWORD PTR [ESP+arg7+0x28]
	MOV EBX,DWORD PTR [ESP+var_18+0x28]
	PUSH EAX
	PUSH EDX
	MOV EAX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	MOV EDX,DWORD PTR [ESP+arg4+0x30]
	PUSH EBX
	PUSH EAX
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+arg5+0x3C]
	MOV EAX,DWORD PTR [ESP+arg3+0x3C]
	PUSH ECX
	PUSH EDX
	MOV ECX,DWORD PTR [ESP+arg2+0x44]
	PUSH EAX
	MOV EDX,DWORD PTR [ESP+arg1+0x48]
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m8C050_sub_1008D050])
	ADD ESP, 0x28
loc_1008CD5D:
	ADD DWORD PTR [ESP+var_18+0x28],0x14
	INC DWORD PTR [ESP+var_C+0x28]
	MOV EAX,DWORD PTR [ESP+var_C+0x28]
	CMP DWORD PTR [ESP+var_8+0x28],EAX
	JA FAR loc_1008CC45
loc_1008CD74:
	CMP BYTE PTR [ESP+arg6+0x28],0x00
	JZ loc_1008CDD6
	MOV EAX,DWORD PTR [ESP+arg1+0x28]
	PUSH 0x01
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8C440_sub_1008D440])
	ADD ESP, 0x08
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x18
	RET
loc_1008CD92:
	CMP BYTE PTR [ESP+arg6+0x28],0x00
	JNZ loc_1008CDD1
	MOV EAX,DWORD PTR [ESP+arg8+0x28]
	MOV ECX,DWORD PTR [ESP+arg7+0x28]
	MOV EDX,DWORD PTR [ESP+var_14+0x28]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg5+0x2C]
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+arg4+0x30]
	PUSH EDX
	MOV EDX,DWORD PTR [ESP+arg3+0x34]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg2+0x38]
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+arg1+0x3C]
	PUSH EDX
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8BDE0_sub_1008CDE0])
	ADD ESP, 0x20
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x18
	RET
loc_1008CDD1:
	CALL_LONG(offset [LEGO1_text.m902E0_sub_100912E0])
loc_1008CDD6:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x18
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008CDE0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7, DWORD arg8)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
		arg7 = 0x1C,
		arg8 = 0x20,
		arg1217224 = 0x4A4B20,
		arg1217225 = 0x4A4B24,
		arg1217227 = 0x4A4B2C,
		arg1217228 = 0x4A4B30,
	};

__asm{
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	CMP DWORD PTR [EAX+0x68],0x00
	JZ loc_1008CE27
	MOV EAX,DWORD PTR [ESP+arg8+0x18]
	MOV EDI,DWORD PTR [ESP+arg7+0x18]
	MOV ESI,DWORD PTR [ESP+arg5+0x18]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg4+0x1C]
	PUSH EDI
	MOV ECX,DWORD PTR [ESP+arg3+0x20]
	PUSH ESI
	MOV EDX,DWORD PTR [ESP+arg2+0x24]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg1+0x28]
	PUSH ECX
	PUSH EDX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8A100_sub_1008B100])
	ADD ESP, 0x1C
	TEST EAX, EAX
	JNZ FAR loc_1008CEAF
	JMP loc_1008CE2F
loc_1008CE27:
	MOV ESI,DWORD PTR [ESP+arg5+0x18]
	MOV EDI,DWORD PTR [ESP+arg7+0x18]
loc_1008CE2F:
	LEA EAX,DWORD PTR [ESP+var_4+0x18]
	LEA ECX,DWORD PTR [ESP+var_8+0x18]
	MOV EBX,DWORD PTR [ESP+arg6+0x18]
	PUSH EAX
	PUSH ECX
	PUSH EBX
	PUSH EDI
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8BEC0_sub_1008CEC0])
	ADD ESP, 0x14
	MOV EBP, EAX
	MOV EAX,DWORD PTR [ESP+var_8+0x18]
	CMP DWORD PTR [ESP+var_4+0x18],EAX
	JBE loc_1008CEAF
loc_1008CE54:
	CMP DWORD PTR [EBP+arg1217224-0x4A4B20],EBX
	JG loc_1008CE9E
	CMP DWORD PTR [EBP+arg1217225-0x4A4B20],EBX
	JL loc_1008CE9E
	MOV ECX,DWORD PTR [EBP+arg1217227-0x4A4B20]
	SHL ECX, 0x04
	ADD ECX,DWORD PTR [EBP+arg1217228-0x4A4B20]
	MOV EAX,DWORD PTR [ECX-0x0C]
	TEST EAX, EAX
	JZ loc_1008CE74
	CMP BYTE PTR [EAX+0x08],0x00
	JNZ loc_1008CE9E
loc_1008CE74:
	MOV EAX,DWORD PTR [ESP+arg8+0x18]
	SUB ECX, 0x10
	MOV EDX,DWORD PTR [ESP+arg4+0x18]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg3+0x1C]
	PUSH EDI
	PUSH EBP
	PUSH 0x00
	PUSH ECX
	PUSH ESI
	MOV ECX,DWORD PTR [ESP+arg2+0x30]
	PUSH EDX
	MOV EDX,DWORD PTR [ESP+arg1+0x34]
	PUSH EAX
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m8C050_sub_1008D050])
	ADD ESP, 0x28
loc_1008CE9E:
	ADD EBP, 0x14
	INC DWORD PTR [ESP+var_8+0x18]
	MOV EAX,DWORD PTR [ESP+var_8+0x18]
	CMP DWORD PTR [ESP+var_4+0x18],EAX
	JA loc_1008CE54
loc_1008CEAF:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008CEC0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x0C
	PUSH EBX
	MOV ECX,DWORD PTR [EAX+0x10]
	MOV DWORD PTR [ESP+var_4+0x10],ECX
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [EAX+0x0C]
	MOV EDI,DWORD PTR [ESP+arg2+0x18]
	PUSH EBP
	MOV DWORD PTR [ESP+var_C+0x1C],ESI
	MOV DWORD PTR [ESP+var_8+0x1C],ESI
	TEST EDI, EDI
	JL loc_1008CF28
	LEA ECX,DWORD PTR [ESI*4+0x00000000]
	MOV EAX,DWORD PTR [ESP+var_4+0x1C]
	MOV EBP,DWORD PTR [ESP+arg3+0x1C]
	LEA EDX,DWORD PTR [ECX*4+ECX]
	LEA EBX,DWORD PTR [EAX+EDX+0x04]
loc_1008CEFB:
	CMP ESI, -0x01
	JNZ loc_1008CF05
	CALL_LONG(offset [LEGO1_text.m90360_sub_10091360])
loc_1008CF05:
	SUB EBX, 0x14
	DEC ESI
	CMP DWORD PTR [EBX],EBP
	JGE loc_1008CF12
	CMP DWORD PTR [EBX+0x04],EBP
	JGE loc_1008CF17
loc_1008CF12:
	CMP ESI, -0x01
	JNZ loc_1008CF24
loc_1008CF17:
	DEC EDI
	MOV ECX,DWORD PTR [ESP+var_8+0x1C]
	MOV DWORD PTR [ESP+var_C+0x1C],ECX
	MOV DWORD PTR [ESP+var_8+0x1C],ESI
loc_1008CF24:
	TEST EDI, EDI
	JGE loc_1008CEFB
loc_1008CF28:
	INC ESI
	MOV EAX,DWORD PTR [ESP+arg4+0x1C]
	MOV EDX,DWORD PTR [ESP+arg5+0x1C]
	MOV ECX,DWORD PTR [ESP+var_C+0x1C]
	MOV DWORD PTR [EAX],ESI
	MOV EAX,DWORD PTR [ESP+arg1+0x1C]
	MOV DWORD PTR [EDX],ECX
	CMP DWORD PTR [EAX+0x0C],ECX
	JB loc_1008CF46
	CMP ECX, ESI
	JNB loc_1008CF4B
loc_1008CF46:
	CALL_LONG(offset [LEGO1_text.m90360_sub_10091360])
loc_1008CF4B:
	SHL ESI, 0x02
	MOV EAX,DWORD PTR [ESP+var_4+0x1C]
	POP EBP
	POP EDI
	LEA ECX,DWORD PTR [ESI*4+ESI]
	POP ESI
	ADD EAX, ECX
	POP EBX
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008CF60(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_24 = -0x24,
		var_20 = -0x20,
		var_1C = -0x1C,
		arg1 = 0x4,
		arg4 = 0x10,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset LEGO1_rdata + 0x69D0
	PUSH offset [LEGO1_text.m8B980_proc_1008C980]
	PUSH EAX
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	MOV DWORD PTR FS:[0x00000000],ESP
	ADD EAX, 0x08
	SUB ESP, 0x14
	MOV ECX,DWORD PTR [EAX]
	MOV DWORD PTR [EBP+var_24+0x4],EAX
	MOV DWORD PTR [EBP+var_20+0x4],ECX
	PUSH EBX
	CMP ECX,DWORD PTR [EBP+arg4+0x4]
	PUSH ESI
	PUSH EDI
	MOV DWORD PTR [EBP+var_1C+0x4],ESP
	JZ_LONG(offset [LEGO1_text.m8C009_loc_1008D009])
	JMP_LONG(offset [LEGO1_text.m8BF99_loc_1008CF99])
}
}

__declspec(naked) DWORD LEGO1_loc_1008CF99()
{
	enum{
		arg1217215 = 0x4A4AFC,
		arg1217217 = 0x4A4B04,
		arg1217223 = 0x4A4B1C,
		arg1217226 = 0x4A4B28,
		arg1217228 = 0x4A4B30,
	};

__asm{
	CMP DWORD PTR [EBP+arg1217217-0x4A4B20],-0x01
	JLE loc_1008CFAA
	MOV EAX,DWORD PTR [EBP+arg1217228-0x4A4B20]
	MOV ECX,DWORD PTR [EBP+arg1217217-0x4A4B20]
	CMP DWORD PTR [EAX+0x04],ECX
	JG loc_1008CFAF
loc_1008CFAA:
	CALL_LONG(offset [LEGO1_text.m90360_sub_10091360])
loc_1008CFAF:
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0x00000000
	MOV ECX,DWORD PTR [EBP+arg1217217-0x4A4B20]
	MOV EAX,DWORD PTR [EBP+arg1217228-0x4A4B20]
	MOV EAX,DWORD PTR [EAX+0x08]
	MOV EAX,DWORD PTR [ECX*8+EAX+0x04]
	MOV DWORD PTR [EBP+arg1217215-0x4A4B20],EAX
	TEST EAX, EAX
	JZ_LONG(offset [LEGO1_text.m8BFEE_loc_1008CFEE])
	PUSH 0x00000103
	MOV EAX,DWORD PTR [EBP+arg1217226-0x4A4B20]
	PUSH EAX
	MOV EAX,DWORD PTR [EBP+arg1217215-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8C4F0_sub_1008D4F0])
	JMP_LONG(offset [LEGO1_text.m8BFEE_loc_1008CFEE])
}
}

__declspec(naked) DWORD LEGO1_proc_1008CFDE()
{
	enum{
		arg1217219 = 0x4A4B0C,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217219-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8C030_sub_1008D030])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_1008CFEB()
{
	enum{
		arg1217218 = 0x4A4B08,
	};

__asm{
	MOV ESP,DWORD PTR [EBP+arg1217218-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m8BFEE_loc_1008CFEE])
}
}

__declspec(naked) DWORD LEGO1_loc_1008CFEE()
{
	enum{
		arg1217217 = 0x4A4B04,
		arg1217223 = 0x4A4B1C,
		arg1217228 = 0x4A4B30,
		arg1217229 = 0x4A4B34,
	};

__asm{
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0xFFFFFFFF
	MOV ECX,DWORD PTR [EBP+arg1217217-0x4A4B20]
	MOV EAX,DWORD PTR [EBP+arg1217228-0x4A4B20]
	MOV EDX,DWORD PTR [EAX+0x08]
	MOV ECX,DWORD PTR [ECX*8+EDX]
	MOV DWORD PTR [EBP+arg1217217-0x4A4B20],ECX
	CMP ECX,DWORD PTR [EBP+arg1217229-0x4A4B20]
	JNZ_LONG(offset [LEGO1_text.m8BF99_loc_1008CF99])
	JMP_LONG(offset [LEGO1_text.m8C009_loc_1008D009])
}
}

__declspec(naked) DWORD LEGO1_loc_1008D009()
{
	enum{
		arg1217216 = 0x4A4B00,
		arg1217217 = 0x4A4B04,
		arg1217220 = 0x4A4B10,
		arg1217229 = 0x4A4B34,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217229-0x4A4B20]
	CMP DWORD PTR [EBP+arg1217217-0x4A4B20],EAX
	JZ loc_1008D016
	CALL_LONG(offset [LEGO1_text.m90360_sub_10091360])
loc_1008D016:
	MOV EAX,DWORD PTR [EBP+arg1217217-0x4A4B20]
	MOV ECX,DWORD PTR [EBP+arg1217216-0x4A4B20]
	POP EDI
	POP ESI
	POP EBX
	MOV DWORD PTR [ECX],EAX
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	MOV ESP, EBP
	MOV DWORD PTR FS:[0x00000000], EAX
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008D030(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	MOV ECX,DWORD PTR [EAX]
	CMP DWORD PTR [ECX], 0xE06D7363
	JNZ loc_1008D043
	CALL_LONG(offset [LEGO1_text.m902E0_sub_100912E0])
loc_1008D043:
	XOR EAX, EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008D050(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7)
{
	enum{
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg5 = 0x14,
		arg6 = 0x18,
		arg7 = 0x1C,
		arg10 = 0x28,
		arg1217224 = 0x4A4B20,
		arg1217225 = 0x4A4B24,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg7]
	PUSH EBX
	PUSH ESI
	TEST EAX, EAX
	PUSH EDI
	PUSH EBP
	JZ loc_1008D076
	MOV EDI,DWORD PTR [ESP+arg2+0x10]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg6+0x14]
	MOV ESI,DWORD PTR [ESP+arg1+0x14]
	PUSH EAX
	PUSH EDI
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8C240_sub_1008D240])
	ADD ESP, 0x10
	JMP loc_1008D07E
loc_1008D076:
	MOV ESI,DWORD PTR [ESP+arg1+0x10]
	MOV EDI,DWORD PTR [ESP+arg2+0x10]
loc_1008D07E:
	MOV EAX,DWORD PTR [ESP+arg10+0x10]
	PUSH ESI
	TEST EAX, EAX
	JNZ loc_1008D08A
	PUSH EDI
	JMP loc_1008D08B
loc_1008D08A:
	PUSH EAX
loc_1008D08B:
	CALL_LONG(offset [LEGO1_text.m89FC0_sub_1008AFC0])
	MOV EBP,DWORD PTR [ESP+arg5+0x1C]
	MOV EBX,DWORD PTR [ESP+arg2+0x1C]
	MOV ECX,DWORD PTR [ESP+arg1+0x1C]
	MOV EAX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	PUSH EAX
	PUSH EBX
	PUSH ECX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8BF60_sub_1008CF60])
	MOV ECX,DWORD PTR [ESP+arg6+0x2C]
	ADD ESP, 0x10
	MOV EAX,DWORD PTR [EBP+arg1217225-0x4A4B20]
	PUSH 0x00000100
	INC EAX
	PUSH ECX
	MOV EDX,DWORD PTR [ESP+arg3+0x24]
	MOV ECX,DWORD PTR [ESP+r+0x24]
	MOV DWORD PTR [EDI+0x08],EAX
	MOV EAX,DWORD PTR [EDX+0x0C]
	PUSH EAX
	PUSH EBX
	PUSH ECX
	PUSH EDI
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8C0F0_sub_1008D0F0])
	ADD ESP, 0x1C
	TEST EAX, EAX
	JZ loc_1008D0DF
	PUSH EDI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m89F50_sub_1008AF50])
loc_1008D0DF:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008D0F0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7)
{
	enum{
		var_30 = -0x30,
		var_2C = -0x2C,
		var_28 = -0x28,
		var_24 = -0x24,
		var_20 = -0x20,
		var_1C = -0x1C,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
		arg7 = 0x1C,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset LEGO1_rdata + 0x69E0
	PUSH offset [LEGO1_text.m8B980_proc_1008C980]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x20
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV EBX,DWORD PTR [EBP+arg5+0x4]
	MOV ESI,DWORD PTR [EBP+arg2+0x4]
	MOV DWORD PTR [EBP+var_1C+0x4],ESP
	MOV DWORD PTR [EBP+var_20+0x4],EBX
	LEA EAX,DWORD PTR [ESI-0x04]
	MOV DWORD PTR [EBP+var_24+0x4],EAX
	MOV ECX,DWORD PTR [EAX]
	MOV DWORD PTR [EBP+var_30+0x4],ECX
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	MOV ECX,DWORD PTR [EAX+0x6C]
	MOV DWORD PTR [EBP+var_2C+0x4],ECX
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	MOV ECX,DWORD PTR [EAX+0x70]
	MOV DWORD PTR [EBP+var_28+0x4],ECX
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	MOV DWORD PTR [EAX+0x6C],ECX
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	MOV ECX,DWORD PTR [EBP+arg3+0x4]
	MOV DWORD PTR [EAX+0x70],ECX
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	MOV EAX,DWORD PTR [EBP+arg7+0x4]
	PUSH EAX
	MOV EAX,DWORD PTR [EBP+arg6+0x4]
	PUSH EAX
	PUSH EBX
	MOV EAX,DWORD PTR [EBP+arg4+0x4]
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8A060_sub_1008B060])
	ADD ESP, 0x14
	MOV DWORD PTR [EBP+var_20+0x4],EAX
	MOV DWORD PTR [EBP+var_8+0x4],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m8C1BD_sub_1008D1BD])
	MOV EAX,DWORD PTR [EBP+var_20+0x4]
	JMP_LONG(offset [LEGO1_text.m8C185_loc_1008D185])
}
}

__declspec(naked) DWORD LEGO1_sub_1008D1BD()
{
	enum{
		arg1217213 = 0x4A4AF4,
		arg1217214 = 0x4A4AF8,
		arg1217215 = 0x4A4AFC,
		arg1217216 = 0x4A4B00,
		arg1217217 = 0x4A4B04,
		arg1217226 = 0x4A4B28,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217213-0x4A4B20]
	MOV ECX,DWORD PTR [EBP+arg1217216-0x4A4B20]
	MOV DWORD PTR [ECX],EAX
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	MOV ECX,DWORD PTR [EBP+arg1217214-0x4A4B20]
	MOV DWORD PTR [EAX+0x6C],ECX
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	MOV ECX,DWORD PTR [EBP+arg1217215-0x4A4B20]
	MOV DWORD PTR [EAX+0x70],ECX
	MOV EAX,DWORD PTR [EBP+arg1217226-0x4A4B20]
	CMP DWORD PTR [EAX], 0xE06D7363
	JNZ loc_1008D20D
	CMP DWORD PTR [EAX+0x10],0x03
	JNZ loc_1008D20D
	CMP DWORD PTR [EAX+0x14],0x19930520
	JNZ loc_1008D20D
	CMP DWORD PTR [EBP+arg1217217-0x4A4B20],0x00
	JZ loc_1008D20D
	CALL_LONG(offset [LEGO1_text.m8A2F6_sub_1008B2F6])
	PUSH EAX
	MOV EAX,DWORD PTR [EBP+arg1217226-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8C440_sub_1008D440])
	ADD ESP, 0x08
loc_1008D20D:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008D210(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	MOV EAX,DWORD PTR [EAX]
	CMP DWORD PTR [EAX], 0xE06D7363
	JNZ loc_1008D239
	CMP DWORD PTR [EAX+0x10],0x03
	JNZ loc_1008D239
	CMP DWORD PTR [EAX+0x14],0x19930520
	JNZ loc_1008D239
	CMP DWORD PTR [EAX+0x1C],0x00
	JNZ loc_1008D239
	MOV EAX, 0x00000001
	RET
loc_1008D239:
	XOR EAX, EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008D240(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_1C = -0x1C,
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_rdata.m69F8]
	PUSH offset [LEGO1_text.m8B980_proc_1008C980]
	PUSH EAX
	MOV EDX,DWORD PTR [EBP+arg3+0x4]
	MOV DWORD PTR FS:[0x00000000],ESP
	MOV EAX,DWORD PTR [EDX+0x04]
	SUB ESP, 0x08
	TEST EAX, EAX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV DWORD PTR [EBP+var_1C+0x4],ESP
	JZ_LONG(offset [LEGO1_text.m8C42E_loc_1008D42E])
	CMP BYTE PTR [EAX+0x08],0x00
	JZ_LONG(offset [LEGO1_text.m8C42E_loc_1008D42E])
	MOV ECX,DWORD PTR [EDX+0x08]
	TEST ECX, ECX
	JZ_LONG(offset [LEGO1_text.m8C42E_loc_1008D42E])
	MOV EAX,DWORD PTR [EBP+arg2+0x4]
	LEA ESI,DWORD PTR [EAX+ECX+0x0C]
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	TEST BYTE PTR [EDX],0x08
	JZ loc_1008D2E4
	MOV EBX,DWORD PTR [EBP+arg1+0x4]
	PUSH 0x01
	MOV EAX,DWORD PTR [EBX+0x18]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m913F0_sub_100923F0])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ FAR loc_1008D412
	PUSH 0x01
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m91410_sub_10092410])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ FAR loc_1008D412
	MOV EAX,DWORD PTR [EBX+0x18]
	MOV DWORD PTR [ESI],EAX
	MOV EDI,DWORD PTR [EBP+arg4+0x4]
	ADD EDI, 0x08
	PUSH EDI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8C4C0_sub_1008D4C0])
	ADD ESP, 0x08
	MOV DWORD PTR [ESI],EAX
	JMP_LONG(offset [LEGO1_text.m8C427_loc_1008D427])
loc_1008D2E4:
	MOV EDI,DWORD PTR [EBP+arg4+0x4]
	TEST BYTE PTR [EDI],0x01
	JZ loc_1008D351
	MOV EBX,DWORD PTR [EBP+arg1+0x4]
	PUSH 0x01
	MOV EAX,DWORD PTR [EBX+0x18]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m913F0_sub_100923F0])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ FAR loc_1008D412
	PUSH 0x01
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m91410_sub_10092410])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ FAR loc_1008D412
	MOV EAX,DWORD PTR [EDI+0x14]
	PUSH EAX
	MOV EAX,DWORD PTR [EBX+0x18]
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m91450_sub_10092450])
	ADD ESP, 0x0C
	CMP DWORD PTR [EDI+0x14],0x04
	JNZ_LONG(offset [LEGO1_text.m8C427_loc_1008D427])
	MOV EAX,DWORD PTR [ESI]
	TEST EAX, EAX
	JZ_LONG(offset [LEGO1_text.m8C427_loc_1008D427])
	ADD EDI, 0x08
	PUSH EDI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8C4C0_sub_1008D4C0])
	ADD ESP, 0x08
	MOV DWORD PTR [ESI],EAX
	JMP_LONG(offset [LEGO1_text.m8C427_loc_1008D427])
loc_1008D351:
	CMP DWORD PTR [EDI+0x18],0x00
	MOV EBX,DWORD PTR [EBP+arg1+0x4]
	PUSH 0x01
	MOV EAX,DWORD PTR [EBX+0x18]
	PUSH EAX
	JNZ loc_1008D3A6
	CALL_LONG(offset [LEGO1_text.m913F0_sub_100923F0])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ FAR loc_1008D412
	PUSH 0x01
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m91410_sub_10092410])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ FAR loc_1008D412
	MOV EAX,DWORD PTR [EDI+0x14]
	PUSH EAX
	ADD EDI, 0x08
	PUSH EDI
	MOV EAX,DWORD PTR [EBX+0x18]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8C4C0_sub_1008D4C0])
	ADD ESP, 0x08
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m91450_sub_10092450])
	ADD ESP, 0x0C
	JMP_LONG(offset [LEGO1_text.m8C427_loc_1008D427])
loc_1008D3A6:
	CALL_LONG(offset [LEGO1_text.m913F0_sub_100923F0])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ loc_1008D412
	PUSH 0x01
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m91410_sub_10092410])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ loc_1008D412
	MOV EAX,DWORD PTR [EDI+0x18]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m91430_sub_10092430])
	ADD ESP, 0x04
	TEST EAX, EAX
	JZ loc_1008D412
	TEST BYTE PTR [EDI],0x04
	JZ loc_1008D3F5
	PUSH 0x01
	LEA EAX,DWORD PTR [EDI+0x08]
	PUSH EAX
	MOV EAX,DWORD PTR [EBX+0x18]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8C4C0_sub_1008D4C0])
	ADD ESP, 0x08
	PUSH EAX
	MOV EAX,DWORD PTR [EDI+0x18]
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m89FB0_CallMemberFunction1_2])
	JMP_LONG(offset [LEGO1_text.m8C427_loc_1008D427])
loc_1008D3F5:
	LEA EAX,DWORD PTR [EDI+0x08]
	PUSH EAX
	MOV EAX,DWORD PTR [EBX+0x18]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8C4C0_sub_1008D4C0])
	ADD ESP, 0x08
	PUSH EAX
	MOV EAX,DWORD PTR [EDI+0x18]
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m89FA0_CallMemberFunction1_1])
	JMP_LONG(offset [LEGO1_text.m8C427_loc_1008D427])
loc_1008D412:
	CALL_LONG(offset [LEGO1_text.m90360_sub_10091360])
	JMP_LONG(offset [LEGO1_text.m8C427_loc_1008D427])
}
}

__declspec(naked) DWORD LEGO1_proc_1008D419()
{
__asm{
	MOV EAX, 0x00000001
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_1008D41F()
{
	enum{
		arg1217218 = 0x4A4B08,
	};

__asm{
	MOV ESP,DWORD PTR [EBP+arg1217218-0x4A4B20]
	CALL_LONG(offset [LEGO1_text.m902E0_sub_100912E0])
	JMP_LONG(offset [LEGO1_text.m8C427_loc_1008D427])
}
}

__declspec(naked) DWORD LEGO1_loc_1008D427()
{
	enum{
		arg1217223 = 0x4A4B1C,
	};

__asm{
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0xFFFFFFFF
	JMP_LONG(offset [LEGO1_text.m8C42E_loc_1008D42E])
}
}

__declspec(naked) DWORD LEGO1_loc_1008D42E()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	POP EDI
	MOV DWORD PTR FS:[0x00000000], EAX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008D440(DWORD arg1)
{
	enum{
		var_1C = -0x1C,
		var_8 = -0x8,
		arg1 = 0x4,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset LEGO1_rdata + 0x6A08
	PUSH offset [LEGO1_text.m8B980_proc_1008C980]
	PUSH EAX
	MOV ECX,DWORD PTR [EBP+arg1+0x4]
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	TEST ECX, ECX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV DWORD PTR [EBP+var_1C+0x4],ESP
	JZ_LONG(offset [LEGO1_text.m8C4A1_loc_1008D4A1])
	MOV EAX,DWORD PTR [ECX+0x1C]
	MOV EAX,DWORD PTR [EAX+0x04]
	TEST EAX, EAX
	JZ_LONG(offset [LEGO1_text.m8C4A1_loc_1008D4A1])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	PUSH EAX
	MOV EAX,DWORD PTR [ECX+0x18]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m89F90_CallMemberFunction1])
	JMP_LONG(offset [LEGO1_text.m8C49A_loc_1008D49A])
}
}

__declspec(naked) DWORD LEGO1_proc_1008D48A()
{
	enum{
		arg1217227 = 0x4A4B2C,
	};

__asm{
	CMP BYTE PTR [EBP+arg1217227-0x4A4B20],0x01
	SBB EAX, EAX
	INC EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_1008D492()
{
	enum{
		arg1217218 = 0x4A4B08,
	};

__asm{
	MOV ESP,DWORD PTR [EBP+arg1217218-0x4A4B20]
	CALL_LONG(offset [LEGO1_text.m902E0_sub_100912E0])
	JMP_LONG(offset [LEGO1_text.m8C49A_loc_1008D49A])
}
}

__declspec(naked) DWORD LEGO1_loc_1008D49A()
{
	enum{
		arg1217223 = 0x4A4B1C,
	};

__asm{
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0xFFFFFFFF
	JMP_LONG(offset [LEGO1_text.m8C4A1_loc_1008D4A1])
}
}

__declspec(naked) DWORD LEGO1_loc_1008D4A1()
{
	enum{
		arg1217220 = 0x4A4B10,
	};

__asm{
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	POP EDI
	MOV DWORD PTR FS:[0x00000000], EAX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008D4C0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg2]
	PUSH ESI
	MOV ECX,DWORD PTR [ESP+arg1+0x4]
	MOV EAX,DWORD PTR [EDX]
	ADD EAX, ECX
	MOV ESI,DWORD PTR [EDX+0x04]
	TEST ESI, ESI
	JL loc_1008D4DF
	MOV ECX,DWORD PTR [ESI+ECX]
	MOV EDX,DWORD PTR [EDX+0x08]
	ADD EAX,DWORD PTR [EDX+ECX]
	ADD EAX, ESI
loc_1008D4DF:
	POP ESI
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1_sub_1008D4F0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_8 = -0x8,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	SUB ESP, 0x04
	PUSH EBX
	PUSH ECX
	MOV EAX,DWORD PTR [EBP+arg2+0x4]
	ADD EAX, 0x0C
	MOV DWORD PTR [EBP+var_8+0x4],EAX
	MOV EAX,DWORD PTR [EBP+arg1+0x4]
	PUSH EBP
	PUSH DWORD PTR [EBP+arg3+0x4]
	MOV ECX,DWORD PTR [EBP+arg3+0x4]
	MOV EBP,DWORD PTR [EBP+var_8+0x4]
	CALL_LONG(offset [LEGO1_text.m8A319_sub_1008B319])
	CALL_LONG(EAX)
	MOV EBX, EBP
	POP EBP
	MOV ECX,DWORD PTR [EBP+arg3+0x4]
	PUSH EBP
	MOV EBP, EBX
	CMP ECX, 0x00000100
	JNZ loc_1008D52B
	MOV ECX, 0x00000002
loc_1008D52B:
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8A319_sub_1008B319])
	POP EBP
	POP ECX
	POP EBX
	LEAVE
	RETN 0x000C
}
}

__declspec(naked) DWORD LEGO1_sub_1008D540()
{
__asm{
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DD90_sub_1008ED90])
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3F4_TlsAlloc])
	MOV DWORD PTR [offset LEGO1_data + 0xCF20], EAX
	CMP EAX, -0x01
	JNZ loc_1008D55A
	XOR EAX, EAX
	POP ESI
	RET
loc_1008D55A:
	PUSH 0x74
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m89100_sub_1008A100])
	ADD ESP, 0x08
	MOV ESI, EAX
	TEST ESI, ESI
	JZ loc_1008D59C
	PUSH ESI
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xCF20]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3F0_TlsSetValue])
	TEST EAX, EAX
	JZ loc_1008D59C
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8C5D0__initptd])
	ADD ESP, 0x04
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3BC_GetCurrentThreadId])
	MOV DWORD PTR [ESI],EAX
	MOV EAX, 0x00000001
	MOV DWORD PTR [ESI+0x04],0xFFFFFFFF
	POP ESI
	RET
loc_1008D59C:
	XOR EAX, EAX
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008D5A0()
{
__asm{
	CALL_LONG(offset [LEGO1_text.m8DDC0_sub_1008EDC0])
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xCF20]
	CMP EAX, -0x01
	JZ loc_1008D5C0
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3F8_TlsFree])
	MOV DWORD PTR [offset LEGO1_data + 0xCF20],0xFFFFFFFF
loc_1008D5C0:
	RET
}
}

__declspec(naked) DWORD LEGO1__initptd(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	MOV DWORD PTR [EAX+0x50],offset LEGO1_data + 0xD910
	MOV DWORD PTR [EAX+0x14],0x00000001
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008D5F0()
{
__asm{
	PUSH ESI
	PUSH EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B8_GetLastError])
	MOV ESI, EAX
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xCF20]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m400_TlsGetValue])
	MOV EDI, EAX
	TEST EDI, EDI
	JNZ loc_1008D653
	PUSH 0x74
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m89100_sub_1008A100])
	ADD ESP, 0x08
	MOV EDI, EAX
	TEST EDI, EDI
	JZ loc_1008D649
	PUSH EDI
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xCF20]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3F0_TlsSetValue])
	TEST EAX, EAX
	JZ loc_1008D649
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8C5D0__initptd])
	ADD ESP, 0x04
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3BC_GetCurrentThreadId])
	MOV DWORD PTR [EDI],EAX
	MOV DWORD PTR [EDI+0x04],0xFFFFFFFF
	JMP loc_1008D653
loc_1008D649:
	PUSH 0x10
	CALL_LONG(offset [LEGO1_text.m8B920_sub_1008C920])
	ADD ESP, 0x04
loc_1008D653:
	PUSH ESI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3FC_SetLastError])
	MOV EAX, EDI
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008D660(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	CMP DWORD PTR [offset LEGO1_data + 0xCF20],-0x01
	PUSH ESI
	JZ FAR loc_1008D6FF
	MOV ESI,DWORD PTR [ESP+arg1+0x4]
	TEST ESI, ESI
	JNZ loc_1008D688
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xCF20]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m400_TlsGetValue])
	MOV ESI, EAX
	TEST ESI, ESI
	JZ loc_1008D6F1
loc_1008D688:
	MOV EAX,DWORD PTR [ESI+0x24]
	TEST EAX, EAX
	JZ loc_1008D698
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_1008D698:
	MOV EAX,DWORD PTR [ESI+0x28]
	TEST EAX, EAX
	JZ loc_1008D6A8
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_1008D6A8:
	MOV EAX,DWORD PTR [ESI+0x30]
	TEST EAX, EAX
	JZ loc_1008D6B8
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_1008D6B8:
	MOV EAX,DWORD PTR [ESI+0x38]
	TEST EAX, EAX
	JZ loc_1008D6C8
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_1008D6C8:
	MOV EAX,DWORD PTR [ESI+0x40]
	TEST EAX, EAX
	JZ loc_1008D6D8
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_1008D6D8:
	MOV EAX,DWORD PTR [ESI+0x44]
	TEST EAX, EAX
	JZ loc_1008D6E8
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_1008D6E8:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_1008D6F1:
	PUSH 0x00
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xCF20]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3F0_TlsSetValue])
loc_1008D6FF:
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008D710()
{
__asm{
	PUSH 0x00030000
	PUSH 0x00010000
	CALL_LONG(offset [LEGO1_text.m91760_sub_10092760])
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008D780()
{
__asm{
	PUSH offset [LEGO1_rdata.m6A4C_str]
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3EC_GetModuleHandleA])
	TEST EAX, EAX
	JZ loc_1008D7A4
	PUSH offset LEGO1_rdata + 0x6A30
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m414_GetProcAddress])
	TEST EAX, EAX
	JZ loc_1008D7A4
	PUSH 0x00
	CALL_LONG(EAX)
	RET
loc_1008D7A4:
	JMP_LONG(offset [LEGO1_text.m8C730_loc_1008D730])
}
}

__declspec(naked) DWORD LEGO1_sub_1008D8F0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_28 = -0x28,
		var_18 = -0x18,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	SUB ESP, 0x28
	LEA EAX,DWORD PTR [ESP+var_18+0x28]
	PUSH ESI
	LEA ECX,DWORD PTR [ESP+var_28+0x2C]
	PUSH EDI
	PUSH EAX
	PUSH ECX
	MOV EAX,DWORD PTR [ESP+arg1+0x38]
	MOV EDX,DWORD PTR [EAX+0x04]
	MOV ECX,DWORD PTR [EAX]
	PUSH EDX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m91E80_sub_10092E80])
	LEA ECX,DWORD PTR [ESP+var_28+0x40]
	MOV ESI,DWORD PTR [ESP+arg3+0x40]
	MOV EDI,DWORD PTR [ESP+arg2+0x40]
	ADD ESP, 0x10
	LEA EAX,DWORD PTR [ESI+0x01]
	TEST ESI, ESI
	PUSH ECX
	PUSH EAX
	MOV ECX, 0x00000001
	JG loc_1008D92E
	XOR ECX, ECX
loc_1008D92E:
	MOV EAX,DWORD PTR [ESP+var_28+0x38]
	SUB EAX, 0x2D
	CMP EAX, 0x01
	SBB EAX, EAX
	NEG EAX
	ADD ECX, EAX
	ADD ECX, EDI
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m91DF0_sub_10092DF0])
	LEA ECX,DWORD PTR [ESP+var_28+0x3C]
	MOV EDX,DWORD PTR [ESP+arg4+0x3C]
	ADD ESP, 0x0C
	PUSH 0x00
	PUSH ECX
	PUSH EDX
	PUSH ESI
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8C970_sub_1008D970])
	ADD ESP, 0x14
	MOV EAX, EDI
	POP EDI
	POP ESI
	ADD ESP, 0x28
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008D970(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
	};

__asm{
	CMP BYTE PTR [ESP+arg5],0x00
	PUSH EBX
	PUSH ESI
	PUSH EDI
	JZ loc_1008D9AB
	MOV ESI,DWORD PTR [ESP+arg4+0xC]
	MOV EDI,DWORD PTR [ESP+arg1+0xC]
	MOV EBX,DWORD PTR [ESP+arg2+0xC]
	MOV EAX,DWORD PTR [ESI]
	SUB EAX, 0x2D
	MOV ECX, 0x00000001
	CMP EAX, 0x01
	SBB EAX, EAX
	NEG EAX
	ADD EAX, EDI
	TEST EBX, EBX
	JG loc_1008D99F
	XOR ECX, ECX
loc_1008D99F:
	PUSH ECX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8CCB0_sub_1008DCB0])
	ADD ESP, 0x08
	JMP loc_1008D9B7
loc_1008D9AB:
	MOV EDI,DWORD PTR [ESP+arg1+0xC]
	MOV EBX,DWORD PTR [ESP+arg2+0xC]
	MOV ESI,DWORD PTR [ESP+arg4+0xC]
loc_1008D9B7:
	MOV ECX, EDI
	CMP DWORD PTR [ESI],0x2D
	JNZ loc_1008D9C4
	LEA ECX,DWORD PTR [EDI+0x01]
	MOV BYTE PTR [EDI],0x2D
loc_1008D9C4:
	TEST EBX, EBX
	JLE loc_1008D9D8
	LEA EDX,DWORD PTR [ECX+0x01]
	MOV AL,BYTE PTR [EDX]
	MOV BYTE PTR [ECX],AL
	MOV ECX, EDX
	MOV AL, BYTE PTR [offset LEGO1_data + 0xD200]
	MOV BYTE PTR [EDX],AL
loc_1008D9D8:
	CMP BYTE PTR [ESP+arg5+0xC],0x01
	SBB EAX, EAX
	NEG EAX
	ADD EAX, ECX
	ADD EBX, EAX
	MOV ECX,DWORD PTR [offset LEGO1_rdata.m6A60_str]
	MOV EAX, offset [LEGO1_rdata.m6A60_str]
	MOV DWORD PTR [EBX],ECX
	CMP DWORD PTR [ESP+arg3+0xC],0x00
	MOV AX,WORD PTR DS:[EAX+0x04]
	MOV WORD PTR DS:[EBX+0x04],AX
	JZ loc_1008DA04
	MOV BYTE PTR [EBX],0x45
loc_1008DA04:
	INC EBX
	MOV EAX,DWORD PTR [ESI+0x0C]
	CMP BYTE PTR [EAX],0x30
	JZ loc_1008DA4D
	MOV ECX,DWORD PTR [ESI+0x04]
	DEC ECX
	JNS loc_1008DA18
	NEG ECX
	MOV BYTE PTR [EBX],0x2D
loc_1008DA18:
	INC EBX
	CMP ECX, 0x64
	JL loc_1008DA31
	MOV ESI, 0x00000064
	MOV EAX, ECX
	CDQ
	IDIV ESI
	ADD BYTE PTR [EBX],AL
	MOV EAX, ECX
	CDQ
	IDIV ESI
	MOV ECX, EDX
loc_1008DA31:
	INC EBX
	CMP ECX, 0x0A
	JL loc_1008DA4A
	MOV ESI, 0x0000000A
	MOV EAX, ECX
	CDQ
	IDIV ESI
	ADD BYTE PTR [EBX],AL
	MOV EAX, ECX
	CDQ
	IDIV ESI
	MOV ECX, EDX
loc_1008DA4A:
	ADD BYTE PTR [EBX+0x01],CL
loc_1008DA4D:
	MOV EAX, EDI
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008DA60(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_28 = -0x28,
		var_24 = -0x24,
		var_18 = -0x18,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	SUB ESP, 0x28
	LEA EAX,DWORD PTR [ESP+var_18+0x28]
	PUSH ESI
	LEA ECX,DWORD PTR [ESP+var_28+0x2C]
	PUSH EDI
	PUSH EAX
	PUSH ECX
	MOV EAX,DWORD PTR [ESP+arg1+0x38]
	MOV EDX,DWORD PTR [EAX+0x04]
	MOV ECX,DWORD PTR [EAX]
	PUSH EDX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m91E80_sub_10092E80])
	LEA ECX,DWORD PTR [ESP+var_28+0x40]
	MOV EAX,DWORD PTR [ESP+var_24+0x40]
	MOV ESI,DWORD PTR [ESP+arg3+0x40]
	ADD ESP, 0x10
	ADD EAX, ESI
	PUSH ECX
	MOV EDI,DWORD PTR [ESP+arg2+0x34]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+var_28+0x38]
	SUB EAX, 0x2D
	CMP EAX, 0x01
	SBB EAX, EAX
	NEG EAX
	ADD EAX, EDI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m91DF0_sub_10092DF0])
	LEA EAX,DWORD PTR [ESP+var_28+0x3C]
	ADD ESP, 0x0C
	PUSH 0x00
	PUSH EAX
	PUSH ESI
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8CAD0_sub_1008DAD0])
	ADD ESP, 0x10
	MOV EAX, EDI
	POP EDI
	POP ESI
	ADD ESP, 0x28
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008DAD0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg3+0x8]
	PUSH EDI
	PUSH EBP
	MOV ECX,DWORD PTR [ESI+0x04]
	DEC ECX
	CMP BYTE PTR [ESP+arg4+0x10],0x00
	JZ loc_1008DB08
	MOV EAX,DWORD PTR [ESI]
	MOV EBX,DWORD PTR [ESP+arg1+0x10]
	SUB EAX, 0x2D
	MOV EBP,DWORD PTR [ESP+arg2+0x10]
	CMP EAX, 0x01
	SBB EAX, EAX
	NEG EAX
	ADD EAX, EBX
	CMP EBP, ECX
	JNZ loc_1008DB10
	ADD EAX, ECX
	MOV BYTE PTR [EAX],0x30
	MOV BYTE PTR [EAX+0x01],0x00
	JMP loc_1008DB10
loc_1008DB08:
	MOV EBX,DWORD PTR [ESP+arg1+0x10]
	MOV EBP,DWORD PTR [ESP+arg2+0x10]
loc_1008DB10:
	MOV EDI, EBX
	CMP DWORD PTR [ESI],0x2D
	JNZ loc_1008DB1D
	LEA EDI,DWORD PTR [EBX+0x01]
	MOV BYTE PTR [EBX],0x2D
loc_1008DB1D:
	MOV EAX,DWORD PTR [ESI+0x04]
	TEST EAX, EAX
	JG loc_1008DB36
	PUSH 0x01
	PUSH EDI
	INC EDI
	CALL_LONG(offset [LEGO1_text.m8CCB0_sub_1008DCB0])
	ADD ESP, 0x08
	MOV BYTE PTR [EDI-0x01],0x30
	JMP loc_1008DB38
loc_1008DB36:
	ADD EDI, EAX
loc_1008DB38:
	TEST EBP, EBP
	JLE loc_1008DB87
	PUSH 0x01
	PUSH EDI
	INC EDI
	CALL_LONG(offset [LEGO1_text.m8CCB0_sub_1008DCB0])
	ADD ESP, 0x08
	MOV AL, BYTE PTR [offset LEGO1_data + 0xD200]
	MOV BYTE PTR [EDI-0x01],AL
	MOV ESI,DWORD PTR [ESI+0x04]
	TEST ESI, ESI
	JGE loc_1008DB87
	CMP BYTE PTR [ESP+arg4+0x10],0x00
	JZ loc_1008DB62
	NEG ESI
	JMP loc_1008DB6A
loc_1008DB62:
	NEG ESI
	CMP ESI, EBP
	JL loc_1008DB6A
	MOV ESI, EBP
loc_1008DB6A:
	PUSH ESI
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8CCB0_sub_1008DCB0])
	ADD ESP, 0x08
	MOV EAX, 0x30303030
	MOV ECX, ESI
	SHR ECX, 0x02
	REP STOSD
	MOV ECX, ESI
	AND ECX, 0x03
	REP STOSB
loc_1008DB87:
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008DB90(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_28 = -0x28,
		var_24 = -0x24,
		var_18 = -0x18,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg1217224 = 0x4A4B20,
	};

__asm{
	SUB ESP, 0x28
	LEA EAX,DWORD PTR [ESP+var_18+0x28]
	PUSH EBX
	LEA ECX,DWORD PTR [ESP+var_28+0x2C]
	PUSH ESI
	PUSH EDI
	PUSH EBP
	PUSH EAX
	PUSH ECX
	MOV EAX,DWORD PTR [ESP+arg1+0x40]
	MOV EDX,DWORD PTR [EAX+0x04]
	MOV ECX,DWORD PTR [EAX]
	PUSH EDX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m91E80_sub_10092E80])
	MOV EBX,DWORD PTR [ESP+var_24+0x48]
	MOV EAX,DWORD PTR [ESP+var_28+0x48]
	MOV ESI,DWORD PTR [ESP+arg2+0x48]
	ADD ESP, 0x10
	DEC EBX
	SUB EAX, 0x2D
	MOV EDI,DWORD PTR [ESP+arg3+0x38]
	CMP EAX, 0x01
	SBB EAX, EAX
	NEG EAX
	LEA EBP,DWORD PTR [ESI+EAX]
	LEA EAX,DWORD PTR [ESP+var_28+0x38]
	PUSH EAX
	PUSH EDI
	PUSH EBP
	CALL_LONG(offset [LEGO1_text.m91DF0_sub_10092DF0])
	MOV ECX,DWORD PTR [ESP+var_24+0x44]
	ADD ESP, 0x0C
	DEC ECX
	CMP EBX, ECX
	SETL AL
	CMP ECX, -0x04
	JL loc_1008DC1D
	CMP EDI, ECX
	JLE loc_1008DC1D
	TEST AL, AL
	JZ loc_1008DC04
loc_1008DBF8:
	MOV EAX, EBP
	INC EBP
	CMP BYTE PTR [EAX],0x00
	JNZ loc_1008DBF8
	MOV BYTE PTR [EBP+arg1217224-0x4A4B22],0x00
loc_1008DC04:
	LEA EAX,DWORD PTR [ESP+var_28+0x38]
	PUSH 0x01
	PUSH EAX
	PUSH EDI
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8CAD0_sub_1008DAD0])
	ADD ESP, 0x10
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x28
	RET
loc_1008DC1D:
	LEA EAX,DWORD PTR [ESP+var_28+0x38]
	PUSH 0x01
	MOV ECX,DWORD PTR [ESP+arg4+0x3C]
	PUSH EAX
	PUSH ECX
	PUSH EDI
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8C970_sub_1008D970])
	ADD ESP, 0x14
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x28
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008DCB0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg2+0x8]
	TEST ESI, ESI
	JZ loc_1008DCD8
	MOV EDX,DWORD PTR [ESP+arg1+0x8]
	MOV ECX, 0xFFFFFFFF
	MOV EDI, EDX
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	PUSH ECX
	PUSH EDX
	ADD EDX, ESI
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m91450_sub_10092450])
	ADD ESP, 0x0C
loc_1008DCD8:
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008DD1C()
{
	enum{
		arg1217184 = 0x4A4A80,
		arg1217185 = 0x4A4A84,
	};

__asm{
	FABS
	FLD ST(0)
	FLD ST(0)
	FLD1
	FSUBRP ST(1),ST
	FXCH ST(1)
	FLD1
	FADDP ST(1),ST
	FMULP ST(1),ST
	FTST
	WAIT
	FSTSW WORD PTR [EBP+arg1217184-0x4A4B20]
	WAIT
	TEST BYTE PTR [EBP+arg1217185-0x4A4B23],0x01
	JNZ loc_1008DD46
	XOR CH, CH
	FSQRT
	RET
loc_1008DD46:
	POP EAX
	JMP_LONG(offset [LEGO1_text.m92176_loc_10093176])
}
}

__declspec(naked) DWORD LEGO1_sub_1008DD4C()
{
__asm{
	FSTP ST(0)
	FLD TBYTE PTR [offset LEGO1_data + 0xD9DA]
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_1008DD55()
{
__asm{
	FSTP ST(0)
	OR CL, CL
	JZ_LONG(offset [LEGO1_text.m8CD66_loc_1008DD66])
	FSTP ST(0)
	FLDPI
	OR CH, CH
	JZ loc_1008DD65
	FCHS
loc_1008DD65:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008DE53()
{
	enum{
		arg1217046 = 0x4A4858,
	};

__asm{
	AND BYTE PTR [EBP+arg1217046-0x4A4B20],0xFE
	JMP_LONG(offset [LEGO1_text.m8CE5A_sub_1008DE5A])
}
}

__declspec(naked) DWORD LEGO1_sub_1008DE5A()
{
	enum{
		arg1217044 = 0x4A4850,
		arg1217046 = 0x4A4858,
		arg1217183 = 0x4A4A7C,
		arg1217187 = 0x4A4A8C,
		arg1217188 = 0x4A4A90,
		arg1217189 = 0x4A4A94,
		arg1217190 = 0x4A4A98,
		arg1217191 = 0x4A4A9C,
		arg1217193 = 0x4A4AA4,
		arg1217195 = 0x4A4AAC,
		arg1217226 = 0x4A4B28,
		arg1217228 = 0x4A4B30,
	};

__asm{
	CMP DWORD PTR [offset LEGO1_data + 0xC8D4],0x00
	JNZ loc_1008DEAF
	FST QWORD PTR [EBP+arg1217044-0x4A4B20]
	MOV AL,BYTE PTR [EBP+arg1217188-0x4A4B20]
	OR AL, AL
	JZ loc_1008DE8D
	CMP AL, 0xFF
	JZ loc_1008DEB7
	CMP AL, 0xFE
	JZ loc_1008DEB7
	OR AL, AL
	JZ loc_1008DEAF
	MOVSX EAX,AL
	MOV DWORD PTR [EBP+arg1217189-0x4A4B22],EAX
	JMP FAR loc_1008DF29
loc_1008DE8D:
	MOV AX,WORD PTR SS:[EBP+arg1217183-0x4A4B20]
	AND AX, 0x20
	JNZ loc_1008DEAF
	WAIT
	FNSTSW AX
	AND AX, 0x20
	JZ loc_1008DEAF
	MOV DWORD PTR [EBP+arg1217189-0x4A4B22],0x00000008
	JMP loc_1008DF29
loc_1008DEAF:
	FLDCW WORD PTR [EBP+arg1217183-0x4A4B20]
	WAIT
	RET
loc_1008DEB7:
	MOV AX,WORD PTR SS:[EBP+arg1217046-0x4A4B22]
	AND AX, 0x7FF0
	OR AX, AX
	JZ loc_1008DECF
	CMP AX, 0x7FF0
	JZ loc_1008DEFD
	JMP loc_1008DE8D
loc_1008DECF:
	MOV DWORD PTR [EBP+arg1217189-0x4A4B22],0x00000004
	FLD QWORD PTR [offset LEGO1_rdata + 0x6A88]
	FXCH ST(1)
	FSCALE
	FSTP ST(1)
	FLD ST(0)
	FABS
	FCOMP QWORD PTR [offset LEGO1_rdata + 0x6A78]
	WAIT
	FNSTSW AX
	SAHF
	JNB loc_1008DF29
	FMUL QWORD PTR [offset LEGO1_rdata + 0x6A98]
	JMP loc_1008DF29
loc_1008DEFD:
	MOV DWORD PTR [EBP+arg1217189-0x4A4B22],0x00000003
	FLD QWORD PTR [offset LEGO1_rdata + 0x6A80]
	FXCH ST(1)
	FSCALE
	FSTP ST(1)
	FLD ST(0)
	FABS
	FCOMP QWORD PTR [offset LEGO1_rdata + 0x6A70]
	WAIT
	FNSTSW AX
	SAHF
	JBE loc_1008DF29
	FMUL QWORD PTR [offset LEGO1_rdata + 0x6A90]
loc_1008DF29:
	PUSH ESI
	PUSH EDI
	MOV EBX,DWORD PTR [EBP+arg1217187-0x4A4B20]
	INC EBX
	MOV DWORD PTR [EBP+arg1217190-0x4A4B22],EBX
	TEST BYTE PTR [EBP+arg1217046-0x4A4B20],0x01
	JNZ loc_1008DF5B
	CLD
	LEA ESI,DWORD PTR [EBP+arg1217226-0x4A4B20]
	LEA EDI,DWORD PTR [EBP+arg1217191-0x4A4B22]
	MOVSD
	MOVSD
	CMP BYTE PTR [EBX+0x0C],0x01
	JZ loc_1008DF5B
	LEA ESI,DWORD PTR [EBP+arg1217228-0x4A4B20]
	LEA EDI,DWORD PTR [EBP+arg1217193-0x4A4B22]
	MOVSD
	MOVSD
loc_1008DF5B:
	FSTP QWORD PTR [EBP+arg1217195-0x4A4B22]
	LEA EAX,DWORD PTR [EBP+arg1217189-0x4A4B22]
	LEA EBX,DWORD PTR [EBP+arg1217183-0x4A4B20]
	PUSH EBX
	PUSH EAX
	MOV EBX,DWORD PTR [EBP+arg1217187-0x4A4B20]
	MOV AL,BYTE PTR [EBX+0x0E]
	MOVSX EAX,AL
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m921A0_sub_100931A0])
	ADD ESP, 0x0C
	POP EDI
	POP ESI
	FLD QWORD PTR [EBP+arg1217195-0x4A4B22]
	JMP FAR loc_1008DEAF
}
}

__declspec(naked) DWORD LEGO1_loc_1008DF8B(DWORD arg1, DWORD arg2)
{
	enum{
		var_2CC = -0x2CC,
		var_A8 = -0xA8,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	ADD ESP, 0xFFFFFD30
	PUSH EBX
	PUSH DWORD PTR [EBP+arg2+0x4]
	PUSH DWORD PTR [EBP+arg1+0x4]
	CALL_LONG(offset [LEGO1_text.m8CFBE_sub_1008DFBE])
	ADD ESP, 0x08
	WAIT
	FSTCW WORD PTR [EBP+var_A8+0x4]
	AND BYTE PTR [EBP+var_2CC+0x4],0xFD
	CALL_LONG(offset [LEGO1_text.m91FD0_sub_10092FD0])
	CALL_LONG(offset [LEGO1_text.m8CE53_sub_1008DE53])
	POP EBX
	LEAVE
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008DFBE(DWORD arg1, DWORD arg2)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBP
	MOV EBP, ESP
	ADD ESP, -0x0C
	PUSH EBX
	MOV AX,WORD PTR SS:[EBP+arg2+0x6]
	MOV BX, AX
	AND AX, 0x7FF0
	CMP AX, 0x7FF0
	JNZ loc_1008DFF4
	OR BX, 0x7FFF
	MOV WORD PTR SS:[EBP+var_4+0x2],BX
	MOV EAX,DWORD PTR [EBP+arg2+0x4]
	MOV EBX,DWORD PTR [EBP+arg1+0x4]
	SHLD EAX,EBX,0x0B
	MOV DWORD PTR [EBP+var_8+0x2],EAX
	MOV DWORD PTR [EBP+var_C+0x2],EBX
	FLD TBYTE PTR [EBP+var_C+0x2]
	JMP loc_1008DFF7
loc_1008DFF4:
	FLD QWORD PTR [EBP+arg1+0x4]
loc_1008DFF7:
	POP EBX
	LEAVE
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008E000(DWORD arg1, DWORD arg2)
{
	enum{
		var_4 = -0x4,
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg1]
	SUB ESP, 0x08
	PUSH EBX
	LEA EAX,DWORD PTR [ECX+0x01]
	CMP EAX, 0x00000100
	JA loc_1008E027
	MOV EDX,DWORD PTR [offset LEGO1_data.mCFF0_ptr]
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[ECX*2+EDX]
	AND EAX,DWORD PTR [ESP+arg2+0xC]
	POP EBX
	ADD ESP, 0x08
	RET
loc_1008E027:
	MOV DL, CH
	XOR EBX, EBX
	MOV BL, DL
	MOV EAX, DWORD PTR [offset LEGO1_data.mCFF0_ptr]
	TEST BYTE PTR [EBX*2+EAX+0x01],0x80
	JZ loc_1008E04D
	MOV EAX, 0x00000002
	MOV BYTE PTR [ESP+var_4+0xC],DL
	MOV BYTE PTR [ESP+r+0xA],0x00
	MOV BYTE PTR [ESP+r+0x9],CL
	JMP loc_1008E05B
loc_1008E04D:
	MOV EAX, 0x00000001
	MOV BYTE PTR [ESP+var_4+0xC],CL
	MOV BYTE PTR [ESP+r+0x9],0x00
loc_1008E05B:
	LEA ECX,DWORD PTR [ESP+var_4+0xA]
	PUSH 0x00
	PUSH 0x00
	PUSH ECX
	PUSH EAX
	LEA EAX,DWORD PTR [ESP+var_4+0x1C]
	PUSH EAX
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m92480_sub_10093480])
	ADD ESP, 0x18
	TEST EAX, EAX
	JNZ loc_1008E07F
	XOR EAX, EAX
	POP EBX
	ADD ESP, 0x08
	RET
loc_1008E07F:
	MOV EAX,DWORD PTR [ESP+var_4+0xA]
	AND EAX, 0x0000FFFF
	AND EAX,DWORD PTR [ESP+arg2+0xC]
	POP EBX
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD __stdcall LEGO1__allmul(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	MOV ECX,DWORD PTR [ESP+arg4]
	OR ECX, EAX
	MOV ECX,DWORD PTR [ESP+arg3]
	JNZ loc_1008E0B9
	MOV EAX,DWORD PTR [ESP+arg1]
	MUL ECX
	RETN 0x0010
loc_1008E0B9:
	PUSH EBX
	MUL ECX
	MOV EBX, EAX
	MOV EAX,DWORD PTR [ESP+arg1+0x4]
	MUL DWORD PTR [ESP+arg4+0x4]
	ADD EBX, EAX
	MOV EAX,DWORD PTR [ESP+arg1+0x4]
	MUL ECX
	ADD EDX, EBX
	POP EBX
	RETN 0x0010
}
}

__declspec(naked) DWORD LEGO1_sub_1008E0E0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	MOV EDI,DWORD PTR [ESP+arg2+0x10]
	MOV ESI,DWORD PTR [EDI+0x10]
	MOV EAX,DWORD PTR [EDI+0x0C]
	TEST AL, 0x82
	JZ FAR loc_1008E21D
	TEST AL, 0x40
	JNZ FAR loc_1008E21D
	TEST AL, 0x01
	JZ loc_1008E11D
	MOV DWORD PTR [EDI+0x04],0x00000000
	MOV EAX,DWORD PTR [EDI+0x0C]
	TEST AL, 0x10
	JZ FAR loc_1008E194
	MOV EAX,DWORD PTR [EDI+0x08]
	MOV DWORD PTR [EDI],EAX
	AND DWORD PTR [EDI+0x0C],-0x02
loc_1008E11D:
	MOV EAX,DWORD PTR [EDI+0x0C]
	XOR EBP, EBP
	OR EAX, 0x02
	MOV DWORD PTR [EDI+0x0C],EAX
	AND EAX, -0x11
	MOV DWORD PTR [EDI+0x0C],EAX
	MOV DWORD PTR [EDI+0x04],0x00000000
	TEST DWORD PTR [EDI+0x0C],0x0000010C
	JNZ loc_1008E164
	CMP EDI, offset LEGO1_data + 0xC910
	JZ loc_1008E14E
	CMP EDI, offset LEGO1_data + 0xC930
	JNZ loc_1008E15B
loc_1008E14E:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m92600_sub_10093600])
	ADD ESP, 0x04
	TEST EAX, EAX
	JNZ loc_1008E164
loc_1008E15B:
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m925B0_sub_100935B0])
	ADD ESP, 0x04
loc_1008E164:
	TEST DWORD PTR [EDI+0x0C],0x00000108
	JZ loc_1008E1E7
	MOV EAX,DWORD PTR [EDI+0x08]
	MOV EBX,DWORD PTR [EDI]
	SUB EBX, EAX
	INC EAX
	MOV DWORD PTR [EDI],EAX
	MOV EAX,DWORD PTR [EDI+0x18]
	DEC EAX
	TEST EBX, EBX
	MOV DWORD PTR [EDI+0x04],EAX
	JLE loc_1008E1A4
	PUSH EBX
	MOV EAX,DWORD PTR [EDI+0x08]
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8E080_sub_1008F080])
	ADD ESP, 0x0C
	MOV EBP, EAX
	JMP loc_1008E1DC
loc_1008E194:
	OR EAX, 0x20
	POP EBP
	MOV DWORD PTR [EDI+0x0C],EAX
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1008E1A4:
	MOV EAX, offset LEGO1_data + 0xD2E0
	CMP ESI, -0x01
	JZ loc_1008E1C9
	MOV EAX, ESI
	MOV ECX, ESI
	AND EAX, -0x19
	AND ECX, 0x1F
	SAR EAX, 0x03
	SHL ECX, 0x02
	MOV EAX,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	LEA EDX,DWORD PTR [ECX*8+ECX]
	ADD EAX, EDX
loc_1008E1C9:
	TEST BYTE PTR [EAX+0x04],0x20
	JZ loc_1008E1DC
	PUSH 0x02
	PUSH 0x00
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8ECC0_sub_1008FCC0])
	ADD ESP, 0x0C
loc_1008E1DC:
	MOV AL,BYTE PTR [ESP+arg1+0x10]
	MOV ECX,DWORD PTR [EDI+0x08]
	MOV BYTE PTR [ECX],AL
	JMP loc_1008E1FD
loc_1008E1E7:
	MOV EBX, 0x00000001
	LEA EAX,DWORD PTR [ESP+arg1+0x10]
	PUSH EBX
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8E080_sub_1008F080])
	ADD ESP, 0x0C
	MOV EBP, EAX
loc_1008E1FD:
	CMP EBP, EBX
	JZ loc_1008E20F
	MOV EAX, 0xFFFFFFFF
	POP EBP
	OR DWORD PTR [EDI+0x0C],0x20
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1008E20F:
	MOV EAX,DWORD PTR [ESP+arg1+0x10]
	POP EBP
	AND EAX, 0x000000FF
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1008E21D:
	OR EAX, 0x20
	POP EBP
	MOV DWORD PTR [EDI+0x0C],EAX
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008E230(DWORD arg1, DWORD arg2)
{
	enum{
		var_234 = -0x234,
		var_21C = -0x21C,
		var_200 = -0x200,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x00000248
	MOV EAX,DWORD PTR [ESP+arg2+0x248]
	PUSH EBX
	INC DWORD PTR [ESP+arg2+0x24C]
	PUSH ESI
	MOV DWORD PTR [ESP+var_234+0x250],0x00000000
	PUSH EDI
	MOV BL,BYTE PTR [EAX]
	PUSH EBP
	TEST BL, BL
	MOV DWORD PTR [ESP+var_21C+0x258],0x00000000
	JZ_LONG(offset [LEGO1_text.m8D476_loc_1008E476])
	MOV ESI,DWORD PTR [ESP+var_200+0x258]
	MOV EBP,DWORD PTR [ESP+var_200+0x258]
	MOV EDI,DWORD PTR [ESP+var_200+0x258]
	JMP_LONG(offset [LEGO1_text.m8D26E_loc_1008E26E])
}
}

__declspec(naked) DWORD LEGO1_sub_1008EBE0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg2]
	MOV EAX,DWORD PTR [EDX+0x04]
	DEC EAX
	MOV DWORD PTR [EDX+0x04],EAX
	JS loc_1008EC00
	MOV EAX,DWORD PTR [EDX]
	MOV CL,BYTE PTR [ESP+arg1]
	MOV BYTE PTR [EAX],CL
	MOV ECX,DWORD PTR [EDX]
	XOR EAX, EAX
	MOV AL,BYTE PTR [ECX]
	INC ECX
	MOV DWORD PTR [EDX],ECX
	JMP loc_1008EC0E
loc_1008EC00:
	MOV ECX,DWORD PTR [ESP+arg1]
	PUSH EDX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8D0E0_sub_1008E0E0])
	ADD ESP, 0x08
loc_1008EC0E:
	CMP EAX, -0x01
	MOV EAX,DWORD PTR [ESP+arg3]
	JNZ loc_1008EC1E
	MOV DWORD PTR [EAX], 0xFFFFFFFF
	RET
loc_1008EC1E:
	INC DWORD PTR [EAX]
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008EC30(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg1217224 = 0x4A4B20,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	MOV EDI,DWORD PTR [ESP+arg2+0xC]
	PUSH EBP
	MOV EBX,DWORD PTR [ESP+arg3+0x10]
	MOV EBP,DWORD PTR [ESP+arg4+0x10]
loc_1008EC44:
	MOV EAX, EDI
	DEC EDI
	TEST EAX, EAX
	JLE loc_1008EC5C
	PUSH EBP
	PUSH EBX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DBE0_sub_1008EBE0])
	ADD ESP, 0x0C
	CMP DWORD PTR [EBP+arg1217224-0x4A4B20],-0x01
	JNZ loc_1008EC44
loc_1008EC5C:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008EC70(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg1217224 = 0x4A4B20,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	MOV EDI,DWORD PTR [ESP+arg2+0xC]
	PUSH EBP
	MOV EBX,DWORD PTR [ESP+arg3+0x10]
	MOV EBP,DWORD PTR [ESP+arg4+0x10]
loc_1008EC84:
	MOV EAX, EDI
	DEC EDI
	TEST EAX, EAX
	JLE loc_1008ECA2
	MOV EAX, ESI
	PUSH EBP
	INC ESI
	PUSH EBX
	MOVSX ECX,BYTE PTR [EAX]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8DBE0_sub_1008EBE0])
	ADD ESP, 0x0C
	CMP DWORD PTR [EBP+arg1217224-0x4A4B20],-0x01
	JNZ loc_1008EC84
loc_1008ECA2:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008ECB0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	MOV ECX,DWORD PTR [EAX]
	ADD ECX, 0x04
	MOV DWORD PTR [EAX],ECX
	MOV EAX,DWORD PTR [ECX-0x04]
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008ECC0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	MOV ECX,DWORD PTR [EAX]
	ADD ECX, 0x08
	MOV DWORD PTR [EAX],ECX
	MOV EAX,DWORD PTR [ECX-0x08]
	MOV EDX,DWORD PTR [ECX-0x04]
	SUB ECX, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008ECE0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	MOV ECX,DWORD PTR [EAX]
	ADD ECX, 0x04
	MOV DWORD PTR [EAX],ECX
	MOV AX,WORD PTR DS:[ECX-0x04]
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008ECF0(DWORD arg1, DWORD arg2)
{
	enum{
		var_18 = -0x18,
		var_14 = -0x14,
		var_10 = -0x10,
		var_C = -0xC,
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x18
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR ESI, ESI
	MOV EDI,DWORD PTR [ESP+arg2+0x24]
	PUSH ESI
	LEA EAX,DWORD PTR [ESP+var_10+0x28]
	PUSH ESI
	LEA ECX,DWORD PTR [ESP+var_C+0x2C]
	PUSH ESI
	PUSH ESI
	PUSH EDI
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m92820_sub_10093820])
	ADD ESP, 0x1C
	MOV EBX, EAX
	TEST BL,0x04
	JZ loc_1008ED31
	MOV DWORD PTR [ESP+var_18+0x24],0x00000000
	MOV DWORD PTR [ESP+var_14+0x24],0x00000000
	MOV ESI, 0x00000200
	JMP loc_1008ED62
loc_1008ED31:
	LEA EAX,DWORD PTR [ESP+var_18+0x24]
	LEA ECX,DWORD PTR [ESP+var_C+0x24]
	PUSH EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m91D30_sub_10092D30])
	ADD ESP, 0x08
	TEST BL,0x02
	JNZ loc_1008ED4D
	CMP EAX, 0x01
	JNZ loc_1008ED52
loc_1008ED4D:
	MOV ESI, 0x00000080
loc_1008ED52:
	TEST BL,0x01
	JNZ loc_1008ED5C
	CMP EAX, 0x02
	JNZ loc_1008ED62
loc_1008ED5C:
	OR ESI, 0x00000100
loc_1008ED62:
	MOV EAX,DWORD PTR [ESP+arg1+0x24]
	MOV ECX,DWORD PTR [ESP+var_10+0x24]
	SUB ECX, EDI
	MOV EDX,DWORD PTR [ESP+var_14+0x24]
	MOV EBX,DWORD PTR [ESP+var_18+0x24]
	MOV DWORD PTR [EAX],ESI
	POP EDI
	MOV DWORD PTR [EAX+0x04],ECX
	POP ESI
	MOV DWORD PTR [EAX+0x14],EDX
	MOV DWORD PTR [EAX+0x10],EBX
	POP EBX
	ADD ESP, 0x18
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008ED90()
{
__asm{
	PUSH ESI
	MOV EAX, DWORD PTR [offset LEGO1_data.mD25C_ptr]
	PUSH EAX
	MOV ESI,DWORD PTR [offset LEGO1_idata.m3C0_InitializeCriticalSection]
	CALL_LONG(ESI)
	MOV ECX,DWORD PTR [offset LEGO1_data.mD24C_ptr]
	PUSH ECX
	CALL_LONG(ESI)
	MOV EAX, DWORD PTR [offset LEGO1_data.mD23C_ptr]
	PUSH EAX
	CALL_LONG(ESI)
	MOV EAX, DWORD PTR [offset LEGO1_data.mD21C_ptr]
	PUSH EAX
	CALL_LONG(ESI)
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008EDC0()
{
__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [offset LEGO1_idata.m3E8_DeleteCriticalSection]
	XOR EDI, EDI
loc_1008EDCB:
	LEA EBX,DWORD PTR [offset LEGO1_data.mD218+EDI*4]
	MOV EAX,DWORD PTR [EBX]
	TEST EAX, EAX
	JZ loc_1008EDFA
	CMP EDI, 0x11
	JZ loc_1008EDFA
	CMP EDI, 0x0D
	JZ loc_1008EDFA
	CMP EDI, 0x09
	JZ loc_1008EDFA
	CMP EDI, 0x01
	JZ loc_1008EDFA
	PUSH EAX
	CALL_LONG(ESI)
	MOV EAX,DWORD PTR [EBX]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_1008EDFA:
	INC EDI
	CMP EDI, 0x30
	JL loc_1008EDCB
	MOV EAX, DWORD PTR [offset LEGO1_data.mD23C_ptr]
	PUSH EAX
	CALL_LONG(ESI)
	MOV EAX, DWORD PTR [offset LEGO1_data.mD24C_ptr]
	PUSH EAX
	CALL_LONG(ESI)
	MOV EAX, DWORD PTR [offset LEGO1_data.mD25C_ptr]
	PUSH EAX
	CALL_LONG(ESI)
	MOV EAX, DWORD PTR [offset LEGO1_data.mD21C_ptr]
	PUSH EAX
	CALL_LONG(ESI)
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008EE30(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBP
	MOV EAX,DWORD PTR [ESP+arg1+0x4]
	MOV EBP, ESP
	PUSH ESI
	PUSH EDI
	LEA EDI,DWORD PTR [offset LEGO1_data.mD218+EAX*4]
	CMP DWORD PTR [EDI],0x00
	JNZ loc_1008EE8B
	PUSH 0x18
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV ESI, EAX
	TEST ESI, ESI
	JNZ loc_1008EE5F
	PUSH 0x11
	CALL_LONG(offset [LEGO1_text.m8B920_sub_1008C920])
	ADD ESP, 0x04
loc_1008EE5F:
	PUSH 0x11
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	ADD ESP, 0x04
	CMP DWORD PTR [EDI],0x00
	PUSH ESI
	JNZ loc_1008EE79
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3C0_InitializeCriticalSection])
	MOV DWORD PTR [EDI],ESI
	JMP loc_1008EE81
loc_1008EE79:
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_1008EE81:
	PUSH 0x11
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
loc_1008EE8B:
	MOV EAX,DWORD PTR [EDI]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
	POP EDI
	POP ESI
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008EEA0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBP
	MOV EAX,DWORD PTR [ESP+arg1+0x4]
	MOV EBP, ESP
	MOV ECX,DWORD PTR [offset LEGO1_data.mD218+EAX*4]
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008EEC0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBP
	MOV EAX,DWORD PTR [ESP+arg1+0x4]
	MOV EBP, ESP
	CMP EAX, offset [LEGO1_data.mC8F0_ptr]
	JB loc_1008EEEA
	CMP EAX, offset LEGO1_data + 0xCB50
	JA loc_1008EEEA
	SUB EAX, offset [LEGO1_data.mC8F0_ptr]
	SAR EAX, 0x05
	ADD EAX, 0x1C
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	MOV ESP, EBP
	POP EBP
	RET
loc_1008EEEA:
	ADD EAX, 0x20
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008EF00(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBP
	MOV EAX,DWORD PTR [ESP+arg1+0x4]
	MOV EBP, ESP
	CMP EAX, 0x14
	JGE loc_1008EF19
	ADD EAX, 0x1C
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	MOV ESP, EBP
	POP EBP
	RET
loc_1008EF19:
	MOV EAX,DWORD PTR [EBP+arg2+0x4]
	ADD EAX, 0x20
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008EF30(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBP
	MOV EAX,DWORD PTR [ESP+arg1+0x4]
	MOV EBP, ESP
	CMP EAX, offset [LEGO1_data.mC8F0_ptr]
	JB loc_1008EF5A
	CMP EAX, offset LEGO1_data + 0xCB50
	JA loc_1008EF5A
	SUB EAX, offset [LEGO1_data.mC8F0_ptr]
	SAR EAX, 0x05
	ADD EAX, 0x1C
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	MOV ESP, EBP
	POP EBP
	RET
loc_1008EF5A:
	ADD EAX, 0x20
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008EF70(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBP
	MOV EAX,DWORD PTR [ESP+arg1+0x4]
	MOV EBP, ESP
	CMP EAX, 0x14
	JGE loc_1008EF89
	ADD EAX, 0x1C
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	MOV ESP, EBP
	POP EBP
	RET
loc_1008EF89:
	MOV EAX,DWORD PTR [EBP+arg2+0x4]
	ADD EAX, 0x20
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C8_LeaveCriticalSection])
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008EFA0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	MOV EAX,DWORD PTR [ESI+0x10]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m92600_sub_10093600])
	ADD ESP, 0x04
	TEST EAX, EAX
	JNZ loc_1008EFBB
	XOR EAX, EAX
	POP EDI
	POP ESI
	RET
loc_1008EFBB:
	CMP ESI, offset LEGO1_data + 0xC910
	JNZ loc_1008EFC7
	XOR EAX, EAX
	JMP loc_1008EFD4
loc_1008EFC7:
	CMP ESI, offset LEGO1_data + 0xC930
	JNZ loc_1008F02D
	MOV EAX, 0x00000001
loc_1008EFD4:
	INC DWORD PTR [offset LEGO1_data + 0xCB70]
	TEST DWORD PTR [ESI+0x0C],0x0000010C
	JZ loc_1008EFE8
	XOR EAX, EAX
	POP EDI
	POP ESI
	RET
loc_1008EFE8:
	LEA EDI,DWORD PTR [offset LEGO1_data + 0xD2D8+EAX*4]
	CMP DWORD PTR [EDI],0x00
	JNZ loc_1008F00C
	PUSH 0x00001000
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV DWORD PTR [EDI],EAX
	TEST EAX, EAX
	JNZ loc_1008F00C
	XOR EAX, EAX
	POP EDI
	POP ESI
	RET
loc_1008F00C:
	MOV EAX,DWORD PTR [EDI]
	MOV DWORD PTR [ESI+0x08],EAX
	POP EDI
	MOV DWORD PTR [ESI],EAX
	MOV EAX, 0x00001000
	MOV DWORD PTR [ESI+0x18],EAX
	MOV DWORD PTR [ESI+0x04],EAX
	MOV EAX, 0x00000001
	OR DWORD PTR [ESI+0x0C],0x00001102
	POP ESI
	RET
loc_1008F02D:
	XOR EAX, EAX
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008F040(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	CMP DWORD PTR [ESP+arg1],0x00
	PUSH ESI
	JZ loc_1008F076
	MOV ESI,DWORD PTR [ESP+arg2+0x4]
	TEST BYTE PTR [ESI+0x0D],0x10
	JZ loc_1008F076
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8E340_sub_1008F340])
	AND DWORD PTR [ESI+0x0C],0xFFFFEEFF
	MOV DWORD PTR [ESI+0x18],0x00000000
	ADD ESP, 0x04
	MOV DWORD PTR [ESI], 0x00000000
	MOV DWORD PTR [ESI+0x08],0x00000000
loc_1008F076:
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008F080(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	CMP DWORD PTR [offset LEGO1_data + 0x19710],ESI
	JBE loc_1008F0DA
	MOV EAX, ESI
	MOV ECX, ESI
	AND EAX, -0x19
	AND ECX, 0x1F
	SAR EAX, 0x03
	SHL ECX, 0x02
	MOV EDX,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	LEA EAX,DWORD PTR [ECX*8+ECX]
	TEST BYTE PTR [EAX+EDX+0x04],0x01
	JZ loc_1008F0DA
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m93250_sub_10094250])
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	MOV ECX,DWORD PTR [ESP+arg2+0xC]
	ADD ESP, 0x04
	PUSH EAX
	PUSH ECX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8E100_sub_1008F100])
	ADD ESP, 0x0C
	MOV EDI, EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m932C0_sub_100942C0])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EDI
	POP ESI
	RET
loc_1008F0DA:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000009
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	POP EDI
	MOV DWORD PTR [EAX], 0x00000000
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008F100(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_418 = -0x418,
		var_414 = -0x414,
		var_410 = -0x410,
		var_40C = -0x40C,
		var_408 = -0x408,
		var_404 = -0x404,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	SUB ESP, 0x00000418
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	XOR EDI, EDI
	MOV EBP,DWORD PTR [ESP+arg3+0x428]
	MOV DWORD PTR [ESP+var_408+0x428],EDI
	CMP EBP, EDI
	JNZ loc_1008F128
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000418
	RET
loc_1008F128:
	MOV EDX,DWORD PTR [ESP+arg1+0x428]
	MOV EAX, EDX
	AND EAX, -0x19
	SAR EAX, 0x03
	ADD EAX, offset LEGO1_data + 0x19610
	MOV DWORD PTR [ESP+var_410+0x428],EAX
	MOV EAX, EDX
	AND EAX, 0x1F
	MOV EBX,DWORD PTR [ESP+var_410+0x428]
	SHL EAX, 0x02
	LEA ECX,DWORD PTR [EAX*8+EAX]
	MOV EAX,DWORD PTR [EBX]
	MOV DWORD PTR [ESP+var_40C+0x428],ECX
	TEST BYTE PTR [ECX+EAX+0x04],0x20
	JZ loc_1008F169
	PUSH 0x02
	PUSH 0x00
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m8ED40_sub_1008FD40])
	ADD ESP, 0x0C
loc_1008F169:
	MOV EAX,DWORD PTR [ESP+var_410+0x428]
	MOV ECX,DWORD PTR [ESP+var_40C+0x428]
	ADD ECX,DWORD PTR [EAX]
	TEST BYTE PTR [ECX+0x04],0x80
	JZ FAR loc_1008F205
	MOV DWORD PTR [ESP+var_418+0x428],0x00000000
	MOV EBX,DWORD PTR [ESP+arg2+0x428]
loc_1008F18C:
	MOV EAX, EBX
	SUB EAX,DWORD PTR [ESP+arg2+0x428]
	CMP EAX, EBP
	JNB FAR loc_1008F23E
	LEA ESI,DWORD PTR [ESP+var_404+0x428]
loc_1008F1A1:
	MOV EAX, EBX
	SUB EAX,DWORD PTR [ESP+arg2+0x428]
	CMP EAX, EBP
	JNB loc_1008F1CC
	MOV AL,BYTE PTR [EBX]
	INC EBX
	CMP AL, 0x0A
	JNZ loc_1008F1BA
	MOV BYTE PTR [ESI],0x0D
	INC EDI
	INC ESI
loc_1008F1BA:
	MOV BYTE PTR [ESI],AL
	INC ESI
	MOV EAX, ESI
	LEA ECX,DWORD PTR [ESP+var_404+0x428]
	SUB EAX, ECX
	CMP EAX, 0x00000400
	JL loc_1008F1A1
loc_1008F1CC:
	LEA EAX,DWORD PTR [ESP+var_404+0x428]
	PUSH 0x00
	SUB ESI, EAX
	LEA ECX,DWORD PTR [ESP+var_404+0x42C]
	LEA EAX,DWORD PTR [ESP+var_414+0x42C]
	MOV EDX,DWORD PTR [ESP+var_410+0x42C]
	PUSH EAX
	PUSH ESI
	PUSH ECX
	MOV EAX,DWORD PTR [EDX]
	MOV ECX,DWORD PTR [ESP+var_40C+0x438]
	MOV EDX,DWORD PTR [ECX+EAX]
	PUSH EDX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4D0_WriteFile])
	TEST EAX, EAX
	JZ loc_1008F234
	MOV EAX,DWORD PTR [ESP+var_414+0x428]
	ADD DWORD PTR [ESP+var_408+0x428],EAX
	CMP EAX, ESI
	JGE loc_1008F18C
	JMP loc_1008F23E
loc_1008F205:
	LEA EAX,DWORD PTR [ESP+var_414+0x428]
	PUSH 0x00
	MOV EDX,DWORD PTR [ESP+arg2+0x42C]
	PUSH EAX
	PUSH EBP
	MOV ECX,DWORD PTR [ECX]
	PUSH EDX
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4D0_WriteFile])
	TEST EAX, EAX
	JZ loc_1008F234
	MOV DWORD PTR [ESP+var_418+0x428],0x00000000
	MOV EAX,DWORD PTR [ESP+var_414+0x428]
	MOV DWORD PTR [ESP+var_408+0x428],EAX
	JMP loc_1008F23E
loc_1008F234:
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B8_GetLastError])
	MOV DWORD PTR [ESP+var_418+0x428],EAX
loc_1008F23E:
	CMP DWORD PTR [ESP+var_408+0x428],0x00
	JNZ FAR loc_1008F2EA
	CMP DWORD PTR [ESP+var_418+0x428],0x00
	JZ loc_1008F29A
	CMP DWORD PTR [ESP+var_418+0x428],0x05
	JNZ loc_1008F27D
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000009
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	MOV ECX,DWORD PTR [ESP+var_418+0x428]
	POP EBP
	POP EDI
	MOV DWORD PTR [EAX],ECX
	MOV EAX, 0xFFFFFFFF
	POP ESI
	POP EBX
	ADD ESP, 0x00000418
	RET
loc_1008F27D:
	MOV ECX,DWORD PTR [ESP+var_418+0x428]
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8EDD0_sub_1008FDD0])
	ADD ESP, 0x04
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000418
	RET
loc_1008F29A:
	MOV EAX,DWORD PTR [ESP+var_410+0x428]
	MOV ECX,DWORD PTR [ESP+var_40C+0x428]
	MOV EDX,DWORD PTR [EAX]
	TEST BYTE PTR [ECX+EDX+0x04],0x40
	JZ loc_1008F2C4
	MOV EAX,DWORD PTR [ESP+arg2+0x428]
	CMP BYTE PTR [EAX],0x1A
	JNZ loc_1008F2C4
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000418
	RET
loc_1008F2C4:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x0000001C
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	POP EBP
	MOV DWORD PTR [EAX], 0x00000000
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000418
	RET
loc_1008F2EA:
	MOV EAX,DWORD PTR [ESP+var_408+0x428]
	POP EBP
	SUB EAX, EDI
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x00000418
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008F300(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x4]
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8E340_sub_1008F340])
	ADD ESP, 0x04
	TEST EAX, EAX
	JZ loc_1008F319
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RET
loc_1008F319:
	TEST BYTE PTR [ESI+0x0D],0x40
	JZ loc_1008F338
	MOV EAX,DWORD PTR [ESI+0x10]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m932F0_sub_100942F0])
	ADD ESP, 0x04
	CMP EAX, 0x01
	MOV EAX, 0x00000000
	POP ESI
	ADC EAX, -0x01
	RET
loc_1008F338:
	XOR EAX, EAX
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008F340(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR ESI, ESI
	MOV EDI,DWORD PTR [ESP+arg1+0xC]
	MOV EAX,DWORD PTR [EDI+0x0C]
	MOV ECX, EAX
	AND CL, 0x03
	CMP CL, 0x02
	JNZ loc_1008F392
	TEST EAX, 0x00000108
	JZ loc_1008F392
	MOV EAX,DWORD PTR [EDI+0x08]
	MOV EBX,DWORD PTR [EDI]
	SUB EBX, EAX
	TEST EBX, EBX
	JLE loc_1008F392
	PUSH EBX
	PUSH EAX
	MOV EAX,DWORD PTR [EDI+0x10]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8E080_sub_1008F080])
	ADD ESP, 0x0C
	CMP EAX, EBX
	JNZ loc_1008F389
	MOV EAX,DWORD PTR [EDI+0x0C]
	TEST AL, 0x80
	JZ loc_1008F392
	AND EAX, -0x03
	MOV DWORD PTR [EDI+0x0C],EAX
	JMP loc_1008F392
loc_1008F389:
	OR DWORD PTR [EDI+0x0C],0x20
	MOV ESI, 0xFFFFFFFF
loc_1008F392:
	MOV EAX,DWORD PTR [EDI+0x08]
	MOV DWORD PTR [EDI],EAX
	MOV EAX, ESI
	MOV DWORD PTR [EDI+0x04],0x00000000
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008F3B0()
{
__asm{
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m8E3C0_sub_1008F3C0])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008F3C0(DWORD arg1)
{
	enum{
		var_4 = -0x4,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR EBX, EBX
	PUSH EBP
	XOR EDI, EDI
	MOV DWORD PTR [ESP+var_4+0x14],EBX
	PUSH 0x02
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	ADD ESP, 0x04
	CMP DWORD PTR [offset LEGO1_data + 0x1A730],EBX
	JLE FAR loc_1008F46A
	XOR EBP, EBP
	MOV ESI,DWORD PTR [ESP+arg1+0x14]
loc_1008F3EB:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x19724]
	MOV EAX,DWORD PTR [EBP+EAX]
	TEST EAX, EAX
	JZ loc_1008F45C
	TEST BYTE PTR [EAX+0x0C],0x83
	JZ loc_1008F45C
	PUSH EAX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8DF00_sub_1008EF00])
	ADD ESP, 0x08
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x19724]
	MOV ECX,DWORD PTR [EBP+EAX]
	MOV EAX,DWORD PTR [ECX+0x0C]
	TEST AL, 0x83
	JZ loc_1008F44A
	CMP ESI, 0x01
	JNZ loc_1008F42C
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8E300_sub_1008F300])
	ADD ESP, 0x04
	CMP EAX, -0x01
	JZ loc_1008F44A
	INC EBX
	JMP loc_1008F44A
loc_1008F42C:
	TEST ESI, ESI
	JNZ loc_1008F44A
	TEST AL, 0x02
	JZ loc_1008F44A
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m8E300_sub_1008F300])
	ADD ESP, 0x04
	CMP EAX, -0x01
	JNZ loc_1008F44A
	MOV DWORD PTR [ESP+var_4+0x14],0xFFFFFFFF
loc_1008F44A:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x19724]
	MOV ECX,DWORD PTR [EBP+EAX]
	PUSH ECX
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8DF70_sub_1008EF70])
	ADD ESP, 0x08
loc_1008F45C:
	ADD EBP, 0x04
	INC EDI
	CMP EDI,DWORD PTR [offset LEGO1_data + 0x1A730]
	JL loc_1008F3EB
	JMP loc_1008F46E
loc_1008F46A:
	MOV ESI,DWORD PTR [ESP+arg1+0x14]
loc_1008F46E:
	PUSH 0x02
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	MOV EAX, EBX
	CMP ESI, 0x01
	JZ loc_1008F483
	MOV EAX,DWORD PTR [ESP+var_4+0x14]
loc_1008F483:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008F490(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x4]
	MOV EAX,DWORD PTR [ESI+0x0C]
	TEST AL, 0x83
	JZ FAR loc_1008F57E
	TEST AL, 0x40
	JNZ FAR loc_1008F57E
	TEST AL, 0x02
	JZ loc_1008F4B9
	OR EAX, 0x20
	MOV DWORD PTR [ESI+0x0C],EAX
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RET
loc_1008F4B9:
	OR EAX, 0x01
	MOV DWORD PTR [ESI+0x0C],EAX
	TEST EAX, 0x0000010C
	JNZ loc_1008F4D1
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m925B0_sub_100935B0])
	ADD ESP, 0x04
	JMP loc_1008F4D6
loc_1008F4D1:
	MOV EAX,DWORD PTR [ESI+0x08]
	MOV DWORD PTR [ESI],EAX
loc_1008F4D6:
	MOV EAX,DWORD PTR [ESI+0x18]
	MOV ECX,DWORD PTR [ESI+0x08]
	PUSH EAX
	MOV EDX,DWORD PTR [ESI+0x10]
	PUSH ECX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m8E590_sub_1008F590])
	ADD ESP, 0x0C
	MOV DWORD PTR [ESI+0x04],EAX
	TEST EAX, EAX
	JZ loc_1008F562
	CMP EAX, -0x01
	JZ loc_1008F562
	MOV EDX,DWORD PTR [ESI+0x0C]
	TEST DL,0x82
	JNZ loc_1008F536
	MOV ECX,DWORD PTR [ESI+0x10]
	MOV EAX, offset LEGO1_data + 0xD2E0
	CMP ECX, -0x01
	JZ loc_1008F524
	MOV EAX, ECX
	AND ECX, 0x1F
	SHL ECX, 0x02
	AND EAX, -0x19
	SAR EAX, 0x03
	LEA ECX,DWORD PTR [ECX*8+ECX]
	MOV EAX,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	ADD EAX, ECX
loc_1008F524:
	MOV AL,BYTE PTR [EAX+0x04]
	AND AL, 0x82
	CMP AL, 0x82
	JNZ loc_1008F536
	OR EDX, 0x00002000
	MOV DWORD PTR [ESI+0x0C],EDX
loc_1008F536:
	CMP DWORD PTR [ESI+0x18],0x00000200
	JNZ loc_1008F552
	MOV EAX,DWORD PTR [ESI+0x0C]
	TEST AL, 0x08
	JZ loc_1008F552
	TEST AH,0x04
	JNZ loc_1008F552
	MOV DWORD PTR [ESI+0x18],0x00001000
loc_1008F552:
	DEC DWORD PTR [ESI+0x04]
	MOV ECX,DWORD PTR [ESI]
	LEA EAX,DWORD PTR [ECX+0x01]
	MOV DWORD PTR [ESI],EAX
	XOR EAX, EAX
	MOV AL,BYTE PTR [ECX]
	POP ESI
	RET
loc_1008F562:
	CMP EAX, 0x01
	SBB EAX, EAX
	AND EAX, -0x10
	ADD EAX, 0x20
	OR DWORD PTR [ESI+0x0C],EAX
	MOV EAX, 0xFFFFFFFF
	MOV DWORD PTR [ESI+0x04],0x00000000
	POP ESI
	RET
loc_1008F57E:
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008F590(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	CMP ESI,DWORD PTR [offset LEGO1_data + 0x19710]
	JNB loc_1008F5EA
	MOV EAX, ESI
	MOV ECX, ESI
	AND EAX, -0x19
	AND ECX, 0x1F
	SAR EAX, 0x03
	SHL ECX, 0x02
	MOV EDX,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	LEA EAX,DWORD PTR [ECX*8+ECX]
	TEST BYTE PTR [EAX+EDX+0x04],0x01
	JZ loc_1008F5EA
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m93250_sub_10094250])
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	MOV ECX,DWORD PTR [ESP+arg2+0xC]
	ADD ESP, 0x04
	PUSH EAX
	PUSH ECX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8E610_sub_1008F610])
	ADD ESP, 0x0C
	MOV EDI, EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m932C0_sub_100942C0])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EDI
	POP ESI
	RET
loc_1008F5EA:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000009
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	POP EDI
	MOV DWORD PTR [EAX], 0x00000000
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008F610(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg1217224 = 0x4A4B20,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg2]
	SUB ESP, 0x10
	MOV ECX,DWORD PTR [ESP+arg3+0x10]
	PUSH EBX
	PUSH ESI
	TEST ECX, ECX
	MOV DWORD PTR [ESP+var_C+0x18],0x00000000
	PUSH EDI
	PUSH EBP
	JZ FAR loc_1008F836
	MOV EAX,DWORD PTR [ESP+arg1+0x20]
	AND EAX, -0x19
	SAR EAX, 0x03
	LEA EBP,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	MOV EAX,DWORD PTR [ESP+arg1+0x20]
	AND EAX, 0x1F
	SHL EAX, 0x02
	LEA EBX,DWORD PTR [EAX*8+EAX]
	MOV EAX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	ADD EAX, EBX
	TEST BYTE PTR [EAX+0x04],0x02
	JNZ FAR loc_1008F836
	TEST BYTE PTR [EAX+0x04],0x48
	JZ loc_1008F67C
	MOV AL,BYTE PTR [EAX+0x05]
	CMP AL, 0x0A
	JZ loc_1008F67C
	MOV BYTE PTR [EDX],AL
	INC EDX
	DEC ECX
	MOV EAX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	MOV DWORD PTR [ESP+var_C+0x20],0x00000001
	MOV BYTE PTR [EBX+EAX+0x05],0x0A
loc_1008F67C:
	LEA EAX,DWORD PTR [ESP+var_8+0x20]
	PUSH 0x00
	PUSH EAX
	PUSH ECX
	PUSH EDX
	MOV ECX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	MOV EDX,DWORD PTR [EBX+ECX]
	PUSH EDX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m498_ReadFile])
	TEST EAX, EAX
	JNZ loc_1008F6E7
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B8_GetLastError])
	CMP EAX, 0x05
	MOV ESI, EAX
	JNZ loc_1008F6C2
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000009
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	POP EBP
	MOV DWORD PTR [EAX],ESI
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RET
loc_1008F6C2:
	CMP ESI, 0x6D
	JNZ loc_1008F6D1
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RET
loc_1008F6D1:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8EDD0_sub_1008FDD0])
	ADD ESP, 0x04
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RET
loc_1008F6E7:
	MOV EAX,DWORD PTR [ESP+var_8+0x20]
	MOV ECX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	ADD DWORD PTR [ESP+var_C+0x20],EAX
	LEA EAX,DWORD PTR [EBX+ECX+0x04]
	MOV CL,BYTE PTR [EAX]
	TEST CL,0x80
	JZ FAR loc_1008F82A
	CMP DWORD PTR [ESP+var_8+0x20],0x00
	JZ loc_1008F716
	MOV EDX,DWORD PTR [ESP+arg2+0x20]
	CMP BYTE PTR [EDX],0x0A
	JNZ loc_1008F716
	OR CL, 0x04
	JMP loc_1008F719
loc_1008F716:
	AND CL, -0x05
loc_1008F719:
	MOV EDI,DWORD PTR [ESP+arg2+0x20]
	MOV BYTE PTR [EAX],CL
	MOV ESI, EDI
	MOV EAX,DWORD PTR [ESP+var_C+0x20]
	ADD EAX, EDI
	MOV DWORD PTR [ESP+var_4+0x20],EAX
	CMP EDI, EAX
	JNB FAR loc_1008F822
loc_1008F733:
	MOV AL,BYTE PTR [ESI]
	CMP AL, 0x1A
	JZ FAR loc_1008F80F
	CMP AL, 0x0D
	JZ loc_1008F749
	INC ESI
	MOV BYTE PTR [EDI],AL
	JMP FAR loc_1008F802
loc_1008F749:
	MOV ECX,DWORD PTR [ESP+var_4+0x20]
	DEC ECX
	CMP ECX, ESI
	JBE loc_1008F76E
	LEA ECX,DWORD PTR [ESI+0x01]
	CMP BYTE PTR [ECX],0x0A
	JNZ loc_1008F765
	ADD ESI, 0x02
	MOV BYTE PTR [EDI],0x0A
	JMP FAR loc_1008F802
loc_1008F765:
	MOV ESI, ECX
	MOV BYTE PTR [EDI],AL
	JMP FAR loc_1008F802
loc_1008F76E:
	INC ESI
	PUSH 0x00
	LEA EAX,DWORD PTR [ESP+var_8+0x24]
	LEA ECX,DWORD PTR [ESP+var_C+0x23]
	PUSH EAX
	MOV EDX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	MOV DWORD PTR [ESP+var_C+0x28],0x00000000
	PUSH 0x01
	MOV EAX,DWORD PTR [EBX+EDX]
	PUSH ECX
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m498_ReadFile])
	TEST EAX, EAX
	JNZ loc_1008F7A0
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B8_GetLastError])
	MOV DWORD PTR [ESP+var_C+0x20],EAX
loc_1008F7A0:
	CMP DWORD PTR [ESP+var_C+0x20],0x00
	JNZ loc_1008F7FF
	CMP DWORD PTR [ESP+var_8+0x20],0x00
	JZ loc_1008F7FF
	MOV EAX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	TEST BYTE PTR [EBX+EAX+0x04],0x48
	JZ loc_1008F7D5
	CMP BYTE PTR [ESP+var_C+0x1F],0x0A
	JNZ loc_1008F7C4
	MOV BYTE PTR [EDI],0x0A
	JMP loc_1008F802
loc_1008F7C4:
	MOV BYTE PTR [EDI],0x0D
	INC EDI
	MOV AL,BYTE PTR [ESP+var_C+0x1F]
	MOV ECX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	MOV BYTE PTR [EBX+ECX+0x05],AL
	JMP loc_1008F803
loc_1008F7D5:
	CMP EDI,DWORD PTR [ESP+arg2+0x20]
	JNZ loc_1008F7E7
	CMP BYTE PTR [ESP+var_C+0x1F],0x0A
	JNZ loc_1008F7E7
	MOV BYTE PTR [EDI],0x0A
	JMP loc_1008F802
loc_1008F7E7:
	MOV EAX,DWORD PTR [ESP+arg1+0x20]
	PUSH 0x01
	PUSH -0x01
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8ED40_sub_1008FD40])
	ADD ESP, 0x0C
	CMP BYTE PTR [ESP+var_C+0x1F],0x0A
	JZ loc_1008F803
loc_1008F7FF:
	MOV BYTE PTR [EDI],0x0D
loc_1008F802:
	INC EDI
loc_1008F803:
	CMP ESI,DWORD PTR [ESP+var_4+0x20]
	JB FAR loc_1008F733
	JMP loc_1008F822
loc_1008F80F:
	MOV EAX,DWORD PTR [EBP+arg1217224-0x4A4B20]
	LEA EAX,DWORD PTR [EBX+EAX+0x04]
	MOV CL,BYTE PTR [EAX]
	TEST CL,0x40
	JNZ loc_1008F822
	OR CL, 0x02
	MOV BYTE PTR [EAX],CL
loc_1008F822:
	SUB EDI,DWORD PTR [ESP+arg2+0x20]
	MOV DWORD PTR [ESP+var_C+0x20],EDI
loc_1008F82A:
	MOV EAX,DWORD PTR [ESP+var_C+0x20]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RET
loc_1008F836:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x10
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008F840()
{
	enum{
		var_44 = -0x44,
		var_10 = -0x10,
		arg1217224 = 0x4A4B20,
	};

__asm{
	SUB ESP, 0x44
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	PUSH 0x00000480
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV ESI, EAX
	TEST ESI, ESI
	JNZ loc_1008F864
	PUSH 0x1B
	CALL_LONG(offset [LEGO1_text.m8B920_sub_1008C920])
	ADD ESP, 0x04
loc_1008F864:
	LEA EAX,DWORD PTR [ESI+0x00000480]
	MOV DWORD PTR [offset LEGO1_data + 0x19610],ESI
	MOV DWORD PTR [offset LEGO1_data + 0x19710],0x00000020
	CMP EAX, ESI
	JBE loc_1008F8A6
	XOR ECX, ECX
	MOV EDX, 0x0000000A
loc_1008F885:
	MOV BYTE PTR [ESI+0x04],CL
	ADD ESI, 0x24
	MOV DWORD PTR [ESI-0x24],0xFFFFFFFF
	MOV BYTE PTR [ESI-0x1F],DL
	MOV DWORD PTR [ESI-0x1C],ECX
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x19610]
	ADD EAX, 0x00000480
	CMP EAX, ESI
	JA loc_1008F885
loc_1008F8A6:
	LEA EAX,DWORD PTR [ESP+var_44+0x54]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m418_GetStartupInfoA])
	CMP WORD PTR SS:[ESP+var_10+0x52],0x00
	JZ FAR loc_1008F997
	CMP DWORD PTR [ESP+var_10+0x54],0x00
	JZ FAR loc_1008F997
	MOV EAX,DWORD PTR [ESP+var_10+0x54]
	MOV EBP,DWORD PTR [EAX]
	LEA EBX,DWORD PTR [EAX+0x04]
	CMP EBP, 0x00000800
	LEA ESI,DWORD PTR [EBX+EBP+arg1217224-0x4A4B20]
	JL loc_1008F8E2
	MOV EBP, 0x00000800
loc_1008F8E2:
	CMP DWORD PTR [offset LEGO1_data + 0x19710],EBP
	JGE loc_1008F948
	MOV EDI, offset LEGO1_data + 0x19614
loc_1008F8EF:
	PUSH 0x00000480
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	TEST EAX, EAX
	JZ loc_1008F942
	LEA ECX,DWORD PTR [EAX+0x00000480]
	MOV DWORD PTR [EDI],EAX
	ADD DWORD PTR [offset LEGO1_data + 0x19710],0x20
	CMP ECX, EAX
	JBE loc_1008F935
	XOR ECX, ECX
loc_1008F915:
	MOV BYTE PTR [EAX+0x04],CL
	ADD EAX, 0x24
	MOV DWORD PTR [EAX-0x24],0xFFFFFFFF
	MOV BYTE PTR [EAX-0x1F],0x0A
	MOV DWORD PTR [EAX-0x1C],ECX
	MOV EDX,DWORD PTR [EDI]
	ADD EDX, 0x00000480
	CMP EDX, EAX
	JA loc_1008F915
loc_1008F935:
	ADD EDI, 0x04
	CMP DWORD PTR [offset LEGO1_data + 0x19710],EBP
	JL loc_1008F8EF
	JMP loc_1008F948
loc_1008F942:
	MOV EBP,DWORD PTR [offset LEGO1_data + 0x19710]
loc_1008F948:
	XOR EDI, EDI
	TEST EBP, EBP
	JLE loc_1008F997
loc_1008F94E:
	MOV ECX,DWORD PTR [ESI]
	CMP ECX, -0x01
	JZ loc_1008F98E
	MOV AL,BYTE PTR [EBX]
	TEST AL, 0x01
	JZ loc_1008F98E
	TEST AL, 0x08
	JNZ loc_1008F96A
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C4_GetFileType])
	TEST EAX, EAX
	JZ loc_1008F98E
loc_1008F96A:
	MOV EAX, EDI
	MOV ECX, EDI
	AND EAX, -0x19
	AND ECX, 0x1F
	SAR EAX, 0x03
	SHL ECX, 0x02
	MOV EDX,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	MOV EAX,DWORD PTR [ESI]
	LEA ECX,DWORD PTR [ECX*8+ECX]
	ADD ECX, EDX
	MOV DWORD PTR [ECX],EAX
	MOV DL,BYTE PTR [EBX]
	MOV BYTE PTR [ECX+0x04],DL
loc_1008F98E:
	INC EDI
	INC EBX
	ADD ESI, 0x04
	CMP EDI, EBP
	JL loc_1008F94E
loc_1008F997:
	XOR ESI, ESI
	XOR EDI, EDI
loc_1008F99B:
	MOV EBX,DWORD PTR [offset LEGO1_data + 0x19610]
	ADD EBX, ESI
	CMP DWORD PTR [EBX],-0x01
	JNZ loc_1008F9FF
	MOV EAX, 0xFFFFFFF6
	TEST ESI, ESI
	MOV BYTE PTR [EBX+0x04],0x81
	JZ loc_1008F9C3
	LEA EAX,DWORD PTR [EDI-0x01]
	CMP EAX, 0x01
	MOV EAX, 0xFFFFFFF5
	ADC EAX, -0x01
loc_1008F9C3:
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4CC_GetStdHandle])
	CMP EAX, -0x01
	MOV EBP, EAX
	JZ loc_1008F9F9
	PUSH EBP
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4C4_GetFileType])
	TEST EAX, EAX
	JZ loc_1008F9F9
	AND EAX, 0x000000FF
	MOV DWORD PTR [EBX],EBP
	CMP EAX, 0x02
	JNZ loc_1008F9EE
	OR BYTE PTR [EBX+0x04],0x40
	JMP loc_1008FA03
loc_1008F9EE:
	CMP EAX, 0x03
	JNZ loc_1008FA03
	OR BYTE PTR [EBX+0x04],0x08
	JMP loc_1008FA03
loc_1008F9F9:
	OR BYTE PTR [EBX+0x04],0x40
	JMP loc_1008FA03
loc_1008F9FF:
	OR BYTE PTR [EBX+0x04],0x80
loc_1008FA03:
	ADD ESI, 0x24
	INC EDI
	CMP ESI, 0x6C
	JL loc_1008F99B
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x19710]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m40C_SetHandleCount])
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x44
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008FA20()
{
__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV ESI, offset LEGO1_data + 0x19610
	PUSH EBP
	MOV EDI,DWORD PTR [offset LEGO1_idata.m3E8_DeleteCriticalSection]
loc_1008FA2F:
	MOV EBX,DWORD PTR [ESI]
	TEST EBX, EBX
	JZ loc_1008FA65
	LEA EAX,DWORD PTR [EBX+0x00000480]
	CMP EAX, EBX
	JBE loc_1008FA5A
	XOR EBP, EBP
loc_1008FA41:
	CMP DWORD PTR [EBX+0x08],EBP
	JZ loc_1008FA4C
	LEA EAX,DWORD PTR [EBX+0x0C]
	PUSH EAX
	CALL_LONG(EDI)
loc_1008FA4C:
	ADD EBX, 0x24
	MOV EAX,DWORD PTR [ESI]
	ADD EAX, 0x00000480
	CMP EAX, EBX
	JA loc_1008FA41
loc_1008FA5A:
	MOV EAX,DWORD PTR [ESI]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_1008FA65:
	ADD ESI, 0x04
	CMP ESI, offset LEGO1_data + 0x19710
	JB loc_1008FA2F
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008FB20(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	CMP DWORD PTR [offset LEGO1_data + 0x19710],ESI
	JBE loc_1008FB70
	MOV EAX, ESI
	MOV ECX, ESI
	AND EAX, -0x19
	AND ECX, 0x1F
	SAR EAX, 0x03
	SHL ECX, 0x02
	MOV EDX,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	LEA EAX,DWORD PTR [ECX*8+ECX]
	TEST BYTE PTR [EAX+EDX+0x04],0x01
	JZ loc_1008FB70
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m93250_sub_10094250])
	ADD ESP, 0x04
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8EB90_sub_1008FB90])
	ADD ESP, 0x04
	MOV EDI, EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m932C0_sub_100942C0])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EDI
	POP ESI
	RET
loc_1008FB70:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000009
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	POP EDI
	MOV DWORD PTR [EAX], 0x00000000
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008FB90(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	CMP ESI, 0x01
	JZ loc_1008FBA0
	CMP ESI, 0x02
	JNZ loc_1008FBBA
loc_1008FBA0:
	PUSH 0x02
	CALL_LONG(offset [LEGO1_text.m93200_sub_10094200])
	ADD ESP, 0x04
	MOV EDI, EAX
	PUSH 0x01
	CALL_LONG(offset [LEGO1_text.m93200_sub_10094200])
	ADD ESP, 0x04
	CMP EDI, EAX
	JZ loc_1008FBD8
loc_1008FBBA:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m93200_sub_10094200])
	ADD ESP, 0x04
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m390_CloseHandle])
	TEST EAX, EAX
	JNZ loc_1008FBD8
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B8_GetLastError])
	MOV EDI, EAX
	JMP loc_1008FBDA
loc_1008FBD8:
	XOR EDI, EDI
loc_1008FBDA:
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m93160_sub_10094160])
	ADD ESP, 0x04
	TEST EDI, EDI
	JZ loc_1008FBF8
	PUSH EDI
	CALL_LONG(offset [LEGO1_text.m8EDD0_sub_1008FDD0])
	ADD ESP, 0x04
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	RET
loc_1008FBF8:
	MOV EAX, ESI
	AND ESI, 0x1F
	SHL ESI, 0x02
	AND EAX, -0x19
	SAR EAX, 0x03
	POP EDI
	MOV ECX,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	LEA EAX,DWORD PTR [ESI*8+ESI]
	POP ESI
	MOV BYTE PTR [EAX+ECX+0x04],0x00
	XOR EAX, EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008FC20(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x4]
	MOV EAX,DWORD PTR [ESI+0x0C]
	TEST AL, 0x83
	JZ loc_1008FC57
	TEST AL, 0x08
	JZ loc_1008FC57
	MOV EAX,DWORD PTR [ESI+0x08]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV DWORD PTR [ESI], 0x00000000
	AND DWORD PTR [ESI+0x0C],0xFFFFFBF7
	MOV DWORD PTR [ESI+0x08],0x00000000
	MOV DWORD PTR [ESI+0x04],0x00000000
loc_1008FC57:
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1__chkstk(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ECX
	CMP EAX, 0x00001000
	LEA ECX,DWORD PTR [ESP+arg1+0x4]
	JB loc_1008FCB0
loc_1008FC9C:
	SUB ECX, 0x00001000
	SUB EAX, 0x00001000
	TEST DWORD PTR [ECX],EAX
	CMP EAX, 0x00001000
	JNB loc_1008FC9C
loc_1008FCB0:
	SUB ECX, EAX
	MOV EAX, ESP
	TEST DWORD PTR [ECX],EAX
	MOV ESP, ECX
	MOV ECX,DWORD PTR [EAX]
	MOV EAX,DWORD PTR [EAX+0x04]
	PUSH EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008FCC0(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	CMP ESI,DWORD PTR [offset LEGO1_data + 0x19710]
	JNB loc_1008FD1A
	MOV EAX, ESI
	MOV ECX, ESI
	AND EAX, -0x19
	AND ECX, 0x1F
	SAR EAX, 0x03
	SHL ECX, 0x02
	MOV EDX,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	LEA EAX,DWORD PTR [ECX*8+ECX]
	TEST BYTE PTR [EAX+EDX+0x04],0x01
	JZ loc_1008FD1A
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m93250_sub_10094250])
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	MOV ECX,DWORD PTR [ESP+arg2+0xC]
	ADD ESP, 0x04
	PUSH EAX
	PUSH ECX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8ED40_sub_1008FD40])
	ADD ESP, 0x0C
	MOV EDI, EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m932C0_sub_100942C0])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EDI
	POP ESI
	RET
loc_1008FD1A:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV DWORD PTR [EAX], 0x00000009
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	POP EDI
	MOV DWORD PTR [EAX], 0x00000000
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008FD40(DWORD arg1, DWORD arg2, DWORD arg3)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
	};

__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m93200_sub_10094200])
	ADD ESP, 0x04
	CMP EAX, -0x01
	JNZ loc_1008FD67
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	POP EDI
	MOV DWORD PTR [EAX], 0x00000009
	MOV EAX, 0xFFFFFFFF
	POP ESI
	RET
loc_1008FD67:
	MOV ECX,DWORD PTR [ESP+arg3+0x8]
	MOV EDX,DWORD PTR [ESP+arg2+0x8]
	PUSH ECX
	PUSH 0x00
	PUSH EDX
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m420_SetFilePointer])
	CMP EAX, -0x01
	MOV EDI, EAX
	MOV EAX, 0x00000000
	JNZ loc_1008FD8C
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3B8_GetLastError])
loc_1008FD8C:
	TEST EAX, EAX
	JZ loc_1008FDA1
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8EDD0_sub_1008FDD0])
	ADD ESP, 0x04
	MOV EAX, 0xFFFFFFFF
	POP EDI
	POP ESI
	RET
loc_1008FDA1:
	MOV EAX, ESI
	AND ESI, 0x1F
	SHL ESI, 0x02
	AND EAX, -0x19
	SAR EAX, 0x03
	MOV ECX,DWORD PTR [offset LEGO1_data + 0x19610+EAX]
	LEA EAX,DWORD PTR [ESI*8+ESI]
	AND BYTE PTR [EAX+ECX+0x04],0xFD
	MOV EAX, EDI
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008FDD0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8EE60_sub_1008FE60])
	MOV ECX,DWORD PTR [ESP+arg1+0x4]
	XOR ESI, ESI
	MOV DWORD PTR [EAX],ECX
	MOV EAX, offset LEGO1_data + 0xD310
loc_1008FDE3:
	CMP DWORD PTR [EAX],ECX
	JZ loc_1008FE09
	ADD EAX, 0x08
	INC ESI
	CMP EAX, offset LEGO1_data + 0xD478
	JB loc_1008FDE3
	CMP ECX, 0x13
	JB loc_1008FE19
	CMP ECX, 0x24
	JA loc_1008FE19
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	POP ESI
	MOV DWORD PTR [EAX], 0x0000000D
	RET
loc_1008FE09:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	MOV ECX,DWORD PTR [offset LEGO1_data + 0xD314+ESI*8]
	POP ESI
	MOV DWORD PTR [EAX],ECX
	RET
loc_1008FE19:
	CMP ECX, 0x000000BC
	JB loc_1008FE36
	CMP ECX, 0x000000CA
	JA loc_1008FE36
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	POP ESI
	MOV DWORD PTR [EAX], 0x00000008
	RET
loc_1008FE36:
	CALL_LONG(offset [LEGO1_text.m8EE50_sub_1008FE50])
	POP ESI
	MOV DWORD PTR [EAX], 0x00000016
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008FE50()
{
__asm{
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	ADD EAX, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008FE60()
{
__asm{
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	ADD EAX, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_1008FE70(DWORD arg1, DWORD arg2)
{
	enum{
		arg2 = 0x8,
	};

__asm{
	SUB ESP, 0x04
	MOV ECX,DWORD PTR [ESP+arg2+0x4]
	PUSH EBX
	PUSH ESI
	XOR EBX, EBX
	MOVSX EAX,BYTE PTR [ECX]
	PUSH EDI
	PUSH EBP
	XOR EDI, EDI
	CMP EAX, 0x61
	JZ loc_1008FE9B
	CMP EAX, 0x72
	JZ loc_1008FEA2
	CMP EAX, 0x77
	JZ loc_1008FEAF
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_1008FE9B:
	MOV EDX, 0x00000109
	JMP loc_1008FEB4
loc_1008FEA2:
	XOR EDX, EDX
	MOV ESI,DWORD PTR [offset LEGO1_data + 0xDA10]
	OR ESI, 0x01
	JMP loc_1008FEBD
loc_1008FEAF:
	MOV EDX, 0x00000301
loc_1008FEB4:
	MOV ESI,DWORD PTR [offset LEGO1_data + 0xDA10]
	OR ESI, 0x02
loc_1008FEBD:
	MOV EBP, 0x00000001
	ADD ECX, EBP
	CMP BYTE PTR [ECX],0x00
	JZ_LONG(offset [LEGO1_text.m8EFBE_loc_1008FFBE])
	JMP_LONG(offset [LEGO1_text.m8EECD_loc_1008FECD])
}
}

__declspec(naked) DWORD LEGO1_sub_10090080()
{
__asm{
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR ESI, ESI
	PUSH EBP
	XOR EDI, EDI
	PUSH 0x02
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	ADD ESP, 0x04
	CMP DWORD PTR [offset LEGO1_data + 0x1A730],EDI
	JLE FAR loc_10090135
	XOR EBX, EBX
	MOV EBP, 0x00000083
loc_100900A5:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x19724]
	MOV EAX,DWORD PTR [EBX+EAX]
	TEST EAX, EAX
	JZ loc_100900EF
	TEST DWORD PTR [EAX+0x0C],EBP
	JNZ loc_100900D7
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DF00_sub_1008EF00])
	ADD ESP, 0x08
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x19724]
	MOV EAX,DWORD PTR [EBX+EAX]
	TEST DWORD PTR [EAX+0x0C],EBP
	JZ loc_100900E5
	PUSH EAX
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8DF70_sub_1008EF70])
	ADD ESP, 0x08
loc_100900D7:
	ADD EBX, 0x04
	INC ESI
	CMP ESI,DWORD PTR [offset LEGO1_data + 0x1A730]
	JL loc_100900A5
	JMP loc_10090135
loc_100900E5:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x19724]
	MOV EDI,DWORD PTR [ESI*4+EAX]
	JMP loc_10090135
loc_100900EF:
	PUSH 0x38
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV ECX,DWORD PTR [offset LEGO1_data + 0x19724]
	MOV DWORD PTR [ESI*4+ECX],EAX
	MOV ECX,DWORD PTR [offset LEGO1_data + 0x19724]
	MOV EAX,DWORD PTR [ESI*4+ECX]
	TEST EAX, EAX
	JZ loc_10090135
	ADD EAX, 0x20
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m3C0_InitializeCriticalSection])
	MOV ECX,DWORD PTR [offset LEGO1_data + 0x19724]
	MOV EAX,DWORD PTR [ESI*4+ECX]
	ADD EAX, 0x20
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m4B8_EnterCriticalSection])
	MOV ECX,DWORD PTR [offset LEGO1_data + 0x19724]
	MOV EDI,DWORD PTR [ESI*4+ECX]
loc_10090135:
	XOR EAX, EAX
	TEST EDI, EDI
	JZ loc_10090150
	MOV DWORD PTR [EDI+0x04],EAX
	MOV DWORD PTR [EDI+0x0C],EAX
	MOV DWORD PTR [EDI+0x08],EAX
	MOV DWORD PTR [EDI],EAX
	MOV DWORD PTR [EDI+0x1C],EAX
	MOV DWORD PTR [EDI+0x10],0xFFFFFFFF
loc_10090150:
	PUSH 0x02
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10090180(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	CMP DWORD PTR [offset LEGO1_data + 0xD480],0x00
	PUSH ESI
	PUSH EDI
	JNZ loc_1009019F
	MOV EAX,DWORD PTR [ESP+arg1+0x8]
	CMP EAX, 0x41
	JL loc_100901EB
	CMP EAX, 0x5A
	JG loc_100901EB
	ADD EAX, 0x20
	POP EDI
	POP ESI
	RET
loc_1009019F:
	CMP DWORD PTR [offset LEGO1_data + 0x195FC],0x00
	JZ loc_100901B9
	PUSH 0x13
	MOV ESI, 0x00000001
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	ADD ESP, 0x04
	JMP loc_100901C1
loc_100901B9:
	XOR ESI, ESI
	INC DWORD PTR [offset LEGO1_data + 0x19600]
loc_100901C1:
	MOV EAX,DWORD PTR [ESP+arg1+0x8]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8F1F0_sub_100901F0])
	ADD ESP, 0x04
	MOV EDI, EAX
	TEST ESI, ESI
	JZ loc_100901E3
	PUSH 0x13
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EDI
	POP ESI
	RET
loc_100901E3:
	MOV EAX, EDI
	DEC DWORD PTR [offset LEGO1_data + 0x19600]
loc_100901EB:
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100901F0(DWORD arg1)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		r = 0x0,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x08
	CMP DWORD PTR [offset LEGO1_data + 0xD480],0x00
	PUSH EBX
	MOV EBX,DWORD PTR [ESP+arg1+0xC]
	JNZ loc_10090215
	CMP EBX, 0x41
	JL loc_1009020E
	CMP EBX, 0x5A
	JG loc_1009020E
	ADD EBX, 0x20
loc_1009020E:
	MOV EAX, EBX
	POP EBX
	ADD ESP, 0x08
	RET
loc_10090215:
	CMP EBX, 0x00000100
	JGE loc_1009024D
	CMP DWORD PTR [offset LEGO1_data + 0xD1FC],0x01
	JLE loc_10090233
	PUSH 0x01
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m8D000_sub_1008E000])
	ADD ESP, 0x08
	JMP loc_10090242
loc_10090233:
	MOV ECX,DWORD PTR [offset LEGO1_data.mCFF0_ptr]
	XOR EAX, EAX
	MOV AX,WORD PTR DS:[EBX*2+ECX]
	AND EAX, 0x01
loc_10090242:
	TEST EAX, EAX
	JNZ loc_1009024D
	MOV EAX, EBX
	POP EBX
	ADD ESP, 0x08
	RET
loc_1009024D:
	MOV CL, BH
	XOR EDX, EDX
	MOV DL, CL
	MOV EAX, DWORD PTR [offset LEGO1_data.mCFF0_ptr]
	TEST BYTE PTR [EDX*2+EAX+0x01],0x80
	JZ loc_10090273
	MOV EAX, 0x00000002
	MOV BYTE PTR [ESP+var_4+0xC],CL
	MOV BYTE PTR [ESP+r+0xA],0x00
	MOV BYTE PTR [ESP+r+0x9],BL
	JMP loc_10090281
loc_10090273:
	MOV EAX, 0x00000001
	MOV BYTE PTR [ESP+var_4+0xC],BL
	MOV BYTE PTR [ESP+r+0x9],0x00
loc_10090281:
	LEA ECX,DWORD PTR [ESP+var_8+0xC]
	PUSH 0x00
	PUSH 0x03
	MOV EDX,DWORD PTR [offset LEGO1_data + 0xD480]
	PUSH ECX
	PUSH EAX
	LEA EAX,DWORD PTR [ESP+var_4+0x1C]
	PUSH EAX
	PUSH 0x00000100
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m903E0_sub_100913E0])
	ADD ESP, 0x1C
	TEST EAX, EAX
	JNZ loc_100902AF
	MOV EAX, EBX
	POP EBX
	ADD ESP, 0x08
	RET
loc_100902AF:
	CMP EAX, 0x01
	JNZ loc_100902BF
	XOR EAX, EAX
	MOV AL,BYTE PTR [ESP+var_8+0xC]
	POP EBX
	ADD ESP, 0x08
	RET
loc_100902BF:
	XOR EAX, EAX
	XOR ECX, ECX
	MOV AL,BYTE PTR [ESP+var_4+0x9]
	MOV CL,BYTE PTR [ESP+var_8+0xC]
	SHL EAX, 0x08
	POP EBX
	OR EAX, ECX
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100902E0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_C = -0xC,
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg1217224 = 0x4A4B20,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	SUB ESP, 0x0C
	MOV DWORD PTR [ESP+var_C+0xC],EAX
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	PUSH 0x5C
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m94820_sub_10095820])
	MOV ECX,DWORD PTR [ESP+arg2+0x24]
	ADD ESP, 0x08
	MOV ESI, EAX
	PUSH 0x2F
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m94820_sub_10095820])
	ADD ESP, 0x08
	TEST EAX, EAX
	JNZ FAR loc_100903B7
	TEST ESI, ESI
	JNZ FAR loc_100903C1
	MOV EAX,DWORD PTR [ESP+arg2+0x1C]
	PUSH 0x3A
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m948B0_sub_100958B0])
	ADD ESP, 0x08
	MOV ESI, EAX
	TEST ESI, ESI
	JNZ FAR loc_100903C1
	MOV EDI,DWORD PTR [ESP+arg2+0x1C]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	ADD ECX, 0x02
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	MOV DWORD PTR [ESP+var_C+0x20],EAX
	ADD ESP, 0x04
	TEST EAX, EAX
	JNZ loc_10090364
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_10090364:
	MOV DX,WORD PTR DS:[offset LEGO1_rdata + 0x6B78]
	MOV EAX, offset LEGO1_rdata + 0x6B78
	MOV ECX,DWORD PTR [ESP+var_C+0x1C]
	MOV EDI,DWORD PTR [ESP+arg2+0x1C]
	MOV WORD PTR DS:[ECX],DX
	MOV AL,BYTE PTR [EAX+0x02]
	MOV BYTE PTR [ECX+0x02],AL
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EDX, ECX
	MOV ESI, EDI
	MOV ECX, 0xFFFFFFFF
	MOV EDI,DWORD PTR [ESP+var_C+0x1C]
	SUB EAX, EAX
	REPNE SCAS
	DEC EDI
	MOV ECX, EDX
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EDX
	AND ECX, 0x03
	REP MOVSB
	MOV ESI,DWORD PTR [ESP+var_C+0x1C]
	ADD ESI, 0x02
	JMP loc_100903C1
loc_100903B7:
	TEST ESI, ESI
	JZ loc_100903BF
	CMP EAX, ESI
	JBE loc_100903C1
loc_100903BF:
	MOV ESI, EAX
loc_100903C1:
	MOV DWORD PTR [ESP+var_8+0x1C],0xFFFFFFFF
	PUSH 0x2E
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m94820_sub_10095820])
	ADD ESP, 0x08
	TEST EAX, EAX
	JZ loc_10090415
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	PUSH 0x00
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8B570_sub_1008C570])
	ADD ESP, 0x08
	CMP EAX, -0x01
	JZ FAR loc_100904E8
	MOV EAX,DWORD PTR [ESP+arg4+0x1C]
	MOV ECX,DWORD PTR [ESP+arg3+0x1C]
	MOV EDX,DWORD PTR [ESP+var_C+0x1C]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg1+0x20]
	PUSH ECX
	PUSH EDX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m8F510_sub_10090510])
	MOV DWORD PTR [ESP+var_8+0x2C],EAX
	ADD ESP, 0x10
	JMP FAR loc_100904E8
loc_10090415:
	MOV EDI,DWORD PTR [ESP+var_C+0x1C]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	ADD ECX, 0x04
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV EBX, EAX
	TEST EBX, EBX
	JNZ loc_10090443
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
loc_10090443:
	MOV EDI,DWORD PTR [ESP+var_C+0x1C]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI, EBX
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	MOV EDI,DWORD PTR [ESP+var_C+0x1C]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	MOV EBP, offset [LEGO1_data.mD614_ptr]
	REPNE SCAS
	NOT ECX
	LEA ECX,DWORD PTR [EBX+ECX-0x01]
	MOV DWORD PTR [ESP+var_4+0x1C],ECX
loc_10090482:
	MOV EDI,DWORD PTR [EBP+arg1217224-0x4A4B20]
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	PUSH 0x00
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI,DWORD PTR [ESP+var_4+0x20]
	PUSH EBX
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
	CALL_LONG(offset [LEGO1_text.m8B570_sub_1008C570])
	ADD ESP, 0x08
	CMP EAX, -0x01
	JNZ loc_100904C3
	SUB EBP, 0x04
	CMP EBP, offset [LEGO1_data.mD608_ptr]
	JNB loc_10090482
	JMP loc_100904DF
loc_100904C3:
	MOV EAX,DWORD PTR [ESP+arg4+0x1C]
	MOV ECX,DWORD PTR [ESP+arg3+0x1C]
	MOV EDX,DWORD PTR [ESP+arg1+0x1C]
	PUSH EAX
	PUSH ECX
	PUSH EBX
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m8F510_sub_10090510])
	MOV DWORD PTR [ESP+var_8+0x2C],EAX
	ADD ESP, 0x10
loc_100904DF:
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_100904E8:
	MOV EAX,DWORD PTR [ESP+var_C+0x1C]
	CMP EAX,DWORD PTR [ESP+arg2+0x1C]
	JZ loc_100904FB
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
loc_100904FB:
	MOV EAX,DWORD PTR [ESP+var_8+0x1C]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x0C
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10090510(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4)
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
	};

__asm{
	SUB ESP, 0x08
	LEA EAX,DWORD PTR [ESP+var_4+0x8]
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg2+0xC]
	LEA ECX,DWORD PTR [ESP+var_8+0xC]
	MOV EDX,DWORD PTR [ESP+arg4+0xC]
	PUSH ESI
	PUSH EAX
	PUSH ECX
	MOV EAX,DWORD PTR [ESP+arg3+0x18]
	PUSH EDX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m94BF0_sub_10095BF0])
	ADD ESP, 0x14
	CMP EAX, -0x01
	JNZ loc_10090544
	MOV EAX, 0xFFFFFFFF
	POP ESI
	ADD ESP, 0x08
	RET
loc_10090544:
	MOV EAX,DWORD PTR [ESP+var_4+0xC]
	MOV ECX,DWORD PTR [ESP+var_8+0xC]
	MOV EDX,DWORD PTR [ESP+arg1+0xC]
	PUSH EAX
	PUSH ECX
	PUSH ESI
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m94970_sub_10095970])
	MOV ECX,DWORD PTR [ESP+var_8+0x1C]
	ADD ESP, 0x10
	MOV ESI, EAX
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	MOV EAX,DWORD PTR [ESP+var_4+0x10]
	ADD ESP, 0x04
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX, ESI
	POP ESI
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10090580(DWORD arg1)
{
	enum{
		var_1BC = -0x1BC,
		var_1B4 = -0x1B4,
		var_188 = -0x188,
		var_160 = -0x160,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x000001C0
	MOV BYTE PTR [ESP+var_1BC+0x1BD],0x00
	MOV DWORD PTR [ESP+var_1B4+0x1C0],0x00000000
	MOV DWORD PTR [ESP+var_188+0x1C0],0x00000000
	PUSH EBX
	PUSH ESI
	MOV EBX,DWORD PTR [ESP+var_160+0x1C8]
	PUSH EDI
	PUSH EBP
	MOV EBP,DWORD PTR [ESP+arg1+0x1D0]
	JMP_LONG(offset [LEGO1_text.m8F5AA_loc_100905AA])
}
}

__declspec(naked) DWORD LEGO1_sub_10091220(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	CMP DWORD PTR [offset LEGO1_data + 0xD1FC],0x01
	PUSH ESI
	JLE loc_1009123B
	MOV ESI,DWORD PTR [ESP+arg1+0x4]
	PUSH 0x04
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m8D000_sub_1008E000])
	ADD ESP, 0x08
	JMP loc_1009124E
loc_1009123B:
	MOV ECX,DWORD PTR [offset LEGO1_data.mCFF0_ptr]
	XOR EAX, EAX
	MOV ESI,DWORD PTR [ESP+arg1+0x4]
	MOV AX,WORD PTR DS:[ESI*2+ECX]
	AND EAX, 0x04
loc_1009124E:
	TEST EAX, EAX
	JZ loc_10091256
	MOV EAX, ESI
	POP ESI
	RET
loc_10091256:
	AND ESI, -0x21
	LEA EAX,DWORD PTR [ESI-0x07]
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10091260(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EDX,DWORD PTR [ESP+arg1]
	MOV EAX,DWORD PTR [EDX+0x04]
	DEC EAX
	MOV DWORD PTR [EDX+0x04],EAX
	JS loc_10091279
	MOV ECX,DWORD PTR [EDX]
	LEA EAX,DWORD PTR [ECX+0x01]
	MOV DWORD PTR [EDX],EAX
	XOR EAX, EAX
	MOV AL,BYTE PTR [ECX]
	RET
loc_10091279:
	PUSH EDX
	CALL_LONG(offset [LEGO1_text.m8E490_sub_1008F490])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10091290(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	CMP EAX, -0x01
	JZ loc_100912A7
	MOV ECX,DWORD PTR [ESP+arg2]
	PUSH ECX
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m95100_sub_10096100])
	ADD ESP, 0x08
loc_100912A7:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100912B0(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	PUSH EBX
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	MOV EDI,DWORD PTR [ESP+arg2+0xC]
loc_100912BB:
	PUSH EDI
	INC DWORD PTR [ESI]
	CALL_LONG(offset [LEGO1_text.m90260_sub_10091260])
	ADD ESP, 0x04
	MOV EBX, EAX
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m8B6D0_sub_1008C6D0])
	ADD ESP, 0x04
	TEST EAX, EAX
	JNZ loc_100912BB
	MOV EAX, EBX
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100912E0()
{
	enum{
		var_1C = -0x1C,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset LEGO1_rdata + 0x6B80
	PUSH offset [LEGO1_text.m8B980_proc_1008C980]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV DWORD PTR [EBP+var_1C+0x4],ESP
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	CMP DWORD PTR [EAX+0x60],0x00
	JZ_LONG(offset [LEGO1_text.m90339_loc_10091339])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	CALL_LONG(offset [LEGO1_text.m8C5F0_sub_1008D5F0])
	CALL_LONG(DWORD PTR [EAX+0x60])
	JMP_LONG(offset [LEGO1_text.m90332_loc_10091332])
}
}

__declspec(naked) DWORD LEGO1_proc_10091329()
{
__asm{
	MOV EAX, 0x00000001
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_1009132F()
{
	enum{
		arg1217218 = 0x4A4B08,
	};

__asm{
	MOV ESP,DWORD PTR [EBP+arg1217218-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m90332_loc_10091332])
}
}

__declspec(naked) DWORD LEGO1_loc_10091332()
{
	enum{
		arg1217223 = 0x4A4B1C,
	};

__asm{
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0x00000000
	JMP_LONG(offset [LEGO1_text.m90339_loc_10091339])
}
}

__declspec(naked) DWORD LEGO1_loc_10091339()
{
	enum{
		arg1217220 = 0x4A4B10,
		arg1217223 = 0x4A4B1C,
	};

__asm{
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m90355_sub_10091355])
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	POP EDI
	MOV DWORD PTR FS:[0x00000000], EAX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10091355()
{
__asm{
	JMP_LONG(offset [LEGO1_text.m8BA60_sub_1008CA60])
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10091360()
{
	enum{
		var_1C = -0x1C,
		var_8 = -0x8,
	};

__asm{
	MOV EAX, DWORD PTR FS:[0x00000000]
	PUSH EBP
	MOV EBP, ESP
	PUSH -0x01
	PUSH offset [LEGO1_rdata.m6B98]
	PUSH offset [LEGO1_text.m8B980_proc_1008C980]
	PUSH EAX
	MOV DWORD PTR FS:[0x00000000],ESP
	SUB ESP, 0x08
	PUSH EBX
	PUSH ESI
	PUSH EDI
	MOV DWORD PTR [EBP+var_1C+0x4],ESP
	MOV DWORD PTR [EBP+var_8+0x4],0x00000000
	MOV EAX, DWORD PTR [offset LEGO1_data.mD624_ptr]
	TEST EAX, EAX
	JZ_LONG(offset [LEGO1_text.m903B1_loc_100913B1])
	MOV DWORD PTR [EBP+var_8+0x4],0x00000001
	CALL_LONG(EAX)
	JMP_LONG(offset [LEGO1_text.m903AA_loc_100913AA])
}
}

__declspec(naked) DWORD LEGO1_proc_100913A1()
{
__asm{
	MOV EAX, 0x00000001
	RET
}
}

__declspec(naked) DWORD LEGO1_proc_100913A7()
{
	enum{
		arg1217218 = 0x4A4B08,
	};

__asm{
	MOV ESP,DWORD PTR [EBP+arg1217218-0x4A4B20]
	JMP_LONG(offset [LEGO1_text.m903AA_loc_100913AA])
}
}

__declspec(naked) DWORD LEGO1_loc_100913AA()
{
	enum{
		arg1217223 = 0x4A4B1C,
	};

__asm{
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0x00000000
	JMP_LONG(offset [LEGO1_text.m903B1_loc_100913B1])
}
}

__declspec(naked) DWORD LEGO1_loc_100913B1()
{
	enum{
		arg1217220 = 0x4A4B10,
		arg1217223 = 0x4A4B1C,
	};

__asm{
	MOV DWORD PTR [EBP+arg1217223-0x4A4B20],0xFFFFFFFF
	CALL_LONG(offset [LEGO1_text.m903CD_sub_100913CD])
	MOV EAX,DWORD PTR [EBP+arg1217220-0x4A4B20]
	POP EDI
	MOV DWORD PTR FS:[0x00000000], EAX
	POP ESI
	POP EBX
	MOV ESP, EBP
	POP EBP
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100913CD()
{
__asm{
	JMP_LONG(offset [LEGO1_text.m902E0_sub_100912E0])
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100913E0(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5, DWORD arg6, DWORD arg7)
{
	enum{
		r = 0x0,
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg6 = 0x18,
		arg7 = 0x1C,
		arg1217224 = 0x4A4B20,
	};

__asm{
	PUSH EBX
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xD62C]
	PUSH ESI
	TEST EAX, EAX
	PUSH EDI
	PUSH EBP
	JNZ loc_1009143C
	PUSH 0x00
	MOV ESI,DWORD PTR [offset LEGO1_idata.m428_LCMapStringA]
	PUSH 0x00
	PUSH 0x01
	PUSH offset [LEGO1_rdata.m6BB0]
	PUSH 0x00000100
	PUSH 0x00
	CALL_LONG(ESI)
	TEST EAX, EAX
	JZ loc_10091412
	MOV EAX, 0x00000002
	JMP loc_10091442
loc_10091412:
	PUSH 0x00
	PUSH 0x00
	PUSH 0x01
	PUSH offset LEGO1_rdata + 0x6BB4
	PUSH 0x00000100
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m430_LCMapStringW])
	TEST EAX, EAX
	JZ loc_10091435
	MOV EAX, 0x00000001
	JMP loc_10091442
loc_10091435:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1009143C:
	MOV ESI,DWORD PTR [offset LEGO1_idata.m428_LCMapStringA]
loc_10091442:
	MOV EDI,DWORD PTR [ESP+arg4+0x10]
	MOV DWORD PTR [offset LEGO1_data + 0xD62C], EAX
	TEST EDI, EDI
	JLE loc_10091464
	MOV EAX,DWORD PTR [ESP+arg3+0x10]
	PUSH EDI
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m90610_sub_10091610])
	ADD ESP, 0x08
	MOV EDI, EAX
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xD62C]
loc_10091464:
	MOV DWORD PTR [offset LEGO1_data + 0xD62C], EAX
	CMP EAX, 0x02
	JNZ loc_1009148F
	MOV EAX,DWORD PTR [ESP+arg6+0x10]
	MOV ECX,DWORD PTR [ESP+arg5+0x10]
	MOV EDX,DWORD PTR [ESP+arg3+0x10]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg2+0x14]
	PUSH ECX
	MOV ECX,DWORD PTR [ESP+arg1+0x18]
	PUSH EDI
	PUSH EDX
	PUSH EAX
	PUSH ECX
	CALL_LONG(ESI)
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_1009148F:
	MOV DWORD PTR [offset LEGO1_data + 0xD62C], EAX
	CMP EAX, 0x01
	JNZ FAR loc_1009156F
	XOR ESI, ESI
	CMP DWORD PTR [ESP+arg7+0x10],ESI
	JNZ loc_100914AE
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xD490]
	MOV DWORD PTR [ESP+arg7+0x10],EAX
loc_100914AE:
	MOV EAX,DWORD PTR [ESP+arg3+0x10]
	PUSH 0x00
	MOV ECX,DWORD PTR [ESP+arg7+0x14]
	PUSH 0x00
	PUSH EDI
	PUSH EAX
	PUSH 0x09
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m424_MultiByteToWideChar])
	MOV EBP, EAX
	TEST EBP, EBP
	JNZ loc_100914D2
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100914D2:
	LEA EAX,DWORD PTR [EBP*2+arg1217224-0x4A4B20]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV EBX, EAX
	TEST EBX, EBX
	JNZ loc_100914EF
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_100914EF:
	MOV EAX,DWORD PTR [ESP+arg3+0x10]
	PUSH EBP
	MOV ECX,DWORD PTR [ESP+arg7+0x14]
	PUSH EBX
	PUSH EDI
	PUSH EAX
	PUSH 0x01
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m424_MultiByteToWideChar])
	TEST EAX, EAX
	JZ loc_1009155B
	MOV EAX,DWORD PTR [ESP+arg2+0x10]
	PUSH 0x00
	MOV ECX,DWORD PTR [ESP+arg1+0x14]
	PUSH 0x00
	PUSH EBP
	PUSH EBX
	PUSH EAX
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m430_LCMapStringW])
	MOV EDI, EAX
	TEST EDI, EDI
	JZ loc_1009155B
	TEST BYTE PTR [ESP+arg2+0x11],0x4
	JZ loc_10091574
	MOV EAX,DWORD PTR [ESP+arg6+0x10]
	TEST EAX, EAX
	JZ FAR loc_100915F2
	CMP EDI, EAX
	JG loc_1009155B
	MOV ECX,DWORD PTR [ESP+arg2+0x10]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+arg5+0x14]
	MOV EDX,DWORD PTR [ESP+arg1+0x14]
	PUSH EAX
	PUSH EBP
	PUSH EBX
	PUSH ECX
	PUSH EDX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m430_LCMapStringW])
	TEST EAX, EAX
	JNZ FAR loc_100915F2
loc_1009155B:
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	XOR EAX, EAX
loc_1009156F:
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
loc_10091574:
	LEA EAX,DWORD PTR [EDI*2+0x00000000]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV ESI, EAX
	TEST ESI, ESI
	JZ loc_1009155B
	MOV EAX,DWORD PTR [ESP+arg2+0x10]
	PUSH EDI
	MOV ECX,DWORD PTR [ESP+arg1+0x14]
	PUSH ESI
	PUSH EBP
	PUSH EBX
	PUSH EAX
	PUSH ECX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m430_LCMapStringW])
	TEST EAX, EAX
	JZ loc_1009155B
	MOV EAX,DWORD PTR [ESP+arg6+0x10]
	PUSH 0x00
	PUSH 0x00
	TEST EAX, EAX
	JNZ loc_100915CE
	MOV EAX,DWORD PTR [ESP+arg7+0x18]
	PUSH 0x00
	PUSH 0x00
	MOV EBP,DWORD PTR [offset LEGO1_idata.m42C_WideCharToMultiByte]
	PUSH EDI
	PUSH ESI
	PUSH 0x00000220
	PUSH EAX
	CALL_LONG(EBP)
	MOV EDI, EAX
	TEST EDI, EDI
	JNZ loc_100915F2
	JMP loc_1009155B
loc_100915CE:
	MOV ECX,DWORD PTR [ESP+arg1+0x30]
	PUSH EAX
	MOV EAX,DWORD PTR [ESP+r+0x30]
	MOV EBP,DWORD PTR [offset LEGO1_idata.m42C_WideCharToMultiByte]
	PUSH EAX
	PUSH EDI
	PUSH ESI
	PUSH 0x00000220
	PUSH ECX
	CALL_LONG(EBP)
	MOV EDI, EAX
	TEST EDI, EDI
	JZ FAR loc_1009155B
loc_100915F2:
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	MOV EAX, EDI
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10091610(DWORD arg1, DWORD arg2)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg2]
	PUSH ESI
	PUSH EDI
	TEST EAX, EAX
	MOV EDI,DWORD PTR [ESP+arg1+0x8]
	LEA ECX,DWORD PTR [EAX-0x01]
	MOV EDX, EDI
	JZ loc_10091630
loc_10091623:
	CMP BYTE PTR [EDX],0x00
	JZ loc_10091635
	INC EDX
	MOV ESI, ECX
	DEC ECX
	TEST ESI, ESI
	JNZ loc_10091623
loc_10091630:
	CMP BYTE PTR [EDX],0x00
	JNZ loc_10091639
loc_10091635:
	SUB EDX, EDI
	MOV EAX, EDX
loc_10091639:
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10091640()
{
__asm{
	PUSH 0x00
	PUSH 0x00001000
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m438_HeapCreate])
	MOV DWORD PTR [offset LEGO1_data + 0x195F8], EAX
	TEST EAX, EAX
	JNZ loc_1009165B
	XOR EAX, EAX
	RET
loc_1009165B:
	CALL_LONG(offset [LEGO1_text.m95190_sub_10096190])
	TEST EAX, EAX
	JNZ loc_10091673
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x195F8]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m434_HeapDestroy])
	XOR EAX, EAX
	RET
loc_10091673:
	MOV EAX, 0x00000001
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10091680()
{
__asm{
	PUSH ESI
	PUSH EDI
	MOV ESI, offset [LEGO1_data.mE250_ptr]
	MOV EDI,DWORD PTR [offset LEGO1_idata.m4B4_VirtualFree]
loc_1009168D:
	MOV EAX,DWORD PTR [ESI+0x00000810]
	TEST EAX, EAX
	JZ loc_100916A1
	PUSH 0x00008000
	PUSH 0x00
	PUSH EAX
	CALL_LONG(EDI)
loc_100916A1:
	MOV ESI,DWORD PTR [ESI]
	CMP ESI, offset [LEGO1_data.mE250_ptr]
	JNZ loc_1009168D
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x195F8]
	PUSH EAX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m434_HeapDestroy])
	POP EDI
	POP ESI
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100916C0()
{
	enum{
		var_4 = -0x4,
		arg1217224 = 0x4A4B20,
	};

__asm{
	SUB ESP, 0x04
	MOV EDX,DWORD PTR [offset LEGO1_data + 0xCF04]
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR ESI, ESI
	PUSH EBP
	CMP BYTE PTR [EDX],0x00
	JZ loc_100916EE
loc_100916D4:
	CMP BYTE PTR [EDX],0x3D
	JZ loc_100916DA
	INC ESI
loc_100916DA:
	MOV EDI, EDX
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	ADD EDX, ECX
	CMP BYTE PTR [EDX],0x00
	JNZ loc_100916D4
loc_100916EE:
	LEA EAX,DWORD PTR [ESI*4+0x00000004]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	MOV DWORD PTR [offset LEGO1_data + 0xCB94], EAX
	ADD ESP, 0x04
	MOV EBX, EAX
	TEST EBX, EBX
	JNZ loc_10091713
	PUSH 0x09
	CALL_LONG(offset [LEGO1_text.m8B920_sub_1008C920])
	ADD ESP, 0x04
loc_10091713:
	MOV EBP,DWORD PTR [offset LEGO1_data + 0xCF04]
	MOV EAX, EBP
	CMP BYTE PTR [EBP+arg1217224-0x4A4B20],0x00
	JZ loc_1009177F
loc_10091721:
	MOV EDI, EBP
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	MOV DWORD PTR [ESP+var_4+0x14],ECX
	CMP BYTE PTR [EBP+arg1217224-0x4A4B20],0x3D
	JZ loc_10091775
	PUSH ECX
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV DWORD PTR [EBX],EAX
	TEST EAX, EAX
	JNZ loc_10091751
	PUSH 0x09
	CALL_LONG(offset [LEGO1_text.m8B920_sub_1008C920])
	ADD ESP, 0x04
loc_10091751:
	MOV EDI, EBP
	MOV ECX, 0xFFFFFFFF
	SUB EAX, EAX
	REPNE SCAS
	NOT ECX
	SUB EDI, ECX
	MOV EAX, ECX
	SHR ECX, 0x02
	MOV ESI, EDI
	MOV EDI,DWORD PTR [EBX]
	ADD EBX, 0x04
	REP MOVSD
	MOV ECX, EAX
	AND ECX, 0x03
	REP MOVSB
loc_10091775:
	ADD EBP,DWORD PTR [ESP+var_4+0x14]
	CMP BYTE PTR [EBP+arg1217224-0x4A4B20],0x00
	JNZ loc_10091721
loc_1009177F:
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xCF04]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	MOV DWORD PTR [offset LEGO1_data + 0xCF04],0x00000000
	ADD ESP, 0x04
	MOV DWORD PTR [EBX], 0x00000000
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_100917B0()
{
	enum{
		var_8 = -0x8,
		var_4 = -0x4,
	};

__asm{
	SUB ESP, 0x08
	PUSH ESI
	PUSH EDI
	PUSH 0x00000104
	MOV ESI, offset LEGO1_data + 0x193D0
	PUSH ESI
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m43C_GetModuleFileNameA])
	MOV EAX, DWORD PTR [offset LEGO1_data + 0x19714]
	MOV DWORD PTR [offset LEGO1_data + 0xCBA4],ESI
	CMP BYTE PTR [EAX],0x00
	JZ loc_100917DE
	MOV ESI,DWORD PTR [offset LEGO1_data + 0x19714]
loc_100917DE:
	LEA EAX,DWORD PTR [ESP+var_4+0x10]
	LEA ECX,DWORD PTR [ESP+var_8+0x10]
	PUSH EAX
	PUSH ECX
	PUSH 0x00
	PUSH 0x00
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m90850_sub_10091850])
	MOV EAX,DWORD PTR [ESP+var_8+0x24]
	ADD ESP, 0x14
	SHL EAX, 0x02
	ADD EAX,DWORD PTR [ESP+var_4+0x10]
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV EDI, EAX
	TEST EDI, EDI
	JNZ loc_10091819
	PUSH 0x08
	CALL_LONG(offset [LEGO1_text.m8B920_sub_1008C920])
	ADD ESP, 0x04
loc_10091819:
	LEA EAX,DWORD PTR [ESP+var_4+0x10]
	LEA ECX,DWORD PTR [ESP+var_8+0x10]
	MOV EDX,DWORD PTR [ESP+var_8+0x10]
	PUSH EAX
	PUSH ECX
	LEA EAX,DWORD PTR [EDX*4+EDI]
	PUSH EAX
	PUSH EDI
	PUSH ESI
	CALL_LONG(offset [LEGO1_text.m90850_sub_10091850])
	MOV EAX,DWORD PTR [ESP+var_8+0x24]
	ADD ESP, 0x14
	DEC EAX
	MOV DWORD PTR [offset LEGO1_data + 0xCB8C],EDI
	POP EDI
	MOV DWORD PTR [offset LEGO1_data + 0xCB88], EAX
	POP ESI
	ADD ESP, 0x08
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10091850(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5)
{
	enum{
		arg1 = 0x4,
		arg2 = 0x8,
		arg3 = 0xC,
		arg4 = 0x10,
		arg5 = 0x14,
		arg1217224 = 0x4A4B20,
	};

__asm{
	MOV ECX,DWORD PTR [ESP+arg5]
	PUSH EBX
	MOV EDX,DWORD PTR [ESP+arg4+0x4]
	PUSH ESI
	MOV ESI,DWORD PTR [ESP+arg1+0x8]
	PUSH EDI
	MOV EAX,DWORD PTR [ESP+arg3+0xC]
	PUSH EBP
	CMP DWORD PTR [ESP+arg2+0x10],0x00
	MOV DWORD PTR [ECX], 0x00000000
	MOV DWORD PTR [EDX], 0x00000001
	JZ loc_10091882
	MOV EDX,DWORD PTR [ESP+arg2+0x10]
	ADD DWORD PTR [ESP+arg2+0x10],0x04
	MOV DWORD PTR [EDX],EAX
loc_10091882:
	CMP BYTE PTR [ESI],0x22
	JZ loc_100918CD
loc_10091887:
	INC DWORD PTR [ECX]
	TEST EAX, EAX
	JZ loc_10091892
	MOV DL,BYTE PTR [ESI]
	MOV BYTE PTR [EAX],DL
	INC EAX
loc_10091892:
	MOV DL,BYTE PTR [ESI]
	INC ESI
	XOR EBX, EBX
	MOV BL, DL
	TEST BYTE PTR [offset LEGO1_data + 0xD639+EBX],0x04
	JZ loc_100918AE
	INC DWORD PTR [ECX]
	TEST EAX, EAX
	JZ loc_100918AD
	MOV BL,BYTE PTR [ESI]
	MOV BYTE PTR [EAX],BL
	INC EAX
loc_100918AD:
	INC ESI
loc_100918AE:
	CMP DL, 0x20
	JZ loc_100918BC
	TEST DL, DL
	JZ loc_100918C0
	CMP DL, 0x09
	JNZ loc_10091887
loc_100918BC:
	TEST DL, DL
	JNZ loc_100918C3
loc_100918C0:
	DEC ESI
	JMP loc_10091913
loc_100918C3:
	TEST EAX, EAX
	JZ loc_10091913
	MOV BYTE PTR [EAX-0x01],0x00
	JMP loc_10091913
loc_100918CD:
	INC ESI
	CMP BYTE PTR [ESI],0x22
	JZ loc_10091903
loc_100918D3:
	MOV BL,BYTE PTR [ESI]
	TEST BL, BL
	JZ loc_10091903
	XOR EDX, EDX
	MOV DL, BL
	TEST BYTE PTR [offset LEGO1_data + 0xD639+EDX],0x04
	JZ loc_100918F2
	INC DWORD PTR [ECX]
	TEST EAX, EAX
	JZ loc_100918F2
	MOV DL,BYTE PTR [ESI]
	INC ESI
	MOV BYTE PTR [EAX],DL
	INC EAX
loc_100918F2:
	INC DWORD PTR [ECX]
	TEST EAX, EAX
	JZ loc_100918FD
	MOV DL,BYTE PTR [ESI]
	MOV BYTE PTR [EAX],DL
	INC EAX
loc_100918FD:
	INC ESI
	CMP BYTE PTR [ESI],0x22
	JNZ loc_100918D3
loc_10091903:
	INC DWORD PTR [ECX]
	TEST EAX, EAX
	JZ loc_1009190D
	MOV BYTE PTR [EAX],0x00
	INC EAX
loc_1009190D:
	CMP BYTE PTR [ESI],0x22
	JNZ loc_10091913
	INC ESI
loc_10091913:
	XOR EDI, EDI
loc_10091915:
	CMP BYTE PTR [ESI],0x00
	JZ FAR loc_10091A04
loc_1009191E:
	MOV DL,BYTE PTR [ESI]
	CMP DL, 0x20
	JZ loc_1009192A
	CMP DL, 0x09
	JNZ loc_1009192D
loc_1009192A:
	INC ESI
	JMP loc_1009191E
loc_1009192D:
	CMP BYTE PTR [ESI],0x00
	JZ FAR loc_10091A04
	CMP DWORD PTR [ESP+arg2+0x10],0x00
	JZ loc_10091948
	MOV EDX,DWORD PTR [ESP+arg2+0x10]
	ADD DWORD PTR [ESP+arg2+0x10],0x04
	MOV DWORD PTR [EDX],EAX
loc_10091948:
	MOV EDX,DWORD PTR [ESP+arg4+0x10]
	INC DWORD PTR [EDX]
loc_1009194E:
	MOV EBX, 0x00000001
	XOR EDX, EDX
	CMP BYTE PTR [ESI],0x5C
	JNZ loc_10091961
loc_1009195A:
	INC ESI
	INC EDX
	CMP BYTE PTR [ESI],0x5C
	JZ loc_1009195A
loc_10091961:
	CMP BYTE PTR [ESI],0x22
	JNZ loc_10091988
	TEST DL,0x01
	JNZ loc_10091985
	TEST EDI, EDI
	JZ loc_1009197C
	LEA EBP,DWORD PTR [ESI+0x01]
	CMP BYTE PTR [EBP+arg1217224-0x4A4B20],0x22
	JNZ loc_1009197C
	MOV ESI, EBP
	JMP loc_1009197E
loc_1009197C:
	XOR EBX, EBX
loc_1009197E:
	CMP EDI, 0x01
	SBB EDI, EDI
	NEG EDI
loc_10091985:
	SHR EDX, 0x01
loc_10091988:
	MOV EBP, EDX
	DEC EDX
	TEST EBP, EBP
	JZ loc_100919A0
loc_1009198F:
	TEST EAX, EAX
	JZ loc_10091997
	MOV BYTE PTR [EAX],0x5C
	INC EAX
loc_10091997:
	MOV EBP, EDX
	INC DWORD PTR [ECX]
	DEC EDX
	TEST EBP, EBP
	JNZ loc_1009198F
loc_100919A0:
	MOV DL,BYTE PTR [ESI]
	TEST DL, DL
	JZ loc_100919F5
	TEST EDI, EDI
	JNZ loc_100919B4
	CMP DL, 0x20
	JZ loc_100919F5
	CMP DL, 0x09
	JZ loc_100919F5
loc_100919B4:
	TEST EBX, EBX
	JZ loc_100919EF
	TEST EAX, EAX
	JZ loc_100919DD
	XOR EBX, EBX
	MOV BL, DL
	TEST BYTE PTR [offset LEGO1_data + 0xD639+EBX],0x04
	JZ loc_100919CF
	MOV BYTE PTR [EAX],DL
	INC ESI
	INC EAX
	INC DWORD PTR [ECX]
loc_100919CF:
	MOV DL,BYTE PTR [ESI]
	INC EAX
	INC ESI
	MOV BYTE PTR [EAX-0x01],DL
	INC DWORD PTR [ECX]
	JMP FAR loc_1009194E
loc_100919DD:
	XOR EBX, EBX
	MOV BL, DL
	TEST BYTE PTR [offset LEGO1_data + 0xD639+EBX],0x04
	JZ loc_100919ED
	INC ESI
	INC DWORD PTR [ECX]
loc_100919ED:
	INC DWORD PTR [ECX]
loc_100919EF:
	INC ESI
	JMP FAR loc_1009194E
loc_100919F5:
	TEST EAX, EAX
	JZ loc_100919FD
	MOV BYTE PTR [EAX],0x00
	INC EAX
loc_100919FD:
	INC DWORD PTR [ECX]
	JMP FAR loc_10091915
loc_10091A04:
	CMP DWORD PTR [ESP+arg2+0x10],0x00
	JZ loc_10091A15
	MOV EDX,DWORD PTR [ESP+arg2+0x10]
	MOV DWORD PTR [EDX], 0x00000000
loc_10091A15:
	MOV EDX,DWORD PTR [ESP+arg4+0x10]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	INC DWORD PTR [EDX]
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10091A20(DWORD arg1)
{
	enum{
		var_18 = -0x18,
		var_14 = -0x14,
		var_C = -0xC,
		arg1 = 0x4,
	};

__asm{
	SUB ESP, 0x18
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH EBP
	PUSH 0x19
	CALL_LONG(offset [LEGO1_text.m8DE30_sub_1008EE30])
	MOV EAX,DWORD PTR [ESP+arg1+0x2C]
	ADD ESP, 0x04
	PUSH EAX
	CALL_LONG(offset [LEGO1_text.m90C50_sub_10091C50])
	ADD ESP, 0x04
	MOV EBP, EAX
	CMP DWORD PTR [offset LEGO1_data + 0xD73C],EBP
	JNZ loc_10091A5C
	PUSH 0x19
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x18
	RET
loc_10091A5C:
	TEST EBP, EBP
	JNZ loc_10091A79
	CALL_LONG(offset [LEGO1_text.m90D00_sub_10091D00])
	PUSH 0x19
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x18
	RET
loc_10091A79:
	MOV DWORD PTR [ESP+var_18+0x28],0x00000000
	MOV EAX, offset LEGO1_data + 0xD760
loc_10091A86:
	CMP DWORD PTR [EAX],EBP
	JZ FAR loc_10091B29
	ADD EAX, 0x30
	INC DWORD PTR [ESP+var_18+0x28]
	CMP EAX, offset LEGO1_data + 0xD850
	JB loc_10091A86
	LEA EAX,DWORD PTR [ESP+var_14+0x28]
	PUSH EAX
	PUSH EBP
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m440_GetCPInfo])
	CMP EAX, 0x01
	JNZ FAR loc_10091C0A
	MOV EDI, offset LEGO1_data + 0xD638
	XOR EAX, EAX
	MOV ECX, 0x00000040
	REP STOSD
	STOSB
	CMP DWORD PTR [ESP+var_14+0x28],0x01
	JBE FAR loc_10091BDB
	LEA ESI,DWORD PTR [ESP+var_C+0x26]
	CMP BYTE PTR [ESP+var_C+0x26],AL
	JZ loc_10091B01
loc_10091AD5:
	MOV CL,BYTE PTR [ESI+0x01]
	TEST CL, CL
	JZ loc_10091B01
	XOR EAX, EAX
	XOR EDX, EDX
	MOV AL,BYTE PTR [ESI]
	MOV DL, CL
	CMP EDX, EAX
	JB loc_10091AF9
loc_10091AE8:
	OR BYTE PTR [offset LEGO1_data + 0xD639+EAX],0x04
	INC EAX
	XOR ECX, ECX
	MOV CL,BYTE PTR [ESI+0x01]
	CMP ECX, EAX
	JNB loc_10091AE8
loc_10091AF9:
	ADD ESI, 0x02
	CMP BYTE PTR [ESI],0x00
	JNZ loc_10091AD5
loc_10091B01:
	MOV EAX, 0x00000001
loc_10091B06:
	OR BYTE PTR [offset LEGO1_data + 0xD639+EAX],0x08
	INC EAX
	CMP EAX, 0x000000FF
	JB loc_10091B06
	PUSH EBP
	MOV DWORD PTR [offset LEGO1_data + 0xD73C],EBP
	CALL_LONG(offset [LEGO1_text.m90CA0_sub_10091CA0])
	ADD ESP, 0x04
	JMP FAR loc_10091BE2
loc_10091B29:
	MOV EDI, offset LEGO1_data + 0xD638
	XOR EAX, EAX
	MOV ECX, 0x00000040
	REP STOSD
	STOSB
	MOV ECX,DWORD PTR [ESP+var_18+0x28]
	LEA EDX,DWORD PTR [ECX*2+ECX]
	LEA EDI,DWORD PTR [EDX*2+0x00000000]
loc_10091B46:
	LEA ECX,DWORD PTR [EAX+EDI]
	LEA ESI,DWORD PTR [offset LEGO1_data + 0xD770+ECX*8]
	CMP BYTE PTR [ESI],0x00
	JZ loc_10091B86
loc_10091B55:
	MOV CL,BYTE PTR [ESI+0x01]
	TEST CL, CL
	JZ loc_10091B86
	XOR EDX, EDX
	XOR EBX, EBX
	MOV DL,BYTE PTR [ESI]
	MOV BL, CL
	CMP EBX, EDX
	JB loc_10091B7E
	MOV CL,BYTE PTR [offset LEGO1_data + 0xD758+EAX]
loc_10091B6E:
	OR BYTE PTR [offset LEGO1_data + 0xD639+EDX],CL
	INC EDX
	XOR EBX, EBX
	MOV BL,BYTE PTR [ESI+0x01]
	CMP EBX, EDX
	JNB loc_10091B6E
loc_10091B7E:
	ADD ESI, 0x02
	CMP BYTE PTR [ESI],0x00
	JNZ loc_10091B55
loc_10091B86:
	INC EAX
	CMP EAX, 0x04
	JB loc_10091B46
	PUSH EBP
	MOV DWORD PTR [offset LEGO1_data + 0xD73C],EBP
	CALL_LONG(offset [LEGO1_text.m90CA0_sub_10091CA0])
	ADD ESP, 0x04
	MOV EDX, offset LEGO1_data + 0xD748
	MOV DWORD PTR [offset LEGO1_data + 0xD740], EAX
	MOV EAX,DWORD PTR [ESP+var_18+0x28]
	SHL EAX, 0x04
	MOV EBX,DWORD PTR [offset LEGO1_data + 0xD768+EAX*2+EAX]
	PUSH 0x19
	LEA ECX,DWORD PTR [offset LEGO1_data + 0xD764+EAX*2+EAX]
	MOV EAX,DWORD PTR [ECX]
	MOV ECX,DWORD PTR [ECX+0x08]
	MOV DWORD PTR [EDX],EAX
	MOV DWORD PTR [EDX+0x04],EBX
	MOV DWORD PTR [EDX+0x08],ECX
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x18
	RET
loc_10091BDB:
	XOR EAX, EAX
	MOV DWORD PTR [offset LEGO1_data + 0xD73C], EAX
loc_10091BE2:
	MOV ECX, offset LEGO1_data + 0xD748
	PUSH 0x19
	MOV DWORD PTR [offset LEGO1_data + 0xD740], EAX
	XOR EAX, EAX
	MOV DWORD PTR [ECX],EAX
	MOV DWORD PTR [ECX+0x04],EAX
	MOV DWORD PTR [ECX+0x08],EAX
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x18
	RET
loc_10091C0A:
	CMP DWORD PTR [offset LEGO1_data + 0xD754],0x00
	JZ loc_10091C2C
	CALL_LONG(offset [LEGO1_text.m90D00_sub_10091D00])
	PUSH 0x19
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x18
	RET
loc_10091C2C:
	PUSH 0x19
	CALL_LONG(offset [LEGO1_text.m8DEA0_sub_1008EEA0])
	ADD ESP, 0x04
	MOV EAX, 0xFFFFFFFF
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x18
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10091C50(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV DWORD PTR [offset LEGO1_data + 0xD754],0x00000000
	MOV EAX,DWORD PTR [ESP+arg1]
	CMP EAX, -0x02
	JNZ loc_10091C73
	MOV DWORD PTR [offset LEGO1_data + 0xD754],0x00000001
	JMP_LONG(DWORD PTR [offset LEGO1_idata.m448_GetOEMCP])
loc_10091C73:
	CMP EAX, -0x03
	JNZ loc_10091C88
	MOV DWORD PTR [offset LEGO1_data + 0xD754],0x00000001
	JMP_LONG(DWORD PTR [offset LEGO1_idata.m444_GetACP])
loc_10091C88:
	CMP EAX, -0x04
	JNZ loc_10091C9C
	MOV DWORD PTR [offset LEGO1_data + 0xD754],0x00000001
	MOV EAX, DWORD PTR [offset LEGO1_data + 0xD490]
loc_10091C9C:
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10091CA0(DWORD arg1)
{
	enum{
		arg1 = 0x4,
	};

__asm{
	MOV EAX,DWORD PTR [ESP+arg1]
	SUB EAX, 0x000003A4
	CMP EAX, 0x12
	JA_LONG(offset [LEGO1_text.m90CBD_loc_10091CBD])
	XOR ECX, ECX
	MOV CL,BYTE PTR [offset LEGO1_text.m90CEC_proc_10091CEC+EAX]
	JMP_LONG(DWORD PTR [offset LEGO1_text.m90CD8_proc_10091CD8+ECX*4])
}
}

__declspec(naked) DWORD LEGO1_sub_10091D00()
{
__asm{
	PUSH EDI
	XOR EAX, EAX
	MOV EDI, offset LEGO1_data + 0xD638
	MOV ECX, 0x00000040
	REP STOSD
	STOSB
	MOV DWORD PTR [offset LEGO1_data + 0xD748], EAX
	MOV ECX, offset LEGO1_data + 0xD748
	POP EDI
	MOV DWORD PTR [offset LEGO1_data + 0xD73C], EAX
	MOV DWORD PTR [offset LEGO1_data + 0xD740], EAX
	MOV DWORD PTR [ECX+0x04],EAX
	MOV DWORD PTR [ECX+0x08],EAX
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10091D30()
{
__asm{
	PUSH -0x03
	CALL_LONG(offset [LEGO1_text.m90A20_sub_10091A20])
	ADD ESP, 0x04
	RET
}
}

__declspec(naked) DWORD LEGO1_sub_10091D40()
{
	enum{
		var_4 = -0x4,
		arg1217224 = 0x4A4B20,
	};

__asm{
	SUB ESP, 0x04
	PUSH EBX
	PUSH ESI
	PUSH EDI
	XOR EBX, EBX
	PUSH EBP
	XOR EDI, EDI
	MOV ESI,DWORD PTR [offset LEGO1_idata.m458_GetEnvironmentStringsW]
	CMP DWORD PTR [offset LEGO1_data + 0xD854],EBX
	JNZ loc_10091D8F
	CALL_LONG(ESI)
	CMP EAX, EBX
	MOV EDI, EAX
	JZ loc_10091D6D
	MOV DWORD PTR [offset LEGO1_data + 0xD854],0x00000001
	JMP loc_10091D8F
loc_10091D6D:
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m450_GetEnvironmentStrings])
	MOV EBX, EAX
	TEST EBX, EBX
	JZ loc_10091D85
	MOV DWORD PTR [offset LEGO1_data + 0xD854],0x00000002
	JMP loc_10091D8F
loc_10091D85:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10091D8F:
	CMP DWORD PTR [offset LEGO1_data + 0xD854],0x01
	JNZ FAR loc_10091E3E
	TEST EDI, EDI
	JNZ loc_10091DB2
	CALL_LONG(ESI)
	MOV EDI, EAX
	TEST EDI, EDI
	JNZ loc_10091DB2
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10091DB2:
	CMP WORD PTR DS:[EDI],0x00
	MOV ESI, EDI
	JZ loc_10091DCC
loc_10091DBA:
	ADD ESI, 0x02
	CMP WORD PTR DS:[ESI],0x00
	JNZ loc_10091DBA
	ADD ESI, 0x02
	CMP WORD PTR DS:[ESI],0x00
	JNZ loc_10091DBA
loc_10091DCC:
	SUB ESI, EDI
	PUSH 0x00
	SAR ESI, 0x01
	PUSH 0x00
	INC ESI
	PUSH 0x00
	PUSH 0x00
	PUSH ESI
	PUSH EDI
	PUSH 0x00
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m42C_WideCharToMultiByte])
	MOV EBP, EAX
	TEST EBP, EBP
	JZ loc_10091E2D
	PUSH EBP
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	ADD ESP, 0x04
	MOV EBX, EAX
	TEST EBX, EBX
	JZ loc_10091E2D
	PUSH 0x00
	PUSH 0x00
	PUSH EBP
	PUSH EBX
	PUSH ESI
	PUSH EDI
	PUSH 0x00
	PUSH 0x00
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m42C_WideCharToMultiByte])
	TEST EAX, EAX
	JNZ loc_10091E1C
	PUSH EBX
	CALL_LONG(offset [LEGO1_text.m891C0_sub_1008A1C0])
	ADD ESP, 0x04
	XOR EBX, EBX
loc_10091E1C:
	PUSH EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m454_FreeEnvironmentStringsW])
	MOV EAX, EBX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10091E2D:
	PUSH EDI
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m454_FreeEnvironmentStringsW])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10091E3E:
	CMP DWORD PTR [offset LEGO1_data + 0xD854],0x02
	JNZ loc_10091EC2
	TEST EBX, EBX
	JNZ loc_10091E61
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m450_GetEnvironmentStrings])
	MOV EBX, EAX
	TEST EBX, EBX
	JNZ loc_10091E61
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10091E61:
	MOV EBP, EBX
	CMP BYTE PTR [EBX],0x00
	JZ loc_10091E76
loc_10091E68:
	INC EBP
	CMP BYTE PTR [EBP+arg1217224-0x4A4B20],0x00
	JNZ loc_10091E68
	INC EBP
	CMP BYTE PTR [EBP+arg1217224-0x4A4B20],0x00
	JNZ loc_10091E68
loc_10091E76:
	SUB EBP, EBX
	INC EBP
	PUSH EBP
	CALL_LONG(offset [LEGO1_text.m89090_sub_1008A090])
	MOV DWORD PTR [ESP+var_4+0x18],EAX
	ADD ESP, 0x04
	TEST EAX, EAX
	JNZ loc_10091E9B
	PUSH EBX
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m44C_FreeEnvironmentStringsA])
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10091E9B:
	MOV EDI,DWORD PTR [ESP+var_4+0x14]
	MOV ESI, EBX
	MOV ECX, EBP
	SHR ECX, 0x02
	REP MOVSD
	MOV ECX, EBP
	PUSH EBX
	AND ECX, 0x03
	REP MOVSB
	CALL_LONG(DWORD PTR [offset LEGO1_idata.m44C_FreeEnvironmentStringsA])
	MOV EAX,DWORD PTR [ESP+var_4+0x14]
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
loc_10091EC2:
	XOR EAX, EAX
	POP EBP
	POP EDI
	POP ESI
	POP EBX
	ADD ESP, 0x04
	RET
}
}

